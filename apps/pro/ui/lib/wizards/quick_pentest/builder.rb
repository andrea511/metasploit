# contains the logic for inputting a hash of a few different
#   task configurations, and rolling them up into a QuickPentest::Form
#   model, and then into a QuickPentest::Procedure
# the form attribute is of class QuickPentest::Form
class Wizards::QuickPentest::Builder < Wizards::BaseBuilder
  def initialize(params, user)
    self.form = Wizards::QuickPentest::Form.new(params[:quick_pentest] || {})
    super
  end

  # returns an initialized Form instance determined by params
  #
  # @return [Wizards::QuickPentest::Form] with populated attributes
  def build
    # build all of the inner models
    build_workspace_from_params
    build_scan_task_from_params
    build_exploit_task_from_params
    build_collect_evidence_task_from_params
    build_cleanup_task_from_params
    build_report_from_params
    # return our new model
    form
  end

  # After calling .build, to_procedure lets you output the snowballed
  # config to a Wizards::QuickPentest::Procedure
  #
  # @return [Wizards::QuickPentest::Procedure] an initialized Procedure
  #   with a populated config_hash
  def to_procedure
    procedure = Wizards::QuickPentest::Procedure.new(:config_hash => form.to_hash)
    # Serialization creates a new instance of Report that doesn't retain the state of the original
    # when using state machine
    procedure.config_hash[:report] = form.report
    procedure.workspace = form.workspace
    procedure.user = current_user
    procedure
  end

  # Sets default UI options.
  #
  # TODO This would be better done in the controller. See build_objects
  # in MetaModule code for a better approach.
  #
  # @return [Wizards::QuickPentest::Builder] self
  def set_defaults!
    form.collect_evidence = true
    form.scan_type        = Wizards::QuickPentest::Form::QUICK_PENTEST_SCAN_TYPES_FORMATTED[0][1]
    form.report_enabled   = true
    form.exploit_enabled  = true
    form.cleanup_enabled  = true

    form.workspace = Mdm::Workspace.new({
      :boundary => default_ip_range,
      :limit_to_network => true,
      :owner => current_user
    })
    form.scan_task = ::ScanTask.new({
      :workspace => form.workspace,
      :skip_host_validity_check => true,
      :address_string => form.workspace.boundary
    })
    form.import_task = ImportTask.new({
      :workspace => form.workspace
    })
    form.exploit_task = ExploitTask.new({
      :workspace => form.workspace,
      :skip_host_validity_check => true,
      :skip_site_existence_check => true,
      :filter_by_os => true # we want to only run OS-specific exploits
    })
    form.report = Report.new({
      :skip_data_check    => true,
      :created_by         => current_user.username,
      :report_type        => :audit,
      :file_formats       => [Report::DEFAULT_FILE_FORMAT],
      :options            => Report::DEFAULT_OPTIONS,
    })
    form.nexpose_task = NexposeTask.new({
      :workspace => form.workspace,
      :skip_host_validity_check => true
    })
    build_collect_evidence_task
    build_cleanup_task
    self
  end

  private

  #
  # build_* helpers
  #

  def build_scan_task_from_params
    params[:scan_task] ||= {}

    case safe_pentest_scan_type
    when :regular_scan
      form.scan_task = ::ScanTask.new(params[:scan_task].merge({
        :address_string => form.workspace.boundary || '',
        :workspace => form.workspace,
        :username => current_user.username,
        :skip_host_validity_check => true
      }))
    when :nexpose_scan
      params[:nexpose_task] ||= {}
      form.nexpose_task = NexposeTask.new(params[:nexpose_task].merge({
        :whitelist_string => form.workspace.boundary || '',
        :blacklist_string => params[:scan_task][:blacklist_string] || '',
        :workspace => form.workspace,
        :username => current_user.username,
        :skip_host_validity_check => true
      }))
    when :import
      build_import_task_from_params
    end
  end

  def build_exploit_task_from_params
    super if form.exploit_enabled
  end

  def build_report_from_params
    super(:included_addresses => form.workspace.boundary) if form.report_enabled
  end

  def build_collect_evidence_task_from_params
    build_collect_evidence_task if form.exploit_enabled and form.collect_evidence
  end

  def build_cleanup_task_from_params
    build_cleanup_task if form.cleanup_enabled
  end

  # @return [Symbol] the QuickPentest::Form#scan_type attribute that is set
  def safe_pentest_scan_type
    # helper for checking a nil
    if form.scan_type.present?
      form.scan_type.to_sym
    else
      # default to :regular_scan
      Wizards::QuickPentest::Form::QUICK_PENTEST_SCAN_TYPES_FORMATTED[0][1].to_sym
    end
  end
end
