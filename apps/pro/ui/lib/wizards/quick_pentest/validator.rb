module Wizards
module QuickPentest
  class Validator < Wizards::BaseValidator
    # Running actual scans require an address range. Importing does not.
    SCAN_TYPES_THAT_REQUIRE_ADDRESSES = %w(regular_scan nexpose_scan)

    #
    #  Validators: one per tab of the wizard
    #
    def create_project_valid?
      # When doing regular_scan or nexpose_scan, we HAVE to ensure
      #   that the IP boundary is set on workspace
      is_valid = form.workspace.valid?
      scan_type = form.scan_type.to_s
      if Wizards::QuickPentest::Validator::SCAN_TYPES_THAT_REQUIRE_ADDRESSES.include? scan_type
        if form.workspace.boundary.blank?
          form.workspace.errors.add(:boundary, 'must be defined')
          is_valid = false
        end
      end
      is_valid
    end

    def configure_scan_valid?
      case safe_pentest_scan_type
      when :regular_scan
        form.scan_task.valid?
      when :nexpose_scan
        form.nexpose_task.valid?
      when :import
        form.import_task.valid?
      end
    end

    def configure_exploits_valid?
      if form.exploit_enabled
        form.exploit_task.valid?
      else
        true
      end
    end

    def generate_report_valid?
      if form.report_enabled
        form.report.valid?
      else 
        true 
      end
    end

    # returns a JSON object containing inner models and names of errors
    def errors_hash
      {
        :workspace => form.workspace.present? ? form.workspace.errors.messages : {},
        :scan_task => form.scan_task.present? ? form.scan_task.specific_error : {},
        :nexpose_task => form.nexpose_task.present? ? form.nexpose_task.specific_error : {},
        :import => form.import_task.present? ? form.import_task.specific_error : {},
        :report => form.report.present? ? form.report.errors : {},
        :exploit_task => form.exploit_task.present? ? form.exploit_task.specific_error : {}
      }
    end

    private
    def safe_pentest_scan_type
      # helper for checking a nil
      if form.scan_type.present?
        form.scan_type.to_sym
      else
        # default to :regular_scan
        Wizards::QuickPentest::Form::form_SCAN_TYPES_FORMATTED[0][1].to_sym
      end
    end

  end
end
end