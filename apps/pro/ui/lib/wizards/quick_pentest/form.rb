# QuickPentest "faux" model for rendering the QuickPentest form.
module Wizards
module QuickPentest
  class Form < Wizards::BaseForm
    include Metasploit::Pro::AttrAccessor::Boolean
    # possible options for the scanning phase
    QUICK_PENTEST_SCAN_TYPES_FORMATTED = [
      ["Regular Scan", :regular_scan],
      ["Import", :import]
    ]

    QUICK_PENTEST_REPORT_TYPES = [:activity,
                                  :audit,
                                  :authentication_tokens,
                                  :collected_evidence,
                                  :compromised_hosts,
                                  :fisma,
                                  :pci,
                                  :services
    ]

    QUICK_PENTEST_PROFILE_TYPES = [
      ["Everything", :everything, "Exploits all systems and devices"],
      ["Windows Targets", :windows, "Creates an attack plan for only Windows systems"],
      ["*nix Servers", :unix_servers, "Creates an attack plan for only Linux and Unix systems"],
      ["Web Servers", :web_servers, "Creates an attack plan for only HTTP servers"],
      ["Network Devices", :network_devices, "Creates an attack for systems that are not servers "+
                                            "or clients, such as printers and fax machines"]
    ]

    # nested models
    attr_accessor :collect_evidence_task
    attr_accessor :exploit_task
    attr_accessor :import_task
    attr_accessor :nexpose_task
    attr_accessor :report
    attr_accessor :scan_task
    attr_accessor :workspace
    attr_accessor :cleanup_task
    
    # "glue" attributes that don't belong to any nested model
    attr_accessor :collect_evidence
    attr_accessor :exploit_enabled
    attr_accessor :profile
    attr_accessor :report_enabled
    attr_accessor :scan_type
    attr_accessor :cleanup_enabled

    def initialize(attrs={})
      super
      # manually assign the "glue" attributes
      self.collect_evidence = set_default_boolean(attrs[:collect_evidence], false)
      self.report_enabled = set_default_boolean(attrs[:report_enabled], false)
      self.exploit_enabled = set_default_boolean(attrs[:exploit_enabled], false)
      self.cleanup_enabled = set_default_boolean(attrs[:cleanup_enabled], false)
    end
  end
end
end
