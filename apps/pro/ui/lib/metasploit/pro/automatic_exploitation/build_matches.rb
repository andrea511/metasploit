module Metasploit::Pro::AutomaticExploitation::BuildMatches

  def build_matches(opts={})
   vulns     = vulns_to_exploit(opts)
   min_rank  = opts[:MINIMUM_MODULE_RANK]

   match_set = MetasploitDataModels::AutomaticExploitation::MatchSet.create_with_matches_for_vulns(
     vulns,
     workspace: opts[:workspace],
     user: opts[:user],
     minimum_module_rank: min_rank
   )

   opts[:run_stats].potential_exploits.update(data: match_set.matches.size)

   match_set
  end

  def vulns_to_exploit(opts={})
    vulns = opts[:workspace].vulns.with_nexpose_vuln_def
    if opts[:blacklist].present?
      blacklist = (opts[:blacklist]).split(/\s+/).reject(&:blank?)
      bad_hosts = opts[:workspace].hosts.where('address IN (?)', blacklist).pluck(:id)

      if bad_hosts.present?
        vulns.where('host_id NOT IN (?)', bad_hosts)
      else
        vulns
      end
    else
      vulns
    end
  end

end
