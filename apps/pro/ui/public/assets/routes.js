/*
File generated by js-routes 1.4.14
Based on Rails 7.0.4.3 routes of Pro::Application
 */

(function() {
  var DeprecatedGlobbingBehavior, NodeTypes, ParameterMissing, ReservedOptions, SpecialOptionsKey, UriEncoderSegmentRegex, Utils, error, result,
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ParameterMissing = function(message, fileName, lineNumber) {
    var instance;
    instance = new Error(message, fileName, lineNumber);
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    } else {
      instance.__proto__ = this.__proto__;
    }
    if (Error.captureStackTrace) {
      Error.captureStackTrace(instance, ParameterMissing);
    }
    return instance;
  };

  ParameterMissing.prototype = Object.create(Error.prototype, {
    constructor: {
      value: Error,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ParameterMissing, Error);
  } else {
    ParameterMissing.__proto__ = Error;
  }

  NodeTypes = {"GROUP":1,"CAT":2,"SYMBOL":3,"OR":4,"STAR":5,"LITERAL":6,"SLASH":7,"DOT":8};

  DeprecatedGlobbingBehavior = false;

  SpecialOptionsKey = "_options";

  UriEncoderSegmentRegex = /[^a-zA-Z0-9\-\._~!\$&'\(\)\*\+,;=:@]/g;

  ReservedOptions = ['anchor', 'trailing_slash', 'subdomain', 'host', 'port', 'protocol'];

  Utils = {
    configuration: {
      prefix: "",
      default_url_options: {},
      special_options_key: "_options",
      serializer: null
    },
    default_serializer: function(object, prefix) {
      var element, i, j, key, len, prop, s;
      if (prefix == null) {
        prefix = null;
      }
      if (object == null) {
        return "";
      }
      if (!prefix && !(this.get_object_type(object) === "object")) {
        throw new Error("Url parameters should be a javascript hash");
      }
      s = [];
      switch (this.get_object_type(object)) {
        case "array":
          for (i = j = 0, len = object.length; j < len; i = ++j) {
            element = object[i];
            s.push(this.default_serializer(element, prefix + "[]"));
          }
          break;
        case "object":
          for (key in object) {
            if (!hasProp.call(object, key)) continue;
            prop = object[key];
            if ((prop == null) && (prefix != null)) {
              prop = "";
            }
            if (prop != null) {
              if (prefix != null) {
                key = prefix + "[" + key + "]";
              }
              s.push(this.default_serializer(prop, key));
            }
          }
          break;
        default:
          if (object != null) {
            s.push((encodeURIComponent(prefix.toString())) + "=" + (encodeURIComponent(object.toString())));
          }
      }
      if (!s.length) {
        return "";
      }
      return s.join("&");
    },
    serialize: function(object) {
      var custom_serializer;
      custom_serializer = this.configuration.serializer;
      if ((custom_serializer != null) && this.get_object_type(custom_serializer) === "function") {
        return custom_serializer(object);
      } else {
        return this.default_serializer(object);
      }
    },
    clean_path: function(path) {
      var last_index;
      path = path.split("://");
      last_index = path.length - 1;
      path[last_index] = path[last_index].replace(/\/+/g, "/");
      return path.join("://");
    },
    extract_options: function(number_of_params, args) {
      var last_el, options;
      last_el = args[args.length - 1];
      if ((args.length > number_of_params && last_el === void 0) || ((last_el != null) && "object" === this.get_object_type(last_el) && !this.looks_like_serialized_model(last_el))) {
        options = args.pop() || {};
        delete options[this.configuration.special_options_key];
        return options;
      } else {
        return {};
      }
    },
    looks_like_serialized_model: function(object) {
      return !object[this.configuration.special_options_key] && ("id" in object || "to_param" in object);
    },
    path_identifier: function(object) {
      var property;
      if (object === 0) {
        return "0";
      }
      if (!object) {
        return "";
      }
      property = object;
      if (this.get_object_type(object) === "object") {
        if ("to_param" in object) {
          if (object.to_param == null) {
            throw new ParameterMissing("Route parameter missing: to_param");
          }
          property = object.to_param;
        } else if ("id" in object) {
          if (object.id == null) {
            throw new ParameterMissing("Route parameter missing: id");
          }
          property = object.id;
        } else {
          property = object;
        }
        if (this.get_object_type(property) === "function") {
          property = property.call(object);
        }
      }
      return property.toString();
    },
    clone: function(obj) {
      var attr, copy, key;
      if ((obj == null) || "object" !== this.get_object_type(obj)) {
        return obj;
      }
      copy = obj.constructor();
      for (key in obj) {
        if (!hasProp.call(obj, key)) continue;
        attr = obj[key];
        copy[key] = attr;
      }
      return copy;
    },
    merge: function() {
      var tap, xs;
      xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      tap = function(o, fn) {
        fn(o);
        return o;
      };
      if ((xs != null ? xs.length : void 0) > 0) {
        return tap({}, function(m) {
          var j, k, len, results, v, x;
          results = [];
          for (j = 0, len = xs.length; j < len; j++) {
            x = xs[j];
            results.push((function() {
              var results1;
              results1 = [];
              for (k in x) {
                v = x[k];
                results1.push(m[k] = v);
              }
              return results1;
            })());
          }
          return results;
        });
      }
    },
    normalize_options: function(parts, required_parts, default_options, actual_parameters) {
      var i, j, key, len, options, part, parts_options, result, route_parts, url_parameters, use_all_parts, value;
      options = this.extract_options(parts.length, actual_parameters);
      if (actual_parameters.length > parts.length) {
        throw new Error("Too many parameters provided for path");
      }
      use_all_parts = actual_parameters.length > required_parts.length;
      parts_options = {};
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        use_all_parts = true;
        if (this.indexOf(parts, key) >= 0) {
          parts_options[key] = value;
        }
      }
      options = this.merge(this.configuration.default_url_options, default_options, options);
      result = {};
      url_parameters = {};
      result['url_parameters'] = url_parameters;
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        value = options[key];
        if (this.indexOf(ReservedOptions, key) >= 0) {
          result[key] = value;
        } else {
          url_parameters[key] = value;
        }
      }
      route_parts = use_all_parts ? parts : required_parts;
      i = 0;
      for (j = 0, len = route_parts.length; j < len; j++) {
        part = route_parts[j];
        if (i < actual_parameters.length) {
          if (!parts_options.hasOwnProperty(part)) {
            url_parameters[part] = actual_parameters[i];
            ++i;
          }
        }
      }
      return result;
    },
    build_route: function(parts, required_parts, default_options, route, full_url, args) {
      var options, parameters, result, url, url_params;
      args = Array.prototype.slice.call(args);
      options = this.normalize_options(parts, required_parts, default_options, args);
      parameters = options['url_parameters'];
      result = "" + (this.get_prefix()) + (this.visit(route, parameters));
      url = Utils.clean_path(result);
      if (options['trailing_slash'] === true) {
        url = url.replace(/(.*?)[\/]?$/, "$1/");
      }
      if ((url_params = this.serialize(parameters)).length) {
        url += "?" + url_params;
      }
      url += options.anchor ? "#" + options.anchor : "";
      if (full_url) {
        url = this.route_url(options) + url;
      }
      return url;
    },
    visit: function(route, parameters, optional) {
      var left, left_part, right, right_part, type, value;
      if (optional == null) {
        optional = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return this.visit(left, parameters, true);
        case NodeTypes.STAR:
          return this.visit_globbing(left, parameters, true);
        case NodeTypes.LITERAL:
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
          return left;
        case NodeTypes.CAT:
          left_part = this.visit(left, parameters, optional);
          right_part = this.visit(right, parameters, optional);
          if (optional && ((this.is_optional_node(left[0]) && !left_part) || ((this.is_optional_node(right[0])) && !right_part))) {
            return "";
          }
          return "" + left_part + right_part;
        case NodeTypes.SYMBOL:
          value = parameters[left];
          delete parameters[left];
          if (value != null) {
            return this.encode_segment(this.path_identifier(value));
          }
          if (optional) {
            return "";
          } else {
            throw new ParameterMissing("Route parameter missing: " + left);
          }
          break;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    encode_segment: function(segment) {
      return segment.replace(UriEncoderSegmentRegex, function(str) {
        return encodeURIComponent(str);
      });
    },
    is_optional_node: function(node) {
      return this.indexOf([NodeTypes.STAR, NodeTypes.SYMBOL, NodeTypes.CAT], node) >= 0;
    },
    build_path_spec: function(route, wildcard) {
      var left, right, type;
      if (wildcard == null) {
        wildcard = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return "(" + (this.build_path_spec(left)) + ")";
        case NodeTypes.CAT:
          return "" + (this.build_path_spec(left)) + (this.build_path_spec(right));
        case NodeTypes.STAR:
          return this.build_path_spec(left, true);
        case NodeTypes.SYMBOL:
          if (wildcard === true) {
            return "" + (left[0] === '*' ? '' : '*') + left;
          } else {
            return ":" + left;
          }
          break;
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
        case NodeTypes.LITERAL:
          return left;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    visit_globbing: function(route, parameters, optional) {
      var left, right, type, value;
      type = route[0], left = route[1], right = route[2];
      value = parameters[left];
      delete parameters[left];
      if (value == null) {
        return this.visit(route, parameters, optional);
      }
      value = (function() {
        switch (this.get_object_type(value)) {
          case "array":
            return value.join("/");
          default:
            return value;
        }
      }).call(this);
      if (DeprecatedGlobbingBehavior) {
        return this.path_identifier(value);
      } else {
        return encodeURI(this.path_identifier(value));
      }
    },
    get_prefix: function() {
      var prefix;
      prefix = this.configuration.prefix;
      if (prefix !== "") {
        prefix = (prefix.match("/$") ? prefix : prefix + "/");
      }
      return prefix;
    },
    route: function(parts_table, default_options, route_spec, full_url) {
      var j, len, part, parts, path_fn, ref, required, required_parts;
      required_parts = [];
      parts = [];
      for (j = 0, len = parts_table.length; j < len; j++) {
        ref = parts_table[j], part = ref[0], required = ref[1];
        parts.push(part);
        if (required) {
          required_parts.push(part);
        }
      }
      path_fn = function() {
        return Utils.build_route(parts, required_parts, default_options, route_spec, full_url, arguments);
      };
      path_fn.required_params = required_parts;
      path_fn.toString = function() {
        return Utils.build_path_spec(route_spec);
      };
      return path_fn;
    },
    route_url: function(route_defaults) {
      var hostname, port, protocol, subdomain;
      if (typeof route_defaults === 'string') {
        return route_defaults;
      }
      hostname = route_defaults.host || Utils.current_host();
      if (!hostname) {
        return '';
      }
      subdomain = route_defaults.subdomain ? route_defaults.subdomain + '.' : '';
      protocol = route_defaults.protocol || Utils.current_protocol();
      port = route_defaults.port || (!route_defaults.host ? Utils.current_port() : void 0);
      port = port ? ":" + port : '';
      return protocol + "://" + subdomain + hostname + port;
    },
    has_location: function() {
      return (typeof window !== "undefined" && window !== null ? window.location : void 0) != null;
    },
    current_host: function() {
      if (this.has_location()) {
        return window.location.hostname;
      } else {
        return null;
      }
    },
    current_protocol: function() {
      if (this.has_location() && window.location.protocol !== '') {
        return window.location.protocol.replace(/:$/, '');
      } else {
        return 'http';
      }
    },
    current_port: function() {
      if (this.has_location() && window.location.port !== '') {
        return window.location.port;
      } else {
        return '';
      }
    },
    _classToTypeCache: null,
    _classToType: function() {
      var j, len, name, ref;
      if (this._classToTypeCache != null) {
        return this._classToTypeCache;
      }
      this._classToTypeCache = {};
      ref = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
      for (j = 0, len = ref.length; j < len; j++) {
        name = ref[j];
        this._classToTypeCache["[object " + name + "]"] = name.toLowerCase();
      }
      return this._classToTypeCache;
    },
    get_object_type: function(obj) {
      if (this.jQuery && (this.jQuery.type != null)) {
        return this.jQuery.type(obj);
      }
      if (obj == null) {
        return "" + obj;
      }
      if (typeof obj === "object" || typeof obj === "function") {
        return this._classToType()[Object.prototype.toString.call(obj)] || "object";
      } else {
        return typeof obj;
      }
    },
    indexOf: function(array, element) {
      if (Array.prototype.indexOf) {
        return array.indexOf(element);
      } else {
        return this.indexOfImplementation(array, element);
      }
    },
    indexOfImplementation: function(array, element) {
      var el, i, j, len, result;
      result = -1;
      for (i = j = 0, len = array.length; j < len; i = ++j) {
        el = array[i];
        if (el === element) {
          result = i;
        }
      }
      return result;
    },
    namespace: function(root, namespace, routes) {
      var index, j, len, part, parts;
      parts = namespace ? namespace.split(".") : [];
      if (parts.length === 0) {
        return routes;
      }
      for (index = j = 0, len = parts.length; j < len; index = ++j) {
        part = parts[index];
        if (index < parts.length - 1) {
          root = (root[part] || (root[part] = {}));
        } else {
          return root[part] = routes;
        }
      }
    },
    configure: function(new_config) {
      return this.configuration = this.merge(this.configuration, new_config);
    },
    config: function() {
      return this.clone(this.configuration);
    },
    make: function() {
      var routes;
      routes = {
// attempt_session_workspace_metasploit_credential_login => /workspaces/:workspace_id/metasploit/credential/logins/:id/attempt_session(.:format)
  // function(workspace_id, id, options)
  attempt_session_workspace_metasploit_credential_login_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"metasploit",false],[2,[7,"/",false],[2,[6,"credential",false],[2,[7,"/",false],[2,[6,"logins",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"attempt_session",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// clone_module_run => /workspaces/:workspace_id/tasks/clone_module_run/:clone_id(.:format)
  // function(workspace_id, clone_id, options)
  clone_module_run_path: Utils.route([["workspace_id",true],["clone_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"clone_module_run",false],[2,[7,"/",false],[2,[3,"clone_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// clone_rc_script_run => /workspaces/:workspace_id/tasks/clone_rc_script_run/:clone_id(.:format)
  // function(workspace_id, clone_id, options)
  clone_rc_script_run_path: Utils.route([["workspace_id",true],["clone_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"clone_rc_script_run",false],[2,[7,"/",false],[2,[3,"clone_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// combined_workspace_notes => /workspaces/:workspace_id/notes/combined(.:format)
  // function(workspace_id, options)
  combined_workspace_notes_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"notes",false],[2,[7,"/",false],[2,[6,"combined",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// combined_workspace_services => /workspaces/:workspace_id/services/combined(.:format)
  // function(workspace_id, options)
  combined_workspace_services_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"combined",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// combined_workspace_vulns => /workspaces/:workspace_id/vulns/combined(.:format)
  // function(workspace_id, options)
  combined_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"combined",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// combined_workspace_web_vulns => /workspaces/:workspace_id/web_vulns/combined(.:format)
  // function(workspace_id, options)
  combined_workspace_web_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"web_vulns",false],[2,[7,"/",false],[2,[6,"combined",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// cores_workspace_brute_force_reuse_group => /workspaces/:workspace_id/brute_force/reuse/groups/:id/cores(.:format)
  // function(workspace_id, id, options)
  cores_workspace_brute_force_reuse_group_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"cores",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// delete_web_vulns => /workspaces/:workspace_id/web/vuln/delete/:site_id(.:format)
  // function(workspace_id, site_id, options)
  delete_web_vulns_path: Utils.route([["workspace_id",true],["site_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"web",false],[2,[7,"/",false],[2,[6,"vuln",false],[2,[7,"/",false],[2,[6,"delete",false],[2,[7,"/",false],[2,[3,"site_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// destroy_multiple_groups_workspace_vulns => /workspaces/:workspace_id/vulns/destroy_multiple_groups(.:format)
  // function(workspace_id, options)
  destroy_multiple_groups_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"destroy_multiple_groups",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_hosts => /workspaces/:workspace_id/hosts/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_hosts_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_workspace_loots => /workspaces/:workspace_id/loots/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_workspace_loots_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"loots",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_workspace_notes => /workspaces/:workspace_id/notes/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_workspace_notes_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"notes",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_workspace_services => /workspaces/:workspace_id/services/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_workspace_services_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_workspace_vulns => /workspaces/:workspace_id/vulns/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_notifications_message => /notifications/messages/:id/edit(.:format)
  // function(id, options)
  edit_notifications_message_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_workspace_brute_force_guess => /workspaces/:workspace_id/brute_force/guess/:id/edit(.:format)
  // function(workspace_id, id, options)
  edit_workspace_brute_force_guess_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// edit_workspace_brute_force_reuse_group => /workspaces/:workspace_id/brute_force/reuse/groups/:id/edit(.:format)
  // function(workspace_id, id, options)
  edit_workspace_brute_force_reuse_group_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// edit_workspace_brute_force_reuse_target => /workspaces/:workspace_id/brute_force/reuse/targets/:id/edit(.:format)
  // function(workspace_id, id, options)
  edit_workspace_brute_force_reuse_target_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// edit_workspace_brute_force_run => /workspaces/:workspace_id/brute_force/runs/:id/edit(.:format)
  // function(workspace_id, id, options)
  edit_workspace_brute_force_run_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"runs",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// filter_values_workspace_brute_force_reuse_targets => /workspaces/:workspace_id/brute_force/reuse/targets/filter_values(.:format)
  // function(workspace_id, options)
  filter_values_workspace_brute_force_reuse_targets_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[6,"filter_values",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// filter_values_workspace_nexpose_data_sites => /workspaces/:workspace_id/nexpose/data/sites/filter_values(.:format)
  // function(workspace_id, options)
  filter_values_workspace_nexpose_data_sites_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"data",false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[6,"filter_values",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// filter_values_workspace_sonar_import_fdnss_index => /workspaces/:workspace_id/sonar/imports/:import_id/fdnss/filter_values(.:format)
  // function(workspace_id, import_id, options)
  filter_values_workspace_sonar_import_fdnss_index_path: Utils.route([["workspace_id",true],["import_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"sonar",false],[2,[7,"/",false],[2,[6,"imports",false],[2,[7,"/",false],[2,[3,"import_id",false],[2,[7,"/",false],[2,[6,"fdnss",false],[2,[7,"/",false],[2,[6,"filter_values",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// get_session_workspace_metasploit_credential_core_login => /workspaces/:workspace_id/metasploit/credential/cores/:core_id/logins/:id/get_session(.:format)
  // function(workspace_id, core_id, id, options)
  get_session_workspace_metasploit_credential_core_login_path: Utils.route([["workspace_id",true],["core_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"metasploit",false],[2,[7,"/",false],[2,[6,"credential",false],[2,[7,"/",false],[2,[6,"cores",false],[2,[7,"/",false],[2,[3,"core_id",false],[2,[7,"/",false],[2,[6,"logins",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"get_session",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]]]]]),
// get_session_workspace_metasploit_credential_login => /workspaces/:workspace_id/metasploit/credential/logins/:id/get_session(.:format)
  // function(workspace_id, id, options)
  get_session_workspace_metasploit_credential_login_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"metasploit",false],[2,[7,"/",false],[2,[6,"credential",false],[2,[7,"/",false],[2,[6,"logins",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"get_session",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// history_workspace_vuln => /workspaces/:workspace_id/vulns/:id/history(.:format)
  // function(workspace_id, id, options)
  history_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"history",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// host => /hosts/:id(.:format)
  // function(id, options)
  host_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// host_tags => /hosts/:id/tags(.:format)
  // function(id, options)
  host_tags_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tags",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// host_vulns => /hosts/:host_id/vulns(.:format)
  // function(host_id, options)
  host_vulns_path: Utils.route([["host_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"host_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// host_vulns_tab => /hosts/:id/vulns(.:format)
  // function(id, options)
  host_vulns_tab_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// host_web_vulns_tab => /hosts/:id/web_vulns(.:format)
  // function(id, options)
  host_web_vulns_tab_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"web_vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// hosts => /workspaces/:workspace_id/hosts(.:format)
  // function(workspace_id, options)
  hosts_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// map_host => /workspaces/:workspace_id/hosts/map(.:format)
  // function(workspace_id, options)
  map_host_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[6,"map",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// mark_read_notifications_messages => /notifications/messages/mark_read(.:format)
  // function(options)
  mark_read_notifications_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"mark_read",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// modules => /workspaces/:workspace_id/modules(.:format)
  // function(workspace_id, options)
  modules_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"modules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_bruteforce => /workspaces/:workspace_id/tasks/new_bruteforce(.:format)
  // function(workspace_id, options)
  new_bruteforce_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_bruteforce",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_exploit => /workspaces/:workspace_id/tasks/new_exploit(.:format)
  // function(workspace_id, options)
  new_exploit_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_exploit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_host => /workspaces/:workspace_id/hosts/new(.:format)
  // function(workspace_id, options)
  new_host_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_module_run => /workspaces/:workspace_id/tasks/new_module_run(/*path)(.:format)
  // function(workspace_id, options)
  new_module_run_path: Utils.route([["workspace_id",true],["path",false],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_module_run",false],[2,[1,[2,[7,"/",false],[5,[3,"path",false],false]],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]),
// new_notifications_message => /notifications/messages/new(.:format)
  // function(options)
  new_notifications_message_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_rc_script_run => /workspaces/:workspace_id/tasks/new_rc_script_run(/*path)(.:format)
  // function(workspace_id, options)
  new_rc_script_run_path: Utils.route([["workspace_id",true],["path",false],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_rc_script_run",false],[2,[1,[2,[7,"/",false],[5,[3,"path",false],false]],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]),
// new_scan => /workspaces/:workspace_id/tasks/new_scan(.:format)
  // function(workspace_id, options)
  new_scan_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_scan",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_webscan => /workspaces/:workspace_id/tasks/new_webscan(.:format)
  // function(workspace_id, options)
  new_webscan_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_webscan",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_workspace_brute_force_guess => /workspaces/:workspace_id/brute_force/guess/new(.:format)
  // function(workspace_id, options)
  new_workspace_brute_force_guess_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// new_workspace_brute_force_reuse_group => /workspaces/:workspace_id/brute_force/reuse/groups/new(.:format)
  // function(workspace_id, options)
  new_workspace_brute_force_reuse_group_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// new_workspace_brute_force_reuse_target => /workspaces/:workspace_id/brute_force/reuse/targets/new(.:format)
  // function(workspace_id, options)
  new_workspace_brute_force_reuse_target_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// new_workspace_brute_force_run => /workspaces/:workspace_id/brute_force/runs/new(.:format)
  // function(workspace_id, options)
  new_workspace_brute_force_run_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"runs",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// new_workspace_import => /workspaces/:workspace_id/imports/new(.:format)
  // function(workspace_id, options)
  new_workspace_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"imports",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// notifications_message => /notifications/messages/:id(.:format)
  // function(id, options)
  notifications_message_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// notifications_messages => /notifications/messages(.:format)
  // function(options)
  notifications_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// pause_task => /tasks/:id/pause(.:format)
  // function(id, options)
  pause_task_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"pause",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// poll_notifications_messages => /notifications/messages/poll(.:format)
  // function(options)
  poll_notifications_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"poll",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// push_to_nexpose_message_workspace_vulns => /workspaces/:workspace_id/vulns/push_to_nexpose_message(.:format)
  // function(workspace_id, options)
  push_to_nexpose_message_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"push_to_nexpose_message",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// push_to_nexpose_status_workspace_vulns => /workspaces/:workspace_id/vulns/push_to_nexpose_status(.:format)
  // function(workspace_id, options)
  push_to_nexpose_status_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"push_to_nexpose_status",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// quick_multi_tag => /workspaces/:workspace_id/hosts/quick_multi_tag(.:format)
  // function(workspace_id, options)
  quick_multi_tag_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[6,"quick_multi_tag",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// quick_multi_tag_workspace_notes => /workspaces/:workspace_id/notes/quick_multi_tag(.:format)
  // function(workspace_id, options)
  quick_multi_tag_workspace_notes_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"notes",false],[2,[7,"/",false],[2,[6,"quick_multi_tag",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// quick_multi_tag_workspace_services => /workspaces/:workspace_id/services/quick_multi_tag(.:format)
  // function(workspace_id, options)
  quick_multi_tag_workspace_services_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"quick_multi_tag",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rc_script_delete => /workspaces/:workspace_id/rc_scripts/*path/delete(.:format)
  // function(workspace_id, path, options)
  rc_script_delete_path: Utils.route([["workspace_id",true],["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"rc_scripts",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[2,[7,"/",false],[2,[6,"delete",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rc_script_run => /workspaces/:workspace_id/rc_scripts/*path/run(.:format)
  // function(workspace_id, path, options)
  rc_script_run_path: Utils.route([["workspace_id",true],["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"rc_scripts",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[2,[7,"/",false],[2,[6,"run",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rc_script_upload => /workspaces/:workspace_id/rc_scripts/upload(.:format)
  // function(workspace_id, options)
  rc_script_upload_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"rc_scripts",false],[2,[7,"/",false],[2,[6,"upload",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rc_scripts => /workspaces/:workspace_id/rc_scripts(.:format)
  // function(workspace_id, options)
  rc_scripts_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"rc_scripts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// related_hosts_filter_values_workspace_vuln => /workspaces/:workspace_id/vulns/:id/related_hosts_filter_values(.:format)
  // function(workspace_id, id, options)
  related_hosts_filter_values_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"related_hosts_filter_values",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// related_hosts_workspace_vuln => /workspaces/:workspace_id/vulns/:id/related_hosts(.:format)
  // function(workspace_id, id, options)
  related_hosts_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"related_hosts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// related_modules_workspace_vuln => /workspaces/:workspace_id/vulns/:id/related_modules(.:format)
  // function(workspace_id, id, options)
  related_modules_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"related_modules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rest_api_v2_workspace_host_service_vulns => /rest_api/v2/workspaces/:workspace_id/hosts/:host_id/services/:service_id/vulns(.:format)
  // function(workspace_id, host_id, service_id, options)
  rest_api_v2_workspace_host_service_vulns_path: Utils.route([["workspace_id",true],["host_id",true],["service_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rest_api",false],[2,[7,"/",false],[2,[6,"v2",false],[2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"host_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]]]]]),
// rest_api_v2_workspace_host_service_web_site_web_vulns => /rest_api/v2/workspaces/:workspace_id/hosts/:host_id/services/:service_id/web_sites/:web_site_id/web_vulns(.:format)
  // function(workspace_id, host_id, service_id, web_site_id, options)
  rest_api_v2_workspace_host_service_web_site_web_vulns_path: Utils.route([["workspace_id",true],["host_id",true],["service_id",true],["web_site_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rest_api",false],[2,[7,"/",false],[2,[6,"v2",false],[2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"host_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"web_sites",false],[2,[7,"/",false],[2,[3,"web_site_id",false],[2,[7,"/",false],[2,[6,"web_vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]]]]]]]]]),
// restore_last_vuln_attempt_status_workspace_vuln => /workspaces/:workspace_id/vulns/:id/restore_last_vuln_attempt_status(.:format)
  // function(workspace_id, id, options)
  restore_last_vuln_attempt_status_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"restore_last_vuln_attempt_status",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// resume_task => /tasks/:id/resume(.:format)
  // function(id, options)
  resume_task_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"resume",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// search_operators_workspace_brute_force_reuse_targets => /workspaces/:workspace_id/brute_force/reuse/targets/search_operators(.:format)
  // function(workspace_id, options)
  search_operators_workspace_brute_force_reuse_targets_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[6,"search_operators",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// search_operators_workspace_nexpose_data_sites => /workspaces/:workspace_id/nexpose/data/sites/search_operators(.:format)
  // function(workspace_id, options)
  search_operators_workspace_nexpose_data_sites_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"data",false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[6,"search_operators",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// search_operators_workspace_vuln => /workspaces/:workspace_id/vulns/:id/search_operators(.:format)
  // function(workspace_id, id, options)
  search_operators_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"search_operators",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// search_workspace_tags => /workspaces/:workspace_id/tags/search(.:format)
  // function(workspace_id, options)
  search_workspace_tags_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tags",false],[2,[7,"/",false],[2,[6,"search",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// session => /workspaces/:workspace_id/sessions/:id(.:format)
  // function(workspace_id, id, options)
  session_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"sessions",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// start_bruteforce => /workspaces/:workspace_id/tasks/start_bruteforce(.:format)
  // function(workspace_id, options)
  start_bruteforce_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_bruteforce",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// start_import => /workspaces/:workspace_id/tasks/start_import(.:format)
  // function(workspace_id, options)
  start_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// start_module_run => /workspaces/:workspace_id/tasks/start_module_run/*path(.:format)
  // function(workspace_id, path, options)
  start_module_run_path: Utils.route([["workspace_id",true],["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_module_run",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// start_rc_script_run => /workspaces/:workspace_id/tasks/start_rc_script_run/*path(.:format)
  // function(workspace_id, path, options)
  start_rc_script_run_path: Utils.route([["workspace_id",true],["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_rc_script_run",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// start_scan_and_import => /workspaces/:workspace_id/tasks/start_scan_and_import(.:format)
  // function(workspace_id, options)
  start_scan_and_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_scan_and_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// stop_paused_task => /tasks/:id/stop_paused(.:format)
  // function(id, options)
  stop_paused_task_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"stop_paused",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// stop_task => /tasks/stop(.:format)
  // function(options)
  stop_task_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"stop",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// target_count_workspace_brute_force_guess_runs => /workspaces/:workspace_id/brute_force/guess/runs/target_count(.:format)
  // function(workspace_id, options)
  target_count_workspace_brute_force_guess_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[6,"runs",false],[2,[7,"/",false],[2,[6,"target_count",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// task_detail => /workspaces/:workspace_id/tasks/:id(.:format)
  // function(workspace_id, id, options)
  task_detail_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// tasks => /workspaces/:workspace_id/tasks(.:format)
  // function(workspace_id, options)
  tasks_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// update_last_vuln_attempt_status_workspace_vuln => /workspaces/:workspace_id/vulns/:id/update_last_vuln_attempt_status(.:format)
  // function(workspace_id, id, options)
  update_last_vuln_attempt_status_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"update_last_vuln_attempt_status",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// validate_bruteforce => /workspaces/:workspace_id/tasks/validate_bruteforce(.:format)
  // function(workspace_id, options)
  validate_bruteforce_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_bruteforce",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// validate_import => /workspaces/:workspace_id/tasks/validate_import(.:format)
  // function(workspace_id, options)
  validate_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// validate_module_run => /workspaces/:workspace_id/tasks/validate_module_run(.:format)
  // function(workspace_id, options)
  validate_module_run_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_module_run",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// validate_rc_script_run => /workspaces/:workspace_id/tasks/validate_rc_script_run(.:format)
  // function(workspace_id, options)
  validate_rc_script_run_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_rc_script_run",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// validate_scan_and_import => /workspaces/:workspace_id/tasks/validate_scan_and_import(.:format)
  // function(workspace_id, options)
  validate_scan_and_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_scan_and_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// web_vulns => /workspaces/:workspace_id/web/vulns/:site_id(.:format)
  // function(workspace_id, site_id, options)
  web_vulns_path: Utils.route([["workspace_id",true],["site_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"web",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"site_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_guess => /workspaces/:workspace_id/brute_force/guess/:id(.:format)
  // function(workspace_id, id, options)
  workspace_brute_force_guess_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_guess_index => /workspaces/:workspace_id/brute_force/guess(.:format)
  // function(workspace_id, options)
  workspace_brute_force_guess_index_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_brute_force_guess_runs => /workspaces/:workspace_id/brute_force/guess/runs(.:format)
  // function(workspace_id, options)
  workspace_brute_force_guess_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[6,"runs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_reuse_group => /workspaces/:workspace_id/brute_force/reuse/groups/:id(.:format)
  // function(workspace_id, id, options)
  workspace_brute_force_reuse_group_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// workspace_brute_force_reuse_groups => /workspaces/:workspace_id/brute_force/reuse/groups(.:format)
  // function(workspace_id, options)
  workspace_brute_force_reuse_groups_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_reuse_target => /workspaces/:workspace_id/brute_force/reuse/targets/:id(.:format)
  // function(workspace_id, id, options)
  workspace_brute_force_reuse_target_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// workspace_brute_force_reuse_targets => /workspaces/:workspace_id/brute_force/reuse/targets(.:format)
  // function(workspace_id, options)
  workspace_brute_force_reuse_targets_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_run => /workspaces/:workspace_id/brute_force/runs/:id(.:format)
  // function(workspace_id, id, options)
  workspace_brute_force_run_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"runs",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_runs => /workspaces/:workspace_id/brute_force/runs(.:format)
  // function(workspace_id, options)
  workspace_brute_force_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"runs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_credentials => /workspaces/:workspace_id/credentials(.:format)
  // function(workspace_id, options)
  workspace_credentials_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"credentials",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_loots => /workspaces/:workspace_id/loots(.:format)
  // function(workspace_id, options)
  workspace_loots_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"loots",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_module_detail => /workspaces/:workspace_id/module_details/:id(.:format)
  // function(workspace_id, id, options)
  workspace_module_detail_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"module_details",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_nexpose_data_import_runs => /workspaces/:workspace_id/nexpose/data/import_runs(.:format)
  // function(workspace_id, options)
  workspace_nexpose_data_import_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"data",false],[2,[7,"/",false],[2,[6,"import_runs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_nexpose_data_sites => /workspaces/:workspace_id/nexpose/data/sites(.:format)
  // function(workspace_id, options)
  workspace_nexpose_data_sites_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"data",false],[2,[7,"/",false],[2,[6,"sites",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_nexpose_result_exceptions => /workspaces/:workspace_id/nexpose/result/exceptions(.:format)
  // function(workspace_id, options)
  workspace_nexpose_result_exceptions_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"result",false],[2,[7,"/",false],[2,[6,"exceptions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_nexpose_result_export_runs => /workspaces/:workspace_id/nexpose/result/export_runs(.:format)
  // function(workspace_id, options)
  workspace_nexpose_result_export_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"result",false],[2,[7,"/",false],[2,[6,"export_runs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_nexpose_result_validations => /workspaces/:workspace_id/nexpose/result/validations(.:format)
  // function(workspace_id, options)
  workspace_nexpose_result_validations_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"result",false],[2,[7,"/",false],[2,[6,"validations",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_notes => /workspaces/:workspace_id/notes(.:format)
  // function(workspace_id, options)
  workspace_notes_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"notes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_related_modules => /workspaces/:workspace_id/related_modules(.:format)
  // function(workspace_id, options)
  workspace_related_modules_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"related_modules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_services => /workspaces/:workspace_id/services(.:format)
  // function(workspace_id, options)
  workspace_services_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"services",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_shared_payload_settings => /workspaces/:workspace_id/shared/payload_settings(.:format)
  // function(workspace_id, options)
  workspace_shared_payload_settings_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"shared",false],[2,[7,"/",false],[2,[6,"payload_settings",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_social_engineering_target_list_human_targets => /workspaces/:workspace_id/social_engineering/target_lists/:target_list_id/human_targets(.:format)
  // function(workspace_id, target_list_id, options)
  workspace_social_engineering_target_list_human_targets_path: Utils.route([["workspace_id",true],["target_list_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"social_engineering",false],[2,[7,"/",false],[2,[6,"target_lists",false],[2,[7,"/",false],[2,[3,"target_list_id",false],[2,[7,"/",false],[2,[6,"human_targets",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// workspace_sonar_import_fdnss_index => /workspaces/:workspace_id/sonar/imports/:import_id/fdnss(.:format)
  // function(workspace_id, import_id, options)
  workspace_sonar_import_fdnss_index_path: Utils.route([["workspace_id",true],["import_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"sonar",false],[2,[7,"/",false],[2,[6,"imports",false],[2,[7,"/",false],[2,[3,"import_id",false],[2,[7,"/",false],[2,[6,"fdnss",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// workspace_sonar_imports => /workspaces/:workspace_id/sonar/imports(.:format)
  // function(workspace_id, options)
  workspace_sonar_imports_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"sonar",false],[2,[7,"/",false],[2,[6,"imports",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_vuln => /workspaces/:workspace_id/vulns/:id(.:format)
  // function(workspace_id, id, options)
  workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_vuln_attempts => /workspaces/:workspace_id/vulns/:id/attempts(.:format)
  // function(workspace_id, id, options)
  workspace_vuln_attempts_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"attempts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_vuln_details => /workspaces/:workspace_id/vulns/:id/details(.:format)
  // function(workspace_id, id, options)
  workspace_vuln_details_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"details",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_vuln_exploits => /workspaces/:workspace_id/vulns/:id/exploits(.:format)
  // function(workspace_id, id, options)
  workspace_vuln_exploits_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"exploits",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_vulns => /workspaces/:workspace_id/vulns(.:format)
  // function(workspace_id, options)
  workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_web_vulns => /workspaces/:workspace_id/web_vulns(.:format)
  // function(workspace_id, options)
  workspace_web_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"web_vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]])}
;
      routes.configure = function(config) {
        return Utils.configure(config);
      };
      routes.config = function() {
        return Utils.config();
      };
      routes.default_serializer = function(object, prefix) {
        return Utils.default_serializer(object, prefix);
      };
      return Object.assign({
        "default": routes
      }, routes);
    }
  };

  result = Utils.make();

  if (typeof define === "function" && define.amd) {
    define([], function() {
      return result;
    });
  } else if (typeof module !== "undefined" && module !== null) {
    try {
      module.exports = result;
    } catch (error1) {
      error = error1;
      if (error.name !== 'TypeError') {
        throw error;
      }
    }
  } else {
    Utils.namespace(this, "Routes", result);
  }

  return result;

}).call(this);

