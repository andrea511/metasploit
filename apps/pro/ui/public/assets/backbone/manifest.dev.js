(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['lib/utilities/navigation', 'apps/brute_force_guess/index/index_controller', 'entities/abstract/brute_force_guess', 'css!css/brute_force'], function() {
    return this.Pro.module('BruteForceGuessApp', function(BruteForceGuessApp, App) {
      var API;
      BruteForceGuessApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "quick": "quick"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        quick: function() {
          return new BruteForceGuessApp.Index.Controller();
        }
      };
      App.addInitializer(function() {
        return new BruteForceGuessApp.Router({
          controller: API
        });
      });
      return App.addRegions({
        mainRegion: "#bruteforce-main-region"
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/brute_force_guess/index/index_views', 'apps/brute_force_guess/quick/quick_controller'], function() {
    return this.Pro.module("BruteForceGuessApp.Index", function(Index, App) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var mutationModel, payloadModel, show, taskChain,
            _this = this;
          _.defaults(options, {
            show: true,
            taskChain: false
          });
          show = options.show, taskChain = options.taskChain, payloadModel = options.payloadModel, mutationModel = options.mutationModel;
          this.layout = new Index.Layout();
          this.setMainView(this.layout);
          this.listenTo(this._mainView, 'show', function() {
            _this.quickBruteforce = new Pro.BruteForceGuessApp.Quick.Controller({
              taskChain: taskChain,
              payloadModel: payloadModel,
              mutationModel: mutationModel
            });
            return _this.show(_this.quickBruteforce, {
              region: _this._mainView.contentRegion
            });
          });
          if (show) {
            return this.show(this._mainView);
          }
        };

        Controller.prototype.getPayloadSettings = function() {
          return this.quickBruteforce.payloadModel;
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'apps/brute_force_guess/index/templates/index_layout'], function() {
    return this.Pro.module('BruteForceGuessApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      return Index.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('brute_force_guess/index/index_layout');

        Layout.prototype.regions = {
          contentRegion: '#content-region'
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_guess/index/templates/index_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="content-region"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/brute_force_guess/quick/quick_views', 'entities/brute_force_guess/target', 'entities/brute_force_guess/mutation_options', 'lib/components/modal/modal_controller', 'lib/shared/payload_settings/payload_settings_controller', 'lib/components/breadcrumbs/breadcrumbs_controller', 'lib/components/file_input/file_input_controller', 'lib/components/tooltip/tooltip_controller'], function() {
    return this.Pro.module("BruteForceGuessApp.Quick", function(Quick, App) {
      return Quick.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this._updateTargetCount = __bind(this._updateTargetCount, this);

          this._configModel = __bind(this._configModel, this);

          this._listenToMainView = __bind(this._listenToMainView, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var taskChain;
          _.defaults(options, {
            taskChain: false
          });
          taskChain = options.taskChain, this.payloadModel = options.payloadModel, this.mutationModel = options.mutationModel;
          this.layout = new Quick.Layout({
            model: new Backbone.Model({
              taskChain: taskChain
            })
          });
          this.setMainView(this.layout);
          return this._listenToMainView();
        };

        Controller.prototype.restoreUIState = function(opts) {
          if (opts == null) {
            opts = {};
          }
          this.targetsView.restoreUIState();
          return this.credsView.restoreUIState(opts);
        };

        Controller.prototype.useLastUploaded = function(filePath) {
          var fileName;
          fileName = filePath.split('/').pop();
          return this.credsView.useLastUploaded(fileName);
        };

        Controller.prototype._listenToMainView = function() {
          this.listenTo(this._mainView, 'show', function() {
            this._initViews();
            this._listenToTargetsView();
            this._listenToCredsView();
            this._listenToPayloadSettings();
            this._listenToMutationOptions();
            this._listenToTooltips();
            this._initCrumbComponent();
            return this._showViews();
          });
          return this.listenTo(this._mainView, 'launch:clicked', function() {
            var view,
              _this = this;
            if (localStorage.getItem("Launch Bruteforce") !== "false") {
              view = new Quick.ConfirmationView({
                model: new Backbone.Model({
                  combo_count: this._getComboCount(),
                  fuzz: this.credsView.isFuzzed()
                })
              });
              App.execute('showModal', view, {
                modal: {
                  title: 'Launch Bruteforce',
                  description: '',
                  width: 400,
                  height: 220,
                  showAgainOption: true
                },
                buttons: [
                  {
                    name: 'No',
                    "class": 'close'
                  }, {
                    name: 'Yes',
                    "class": 'btn primary'
                  }
                ]
              });
              return this.listenTo(view, 'launch', function() {
                return _this._launchBruteForce();
              });
            } else {
              return this._launchBruteForce();
            }
          });
        };

        Controller.prototype._launchBruteForce = function() {
          var config, csrf_param, csrf_token, values_with_csrf,
            _this = this;
          Pro.execute('loadingOverlay:show');
          config = this._configModel();
          csrf_param = $('meta[name=csrf-param]').attr('content');
          csrf_token = $('meta[name=csrf-token]').attr('content');
          values_with_csrf;

          values_with_csrf = _.extend({}, config.toJSON());
          values_with_csrf[csrf_param] = csrf_token;
          if (this._mainView.credsRegion.currentView.ui.fileInput.val() !== '') {
            return config.save({}, {
              iframe: true,
              files: this._mainView.credsRegion.currentView.ui.fileInput,
              data: values_with_csrf,
              complete: function(data) {
                data = $.parseJSON(data.responseText);
                if (data.success === true) {
                  return window.location = data.redirect_to;
                } else {
                  Pro.execute('loadingOverlay:hide');
                  return _this._mainView.showErrors(data.errors);
                }
              }
            });
          } else {
            return config.save({}, {
              success: function(model, response, options) {
                return window.location = response.redirect_to;
              },
              error: function(model, response, options) {
                Pro.execute('loadingOverlay:hide');
                return _this._mainView.showErrors(response.responseJSON.errors);
              }
            });
          }
        };

        Controller.prototype.validateBruteForce = function(callback) {
          var config,
            _this = this;
          config = this._configModel();
          return config.save({
            validate_only: true
          }, {
            success: function(model, response, options) {
              return typeof callback === "function" ? callback(model, response, options) : void 0;
            },
            error: function(model, response, options) {
              return typeof callback === "function" ? callback(model, response, options) : void 0;
            }
          });
        };

        Controller.prototype._configModel = function() {
          var mergedHash, _ref, _ref1;
          mergedHash = _.extend(Backbone.Syphon.serialize(this._mainView, {
            exclude: ["quick_bruteforce[file]"]
          }), (_ref = this.payloadModel) != null ? _ref.toJSON() : void 0);
          _.extend(mergedHash, (_ref1 = this.mutationModel) != null ? _ref1.toJSON() : void 0);
          return Pro.request("new:brute_force_guess_form:entity", mergedHash);
        };

        Controller.prototype._initViews = function() {
          var target;
          target = App.request('bruteForceGuess:target:entities', {});
          this.targetsView = new Quick.TargetsView({
            model: target
          });
          this.credsView = new Quick.CredsView({
            model: new Backbone.Model({
              workspace_cred_count: gon.workspace_cred_count,
              is_task_chain: this._mainView.model.attributes.taskChain
            })
          });
          return this.optionsView = new Quick.OptionsView();
        };

        Controller.prototype._initCrumbComponent = function() {
          this.crumbsController = App.request('crumbs:component', {
            crumbs: [
              {
                title: 'TARGETS',
                selectable: false
              }, {
                title: 'CREDENTIALS',
                selectable: false
              }, {
                title: 'OPTIONS',
                selectable: false
              }
            ]
          });
          return this.crumbsCollection = this.crumbsController.crumbsCollection;
        };

        Controller.prototype._listenToTooltips = function() {
          return this.listenTo(this.optionsView, 'show', function() {
            var blacklist_addresses_tip, mutation_tip, overall_tip, service_tip, session_tip, target_addresses_tip, time_tip;
            target_addresses_tip = App.request('tooltip:component', {
              title: "Target Addresses",
              content: "To specify the target hosts, you can enter a single IP address, an address range, or a\nCIDR notation.You must use a newline to separate each entry.\n\nFor example:\n\n192.168.1.0/24\n192.169.1.1\n192.169.2.1-255\n\nIf you do not enter any hosts in the Target addresses field, all hosts in the project will\nbe selected except for the ones listed in the Excluded addresses field."
            });
            blacklist_addresses_tip = App.request('tooltip:component', {
              title: "Excluded Addresses",
              content: "Enter a single IP address, an address range, or a CIDR notation. Use a new line to\nseparate each entry.\n\nExample:\n10.20.37.60\n10.20.37.0/24"
            });
            time_tip = App.request('tooltip:component', {
              title: 'Interval',
              content: 'Sets the amount of time that Bruteforce should wait between login attempts.'
            });
            service_tip = App.request('tooltip:component', {
              title: 'Service Timeout',
              content: 'Sets the timeout, in seconds, for each target.'
            });
            overall_tip = App.request('tooltip:component', {
              title: 'Overall Timeout',
              content: "Sets the timeout limit for how long the Bruteforce task can run in its entirety.\nYou can specify the timeout in the following format: HH:MM:SS. To set no timeout\nlimit, leave the fields blank."
            });
            mutation_tip = App.request('tooltip:component', {
              title: 'Mutation',
              content: "Mutations can be used to create permutations of a password, which enables you to\nbuild a larger wordlist based on a small set of passwords. Mutations can be used to\nadd numbers and special characters to a password, toggle the casing of letters, and\ncontrol the length of a password."
            });
            session_tip = App.request('tooltip:component', {
              title: 'Session',
              content: "If enabled, Bruteforce will attempt to obtain a session when there is a successful\nlogin attempt to MSSQL, MySQL, PostgreSQL, SMB, SSH, telnet, WinRM, and HTTP."
            });
            this.show(target_addresses_tip, {
              region: this.targetsView.targetAddressesTooltipRegion
            });
            this.show(blacklist_addresses_tip, {
              region: this.targetsView.blacklistAddressesTooltipRegion
            });
            this.show(time_tip, {
              region: this.optionsView.timeTooltipRegion
            });
            this.show(service_tip, {
              region: this.optionsView.serviceTimeoutTooltipRegion
            });
            this.show(overall_tip, {
              region: this.optionsView.overallTimeoutTooltipRegion
            });
            this.show(mutation_tip, {
              region: this.optionsView.mutationTooltipRegion
            });
            return this.show(session_tip, {
              region: this.optionsView.sessionTooltipRegion
            });
          });
        };

        Controller.prototype._listenToTargetsView = function() {
          var _this = this;
          this.listenTo(this.targetsView, 'show', function() {
            if (gon.host_ips != null) {
              return this.targetsView.populateAddresses(_.map(gon.host_ips, function(host_ip) {
                return host_ip.address;
              }));
            }
          });
          this.listenTo(this.targetsView, 'countTargets', function() {
            var Model, data, model;
            data = Backbone.Syphon.serialize(this._mainView);
            Model = Backbone.Model.extend({
              url: function() {
                return Routes.target_count_workspace_brute_force_guess_runs_path(WORKSPACE_ID);
              }
            });
            model = new Model(data);
            return model.save().done(this._updateTargetCount);
          });
          return this.listenTo(this.targetsView, 'targetCount:update', function() {
            return _this._toggleLaunch();
          });
        };

        Controller.prototype._listenToPayloadSettings = function() {
          return this.listenTo(this.optionsView, 'payloadSettings:show', function(event) {
            var _ref,
              _this = this;
            if ((_ref = this.payloadModel) == null) {
              this.payloadModel = App.request('shared:payloadSettings:entities', {});
            }
            if (event.view.isPayloadSettingsSelected()) {
              return App.execute('showModal', new Pro.Shared.PayloadSettings.Controller({
                model: this.payloadModel
              }), {
                modal: {
                  title: 'Payload Settings',
                  description: '',
                  width: 400,
                  height: 330
                },
                buttons: [
                  {
                    name: 'Close',
                    "class": 'close'
                  }, {
                    name: 'OK',
                    "class": 'btn primary'
                  }
                ],
                closeCallback: function() {
                  if (!_this.payloadModel.get('validated')) {
                    return _this.optionsView.deselectPayload();
                  }
                },
                loading: true
              });
            }
          });
        };

        Controller.prototype._listenToMutationOptions = function() {
          return this.listenTo(this.optionsView, 'mutationOptions:show', function(event) {
            var _ref;
            if ((_ref = this.mutationModel) == null) {
              this.mutationModel = App.request('mutationOptions:entities', {});
            }
            if (event.view.isMutationCheckboxSelected()) {
              this.credsView.showMutationLabel();
              return App.execute('showModal', new Quick.MutationView({
                model: this.mutationModel
              }), {
                modal: {
                  title: 'Add Mutation Rules',
                  description: '',
                  width: 400,
                  height: 330
                },
                buttons: [
                  {
                    name: 'Close',
                    "class": 'close'
                  }, {
                    name: 'OK',
                    "class": 'btn primary'
                  }
                ],
                loading: false
              });
            } else {
              return this.credsView.hideMutationLabel();
            }
          });
        };

        Controller.prototype._listenToCredsView = function() {
          var _this = this;
          this.listenTo(this.credsView, 'show', function() {
            this.file_input = App.request('file_input:component', {
              name: 'quick_bruteforce[file]'
            });
            this.listenTo(this.file_input._mainView, "file:changed", function(obj) {
              this.credsView.fileChanged();
              return this.credsView.showFileCancel(true);
            });
            this.listenTo(this.file_input._mainView, "show", function() {
              return this.credsView.bindUIElements();
            });
            return this.show(this.file_input, {
              region: this.credsView.fileUploadRegion
            });
          });
          this.listenTo(this.credsView, 'fileInput:clear', function() {
            this.file_input.clear();
            this.credsView.resetFileCount();
            return this.credsView.showFileCancel(false);
          });
          return this.listenTo(this.credsView, 'credCount:update', function() {
            return _this._toggleLaunch();
          });
        };

        Controller.prototype._updateTargetCount = function(response) {
          return this.targetsView.setTargetCount(response.count);
        };

        Controller.prototype._getComboCount = function() {
          return this.targetsView.targetCount * this.credsView.getComboCount();
        };

        Controller.prototype._getFactoryDefaults = function() {
          return this.targetsView.targetCount > 0 && this.credsView.factoryDefaultChecked();
        };

        Controller.prototype._showViews = function() {
          this.show(this.crumbsController, {
            region: this._mainView.breadcrumbRegion
          });
          this.show(this.targetsView, {
            region: this._mainView.targetsRegion
          });
          this.show(this.credsView, {
            region: this._mainView.credsRegion
          });
          return this.show(this.optionsView, {
            region: this._mainView.optionsRegion
          });
        };

        Controller.prototype._toggleLaunch = function() {
          if (this._getComboCount() > 0 || this._getFactoryDefaults()) {
            return this._mainView.enableLaunch();
          } else {
            return this._mainView.disableLaunch();
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_layout', 'base_view', 'base_itemview', 'apps/brute_force_guess/quick/templates/quick_layout', 'apps/brute_force_guess/quick/templates/mutation_view', 'apps/brute_force_guess/quick/templates/targets_view', 'apps/brute_force_guess/quick/templates/creds_view', 'apps/brute_force_guess/quick/templates/options_view', 'apps/brute_force_guess/quick/templates/confirmation_view', 'apps/brute_force_guess/quick/templates/cred_limit_view', 'lib/concerns/views/text_area_limit'], function() {
    return this.Pro.module('BruteForceGuessApp.Quick', function(Quick, App, Backbone, Marionette, $, _) {
      var CHUNK_SIZE;
      CHUNK_SIZE = 20000;
      Quick.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('brute_force_guess/quick/quick_layout');

        Layout.prototype.ui = {
          launch: '.launch-container a'
        };

        Layout.prototype.regions = {
          targetsRegion: '#targets-region',
          credsRegion: "#creds-region",
          optionsRegion: "#options-region",
          breadcrumbRegion: ".row.breadcrumbs"
        };

        Layout.prototype.triggers = {
          'click @ui.launch': 'launch:clicked'
        };

        Layout.prototype.enableLaunch = function() {
          return this.ui.launch.removeClass('disabled');
        };

        Layout.prototype.disableLaunch = function() {
          return this.ui.launch.addClass('disabled');
        };

        Layout.prototype.showErrors = function(errors) {
          var _this = this;
          $('.error', this.el).remove();
          return _.each(errors, function(v, k) {
            if (typeof v === "object") {
              return _this._renderError(v, k);
            }
          });
        };

        Layout.prototype._renderError = function(obj, key) {
          var _this = this;
          return _.each(obj, function(v, k) {
            var $msg;
            if (typeof v === "object" && (v != null)) {
              return _this._renderError(v, "" + key + "[" + k + "]");
            } else {
              if (v != null) {
                if (typeof k === "number") {
                  $msg = $('<div />', {
                    "class": 'error'
                  }).text(v);
                  $("[name='" + key + "']", _this.el).addClass('invalid').after($msg);
                  return $("[name='" + key + "[]']", _this.el).first().addClass('invalid').after($msg);
                }
              }
            }
          });
        };

        return Layout;

      })(App.Views.Layout);
      Quick.TargetsView = (function(_super) {

        __extends(TargetsView, _super);

        function TargetsView() {
          return TargetsView.__super__.constructor.apply(this, arguments);
        }

        TargetsView.prototype.template = TargetsView.prototype.templatePath('brute_force_guess/quick/targets_view');

        TargetsView.prototype.ui = {
          targetRadio: '[name="quick_bruteforce[targets][type]"]:checked',
          targetText: '#manual-target-entry',
          addresses: '.addresses',
          blacklistTargetText: '#manual-target-entry-blacklist',
          allServices: '.all-services',
          services: '.services input:not(.all-services)',
          serviceInputs: '.services input',
          targetCount: '.target-count',
          enterTargetAddresses: 'input.manual-hosts'
        };

        TargetsView.prototype.regions = {
          targetAddressesTooltipRegion: '.target-addresses-tooltip-region',
          blacklistAddressesTooltipRegion: '.blacklist-addresses-tooltip-region'
        };

        TargetsView.prototype.events = {
          'change @ui.targetRadio': '_showHideTargetText',
          'change @ui.allServices': '_selectDeselectServices'
        };

        TargetsView.prototype.triggers = {
          'focusout @ui.targetText': 'countTargets',
          'focusout @ui.blacklistTargetText': 'countTargets',
          'change @ui.serviceInputs': 'countTargets'
        };

        TargetsView.prototype.initialize = function() {
          return this.targetCount = 0;
        };

        TargetsView.prototype.setTargetCount = function(count) {
          this.targetCount = count;
          this.ui.targetCount.html(count);
          return this.trigger('targetCount:update');
        };

        TargetsView.prototype.restoreUIState = function() {
          this.bindUIElements();
          return this.ui.targetRadio.trigger('change');
        };

        TargetsView.prototype.populateAddresses = function(addresses) {
          var _this = this;
          _.each(addresses, function(address) {
            return _this.ui.targetText.val(_this.ui.targetText.val() + address + '\n');
          });
          this.ui.enterTargetAddresses.prop('checked', 'checked');
          return this.ui.enterTargetAddresses.trigger('change');
        };

        TargetsView.prototype._showHideTargetText = function(e) {
          this.trigger('countTargets');
          if ($(e.target).val() === "all") {
            return this.ui.addresses.hide();
          } else {
            return this.ui.addresses.show();
          }
        };

        TargetsView.prototype._selectDeselectServices = function(e) {
          if ($(e.target).prop('checked')) {
            return this.ui.services.prop('checked', true);
          } else {
            return this.ui.services.prop('checked', false);
          }
        };

        return TargetsView;

      })(App.Views.Layout);
      Quick.CredsView = (function(_super) {

        __extends(CredsView, _super);

        function CredsView() {
          this._terminateCred = __bind(this._terminateCred, this);

          this._countCreds = __bind(this._countCreds, this);

          this._showLoading = __bind(this._showLoading, this);

          this._focusOutTextArea = __bind(this._focusOutTextArea, this);
          return CredsView.__super__.constructor.apply(this, arguments);
        }

        CredsView.prototype.template = CredsView.prototype.templatePath('brute_force_guess/quick/creds_view');

        CredsView.prototype.ui = {
          import_cred_pairs: '[name="quick_bruteforce[creds][add_import_cred_pairs]"]',
          import_cred_pairs_text: '.manual-cred-pair',
          import_workspace_creds: '[name="quick_bruteforce[creds][import_workspace_creds]"]',
          fileInput: '#file_input',
          textArea: '#manual-cred-pair-entry',
          textAreaCount: '[name="text_area_count"]',
          textAreaDisabled: '[name="text_area_status"]',
          importPairCount: '[name="import_pair_count"]',
          filePairCount: '[name="file_pair_count"]',
          cloneFileWarning: '[name="clone_file_warning"]',
          credCount: '.cred-count',
          countFuzz: '.count .fuzz',
          lastUploaded: '.last-uploaded',
          useLastUploaded: '[name="quick_bruteforce[use_last_uploaded]"]',
          useFileContents: '[name="quick_bruteforce[creds][import_cred_pairs][use_file_contents]"]',
          mutationLabel: '.mutation-label',
          defaultsLabel: '.defaults-label',
          fileCancel: '.cancel.file-input',
          factoryDefault: '[name="quick_bruteforce[creds][factory_defaults]"]',
          blankAsPassword: '[name="quick_bruteforce[creds][import_cred_pairs][blank_as_password]"]',
          usernameAsPassword: '[name="quick_bruteforce[creds][import_cred_pairs][username_as_password]"]'
        };

        CredsView.prototype.events = {
          'change @ui.import_cred_pairs': '_showHideCredText',
          'change @ui.import_workspace_creds': '_import_workspace_creds',
          'keyup @ui.textArea': '_credChanged',
          'change @ui.blankAsPassword': '_changeRule',
          'change @ui.usernameAsPassword': '_changeRule',
          'change @ui.factoryDefault': '_changeFactoryDefault'
        };

        CredsView.prototype.triggers = {
          'click @ui.fileCancel': 'fileInput:clear'
        };

        CredsView.prototype.regions = {
          fileUploadRegion: '.file-upload-region'
        };

        CredsView.include('TextAreaLimit');

        CredsView.prototype.initialize = function() {
          this.file_cred_count = 0;
          this.text_area_count = 0;
          this.shown_cred_count = 0;
          this.workspace_cred_count = 0;
          this.import_cred_pairs_count = 0;
          this.restored_import_cred_pairs_count = 0;
          this.is_task_chain = this.model.get('is_task_chain');
          return this.debouncedChangeEvent = _.debounce(this._countCreds, 300);
        };

        CredsView.prototype.onShow = function() {
          this._bindTextArea(this.ui.textArea, 100, Quick.CredLimitView);
          if (!this.is_task_chain) {
            return $('.cred-file-upload-region').css('display', 'inline-block');
          }
        };

        CredsView.prototype.onDestroy = function() {
          return this._unbindTextArea(this.ui.textArea);
        };

        CredsView.prototype.hideMutationLabel = function() {
          this._fuzzComboCount(false);
          return this.ui.mutationLabel.css('display', 'none');
        };

        CredsView.prototype.showMutationLabel = function() {
          this._fuzzComboCount();
          return this.ui.mutationLabel.css('display', 'inline-block');
        };

        CredsView.prototype.showFactoryDefaultsLabel = function() {
          this._fuzzComboCount();
          return this.ui.defaultsLabel.css('display', 'inline-block');
        };

        CredsView.prototype.hideFactoryDefaultsLabel = function() {
          this._fuzzComboCount(false);
          return this.ui.defaultsLabel.css('display', 'none');
        };

        CredsView.prototype.factoryDefaultChecked = function() {
          return this.ui.factoryDefault.prop('checked');
        };

        CredsView.prototype.showFileCancel = function(bool) {
          if (bool == null) {
            bool = true;
          }
          if (bool) {
            return this.ui.fileCancel.css('visibility', 'visible');
          } else {
            this.ui.fileCancel.css('visibility', 'hidden');
            return $('.error', this.el).remove();
          }
        };

        CredsView.prototype.useLastUploaded = function(fileName) {
          this.lastUploaded = fileName;
          this.ui.lastUploaded.show();
          this.ui.lastUploaded.text("Last Uploaded: " + fileName);
          return this.ui.useLastUploaded.val(fileName);
        };

        CredsView.prototype.restoreUIState = function(opts) {
          if (opts == null) {
            opts = {};
          }
          if (this.ui.cloneFileWarning.val() === "true") {
            this._showFileWarning();
            this.ui.cloneFileWarning.val(false);
          }
          this.ui.textArea.trigger('focusout');
          if ($('[name="quick_bruteforce[options][mutation]"]').prop("checked")) {
            this.showMutationLabel();
          }
          if (this.ui.factoryDefault.prop("checked")) {
            this.showFactoryDefaultsLabel();
          }
          this.ui.import_cred_pairs.trigger('change');
          this.ui.import_workspace_creds.trigger('change');
          if (this.ui.textAreaDisabled.val() === 'true') {
            this._disableTextArea();
          }
          this.restoreLastUploaded();
          if (opts.restoreFileInput) {
            return this.fileChanged();
          } else {
            return this.restoreImportCount();
          }
        };

        CredsView.prototype.restoreImportCount = function() {
          this.restored_import_cred_pairs_count = parseInt(this.ui.importPairCount.val()) || 0;
          this.file_cred_count = parseInt(this.ui.filePairCount.val()) || 0;
          return this._updateCredCount(this.restored_import_cred_pairs_count + this.workspace_cred_count);
        };

        CredsView.prototype.restoreLastUploaded = function() {
          if (this.ui.useLastUploaded.val() !== '') {
            return this.useLastUploaded(this.ui.useLastUploaded.val());
          } else {
            return this.ui.lastUploaded.hide();
          }
        };

        CredsView.prototype.getComboCount = function() {
          return parseInt(this.ui.credCount.html());
        };

        CredsView.prototype.resetFileCount = function() {
          this.file_cred_count = 0;
          return this._countCreds();
        };

        CredsView.prototype._changeFactoryDefault = function(e) {
          if ($(e.target).prop('checked')) {
            return this.showFactoryDefaultsLabel();
          } else {
            return this.hideFactoryDefaultsLabel();
          }
        };

        CredsView.prototype.isFuzzed = function() {
          return parseInt(this.ui.countFuzz.data('count')) > 0;
        };

        CredsView.prototype._fuzzComboCount = function(show) {
          if (show == null) {
            show = true;
          }
          if (show) {
            this.ui.countFuzz.data('count', parseInt(this.ui.countFuzz.data('count') || 0) + 1);
            this.ui.countFuzz.show();
          } else {
            this.ui.countFuzz.data('count', parseInt(this.ui.countFuzz.data('count') || 0) - 1);
            if (parseInt(this.ui.countFuzz.data('count')) === 0) {
              this.ui.countFuzz.hide();
            }
          }
          return this.trigger('credCount:update');
        };

        CredsView.prototype._credChanged = function() {
          return this.debouncedChangeEvent();
        };

        CredsView.prototype._focusOutTextArea = function(e) {
          return this._terminateCred(e);
        };

        CredsView.prototype._import_workspace_creds = function(e) {
          if ($(e.target).prop('checked')) {
            this.workspace_cred_count = this.model.get('workspace_cred_count');
            return this._updateCredCount(this.import_cred_pairs_count + this.workspace_cred_count);
          } else {
            this.workspace_cred_count = 0;
            return this._updateCredCount(this.import_cred_pairs_count);
          }
        };

        CredsView.prototype._showFileWarning = function() {
          $(".file-upload-region label", this.el).css({
            'border-color': 'red'
          });
          $(".file-upload-region span", this.el).css({
            'border-color': 'red',
            'border-left-color': '#666'
          });
          $(".file-upload-region").append("<div class='error' style='color:red;'>Please re-select file</div>");
          return $(".columns.small-12>.errors").replaceWith('<div class="errors" style="display: block;">The file you selected cannot be cloned. Please re-select the file.</div>');
        };

        CredsView.prototype._showHideCredText = function(e) {
          if ($(e.target).prop('checked')) {
            this.import_cred_pairs_count = this.file_cred_count + this.text_area_count + this.restored_import_cred_pairs_count;
            this._updateCredCount(this.import_cred_pairs_count + this.workspace_cred_count);
            return this.ui.import_cred_pairs_text.show();
          } else {
            this.import_cred_pairs_count = 0;
            this._updateCredCount(this.workspace_cred_count);
            return this.ui.import_cred_pairs_text.hide();
          }
        };

        CredsView.prototype.clearLastUploaded = function() {
          this.ui.lastUploaded.hide();
          return $('.error', this.el).remove();
        };

        CredsView.prototype._disableTextArea = function() {
          this.ui.textAreaDisabled.val(true);
          this.ui.textArea.addClass('disabled');
          return this.ui.textArea.prop('disabled', true);
        };

        CredsView.prototype._enableTextArea = function() {
          this.ui.textAreaDisabled.val(false);
          this.ui.textArea.removeClass('disabled');
          return this.ui.textArea.prop('disabled', false);
        };

        CredsView.prototype.fileChanged = function() {
          var file;
          this.bindUIElements();
          this.clearLastUploaded();
          this.file_cred_count = 0;
          file = this.ui.fileInput[0].files[0];
          if ((file != null) && file.name.match(/.txt/)) {
            this.ui.cloneFileWarning.val(true);
            return this._parseCreds(file);
          } else {
            return this._countCreds();
          }
        };

        CredsView.prototype._parseCreds = function(file) {
          var blob, byte, chunk_reader, file_size, file_type, _i, _results;
          file_size = file.size;
          file_type = file.type;
          _results = [];
          for (byte = _i = 0; 0 <= file_size ? _i <= file_size : _i >= file_size; byte = _i += CHUNK_SIZE) {
            blob = file.slice(byte, byte + CHUNK_SIZE);
            chunk_reader = new FileReader();
            chunk_reader.onloadstart = this._showLoading;
            chunk_reader.onloadend = this._countCreds;
            _results.push(chunk_reader.readAsText(blob));
          }
          return _results;
        };

        CredsView.prototype._showLoading = function() {
          return this.ui.textArea.addClass('tab-loading');
        };

        CredsView.prototype._changeRule = function() {
          this.fileChanged();
          return this._countCreds();
        };

        CredsView.prototype._countCreds = function(e) {
          this.ui.textArea.removeClass('tab-loading');
          if (e != null) {
            this.file_cred_count = this.file_cred_count + this._textAreaCount(e.target.result);
          } else {
            this.text_area_count = this._textAreaCount(this.ui.textArea.val());
          }
          this.import_cred_pairs_count = this.file_cred_count + this.text_area_count;
          this.restored_import_cred_pairs_count = 0;
          this.ui.importPairCount.val(this.import_cred_pairs_count);
          this.ui.textAreaCount.val(this.text_area_count);
          this.ui.filePairCount.val(this.file_cred_count);
          return this._updateCredCount(this.import_cred_pairs_count + this.workspace_cred_count);
        };

        CredsView.prototype._textAreaCount = function(val) {
          var count, lines,
            _this = this;
          count = 0;
          lines = val.match(/(([^\s]+(([\u0020]+[^\s]+)+)))|([^\s]+)/g);
          _.each(lines, function(elem) {
            var c, i, inQuote, inToken, passwordCount, _i, _ref;
            passwordCount = -1;
            inQuote = 0;
            inToken = 0;
            for (i = _i = 0, _ref = elem.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              c = elem[i];
              if (inQuote === 1) {
                if (c === "\"") {
                  inQuote = 0;
                }
                continue;
              }
              if (c === " " || c === "\t") {
                inToken = 0;
                continue;
              }
              if (inToken === 0) {
                inToken = 1;
                passwordCount = passwordCount + 1;
              }
              if (c === "\"") {
                inQuote = 1;
              }
            }
            if (_this.ui.usernameAsPassword.prop('checked')) {
              passwordCount = passwordCount + 1;
            }
            if (_this.ui.blankAsPassword.prop('checked')) {
              passwordCount = passwordCount + 1;
            }
            return count = count + passwordCount;
          });
          return count;
        };

        CredsView.prototype._terminateCred = function(e) {
          var val;
          val = $(e.target).val();
          if (val.length > 2 && val.substring(val.length - 1, val.length) !== "\n") {
            this.ui.textArea.val(val + '\n');
            return this.ui.textArea.trigger('keyup');
          }
        };

        CredsView.prototype._updateCredCount = function(count) {
          this.ui.credCount.html(_.escape(count));
          return this.trigger('credCount:update');
        };

        return CredsView;

      })(App.Views.Layout);
      Quick.OptionsView = (function(_super) {

        __extends(OptionsView, _super);

        function OptionsView() {
          return OptionsView.__super__.constructor.apply(this, arguments);
        }

        OptionsView.prototype.template = OptionsView.prototype.templatePath('brute_force_guess/quick/options_view');

        OptionsView.prototype.ui = {
          form: 'form',
          payloadCheckBox: 'input[name="quick_bruteforce[options][payload_settings]"]',
          mutationCheckBox: 'input[name="quick_bruteforce[options][mutation]"]',
          hour: 'input[name="quick_bruteforce[options][overall_timeout][hour]"]',
          minutes: 'input[name="quick_bruteforce[options][overall_timeout][minutes]"]',
          seconds: 'input[name="quick_bruteforce[options][overall_timeout][seconds]"]',
          serviceTimeout: 'input[name="quick_bruteforce[options][service_timeout]"]'
        };

        OptionsView.prototype.regions = {
          overallTimeoutTooltipRegion: '.overall-timeout-tooltip-region',
          serviceTimeoutTooltipRegion: '.service-timeout-tooltip-region',
          timeTooltipRegion: '.time-tooltip-region',
          mutationTooltipRegion: '.mutation-tooltip-region',
          sessionTooltipRegion: '.session-tooltip-region'
        };

        OptionsView.prototype.events = {
          'input @ui.hour': '_parseOptions',
          'input @ui.minutes': '_parseOptions',
          'input @ui.seconds': '_parseOptions',
          'input @ui.serviceTimeout': '_parseOptions'
        };

        OptionsView.prototype.triggers = {
          'change @ui.payloadCheckBox ': 'payloadSettings:show',
          'change @ui.mutationCheckBox': 'mutationOptions:show'
        };

        OptionsView.prototype.deselectPayload = function() {
          return this.ui.payloadCheckBox.prop('checked', false);
        };

        OptionsView.prototype.isPayloadSettingsSelected = function() {
          return this.ui.payloadCheckBox.prop('checked');
        };

        OptionsView.prototype.isMutationCheckboxSelected = function() {
          return this.ui.mutationCheckBox.prop('checked');
        };

        OptionsView.prototype._parseOptions = function(e) {
          return $(e.target).val($(e.target).val().replace(/[^0-9]/g, ''));
        };

        return OptionsView;

      })(App.Views.Layout);
      Quick.ConfirmationView = (function(_super) {

        __extends(ConfirmationView, _super);

        function ConfirmationView() {
          return ConfirmationView.__super__.constructor.apply(this, arguments);
        }

        ConfirmationView.prototype.template = ConfirmationView.prototype.templatePath('brute_force_guess/quick/confirmation_view');

        ConfirmationView.prototype.className = 'confirmation-view';

        ConfirmationView.prototype.onFormSubmit = function() {
          var defer, formSubmit;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          defer.resolve();
          this.trigger("launch");
          return formSubmit;
        };

        return ConfirmationView;

      })(App.Views.ItemView);
      Quick.MutationView = (function(_super) {

        __extends(MutationView, _super);

        function MutationView() {
          return MutationView.__super__.constructor.apply(this, arguments);
        }

        MutationView.prototype.template = MutationView.prototype.templatePath('brute_force_guess/quick/mutation_view');

        MutationView.prototype.className = 'mutation-options';

        MutationView.prototype.onRender = function() {
          return Backbone.Syphon.deserialize(this, this.model.toJSON());
        };

        MutationView.prototype.onFormSubmit = function() {
          var defer, formSubmit;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          this._serializeForm();
          defer.resolve();
          return defer;
        };

        MutationView.prototype._serializeForm = function() {
          return this.model.set(Backbone.Syphon.serialize(this));
        };

        return MutationView;

      })(App.Views.ItemView);
      return Quick.CredLimitView = (function(_super) {

        __extends(CredLimitView, _super);

        function CredLimitView() {
          return CredLimitView.__super__.constructor.apply(this, arguments);
        }

        CredLimitView.prototype.template = CredLimitView.prototype.templatePath('brute_force_guess/quick/cred_limit_view');

        CredLimitView.prototype.className = 'cred-limit-view';

        CredLimitView.prototype.onFormSubmit = function() {
          var defer, formSubmit;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          defer.resolve();
          defer;

          return formSubmit;
        };

        return CredLimitView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_guess/quick/templates/confirmation_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="row">\n  <div class="columns large-12">\n    Bruteforce will attempt ');
      
        __out.push(__sanitize(this.combo_count));
      
        __out.push(__sanitize(this.fuzz ? '+' : void 0));
      
        __out.push(' possible combinations, which can\n    potentially cause system lockouts.\n  </div>\n</div>\n\n<div class="row">\n  <div class="columns large-12">\n    <span>Do you wish to continue?</span>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_guess/quick/templates/cred_limit_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<p>\n  You have entered more than 100 credential pairs. Only the first 100 credential pairs will be added.\n  If you want to add more than 100 credential pairs, you must import a credentials file.\n</p>\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_guess/quick/templates/creds_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<fieldset>\n\n\n  <div class="columns large-12 count">\n    <span class="cred-count">0</span><span class="fuzz">+</span> possible combinations\n  </div>\n\n  <div class="columns large-12">\n    <label>\n      <input type="checkbox" name="quick_bruteforce[creds][import_workspace_creds]" />\n      All credentials in this project\n    </label>\n  </div>\n\n  <div class="columns large-12">\n    <label>\n      <input type="checkbox" name="quick_bruteforce[creds][factory_defaults]" />\n      Attempt factory defaults\n    </label>\n  </div>\n\n  <div class="columns large-12">\n    <label>\n      <input type="checkbox" name="quick_bruteforce[creds][add_import_cred_pairs]"/>\n      Add/Import credential pairs\n    </label>\n  </div>\n\n  <div class="columns large-12">\n    <div class="mutation-label"><span>Mutation selected</span></div>\n    <div class="defaults-label"><span>Factory defaults selected</span></div>\n  </div>\n\n  <div class="columns large-12 space manual-cred-pair" style="display: none;">\n    <div class="row">\n      <div class="columns large-12">\n        Credentials <span class="line-max">(100 lines max)</span>\n      </div>\n\n      <div class="columns large-12">\n        <label style="display: none" for="manual-cred-pair-entry">Manual Cred Pairs</label>\n        <textarea id="manual-cred-pair-entry" name="quick_bruteforce[creds][import_cred_pairs][data]" placeholder="Enter a space and new line delimited list of credential pairs.\n\nExample:\nusername pass\nusername pass1 pass2\nrealm\\username pass\nrealm\\username pass1 pass2\n"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <div class="columns large-12 space">\n    <div class="row manual-cred-pair" style="display: none;">\n      <div class="columns large-12">\n        <input type="hidden" name=\'quick_bruteforce[creds][import_cred_pairs][use_file_contents]\'>\n        <input type=\'hidden\' name=\'quick_bruteforce[use_last_uploaded]\'>\n        <input type=\'hidden\' name=\'text_area_status\'>\n        <input type=\'hidden\' name=\'import_pair_count\'>\n        <input type="hidden" name=\'text_area_count\'>\n        <input type="hidden" name="file_pair_count">\n        <input type="hidden" name="clone_file_warning">\n        <div class="last-uploaded" style="display: none;">\n        </div>\n      </div>\n\n      <div class="cred-file-upload-region">\n          <div class="columns large-12">\n            Import Credentials from a file:\n          </div>\n\n          <div class="columns large-12">\n            <div class="cancel file-input">&times;</div>\n            <div class="file-upload-region"></div>\n          </div>\n      </div>\n\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="quick_bruteforce[creds][import_cred_pairs][blank_as_password]"/>\n          Use &lt;BLANK&gt; as password\n        </label>\n      </div>\n\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="quick_bruteforce[creds][import_cred_pairs][username_as_password]"/>\n          Use username as password\n        </label>\n      </div>\n\n    </div>\n  </div>\n\n</fieldset>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_guess/quick/templates/mutation_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n  <div>\n    <div class="row">\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="mutation_options[1337_speak]" />\n          1337 speak\n        </label>\n      </div>\n    </div>\n\n\n    <div class="row">\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="mutation_options[append_special]" />\n          Append special chars (!#*)\n        </label>\n       </div>\n    </div>\n\n\n    <div class="row">\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="mutation_options[prepend_special]" />\n          Prepend special chars (!#*)\n        </label>\n       </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="mutation_options[append_single_digit]" />\n          Append single digit\n        </label>\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-12">\n        <div class="columns large-12">\n          <label>\n            <input type="checkbox" name="mutation_options[prepend_single_digit]" />\n            Prepend single digit\n          </label>\n        </div>\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="mutation_options[prepend_multiple_digits]" />\n          Prepend digits\n        </label>\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="mutation_options[append_multiple_digits]" />\n          Append digits\n        </label>\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="mutation_options[prepend_current_year]" />\n          Prepend current year\n        </label>\n       </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-12">\n        <label>\n          <input type="checkbox" name="mutation_options[append_current_year]" />\n          Append current year\n        </label>\n      </div>\n    </div>\n\n  </div>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_guess/quick/templates/options_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<fieldset>\n\n  <div class="columns large-12">\n    <div class="columns large-4">\n      <div class="row">\n        Overall Timeout\n      </div>\n    </div>\n\n    <div class="columns large-8">\n      <div class="columns large-3">\n        <div class="row">\n          <label style="display: none" for="quick-bruteforce-options-overall-timeout-hour">Bruteforce Options Overall Timeout Hour</label>\n          <input class="time" type="text" value="4" id="quick-bruteforce-options-overall-timeout-hour" name="quick_bruteforce[options][overall_timeout][hour]">\n        </div>\n\n        <div class="row ellipses">\n          Hours\n        </div>\n      </div>\n\n      <div class="columns large-3">\n        <div class="row">\n          <label style="display: none" for="quick-bruteforce-options-overall-timeout-minutes">Bruteforce Options Overall Timeout Minutes</label>\n          <input class="time" type="text" value="0" id="quick-bruteforce-options-overall-timeout-minutes" name="quick_bruteforce[options][overall_timeout][minutes]">\n        </div>\n\n        <div class="row ellipses">\n          Minutes\n        </div>\n      </div>\n\n      <div class="columns large-3">\n        <div class="row">\n          <label style="display: none" for="quick-bruteforce-options-overall-timeout-seconds">Bruteforce Options Overall Timeout Seconds</label>\n          <input class="time" type="text" value="0" id="quick-bruteforce-options-overall-timeout-seconds" name="quick_bruteforce[options][overall_timeout][seconds]">\n        </div>\n\n        <div class="row ellipses">\n          Seconds\n        </div>\n      </div>\n\n      <div class="columns large-3 overall-timeout-tooltip-region"></div>\n    </div>\n  </div>\n\n  <div class="columns large-12">\n    <div class="columns large-4">\n      <div class="row">\n        Service Timeout\n      </div>\n    </div>\n\n    <div class="columns large-8">\n      <div class="columns large-3">\n        <div class="row">\n          <label style="display: none" for="quick-bruteforce-options-service-timeout">Bruteforce Options Service Timeout</label>\n          <input class="time" type="text" value="900" id="quick-bruteforce-options-service-timeout" name="quick_bruteforce[options][service_timeout]">\n        </div>\n\n        <div class="row">\n          Seconds\n        </div>\n      </div>\n\n      <div class="columns large-6">\n\n      </div>\n\n      <div class="columns large-3 service-timeout-tooltip-region"></div>\n    </div>\n  </div>\n\n  <div class="columns large-12">\n    <div class="columns large-4">\n      <div class="row">\n        Time Between Attempts\n      </div>\n    </div>\n\n    <div class="columns large-8">\n      <div class="columns large-9">\n        <div class="row">\n          <select class="time-between-attempts" name="quick_bruteforce[options][time_between_attempts]">\n            <option value="5">None (0 seconds)</option>\n            <option value="4">Aggressive (0.1 seconds)</option>\n            <option value="3">Normal (0.5 seconds)</option>\n            <option value="2">Polite (1 second)</option>\n            <option value="1">Sneaky (15 seconds)</option>\n            <option value="0">Glacial (5 minutes)</option>\n          </select>\n        </div>\n      </div>\n\n      <div class="columns large-3 time-tooltip-region"></div>\n    </div>\n  </div>\n\n  <div class="columns large-12">\n    <hr />\n  </div>\n\n  <div class="columns large-12 bottom-options">\n    <div class="columns large-7">\n      <div class="row">\n        <label>\n          <input type="checkbox" name="quick_bruteforce[options][mutation]" />\n          <div>Apply mutation(s) </div>\n        </label>\n      </div>\n    </div>\n\n    <div class="columns large-5">\n      <div class="columns large-7 empty">\n\n      </div>\n      <div class=" columns large-5 mutation-tooltip-region">\n\n      </div>\n    </div>\n  </div>\n\n\n  <div class="columns large-12 bottom-options">\n    <label>\n      <input type="checkbox" name="quick_bruteforce[options][stop_on_guess]" />\n      <div>Stop bruteforcing a target when a credential is guessed</div>\n    </label>\n  </div>\n\n\n  <div class="columns large-12 bottom-options">\n    <div class="columns large-7">\n      <div class="row">\n        <label>\n          <input type="checkbox" name="quick_bruteforce[options][payload_settings]" />\n          <div>Get session if possible</div>\n        </label>\n      </div>\n    </div>\n\n    <div class="columns large-5">\n      <div class="columns large-7 empty">\n\n      </div>\n      <div class=" columns large-5 session-tooltip-region">\n\n      </div>\n    </div>\n  </div>\n\n</fieldset>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_guess/quick/templates/quick_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n  ');
      
        if (!this.taskChain) {
          __out.push('\n  <div class="header-region content-container">\n    <h1>Bruteforce</h1>\n  </div>\n  ');
        }
      
        __out.push('\n\n  <div class="content-region content-container">\n    <div class="foundation">\n      <div class="row"></div>\n      <div class="row">\n        <div class="columns small-8">\n          Bruteforce systematically attempts to use credentials to authenticate to services on target hosts.\n          Select the hosts and services you want to bruteforce and the credentials you want to use to attempt authentication.\n        </div>\n      </div>\n\n\n      <div class="row breadcrumbs space">\n\n      </div>\n\n      <div class="row box-container">\n        <div id="targets-region" class="columns large-4"></div>\n        <div id="creds-region" class="columns large-4"></div>\n        <div id="options-region" class="columns large-4"></div>\n      </div>\n\n      ');
      
        if (!this.taskChain) {
          __out.push('\n      <div class="row">\n        <div class="columns empty large-10"></div>\n\n        <div class="columns large-2 launch-container">\n          <a href="javascript:void(0)" class="btn primary launch disabled">LAUNCH</a>\n        </div>\n      </div>\n      ');
        }
      
        __out.push('\n\n    </div>\n  </div>\n</form>\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_guess/quick/templates/targets_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var i, service, _i, _len, _ref;
      
        __out.push('<fieldset>\n\n  <div class="columns large-12 count">\n    <span class="target-count">0</span> targets selected\n  </div>\n\n  <div class="columns large-12">\n    Selected Host(s):\n  </div>\n\n  <div class="columns large-12">\n    <label>\n      <input class="all-hosts" type="radio" name="quick_bruteforce[targets][type]" value="all" checked="checked" />\n      All hosts\n    </label>\n  </div>\n\n  <div class="columns large-12">\n    <label>\n      <input class="manual-hosts" type="radio" name="quick_bruteforce[targets][type]" value="manual" />\n      Enter target addresses\n    </label>\n  </div>\n\n   <div class="columns large-12 addresses" style="display: none;">\n    <div class="large-12 space">\n      <div class="row">\n        <div class="columns small-5">\n          <div>Target addresses:</div>\n        </div>\n\n        <div class="columns small-7 target-addresses-tooltip-region">\n\n        </div>\n\n\n      </div>\n\n      <div class="row">\n        <div class="columns small-12 space">\n          <textarea id="manual-target-entry" name="quick_bruteforce[targets][whitelist_hosts]"></textarea>\n        </div>\n      </div>\n\n    </div>\n\n    <div class="large-12 space">\n      <div class="row">\n        <div class="columns small-5">\n          <div>Excluded addresses:</div>\n        </div>\n\n        <div class="columns small-7 blacklist-addresses-tooltip-region">\n\n        </div>\n\n      </div>\n\n      <div class="row">\n        <div class="columns small-12 space">\n          <textarea id="manual-target-entry-blacklist" name="quick_bruteforce[targets][blacklist_hosts]"></textarea>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n  <div class="columns large-12">\n    <hr />\n  </div>\n\n  <div class="large-12 columns space services">\n    <div class="row">\n      <div class="columns large-12">\n        Select services:\n      </div>\n\n      <div class="columns large-12">\n        <label>\n          <input class="all-services" name="quick_bruteforce[targets][all_services]" type="checkbox" />\n          All services\n        </label>\n      </div>\n\n      <div class="row">\n        <div class="columns large-12">\n          ');
      
        _ref = this.SERVICES;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          service = _ref[i];
          __out.push('\n            ');
          if (i % 3 === 0 && i > 0) {
            __out.push('\n              </div></div><div class="row"><div class="columns large-12">\n            ');
          }
          __out.push('\n\n            <div class="columns large-4 service">\n              <label>\n                <input type="checkbox" name="quick_bruteforce[targets][services][');
          __out.push(__sanitize(service));
          __out.push(']"/>');
          __out.push(__sanitize(service === "SSH_PUBKEY" ? "SSH PUBKEY" : service));
          __out.push('\n              </label>\n            </div>\n\n\n            ');
          if (i >= this.SERVICES.length - 1) {
            __out.push('\n              <div class="columns large-4">\n\n              </div>\n\n              ');
            if (i >= this.SERVICES.length) {
              __out.push('\n                <div class="columns large-4">\n\n                </div>\n              ');
            }
            __out.push('\n            ');
          }
          __out.push('\n          ');
        }
      
        __out.push('\n        </div>\n      </div>\n     </div>\n  </div>\n\n</fieldset>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['lib/concerns/entities/chooser', 'lib/concerns/views/chooseable', 'lib/utilities/navigation', 'apps/brute_force_reuse/cred_selection/cred_selection_controller', 'entities/cred', 'lib/components/window_slider/window_slider_controller', 'apps/brute_force_reuse/index/index_controller'], function() {
    return this.Pro.module('BruteForceReuseApp', function(BruteForceReuseApp, App) {
      var API;
      BruteForceReuseApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "reuse": "reuse"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        reuse: function(id) {
          var indexController;
          if (id == null) {
            id = null;
          }
          return indexController = new BruteForceReuseApp.Index.Controller({
            core_id: id
          });
        }
      };
      App.addInitializer(function() {
        return new BruteForceReuseApp.Router({
          controller: API
        });
      });
      return App.vent.on("quickReuse:show", function(core_id) {
        App.navigate("#reuse", {
          trigger: false
        });
        return API.reuse(core_id);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'entities/cred', 'entities/cred_group', 'apps/brute_force_reuse/cred_selection/cred_selection_view', 'lib/concerns/controllers/render_cores_table', 'lib/components/filter/filter_controller'], function() {
    return this.Pro.module('BruteForceReuseApp.CredSelection', function(CredSelection, App) {
      return CredSelection.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.addCred = __bind(this.addCred, this);

          this.refreshNextButton = __bind(this.refreshNextButton, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('RenderCoresTable');

        Controller.prototype.workspace_id = null;

        Controller.prototype.table = null;

        Controller.prototype.group = null;

        Controller.prototype.layout = null;

        Controller.prototype.initialize = function(opts) {
          var creds,
            _this = this;
          if (opts == null) {
            opts = {};
          }
          this.workspace_id = opts.workspace_id || WORKSPACE_ID;
          _.defaults(opts, {
            show: true
          });
          creds = App.request('creds:entities', {
            workspace_id: this.workspace_id
          });
          this.layout = new CredSelection.Layout;
          this.setMainView(this.layout);
          this.groups = new CredSelection.GroupsContainer(_.pick(opts, 'workingGroup'));
          this.listenTo(this.layout, 'show', function() {
            _this.show(_this.groups, {
              region: _this.getMainView().groupsRegion
            });
            _this.table = _this.renderCoresTable(creds, _this.layout.credsRegion, {
              htmlID: 'reuse-creds',
              withoutColumns: ['clone', 'type', 'logins_count', 'validation', 'origin_type', 'pretty_realm'],
              actionButtons: [],
              disableCredLinks: true,
              filterOpts: {
                filterValuesEndpoint: window.gon.filter_values_workspace_metasploit_credential_cores_path,
                keys: ['logins.status', 'private.data', 'private.type', 'public.username', 'realm.key', 'realm.value', 'tags.name'],
                staticFacets: {
                  'private.type': [
                    {
                      value: 'SSH key',
                      label: 'SSH Key'
                    }, {
                      value: 'NTLM hash',
                      label: 'NTLM Hash'
                    }, {
                      value: 'Nonreplayable hash',
                      label: 'Hash'
                    }, {
                      value: 'Password',
                      label: 'Plain-text Password'
                    }
                  ],
                  'realm.key': Pro.Entities.Cred.Realms.ALL.map(function(name) {
                    return {
                      value: name,
                      label: name
                    };
                  }),
                  'logins.status': Pro.Entities.Login.Status.ALL.map(function(name) {
                    return {
                      value: name,
                      label: name
                    };
                  })
                }
              }
            });
            _this.listenTo(_this.table.collection, 'all', _.debounce((function() {
              _this.getMainView().adjustSize();
              return _this.groups.workingGroupView.lazyList.resize();
            }), 50));
            return _this.listenTo(_this.groups.workingGroupView.lazyList.collection, 'all', _.debounce(_this.refreshNextButton, 50));
          });
          this.listenTo(this.layout, 'creds:addToCart', function() {
            if (_this.table.tableSelections.selectAllState) {
              return _this.table.collection.fetchIDs(_this.table.tableSelections).done(function(ids) {
                ids = _.difference(ids, _.keys(_this.table.tableSelections.deselectedIDs));
                _this.groups.workingGroupView.lazyList.addIDs(ids);
                return _this.refreshNextButton();
              });
            } else {
              _this.groups.workingGroupView.lazyList.addIDs(_.keys(_this.table.tableSelections.selectedIDs));
              return _this.refreshNextButton();
            }
          });
          _.defer(function() {
            _this.groups.selectionUpdated();
            return _this.refreshNextButton();
          });
          if (opts.show) {
            return this.show(this.layout, this.region);
          }
        };

        Controller.prototype.refreshNextButton = function() {
          return this.layout.toggleNext(!_.isEmpty(this.groups.workingGroupView.lazyList.collection.ids));
        };

        Controller.prototype.addCred = function(core_id) {
          return this.groups.workingGroupView.lazyList.addIDs([core_id]);
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_view', 'base_itemview', 'base_compositeview', 'entities/cred', 'entities/cred_group', 'select2', 'apps/brute_force_reuse/cred_selection/templates/cred_selection_layout', 'apps/brute_force_reuse/cred_selection/templates/group', 'apps/brute_force_reuse/cred_selection/templates/cred_row', 'apps/brute_force_reuse/cred_selection/templates/group_container', 'lib/components/lazy_list/lazy_list_controller', 'lib/concerns/views/right_side_scroll'], function($) {
    return this.Pro.module('BruteForceReuseApp.CredSelection', function(CredSelection, App) {
      CredSelection.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          this.toggleNext = __bind(this.toggleNext, this);
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.id = 'credSelection';

        Layout.prototype.template = Layout.prototype.templatePath('brute_force_reuse/cred_selection/cred_selection_layout');

        Layout.prototype.regions = {
          credsRegion: '.creds-table',
          groupsRegion: '.creds-groups'
        };

        Layout.prototype.ui = {
          rightSide: '.right-side',
          leftSide: '.left-side',
          next: 'a.btn.primary'
        };

        Layout.prototype.attributes = {
          "class": 'cred-selection-view'
        };

        Layout.prototype.triggers = {
          'click .add-selection': 'creds:addToCart'
        };

        Layout.include("RightSideScroll");

        Layout.prototype.toggleNext = function(enabled) {
          return this.ui.next.toggleClass('disabled', !enabled);
        };

        return Layout;

      })(App.Views.Layout);
      CredSelection.CredRow = (function(_super) {

        __extends(CredRow, _super);

        function CredRow() {
          this.removeCred = __bind(this.removeCred, this);

          this.initialize = __bind(this.initialize, this);
          return CredRow.__super__.constructor.apply(this, arguments);
        }

        CredRow.prototype.tagName = 'li';

        CredRow.prototype.attributes = {
          "class": 'cred-row'
        };

        CredRow.prototype.template = CredRow.prototype.templatePath('brute_force_reuse/cred_selection/cred_row');

        CredRow.prototype.events = {
          'click a.delete': 'removeCred'
        };

        CredRow.prototype.initialize = function(_arg) {
          this.collection = _arg.collection, this.model = _arg.model;
        };

        CredRow.prototype.removeCred = function() {
          return this.collection.remove(this.model);
        };

        return CredRow;

      })(App.Views.ItemView);
      CredSelection.Group = (function(_super) {

        __extends(Group, _super);

        function Group() {
          this.removeGroup = __bind(this.removeGroup, this);

          this.onShow = __bind(this.onShow, this);

          this.renderLazyList = __bind(this.renderLazyList, this);

          this.credsLoaded = __bind(this.credsLoaded, this);

          this.toggleExpansion = __bind(this.toggleExpansion, this);

          this.initialize = __bind(this.initialize, this);
          return Group.__super__.constructor.apply(this, arguments);
        }

        Group.prototype.tagName = 'li';

        Group.prototype.template = Group.prototype.templatePath('brute_force_reuse/cred_selection/group');

        Group.prototype.attributes = {
          "class": 'group'
        };

        Group.prototype.events = {
          'click': 'toggleExpansion',
          'click a.delete': 'removeGroup'
        };

        Group.prototype.regions = {
          list: '.cred-rows'
        };

        Group.prototype.childView = CredSelection.CredRow;

        Group.prototype.parentCollection = null;

        Group.prototype.collection = null;

        Group.prototype.lazyList = null;

        Group.prototype.initialize = function(_arg) {
          var collection;
          collection = _arg.collection, this.model = _arg.model;
          this.parentCollection = collection;
          this.collection = this.model.get('creds');
          return this.listenTo(this.model, 'creds:loaded', this.credsLoaded);
        };

        Group.prototype.toggleExpansion = function() {
          if (this.model.get('working')) {
            return;
          }
          this.model.set({
            expanded: !this.model.get('expanded')
          });
          this.render();
          if (this.model.get('expanded')) {
            if (this.model.get('state') === 'new') {
              return this.model.loadCredIDs();
            } else if (this.model.get('state') === 'loaded') {
              return this.renderLazyList({
                ids: this.model.get('cred_ids')
              });
            }
          } else {
            return this.list.destroy();
          }
        };

        Group.prototype.credsLoaded = function(opts) {
          return this.renderLazyList(opts);
        };

        Group.prototype.renderLazyList = function(opts) {
          var ids;
          if (opts == null) {
            opts = {};
          }
          ids = opts.ids;
          return this.lazyList = new App.Components.LazyList.Controller({
            collection: this.model.get('creds'),
            region: this.list,
            ids: ids,
            childView: CredSelection.CredRow
          });
        };

        Group.prototype.onShow = function() {
          if (this.model.get('working')) {
            return this.renderLazyList();
          }
        };

        Group.prototype.removeGroup = function(e) {
          this.parentCollection.remove(this.model);
          e.preventDefault();
          return e.stopImmediatePropagation();
        };

        return Group;

      })(App.Views.Layout);
      return CredSelection.GroupsContainer = (function(_super) {

        __extends(GroupsContainer, _super);

        function GroupsContainer() {
          this._loadGroups = __bind(this._loadGroups, this);

          this._destroySelect2 = __bind(this._destroySelect2, this);

          this._renderSelect2 = __bind(this._renderSelect2, this);

          this._numSelectedCreds = __bind(this._numSelectedCreds, this);

          this._updateSelectionCount = __bind(this._updateSelectionCount, this);

          this._updateClearState = __bind(this._updateClearState, this);

          this.clearClicked = __bind(this.clearClicked, this);

          this.selectionUpdated = __bind(this.selectionUpdated, this);

          this.onShow = __bind(this.onShow, this);

          this.dropdownChanged = __bind(this.dropdownChanged, this);

          this.buildChildView = __bind(this.buildChildView, this);

          this.onDestroy = __bind(this.onDestroy, this);

          this.onRender = __bind(this.onRender, this);

          this.onShow = __bind(this.onShow, this);
          return GroupsContainer.__super__.constructor.apply(this, arguments);
        }

        GroupsContainer.prototype.template = GroupsContainer.prototype.templatePath('brute_force_reuse/cred_selection/group_container');

        GroupsContainer.prototype.attributes = {
          "class": 'credential-groups'
        };

        GroupsContainer.prototype.childView = CredSelection.Group;

        GroupsContainer.prototype.childViewContainer = 'ul.groups';

        GroupsContainer.prototype.ui = {
          dropdown: 'div.dropdown',
          clear: 'a.clear',
          badge: 'span.badge'
        };

        GroupsContainer.prototype.events = {
          'change @ui.dropdown': 'dropdownChanged',
          'click @ui.dropdown': 'dropdownClicked',
          'click @ui.clear': 'clearClicked'
        };

        GroupsContainer.prototype.collection = null;

        GroupsContainer.prototype.groups = null;

        GroupsContainer.prototype.groupsFetched = false;

        GroupsContainer.prototype.workspace_id = null;

        GroupsContainer.prototype.workingGroup = null;

        GroupsContainer.prototype.workingGroupView = null;

        GroupsContainer.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          this.workspace_id = opts.workspace_id || WORKSPACE_ID;
          this.workingGroup = opts.workingGroup || new App.Entities.CredGroup({
            workspace_id: this.workspace_id,
            working: true
          });
          this.collection = new App.Entities.CredGroupsCollection([this.workingGroup], {
            workspace_id: this.workspace_id
          });
          this.groups = new App.Entities.CredGroupsCollection([], {
            workspace_id: this.workspace_id
          });
          this.listenTo(this.workingGroup.get('creds'), 'add', this.selectionUpdated);
          this.listenTo(this.workingGroup.get('creds'), 'remove', this.selectionUpdated);
          return this.listenTo(this.workingGroup.get('creds'), 'reset', this.selectionUpdated);
        };

        GroupsContainer.prototype.onShow = function() {
          var _this = this;
          this._loadGroups();
          return _.defer(function() {
            return _this.selectionUpdated();
          });
        };

        GroupsContainer.prototype.onRender = function() {
          if (this.groupsFetched) {
            return this._renderSelect2();
          }
        };

        GroupsContainer.prototype.onDestroy = function() {
          if (this.groupsFetched) {
            return this._destroySelect2();
          }
        };

        GroupsContainer.prototype.serializeData = function() {
          return this;
        };

        GroupsContainer.prototype.appendHtml = function(collectionView, itemView) {
          return this.$el.find(collectionView.childViewContainer).prepend(itemView.el);
        };

        GroupsContainer.prototype.buildChildView = function(item, ItemView) {
          var view;
          view = new ItemView({
            model: item,
            collection: this.collection
          });
          if (item === this.workingGroup) {
            this.workingGroupView = view;
          }
          return view;
        };

        GroupsContainer.prototype.dropdownChanged = function(e) {
          var newGroup;
          this.ui.dropdown.select2('val', '');
          newGroup = this.groups.get(e.val);
          if (newGroup != null) {
            newGroup.set({
              expanded: false
            });
          }
          if (newGroup != null) {
            return this.collection.add(newGroup);
          }
        };

        GroupsContainer.prototype.onShow = function() {
          return this.ui.clear.tooltip();
        };

        GroupsContainer.prototype.selectionUpdated = function() {
          this._updateClearState();
          return this._updateSelectionCount();
        };

        GroupsContainer.prototype.clearClicked = function() {
          var result;
          result = confirm("Are you sure you want to remove all selected credentials?");
          if (result) {
            return this.workingGroup.get('creds').reset([]);
          }
        };

        GroupsContainer.prototype._updateClearState = function() {
          var _this = this;
          return _.defer(function() {
            var _ref, _ref1;
            return (_ref = _this.ui) != null ? (_ref1 = _ref.clear) != null ? typeof _ref1.toggle === "function" ? _ref1.toggle(_this._numSelectedCreds() > 0) : void 0 : void 0 : void 0;
          });
        };

        GroupsContainer.prototype._updateSelectionCount = function() {
          var _this = this;
          return _.defer(function() {
            var _ref, _ref1;
            return (_ref = _this.ui) != null ? (_ref1 = _ref.badge) != null ? typeof _ref1.toggle === "function" ? _ref1.toggle(_this._numSelectedCreds() > 0).text(_this._numSelectedCreds()) : void 0 : void 0 : void 0;
          });
        };

        GroupsContainer.prototype._numSelectedCreds = function() {
          var _ref;
          return ((_ref = this.workingGroup.get('creds').ids) != null ? _ref.length : void 0) || 0;
        };

        GroupsContainer.prototype._renderSelect2 = function() {
          var models;
          models = _.map(this.groups.models, function(m) {
            return {
              name: m.get('name'),
              id: m.id.toString()
            };
          });
          this.ui.dropdown.select2({
            placeholder: 'Import Existing Group',
            data: {
              results: models,
              text: 'name'
            },
            initSelection: null,
            minimumResultsForSearch: 5,
            escapeMarkup: _.identity,
            formatResult: function(m) {
              return "<span>" + (_.escape(m.name)) + "</span><a class='right' href='javascript:void(0)'>×</a>";
            }
          });
          return this.ui.dropdown.change(this.dropdownChanged);
        };

        GroupsContainer.prototype._destroySelect2 = function() {
          return this.ui.dropdown.select2('destroy');
        };

        GroupsContainer.prototype._loadGroups = function() {
          var _this = this;
          if (this.isClosed) {
            return;
          }
          return this.groups.fetch().done(function() {
            _this.groupsFetched = true;
            return _this.render();
          }).error(function() {
            return _.delay(_this._loadGroups, 5000);
          });
        };

        return GroupsContainer;

      })(App.Views.CompositeView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_reuse/cred_selection/templates/cred_row"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var _ref;
      
        __out.push('<div class=\'group-row\'>\n\n  <div class=\'title\'>\n    <span class=\'username\'>\n      ');
      
        __out.push(__sanitize(this['public.username']));
      
        __out.push('\n    </span>\n    <span class=\'private\'>\n      ');
      
        __out.push(__sanitize(this['private.data']));
      
        __out.push('\n    </span>\n  </div>\n  <div class=\'subtitle\'>\n    ');
      
        if (((_ref = this['realm.key']) != null ? _ref.length : void 0) > 0) {
          __out.push('\n      ');
          __out.push(__sanitize(this['realm.key']));
          __out.push(' (');
          __out.push(__sanitize(this['realm.value']));
          __out.push(')\n    ');
        } else {
          __out.push('\n      No Realm\n    ');
        }
      
        __out.push('\n  </div>\n\n  <a class=\'right delete\' title=\'Remove this credential from the selection.\' href=\'javascript:void(0)\'>\n    <span>\n      &times;\n    </span>\n  </a>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_reuse/cred_selection/templates/cred_selection_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="foundation">\n  <div class="row">\n    <div class="large-9 columns">\n      <p class="reuse-title">\n        Choose the credentials that Metasploit will attempt to use to authenticate to the selected target list below.\n      </p>\n    </div>\n\n    <div class="large-3 columns"></div>\n  </div>\n\n  <div class="row">\n    <div class="large-9 columns left-side">\n      <h1 class="invisible" data-table-id="reuse-creds"></h1>\n      <div class="creds-table"></div>\n    </div>\n    <div class="large-3 columns last right-side">\n      <div class="btn-arrow add-selection">\n        <span class="icon icon-fb"><span>＋</span></span>\n        <span class="title">Add Credential(s) to this list</span>\n      </div>\n      <div class="creds-groups"></div>\n      <a href="javascript:void(0)" class="btn primary launch disabled">Next</a>\n    </div>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_reuse/cred_selection/templates/group"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var klass;
      
        __out.push('\n');
      
        if (!this.working) {
          __out.push('\n  ');
          klass = this.expanded ? 'contract' : 'expand';
          __out.push('\n  <div class=\'group-row\'>\n    <a class=\'');
          __out.push(__sanitize(klass));
          __out.push('\' href=\'javascript:void(0)\' title=\'Show creds in this group\'></a>\n\n    <span class=\'name\'>\n      ');
          __out.push(__sanitize(this.name));
          __out.push('\n    </span>\n\n    <a class=\'right delete\' href=\'javascript:void(0)\'>\n      &times;\n    </a>\n  </div>\n');
        }
      
        __out.push('\n\n');
      
        if (this.loading) {
          __out.push('\n  \n  <p>\n    <div class=\'loading\'></div>\n  </p>\n\n  <ul class=\'cred-rows\'>\n  </ul>\n\n');
        } else if (this.working) {
          __out.push('\n\n  <ul class=\'cred-rows\'>\n  </ul>\n\n');
        } else if (this.expanded) {
          __out.push('\n\n  <ul class=\'cred-rows\'>\n  </ul>\n\n');
        } else {
          __out.push('\n\n  <ul class=\'cred-rows\' style=\'display:none\'>\n  </ul>\n\n');
        }
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_reuse/cred_selection/templates/group_container"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var _ref, _ref1;
      
        __out.push('<div class=\'header\'>\n  <span class=\'title\'>selected credentials</span>\n  <span class=\'badge\' style=\'display:none\'>0</span>\n  <a class=\'clear\' style=\'display:none\' title=\'Clear all selected items.\' href=\'javascript:void(0)\'>&times;</a>\n</div>\n\n<div class=\'border\'>\n  <div class=\'padder\'>\n    ');
      
        if (this.groupsFetched) {
          __out.push('\n\n      ');
          if (((_ref = this.groups) != null ? (_ref1 = _ref.models) != null ? _ref1.length : void 0 : void 0) > 0) {
            __out.push('\n        <div style=\'display: none\' class=\'dropdown-container\'>\n          <div class=\'dropdown\'>\n          </div>\n        </div>\n      ');
          }
          __out.push('\n\n    ');
        } else {
          __out.push('\n\n      <div style=\'display: none\' class=\'dropdown-container\'>\n        <div class=\'loading\'></div>\n      </div>\n\n    ');
        }
      
        __out.push('\n    <ul class=\'groups\'></ul>\n  </div>\n  ');
      
        __out.push('\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'entities/cred', 'apps/brute_force_reuse/header/header_views', 'lib/components/breadcrumbs/breadcrumbs_controller'], function() {
    return this.Pro.module('BruteForceReuseApp.Header', function(Header, App) {
      Header.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var _this = this;
          this.layout = new Header.Layout;
          this.setMainView(this.layout);
          this.workingGroup = options.workingGroup, this.targetListCollection = options.targetListCollection;
          this.listenTo(this.targetListCollection, 'reset remove', function() {
            return _this.setLaunchCrumb();
          });
          this.listenTo(this.workingGroup.get('creds'), 'reset remove', function() {
            return _this.setLaunchCrumb();
          });
          return this.listenTo(this.getMainView(), 'show', function() {
            _this.crumbsController = App.request('crumbs:component', {
              crumbs: [
                {
                  title: 'TARGETS'
                }, {
                  title: 'CREDENTIALS'
                }, {
                  title: 'REVIEW'
                }, {
                  title: 'LAUNCH'
                }
              ]
            });
            _this.crumbsCollection = _this.crumbsController.crumbsCollection;
            _this.listenTo(_this.crumbsCollection, "collection:chose:one", function(chosen) {
              switch (chosen.get('title')) {
                case 'REVIEW':
                  return this.setLaunchCrumb();
                default:
                  return this.unsetLaunchCrumb();
              }
            });
            return _this.show(_this.crumbsController, {
              region: _this.layout.crumbs
            });
          });
        };

        Controller.prototype.setLaunchCrumb = function() {
          var reviewCrumb, _ref;
          reviewCrumb = this.crumbsCollection.findWhere({
            title: "LAUNCH"
          });
          if (((_ref = this.targetListCollection) != null ? _ref.length : void 0) > 0 && this.workingGroup.get('creds').length > 0) {
            return reviewCrumb.set('launchable', true);
          } else {
            return this.unsetLaunchCrumb();
          }
        };

        Controller.prototype.unsetLaunchCrumb = function() {
          var reviewCrumb;
          reviewCrumb = this.crumbsCollection.findWhere({
            title: "LAUNCH"
          });
          return reviewCrumb.set('launchable', false);
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler("header:bruteForceReuseApp", function(options) {
        if (options == null) {
          options = {};
        }
        return new Header.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'base_compositeview', 'apps/brute_force_reuse/header/templates/layout'], function() {
    return this.Pro.module('BruteForceReuseApp.Header', function(Header, App) {
      return Header.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('brute_force_reuse/header/layout');

        Layout.prototype.className = 'brute-force-header';

        Layout.prototype.regions = {
          crumbs: '.crumbs-region'
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_reuse/header/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="title">\n    <h1>Credentials Reuse</h1>\n</div>\n\n<div class="crumbs-region">\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'entities/cred', 'apps/brute_force_reuse/index/index_views', 'lib/components/content_container/content_container_controller', 'apps/brute_force_reuse/header/header_controller', 'lib/shared/targets/targets_controller', 'apps/brute_force_reuse/review/review_controller', 'entities/target', 'entities/brute_force_run', 'entities/abstract/brute_force_reuse_options'], function() {
    return this.Pro.module('BruteForceReuseApp.Index', function(Index, App) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.setLaunchTab = __bind(this.setLaunchTab, this);

          this.showError = __bind(this.showError, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var _this = this;
          this.core_id = options.core_id;
          this.workspace_id = options.workspace_id || WORKSPACE_ID;
          this.layout = new Index.Layout;
          this.setMainView(this.layout);
          this.targetListCollection || (this.targetListCollection = App.request('targets:entities', [], {
            workspace_id: this.workspace_id
          }));
          this.workingGroup || (this.workingGroup = new App.Entities.CredGroup({
            workspace_id: this.workspace_id,
            working: true
          }));
          this.listenTo(this.getMainView(), 'show', function() {
            var prevChoice;
            _this.headerController = App.request("header:bruteForceReuseApp", {
              targetListCollection: _this.targetListCollection,
              workingGroup: _this.workingGroup
            });
            _this.contentContainer = App.request('contentContainer:component', {
              headerView: _this.headerController
            });
            _this.listenTo(_this.contentContainer._mainView, "show", function() {
              this.setTargetTab();
              return this.headerController.crumbsCollection.choose(this.headerController.crumbsCollection.at(0));
            });
            _this.show(_this.contentContainer, {
              region: _this.layout.content
            });
            prevChoice = _this.headerController.crumbsCollection.at(0);
            _this.listenTo(_this.headerController.crumbsCollection, "collection:chose:one", function(chosen) {
              var reset;
              if (chosen === prevChoice) {
                return;
              }
              reset = false;
              switch (chosen.get('title')) {
                case 'TARGETS':
                  this.setTargetTab();
                  break;
                case 'CREDENTIALS':
                  if (prevChoice.get('title') !== 'TARGETS' || !_.isEmpty(this.targetListCollection.ids)) {
                    this.setCredentialsTab();
                  } else {
                    reset = true;
                    this.showError("You must add at least 1 target to the list.");
                  }
                  break;
                case 'REVIEW':
                  if ((prevChoice.get('title') !== 'CREDENTIALS' && prevChoice.get('title') !== 'TARGETS') || !_.isEmpty(this.workingGroup.get('creds').ids)) {
                    this.setReviewTab();
                  } else {
                    reset = true;
                    this.showError("You must add at least 1 credential to the list.");
                  }
                  break;
                case 'LAUNCH':
                  if (_.isEmpty(this.workingGroup.get('creds').ids)) {
                    this.showError("You must have selected at least 1 credential to launch the Bruteforce.");
                    reset = true;
                  } else if (_.isEmpty(this.targetListCollection.ids)) {
                    this.showError("You must have selected at least 1 target to launch the Bruteforce.");
                    reset = true;
                  } else {
                    this.setLaunchTab();
                  }
              }
              if (reset) {
                chosen.unchoose();
                return prevChoice.choose();
              } else {
                return prevChoice = chosen;
              }
            });
            _this.listenTo(_this._mainView, 'tab:credentials', function() {
              return this.headerController.crumbsCollection.choose(this.headerController.crumbsCollection.at(1));
            });
            _this.listenTo(_this._mainView, 'tab:review', function() {
              return this.headerController.crumbsCollection.choose(this.headerController.crumbsCollection.at(2));
            });
            _this.listenTo(_this._mainView, 'tab:launch', function() {
              return this.headerController.crumbsCollection.choose(this.headerController.crumbsCollection.at(3));
            });
            App.vent.on('crumb:credentials', function() {
              return _this.headerController.crumbsCollection.choose(_this.headerController.crumbsCollection.at(1));
            });
            return App.vent.on('crumb:targets', function() {
              return _this.headerController.crumbsCollection.choose(_this.headerController.crumbsCollection.at(0));
            });
          });
          return this.show(this.layout, {
            region: this.region
          });
        };

        Controller.prototype.showError = function(msg) {
          return App.execute('flash:display', {
            title: 'Error',
            style: 'error',
            message: msg,
            duration: 3000
          });
        };

        Controller.prototype.setTargetTab = function() {
          this.targetsController = App.request('targets:shared', {
            collection: this.targetListCollection
          });
          return this.contentContainer.showContentRegion(this.targetsController);
        };

        Controller.prototype.setCredentialsTab = function() {
          var _this = this;
          this.reuseCredController = new App.BruteForceReuseApp.CredSelection.Controller({
            show: false,
            workingGroup: this.workingGroup
          });
          this.listenTo(this.reuseCredController._mainView, 'show', function() {
            if (_this.core_id != null) {
              return _this.reuseCredController.addCred(_this.core_id);
            }
          });
          return this.contentContainer.showContentRegion(this.reuseCredController);
        };

        Controller.prototype.setReviewTab = function() {
          var reviewController;
          this.workingGroup || (this.workingGroup = new App.Entities.CredGroup({
            workspace_id: this.workspace_id,
            working: true
          }));
          this.reuseOptions || (this.reuseOptions = App.request('new:brute_force_reuse_options:entity'));
          reviewController = new App.BruteForceReuseApp.Review.Controller({
            show: false,
            targetListCollection: this.targetListCollection,
            workingGroup: this.workingGroup,
            reuseOptions: this.reuseOptions
          });
          return this.contentContainer.showContentRegion(reviewController);
        };

        Controller.prototype.setLaunchTab = function() {
          var brute_force_run,
            _this = this;
          brute_force_run = App.request('new:brute_force_run:entity', {
            service_ids: this.targetListCollection.ids,
            core_ids: this.workingGroup.get('creds').ids,
            config: this.reuseOptions.toJSON(),
            workspace_id: this.workspace_id
          });
          App.execute('loadingOverlay:show');
          return brute_force_run.save().done(function(data) {
            if (data.success) {
              return window.location = data.redirect_to;
            } else {
              return App.execute('loadingOverlay:hide');
            }
          });
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'base_compositeview', 'apps/brute_force_reuse/index/templates/layout'], function() {
    return this.Pro.module('BruteForceReuseApp.Index', function(Index, App) {
      return Index.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('brute_force_reuse/index/layout');

        Layout.prototype.regions = {
          content: '.content-region'
        };

        Layout.prototype.triggers = {
          'click .target-selection-view a.launch:not(.disabled)': 'tab:credentials',
          'click .cred-selection-view a.launch:not(.disabled)': 'tab:review',
          'click .review-view .launch-container a:not(.disabled)': 'tab:launch'
        };

        Layout.prototype.events = {
          'click .review-view a.launch.disabled': 'reviewBadClick',
          'click .cred-selection-view a.launch.disabled': 'credBadClick',
          'click .target-selection-view a.launch.disabled': 'targetBadClick'
        };

        Layout.prototype.credBadClick = function() {
          return App.execute('flash:display', {
            title: 'Error',
            style: 'error',
            message: "You must add at least 1 credential to the list.",
            duration: 3000
          });
        };

        Layout.prototype.reviewBadClick = function() {};

        Layout.prototype.targetBadClick = function() {
          return App.execute('flash:display', {
            title: 'Error',
            style: 'error',
            message: "You must add at least 1 target to the list.",
            duration: 3000
          });
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_reuse/index/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="content-region"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/brute_force_reuse/review/review_views', 'lib/shared/targets/targets_views'], function() {
    return this.Pro.module("BruteForceReuseApp.Review", function(Review, App) {
      return Review.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {};

        Controller.prototype.initialize = function(options) {
          var config;
          if (options == null) {
            options = {};
          }
          this.workspace_id = options.workspace_id || WORKSPACE_ID;
          config = _.defaults(options, this._getDefaults());
          this.targetListCollection = options.targetListCollection, this.workingGroup = options.workingGroup, this.reuseOptions = options.reuseOptions;
          this.setMainView(new Review.Layout({
            model: this.reuseOptions
          }));
          this.listenTo(this._mainView, 'form:changed', function() {
            var changed, data;
            data = Backbone.Syphon.serialize(this._mainView);
            changed = false;
            _.each(['service_seconds', 'overall_hours', 'overall_seconds', 'overall_minutes'], function(o) {
              var newData;
              newData = (data[o] + '').replace(/[^0-9]/g, '');
              if (newData !== data[o]) {
                changed = true;
                return data[o] = newData;
              }
            });
            this.reuseOptions.set(data);
            if (changed) {
              return Backbone.Syphon.deserialize(this._mainView, data);
            }
          });
          this.listenTo(this._mainView, 'show', function() {
            Backbone.Syphon.deserialize(this._mainView, this.reuseOptions.toJSON());
            this.targetList = new App.Shared.TargetList.Controller({
              targetListCollection: this.targetListCollection
            });
            this.groups = new App.BruteForceReuseApp.CredSelection.GroupsContainer(_.pick(options, 'workingGroup'));
            this.listenTo(this.groups, 'show', function() {
              return this.groups.selectionUpdated();
            });
            this.show(this.targetList, {
              region: this._mainView.targetRegion
            });
            return this.show(this.groups, {
              region: this._mainView.credRegion
            });
          });
          this.listenTo(this.targetListCollection, 'remove', function() {
            if (this.targetListCollection.length === 0) {
              return this._mainView.disableLaunch();
            }
          });
          this.listenTo(this.workingGroup.get('creds'), 'remove', function() {
            if (this.workingGroup.get('creds').length === 0) {
              return this._mainView.disableLaunch();
            }
          });
          this.listenTo(this.getMainView(), 'targets:back', function() {
            return App.vent.trigger('crumb:targets');
          });
          return this.listenTo(this.getMainView(), 'credentials:back', function() {
            return App.vent.trigger('crumb:credentials');
          });
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_view', 'base_itemview', 'apps/brute_force_reuse/review/templates/layout'], function($) {
    return this.Pro.module('BruteForceReuseApp.Review', function(Review, App) {
      return Review.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.className = 'review-view';

        Layout.prototype.ui = {
          form: 'form',
          launchBtn: '.launch-container a'
        };

        Layout.prototype.triggers = {
          'change @ui.form': 'form:changed',
          'input form': 'form:changed',
          'click a.back-creds': 'credentials:back',
          'click a.back-targets': 'targets:back'
        };

        Layout.prototype.regions = {
          targetRegion: '.target-region',
          credRegion: '.creds-region'
        };

        Layout.prototype.template = Layout.prototype.templatePath('brute_force_reuse/review/layout');

        Layout.prototype.disableLaunch = function() {
          return this.ui.launchBtn.addClass('disabled');
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/brute_force_reuse/review/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="foundation">\n\n    <div class="row">\n        <div class="large-4 columns">\n            <div class="row">\n                <h1>Options:</h1>\n            </div>\n        </div>\n        <div class="large-3 columns"><h1>Review selections:</h1></div>\n        <div class="large-4 columns"></div>\n    </div>\n\n\n    <div class="row">\n        <div class="large-4 columns options review-options">\n            <form>\n              <div class="row">\n\n                <div class=\'header\'>\n                    reuse options\n                </div>\n\n                <div class=\'border\'>\n                    <div class=\'padder\'>\n                      <div class="columns">\n                          <div class="container columns">\n                              <h3>Timeout Options</h3>\n\n                              <div class="row">\n                                  <div class="timeout-label large-offset-1 large-3 columns">Service Timeout</div>\n                                  <div class="large-8 columns">\n                                    <div class="timeout-field">\n                                       <input id="options-timeout" name="service_seconds" type="text">\n                                       <label for="options-timeout">Seconds</label>\n                                    </div>\n                                  </div>\n                              </div>\n\n                              <div class="row">\n                                   <div class="timeout-label large-offset-1 large-3 columns">Overall Timeout</div>\n                                   <div class="large-8 columns">\n                                     <div class="timeout-field">\n                                          <input id="options-hour" type="text" name="overall_hours">\n                                          <label for="options-hour">Hours</label>\n                                     </div>\n                                      <div class="timeout-field">\n                                          <input type="text" id="options-minutes" name="overall_minutes">\n                                          <label for="options-minutes">Minutes</label>\n                                      </div>\n\n                                      <div class="timeout-field">\n                                          <input type="text" id="options-seconds" name="overall_seconds">\n                                          <label for="options-seconds">Seconds</label>\n                                      </div>\n                                   </div>\n                              </div>\n\n                          </div>\n                      </div>\n\n                      <div class="columns">\n                          <div class="container columns">\n                              <h3>Limitations</h3>\n\n                              <div class="row">\n                                  <div class="large-11 large-offset-1 columns">\n                                      <input id=\'limitation\' type="checkbox" name="limit"/>\n                                      <label for="limitation">Validate only one credential per service</label>\n                                  </div>\n                              </div>\n                          </div>\n                      </div>\n\n\n                    </div>\n                </div>\n              </div>\n            </form>\n        </div>\n\n        <div class="large-3 columns">\n            <div class="large-12 target-region">\n\n            </div>\n\n            <div class="large-12 back-edit">\n                <div class="large-12 columns">\n                    <a href="javascript:void(0)" class="back-targets">Go back and edit</a>\n                </div>\n            </div>\n\n\n        </div>\n\n        <div class="large-3 columns">\n            <div class="large-12 creds-region">\n\n            </div>\n\n            <div class="large-12 back-edit">\n                <div class="large-12 columns">\n                    <a href="javascript:void(0)" class="back-creds">Go back and edit</a>\n                </div>\n            </div>\n\n        </div>\n\n        <div class="large-2 columns">\n            <div class="row">\n                <div class="launch-container large-12 columns">\n                    <a href="javascript:void(0)" class="btn primary launch">LAUNCH</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n\n\n\n  </div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/creds/clone/clone_view'], function() {
    return this.Pro.module("CredsApp.Clone", function(Clone, App) {
      return Clone.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(opts) {
          var cred, credsCollection, regionName,
            _this = this;
          cred = opts.cred, credsCollection = opts.credsCollection, regionName = opts.regionName;
          this.layout = this.getLayoutView(cred, credsCollection);
          this.listenTo(this.layout, 'show', function() {
            _this.layout.dropContainingEl();
            _this.publicRegion(cred);
            _this.privateRegion(cred);
            _this.realmRegion(cred);
            return _this.typeRegion(cred);
          });
          return this.show(this.layout, {
            region: App[regionName]
          });
        };

        Controller.prototype.publicRegion = function(cred) {
          var publicView;
          publicView = this.getPublicView(cred);
          return this.layout.publicRegion.show(publicView);
        };

        Controller.prototype.privateRegion = function(cred) {
          var privateView;
          privateView = this.getPrivateView(cred);
          return this.layout.privateRegion.show(privateView);
        };

        Controller.prototype.realmRegion = function(cred) {
          var realmView;
          realmView = this.getRealmView(cred);
          return this.layout.realmRegion.show(realmView);
        };

        Controller.prototype.typeRegion = function(cred) {
          var typeView;
          typeView = this.getTypeView(cred);
          return this.layout.typeRegion.show(typeView);
        };

        Controller.prototype.getLayoutView = function(cred, credsCollection) {
          return new Clone.Layout({
            model: cred,
            credsCollection: credsCollection
          });
        };

        Controller.prototype.getPublicView = function(cred) {
          return new Clone.Public({
            model: cred
          });
        };

        Controller.prototype.getPrivateView = function(cred) {
          return new Clone.Private({
            model: cred
          });
        };

        Controller.prototype.getRealmView = function(cred) {
          return new Clone.Realm({
            model: cred
          });
        };

        Controller.prototype.getTypeView = function(cred) {
          return new Clone.Type({
            model: cred
          });
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_formview', 'apps/creds/clone/templates/clone_layout', 'apps/creds/clone/templates/public', 'apps/creds/clone/templates/private', 'apps/creds/new/templates/realm', 'apps/creds/clone/templates/type', 'lib/components/flash/flash_controller', 'lib/concerns/views/spinner'], function() {
    return this.Pro.module('CredsApp.Clone', function(Clone, App, Backbone, Marionette, $, _) {
      Clone.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.include("Spinner");

        Layout.prototype.template = Layout.prototype.templatePath('creds/clone/clone_layout');

        Layout.prototype.modelEvents = {
          'change:errors': 'renderErrors'
        };

        Layout.prototype.regions = {
          publicRegion: 'td.public',
          privateRegion: 'td.private',
          realmRegion: 'td.realm',
          typeRegion: 'td.type'
        };

        Layout.prototype.events = {
          'click a.save': 'onFormSubmit',
          'submit form': 'onFormSubmit',
          'click a.cancel': 'destroy'
        };

        Layout.prototype.initialize = function(options) {
          this.credsCollection = options.credsCollection;
          return Layout.__super__.initialize.call(this, options);
        };

        Layout.prototype.dropContainingEl = function() {
          this.setElement(this.$el.parent());
          return this.$el.html(this.$el.find('div').first().html());
        };

        Layout.prototype.onFormSubmit = function(e) {
          var _this = this;
          e.preventDefault();
          this.model.unset('errors');
          this.showSpinner();
          return this.model.save(_.extend(this.model.attributes, {
            cred_type: 'manual'
          }), {
            success: function() {
              App.vent.trigger('cred:added', _this.credsCollection);
              return _this.destroy();
            },
            error: function(cred, response) {
              var errors;
              _this.hideSpinner();
              errors = $.parseJSON(response.responseText).error;
              return _this.model.set('errors', errors);
            }
          });
        };

        Layout.prototype.renderErrors = function(cred, errors) {
          var _ref, _ref1;
          errors = (_ref = errors[0]) != null ? (_ref1 = _ref.core) != null ? _ref1.base : void 0 : void 0;
          if (errors !== void 0 && errors.length > 0) {
            return _.each(errors, function(error) {
              return App.execute('flash:display', {
                title: 'Credential not saved',
                style: 'error',
                message: "The credential " + error,
                duration: 5000
              });
            });
          }
        };

        return Layout;

      })(App.Views.Layout);
      Clone.Public = (function(_super) {

        __extends(Public, _super);

        function Public() {
          return Public.__super__.constructor.apply(this, arguments);
        }

        Public.prototype.template = Public.prototype.templatePath('creds/clone/public');

        Public.prototype.nestedAttributeName = 'public';

        Public.prototype.onShow = function() {
          Public.__super__.onShow.call(this);
          return this.$(":text:visible:enabled:first").select();
        };

        return Public;

      })(App.Views.FormView);
      Clone.Private = (function(_super) {

        __extends(Private, _super);

        function Private() {
          return Private.__super__.constructor.apply(this, arguments);
        }

        Private.prototype.template = Private.prototype.templatePath('creds/clone/private');

        Private.prototype.nestedAttributeName = 'private';

        Private.prototype.updateModel = function() {
          var data, _ref;
          data = Backbone.Syphon.serialize(this);
          data["private"].type = (_ref = this.model.attributes["private"]) != null ? _ref.type : void 0;
          return this.model.set(data);
        };

        return Private;

      })(App.Views.FormView);
      Clone.Realm = (function(_super) {

        __extends(Realm, _super);

        function Realm() {
          return Realm.__super__.constructor.apply(this, arguments);
        }

        Realm.prototype.template = Realm.prototype.templatePath('creds/new/realm');

        Realm.prototype.initialize = function(opts) {
          return _.extend(this.ui, {
            realmKeySelect: '#realm'
          });
        };

        Realm.prototype.nestedAttributeName = 'realm';

        Realm.prototype.onShow = function() {
          var _ref;
          if (!((_ref = this.model.attributes.realm) != null ? _ref.key : void 0)) {
            this.ui.realmKeySelect.val('None');
            this.model.get('realm').key = 'None';
          }
          return Realm.__super__.onShow.call(this);
        };

        return Realm;

      })(App.Views.FormView);
      return Clone.Type = (function(_super) {

        __extends(Type, _super);

        function Type() {
          return Type.__super__.constructor.apply(this, arguments);
        }

        Type.prototype.template = Type.prototype.templatePath('creds/clone/type');

        Type.prototype.nestedAttributeName = 'private';

        Type.prototype.updateModel = function() {
          var data, _ref;
          data = Backbone.Syphon.serialize(this);
          data["private"].data = (_ref = this.model.attributes["private"]) != null ? _ref.data : void 0;
          return this.model.set(data);
        };

        return Type;

      })(App.Views.FormView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/clone/templates/clone_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<td></td>\n<td>0</td>\n<td class="public"></td>\n<td class="private"></td>\n<td class="type"></td>\n<td class="realm"></td>\n<td>Manual</td>\n<td>Not Validated</td>\n<td>0 tags</td>\n<td>\n  <div class="spinner-content">\n    <a href="javascript:void(0)" class="save">Save</a>\n    <a href="javascript:void(0)" class="cancel">Cancel</a>\n  </div>\n  <div class="spinner"></div>\n</td>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/clone/templates/private"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n  <textarea id="data" type="text" name="private[data]"></textarea>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/clone/templates/public"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n  <input type="text" name="public[username]">\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/clone/templates/type"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n  <select id="type" name="private[type]">\n    <option value="none">None</option>\n    <option value="plaintext">Plaintext Password</option>\n    <option value="ssh">SSH Key</option>\n    <option value="ntlm">NTLM Hash</option>\n    <option value="hash">Hash</option>\n  </select>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/creds/clone/clone_controller', 'apps/creds/new/new_controller', 'apps/creds/export/export_controller', 'apps/creds/delete/delete_controller', 'lib/utilities/navigation', 'entities/cred', 'lib/components/window_slider/window_slider_controller', 'entities/origin', 'backbone_queryparams'], function(HostViewController) {
    return this.Pro.module('CredsApp', function(CredsApp, App) {
      var API,
        _this = this;
      CredsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index",
          "creds": "index",
          "creds/:id": "show",
          "creds/:id/hosts/:host_id": "tab",
          "creds/:id/hosts/:host_id/:tab": "tab"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        show: function(id, cred) {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/creds/show/show_controller'], function() {
            var showController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return showController = new CredsApp.Show.Controller({
              id: id,
              cred: cred
            });
          });
        },
        tab: function(id, host_id, tab) {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['/assets/hosts/backbone/controllers/host_view_controller-6e6371c826a1b256cf4c95c1118e7e80f9813613e56a22c3ca34b6388c52bc1a.js'], function(HostViewController) {
            var hostController;
            loading = false;
            App.execute('loadingOverlay:hide');
            hostController = new HostViewController({
              id: host_id
            });
            return App.execute('sliderRegion:show', {
              show: true
            }, hostController.Tab, tab);
          });
        },
        index: function(params) {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/creds/index/index_controller'], function() {
            var indexController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return indexController = new CredsApp.Index.Controller({
              search: params != null ? params.search : void 0
            });
          });
        },
        "delete": function(options) {
          return new CredsApp.Delete.Controller(options);
        },
        clone: function(cred, credsCollection, $row) {
          var cloneRegion, cloneRegionName;
          cloneRegion = {};
          cloneRegionName = "cloneRegion" + cred.id;
          cloneRegion[cloneRegionName] = '#' + $row.attr('id');
          App.addRegions(cloneRegion);
          return new CredsApp.Clone.Controller({
            cred: cred.clone(),
            credsCollection: credsCollection,
            regionName: cloneRegionName
          });
        }
      };
      App.addInitializer(function() {
        return new CredsApp.Router({
          controller: API
        });
      });
      App.vent.on("host:tab:chose", function(last_tab) {
        return App.navigate("1/hosts/1/" + last_tab, {
          trigger: false
        });
      });
      App.reqres.setHandler('creds:delete', function(options) {
        if (options == null) {
          options = {};
        }
        return API["delete"](options);
      });
      App.reqres.setHandler('navigate:creds:index', function(options) {
        if (options == null) {
          options = {};
        }
        return API.index(options);
      });
      App.vent.on('clone:cred:clicked', function(model, credsCollection, row) {
        return API.clone(model, credsCollection, row);
      });
      App.addRegions({
        mainRegion: "#creds-main-region"
      });
      App.vent.on("core:tag:added", function(credsCollection) {
        App.execute('flash:display', {
          title: 'Credential(s) Tagged ',
          message: 'The credential(s) were successfully tagged.'
        });
        return credsCollection != null ? credsCollection.fetch({
          reset: true
        }) : void 0;
      });
      App.vent.on("core:tag:removed", function(credsCollection) {
        App.execute('flash:display', {
          title: 'Credential Tag Removed ',
          message: 'The tag was successfully removed.'
        });
        return credsCollection != null ? credsCollection.fetch({
          reset: true
        }) : void 0;
      });
      App.vent.on("login:tag:added", function(credsCollection) {
        App.execute('flash:display', {
          title: 'Logins(s) Tagged ',
          message: 'The login(s) were successfully tagged.'
        });
        return credsCollection.fetch({
          reset: true
        });
      });
      App.vent.on("login:added", function() {
        return Backbone.history.loadUrl(Backbone.history.fragment);
      });
      App.vent.on("cred:added", function(credsCollection) {
        App.execute('flash:display', {
          title: 'Credential created',
          message: 'The credential was successfully saved.'
        });
        return credsCollection.fetch({
          reset: true
        });
      });
      App.vent.on("creds:imported", function(credsCollection) {
        App.execute('flash:display', {
          title: 'Credentials importing',
          message: "Your credentials are importing, this may take a while. A notification will appear when done."
        });
        return credsCollection.fetch({
          reset: true
        });
      });
      return App.vent.on("cred:clicked", function(cred_id) {
        API.show(cred_id);
        return App.navigate("creds/" + cred_id, {
          trigger: false
        });
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/creds/delete/delete_view', 'lib/concerns/controllers/table_selections'], function() {
    return this.Pro.module("CredsApp.Delete", function(Delete, App, Backbone, Marionette, $, _) {
      return Delete.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('TableSelections');

        Controller.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection;
          return this.setMainView(new Delete.Layout);
        };

        Controller.prototype.onFormSubmit = function() {
          var defer, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          jQuery.ajax({
            url: gon.destroy_multiple_workspace_metasploit_credential_cores_path,
            type: 'DELETE',
            data: {
              selections: {
                select_all_state: this.selectAllState || null,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              search: this.tableCollection.server_api.search,
              ignore_pagination: true
            },
            success: function() {
              _this.tableCollection.removeMultiple(_this.selectedVisibleCollection.models);
              defer.resolve();
              App.vent.trigger('creds:deleted');
              return App.execute('flash:display', {
                title: "Credential" + (_this.pluralizedMessage('', 's')) + " deleting",
                message: "Your credentials are being deleted, this may take a while. A notification will appear when done."
              });
            }
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'apps/creds/delete/templates/delete_layout'], function() {
    return this.Pro.module('CredsApp.Delete', function(Delete, App) {
      return Delete.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('creds/delete/delete_layout');

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/delete/templates/delete_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="delete-text">\n    Deleting these credentials and related data will permanently remove them from this project.\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/flash/flash_controller', 'apps/creds/export/export_view'], function() {
    return this.Pro.module("CredsApp.Export", function(Export, App, Backbone, Marionette, $, _) {
      Export.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection;
          return this.setMainView(new Export.Layout(opts));
        };

        Controller.prototype.onFormSubmit = function() {
          var data, defer, formSubmit, inputs, requestURL, selections;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          inputs = this._mainView.$el.find('input');
          selections = {
            selections: {
              select_all_state: this.selectAllState || null,
              selected_ids: this.selectedIDs,
              deselected_ids: this.deselectedIDs
            }
          };
          data = inputs.serialize() + '&' + $.param(selections);
          requestURL = gon.export_workspace_metasploit_credential_cores_path + '?' + data;
          $('<iframe/>').attr({
            src: requestURL,
            style: 'display: none;'
          }).appendTo('body');
          defer.resolve();
          App.execute('flash:display', {
            title: 'Export requested',
            message: 'Your credentials export will begin downloading momentarily.'
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('creds:export', function(options) {
        if (options == null) {
          options = {};
        }
        return new Export.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_layout', 'apps/creds/export/templates/export_layout'], function() {
    return this.Pro.module('CredsApp.Export', function(Export, App) {
      return Export.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('creds/export/export_layout');

        Layout.prototype.ui = {
          filenameInput: '#filename',
          csvRadioButton: '#csv',
          pwdumpRadioButton: '#pwdump',
          selectedRadioButton: '#selected',
          allRadioButton: '#all',
          formatOption: 'input[name="export_format"]',
          rowOptions: '.row-options',
          pwdumpWarning: '.pwdump-warning'
        };

        Layout.prototype.events = {
          'change @ui.formatOption': 'toggleFormatDisplay'
        };

        Layout.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection;
          return Layout.__super__.initialize.call(this, opts);
        };

        Layout.prototype.onShow = function() {
          this.setRowOptions();
          return this.setFilename();
        };

        Layout.prototype.setRowOptions = function() {
          var _ref;
          if (!(this.selectAllState || ((_ref = this.selectedIDs) != null ? _ref.length : void 0) > 0)) {
            this.ui.selectedRadioButton.attr('disabled', true);
            this.ui.selectedRadioButton.siblings('label').addClass('disabled');
            return this.ui.allRadioButton.prop('checked', true);
          }
        };

        Layout.prototype.setFilename = function() {
          var filename;
          filename = 'credentials-' + (new Date().getTime());
          this.ui.filenameInput.val(filename);
          return this.ui.filenameInput.select();
        };

        Layout.prototype.toggleFormatDisplay = function(e) {
          this.ui.rowOptions.toggle(!this.ui.pwdumpRadioButton.prop('checked'));
          return this.ui.pwdumpWarning.toggle(this.ui.pwdumpRadioButton.prop('checked'));
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/export/templates/export_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('\n<div class="form-container export-form">\n    <div>\n        <input id="filename" name="filename" type="text">\n        <label for="filename">File Name</label>\n    </div>\n\n    <div>\n        <div class="radio-label inline-block">Format</div>\n\n        <div class="inline-block">\n            <div class="inline-radio">\n                <input id="csv" type="radio" name="export_format" value="csv" checked>\n                <label for="csv">CSV</label>\n            </div>\n\n            <div class="inline-radio wide">\n                <input id="pwdump" type="radio" name="export_format" value="radio">\n                <label for="pwdump">pwdump (logins only)</label>\n            </div>\n        </div>\n    </div>\n\n    <div class="pwdump-warning">\n      SSH keys will not be exported in pwdump format\n    </div>\n\n    <div class="row-options">\n        <div class="radio-label inline-block">Rows</div>\n\n        <div class="inline-block">\n            <div class="inline-radio">\n                <input id="selected" type="radio" name="rows" value="selected" checked>\n                <label for="selected">Selected</label>\n            </div>\n\n            <div class="inline-radio">\n                <input id="all" type="radio" name="rows" value="all">\n                <label for="all">All</label>\n            </div>\n        </div>\n    </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/creds/findings/findings_view'], function() {
    return this.Pro.module("CredsApp.Findings", function(Findings, App) {
      Findings.PrivateController = (function(_super) {

        __extends(PrivateController, _super);

        function PrivateController() {
          return PrivateController.__super__.constructor.apply(this, arguments);
        }

        PrivateController.prototype.initialize = function(opts) {
          var itemView, model;
          model = opts.model;
          itemView = new Findings.Private({
            model: model
          });
          return this.setMainView(itemView);
        };

        return PrivateController;

      })(App.Controllers.Application);
      return Findings.RealmController = (function(_super) {

        __extends(RealmController, _super);

        function RealmController() {
          return RealmController.__super__.constructor.apply(this, arguments);
        }

        RealmController.prototype.initialize = function(opts) {
          var itemView, model;
          model = opts.model;
          itemView = new Findings.Realm({
            model: model
          });
          this.setMainView(itemView);
          this.listenTo(this._mainView, 'show:hover', function() {
            this.hoverView = new Findings.RealmHover({
              model: model
            });
            return this.show(this.hoverView, {
              region: this._mainView.hoverRegion
            });
          });
          return this.listenTo(this._mainView, 'hide:hover', function() {
            return this.hoverView.destroy();
          });
        };

        return RealmController;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_layout', 'base_view', 'base_itemview', 'apps/creds/findings/templates/private_cell', 'apps/creds/findings/templates/private_cell_disclosure_dialog', 'apps/creds/findings/templates/realm_cell', 'apps/creds/findings/templates/logins_hover', 'lib/concerns/views/hover_timeout', 'apps/creds/findings/templates/realm_hover', 'apps/creds/findings/templates/sessions_hover'], function() {
    return this.Pro.module('CredsApp.Findings', function(Findings, App, Backbone, Marionette, $, _) {
      Findings.PrivateCellDisclosureDialog = (function(_super) {

        __extends(PrivateCellDisclosureDialog, _super);

        function PrivateCellDisclosureDialog() {
          return PrivateCellDisclosureDialog.__super__.constructor.apply(this, arguments);
        }

        PrivateCellDisclosureDialog.prototype.template = PrivateCellDisclosureDialog.prototype.templatePath('creds/findings/private_cell_disclosure_dialog');

        return PrivateCellDisclosureDialog;

      })(App.Views.ItemView);
      Findings.Private = (function(_super) {

        __extends(Private, _super);

        function Private() {
          return Private.__super__.constructor.apply(this, arguments);
        }

        Private.prototype.template = Private.prototype.templatePath('creds/findings/private_cell');

        Private.prototype.events = {
          'click a': '_showPrivateModal'
        };

        Private.prototype._showPrivateModal = function() {
          var dialogView;
          dialogView = new Findings.PrivateCellDisclosureDialog({
            model: this.model
          });
          return App.execute('showModal', dialogView, {
            modal: {
              title: 'Private Data',
              description: '',
              width: 600,
              height: 400
            },
            buttons: [
              {
                name: 'Close',
                "class": 'close'
              }
            ]
          });
        };

        return Private;

      })(App.Views.ItemView);
      Findings.Realm = (function(_super) {

        __extends(Realm, _super);

        function Realm() {
          return Realm.__super__.constructor.apply(this, arguments);
        }

        Realm.prototype.template = Realm.prototype.templatePath('creds/findings/realm_cell');

        Realm.prototype.regions = {
          hoverRegion: '.hover-region'
        };

        Realm.include("HoverTimeout");

        return Realm;

      })(App.Views.Layout);
      Findings.RealmHover = (function(_super) {

        __extends(RealmHover, _super);

        function RealmHover() {
          return RealmHover.__super__.constructor.apply(this, arguments);
        }

        RealmHover.prototype.template = RealmHover.prototype.templatePath('creds/findings/realm_hover');

        RealmHover.prototype.className = 'realm-hover';

        return RealmHover;

      })(App.Views.ItemView);
      Findings.SuccessfulLogins = (function(_super) {

        __extends(SuccessfulLogins, _super);

        function SuccessfulLogins() {
          return SuccessfulLogins.__super__.constructor.apply(this, arguments);
        }

        SuccessfulLogins.prototype.template = function(m) {
          var numHosts, phrase, subject;
          subject = 'credential';
          numHosts = parseInt(m.successful_logins, 10);
          if (numHosts !== 1) {
            subject += 's';
          }
          phrase = _.escape("" + (_.escape(m.successful_logins)) + " " + subject);
          if (numHosts > 0) {
            return "<a href='javascript:void(0)'>" + phrase + "</a>";
          } else {
            return phrase;
          }
        };

        return SuccessfulLogins;

      })(App.Views.ItemView);
      Findings.Sessions = (function(_super) {

        __extends(Sessions, _super);

        function Sessions() {
          return Sessions.__super__.constructor.apply(this, arguments);
        }

        Sessions.prototype.template = function(m) {
          var numHosts, phrase, subject;
          subject = 'session';
          numHosts = parseInt(m.session_count, 10);
          if (numHosts !== 1) {
            subject += 's';
          }
          phrase = _.escape("" + (_.escape(m.session_count)) + " " + subject);
          if (numHosts > 0) {
            return "<a href='javascript:void(0)'>" + phrase + "</a>";
          } else {
            return phrase;
          }
        };

        return Sessions;

      })(App.Views.ItemView);
      Findings.LoginsHover = (function(_super) {

        __extends(LoginsHover, _super);

        function LoginsHover() {
          this.sync = __bind(this.sync, this);
          return LoginsHover.__super__.constructor.apply(this, arguments);
        }

        LoginsHover.prototype.className = 'hover-square';

        LoginsHover.prototype.template = LoginsHover.prototype.templatePath('creds/findings/logins_hover');

        LoginsHover.prototype.ui = {
          scrollie: '.scrollie'
        };

        LoginsHover.prototype.onShow = function() {
          return this.timeout = setTimeout(this.sync, 500);
        };

        LoginsHover.prototype.onDestroy = function() {
          return clearTimeout(this.timeout);
        };

        LoginsHover.prototype.sync = function() {
          var url,
            _this = this;
          url = Routes.task_detail_path(WORKSPACE_ID, TASK_ID) + ("/stats/successful_logins_hover.json?service_id=" + (this.model.get('id')));
          return $.getJSON(url).done(function(data) {
            var _ref;
            _this.model.set({
              rowData: data
            });
            if (((_ref = _this.el) != null ? _ref.parentNode : void 0) != null) {
              return _this.render();
            }
          });
        };

        return LoginsHover;

      })(Pro.Views.CompositeView);
      return Findings.SessionsHover = (function(_super) {

        __extends(SessionsHover, _super);

        function SessionsHover() {
          this.sync = __bind(this.sync, this);
          return SessionsHover.__super__.constructor.apply(this, arguments);
        }

        SessionsHover.prototype.className = 'hover-square session';

        SessionsHover.prototype.template = SessionsHover.prototype.templatePath('creds/findings/sessions_hover');

        SessionsHover.prototype.ui = {
          scrollie: '.scrollie'
        };

        SessionsHover.prototype.onShow = function() {
          return this.timeout = setTimeout(this.sync, 500);
        };

        SessionsHover.prototype.onDestroy = function() {
          return clearTimeout(this.timeout);
        };

        SessionsHover.prototype.sync = function() {
          var url,
            _this = this;
          url = Routes.task_detail_path(WORKSPACE_ID, TASK_ID) + ("/stats/sessions_hover.json?service_id=" + (this.model.get('attempt_ids')));
          return $.getJSON(url).done(function(data) {
            var _ref;
            _this.model.set({
              rowData: data
            });
            if (((_ref = _this.el) != null ? _ref.parentNode : void 0) != null) {
              return _this.render();
            }
          });
        };

        return SessionsHover;

      })(Pro.Views.CompositeView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/findings/templates/logins_hover"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var data, fpvt, _i, _len, _ref;
      
        __out.push('<div class="foundation">\n  <div class=\'row\'>\n    <div class=\'large-3 columns\'>Public</div>\n    <div class=\'large-4 columns\'>Private</div>\n    <div class=\'large-5 columns\'>Realm</div>\n  </div>\n  <div class=\'scrollie\'>\n    ');
      
        if (this.rowData == null) {
          __out.push('\n    <div class=\'spinner\'></div>\n    ');
        } else {
          __out.push('\n    ');
          _ref = this.rowData;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            data = _ref[_i];
            __out.push('\n    <div class=\'row\'>\n      <div class=\'large-3 columns\'>');
            __out.push(__sanitize(_.str.truncate(data.public_username, 12)));
            __out.push('</div>\n      ');
            if (data.private_type.match(/key/i)) {
              __out.push('\n      ');
              fpvt = "[" + data.private_type + "]";
              __out.push('\n      <div class=\'large-4 columns\'>');
              __out.push(__sanitize(_.str.truncate(fpvt, 18)));
              __out.push('</div>\n      ');
            } else {
              __out.push('\n      <div class=\'large-4 columns\'>');
              __out.push(__sanitize(_.str.truncate(data.private_data, 18)));
              __out.push('</div>\n      ');
            }
            __out.push('\n      <div class=\'large-5 columns\'>');
            __out.push(__sanitize(data.realm_key));
            __out.push('</div>\n    </div>\n    ');
          }
          __out.push('\n    ');
        }
      
        __out.push('\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/findings/templates/private_cell"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div>\n  ');
      
        if (this.private_show_modal === 'true') {
          __out.push('\n    <a href="javascript:void(0)" class="underline">');
          __out.push(__sanitize(this.private_type_humanized.replace('SSHKey', 'SSH Key')));
          __out.push('</a>\n  ');
        } else {
          __out.push('\n    ');
          __out.push(__sanitize(this["private"]));
          __out.push('\n  ');
        }
      
        __out.push('\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/findings/templates/private_cell_disclosure_dialog"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        if (this.private_type_humanized === 'SSHKey') {
          __out.push('\n<div class=\'ssh-key-fingerprint\'>\n  <h4>Fingerprint:</h4>\n\n  <div>');
          __out.push(__sanitize(this.full_fingerprint));
          __out.push('</div>\n\n</div>\n\n<h4 class="private-key">Private key:</h4>\n');
        }
      
        __out.push('\n\n<div class=\'private-data\'>\n  ');
      
        __out.push(__sanitize(this["private"]));
      
        __out.push('\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/findings/templates/realm_cell"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('\n<div class="realm-data hover-container">\n  <a href="javascript:void(0)">');
      
        __out.push(__sanitize(this.realm_key));
      
        __out.push('</a>\n  <div class="hover-region"></div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/findings/templates/realm_hover"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="title">Realm Name</div>\n<div class="value">');
      
        __out.push(__sanitize(this.realm));
      
        __out.push('</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/findings/templates/sessions_hover"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var data, index, _i, _len, _ref;
      
        __out.push('<div class="foundation">\n  <h5>Go to Session</h5>\n\n  <div class=\'scrollie\'>\n    ');
      
        if (this.rowData == null) {
          __out.push('\n    <div class=\'spinner\'></div>\n    ');
        } else {
          __out.push('\n    ');
          _ref = this.rowData;
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            data = _ref[index];
            __out.push('\n    <div class=\'row\'>\n      <div class="columns large-12">\n        <a href="');
            __out.push(__sanitize(Routes.session_path(WORKSPACE_ID, data.id)));
            __out.push('" class="underline">Session ');
            __out.push(__sanitize(data.id));
            __out.push('</a>\n      </div>\n    </div>\n    ');
          }
          __out.push('\n    ');
        }
      
        __out.push('\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/creds/index/index_view', 'entities/cred', 'lib/concerns/controllers/render_cores_table', 'lib/components/filter/filter_controller'], function() {
    return this.Pro.module("CredsApp.Index", function(Index, App) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('RenderCoresTable');

        Controller.prototype.initialize = function(options) {
          var creds, filterAttrs, search, show, _ref,
            _this = this;
          _.defaults(options, {
            show: true
          });
          show = options.show, filterAttrs = options.filterAttrs, search = options.search;
          this.layout = new Index.Layout;
          this.setMainView(this.layout);
          creds = App.request('creds:entities', typeof window !== "undefined" && window !== null ? (_ref = window.gon) != null ? _ref.related_logins : void 0 : void 0);
          this.listenTo(this._mainView, 'show', function() {
            _this.table = _this.renderCoresTable(creds, _this.layout.credsRegion, {
              search: search,
              htmlID: 'manage-creds',
              filterOpts: {
                filterValuesEndpoint: window.gon.filter_values_workspace_metasploit_credential_cores_path,
                keys: ['logins.status', 'private.data', 'private.type', 'public.username', 'realm.key', 'realm.value', 'tags.name'],
                staticFacets: {
                  'private.type': [
                    {
                      value: 'SSH key',
                      label: 'SSH Key'
                    }, {
                      value: 'NTLM hash',
                      label: 'NTLM Hash'
                    }, {
                      value: 'Nonreplayable hash',
                      label: 'Nonreplayable Hash'
                    }, {
                      value: 'Password',
                      label: 'Password'
                    }
                  ],
                  'realm.key': Pro.Entities.Cred.Realms.ALL.map(function(name) {
                    return {
                      value: name,
                      label: name
                    };
                  }),
                  'logins.status': Pro.Entities.Login.Status.ALL.map(function(name) {
                    return {
                      value: name,
                      label: name
                    };
                  })
                },
                filterRegion: _this.layout.filterRegion
              }
            });
            return _this._mainView.setCarpenterChannel(_this.table.channel());
          });
          if (show) {
            return this.show(this.layout, {
              region: this.region,
              loading: {
                loadingType: 'overlay'
              }
            });
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'apps/creds/index/templates/index_layout', 'lib/components/table/table_view'], function() {
    return this.Pro.module('CredsApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      return Index.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('creds/index/index_layout');

        Layout.prototype.regions = {
          credsRegion: '#creds-region',
          filterRegion: '.filter-region'
        };

        Layout.prototype.updateCredsTotal = function(count) {
          return $('#total-count', this.$el).html(count);
        };

        Layout.prototype.setCarpenterChannel = function(channel) {
          this.channel = channel;
          return this.channel.on('total_records:change', this.updateCredsTotal);
        };

        Layout.prototype.onBeforeDestroy = function() {
          return this.channel.off('total_records:change');
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/index/templates/index_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class=\'fixed\'>\n    <div id="banner-region" class="foundation">\n        <div class="manage-creds-header">\n          <h1 data-table-id=\'manage-creds\'>Manage Credentials</h1>\n\n          <div id="total-count">0</div>\n\n          <div class="filter-region"></div>\n\n          <div class="clear"></div>\n        </div>\n    </div>\n</div>\n\n\n<div class="tags-region"></div>\n\n<div id="creds-region"></div>\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_controller', 'apps/creds/new/new_view', 'apps/logins/new/new_view', 'lib/components/tags/new/new_controller', 'lib/components/tabs/tabs_controller', 'lib/components/file_input/file_input_controller', 'entities/service'], function() {
    return this.Pro.module("CredsApp.New", function(New, App, Backbone, Marionette, $, _) {
      New.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(opts) {
          var _this = this;
          if (opts == null) {
            opts = {};
          }
          this.model = App.request("new:cred:entity");
          this.tableCollection = opts.tableCollection;
          this.setMainView(new New.Layout({
            model: this.model
          }));
          this.listenTo(this.getMainView(), 'type:selected', function(obj) {
            var collection, model, view;
            collection = obj.collection, model = obj.model, view = obj.view;
            if ($(':checked', view.ui.cred_type).val() === "import") {
              return _this.showImportCred();
            } else {
              return _this.showManualCred();
            }
          });
          return this.listenTo(this.getMainView(), "show", function() {
            _this.showManualCred();
            _this.showTagging();
            return typeof _this.hideTypes === "function" ? _this.hideTypes() : void 0;
          });
        };

        Controller.prototype.showTagging = function() {
          var collection, msg, query, url;
          msg = App.request('new:cred:entity').get('taggingModalHelpContent');
          query = "";
          url = this.model.tagUrl();
          collection = new Backbone.Collection([]);
          this.tagController = App.request('tags:new:component', collection, {
            q: query,
            url: url,
            content: msg
          });
          return this.show(this.tagController, {
            region: this._mainView.tags
          });
        };

        Controller.prototype.showImportCred = function() {
          var _this = this;
          this.importView = new New.Import({
            model: this.model
          });
          this.listenTo(this.importView, 'show', function() {
            var importFile, passwordImportFile, usernameImportFile;
            importFile = App.request('file_input:component');
            usernameImportFile = App.request('file_input:component', {
              name: 'file_input[username]',
              id: 'username'
            });
            passwordImportFile = App.request('file_input:component', {
              name: 'file_input[password]',
              id: 'password'
            });
            _this.show(importFile, {
              region: _this.importView.fileInput
            });
            _this.show(usernameImportFile, {
              region: _this.importView.userFileInput
            });
            return _this.show(passwordImportFile, {
              region: _this.importView.passFileInput
            });
          });
          return this.show(this.importView, {
            region: this._mainView.formContainer
          });
        };

        Controller.prototype.showManualCred = function() {
          this.tabController = App.request('tabs:component', this.getTabConfig(this.model));
          return this.show(this.tabController, {
            region: this._mainView.formContainer
          });
        };

        Controller.prototype.getTabConfig = function() {
          return {
            tabs: [
              {
                name: 'Realm',
                view: New.Realm,
                model: this.model
              }, {
                name: 'Public',
                view: New.Public,
                model: this.model
              }, {
                name: 'Private',
                view: New.Private,
                model: this.model
              }
            ]
          };
        };

        Controller.prototype.onFormSubmit = function() {
          var credType, data, defer, fileType, formSubmit, iframeSaveOptions, saveOptions, usingFileInput,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          this.model.set('tags', this.tagController.getDataOptions());
          this.model.unset('errors');
          credType = $(':checked', this._mainView.ui.cred_type).val();
          usingFileInput = (this.importView != null) && (this.importView.fileInput != null);
          saveOptions = {
            complete: function(data) {
              var error, error_tabs, errors, index, parsedData, _i, _len;
              parsedData = data.responseJSON;
              if (parsedData.success) {
                defer.resolve();
                if (usingFileInput) {
                  return App.vent.trigger('creds:imported', _this.tableCollection);
                } else {
                  return App.vent.trigger('cred:added', _this.tableCollection);
                }
              } else {
                errors = parsedData.error;
                if (parsedData.error.input) {
                  _.extend(errors, {
                    file_input: {
                      data: parsedData.error.input.first()
                    }
                  });
                }
                _this.model.set('errors', errors);
                if (!usingFileInput) {
                  _this.tabController.resetValidTabs();
                  error_tabs = [];
                  for (index = _i = 0, _len = errors.length; _i < _len; index = ++_i) {
                    error = errors[index];
                    if (_.size(error[Object.keys(error)[0]]) > 0) {
                      error_tabs.push(index - 1);
                    }
                  }
                  return _this.tabController.setInvalidTabs(error_tabs);
                }
              }
            }
          };
          if (usingFileInput) {
            fileType = $(':checked', this.importView.ui.importType).val();
            data = this.model.attributes;
            data.authenticity_token = $('meta[name=csrf-token]').attr('content');
            data.cred_type = credType;
            data.iframe = true;
            if (fileType === 'csv' || fileType === 'pwdump') {
              iframeSaveOptions = {
                iframe: true,
                data: data,
                files: this.importView.fileInput.currentView.ui.file_input
              };
            } else {
              iframeSaveOptions = {
                iframe: true,
                data: data,
                files: $(".user-pass-file-input-region").find("input")
              };
            }
            _.extend(saveOptions, iframeSaveOptions);
          }
          this.model.save(_.extend(this.model.attributes, {
            cred_type: credType
          }), saveOptions);
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
      New.LoginController = (function(_super) {

        __extends(LoginController, _super);

        function LoginController() {
          this._updateServiceForm = __bind(this._updateServiceForm, this);
          return LoginController.__super__.constructor.apply(this, arguments);
        }

        LoginController.prototype.hideTypes = function() {
          return this._mainView.hideCredTypes();
        };

        LoginController.prototype.showManualCred = function() {
          var _this = this;
          this.tabController = App.request('tabs:component', this.getTabConfig(this.model));
          this.loginLayout = new App.LoginsApp.New.Layout();
          this.listenTo(this.loginLayout, 'show', function() {
            _this.loginLayout.removeLoading();
            _this.loginLayout.removeTags();
            _this.loginFormView = new App.LoginsApp.New.Form({
              model: new Backbone.Model({
                hosts: {},
                services: {}
              })
            });
            _this.access_level_view = App.request("creds:accessLevel:view", {
              model: new Backbone.Model({
                access_level: 'Admin'
              }),
              save: false,
              showLabel: true
            });
            _this.listenTo(_this.loginFormView, 'show', function() {
              _this.updateServices();
              _this.loginFormView.hideHost();
              return _this.show(_this.access_level_view, {
                region: _this.loginFormView.accessLevelRegion
              });
            });
            return _this.show(_this.loginFormView, {
              region: _this.loginLayout.form
            });
          });
          this.show(this.loginLayout, {
            region: this._mainView.loginFormContainer
          });
          return this.show(this.tabController, {
            region: this._mainView.formContainer
          });
        };

        LoginController.prototype.updateServices = function() {
          this.host_id = HOST_ID;
          this.services = App.request("services:entities", {
            host_id: this.host_id
          });
          return this.services.fetch({
            reset: true
          }).then(this._updateServiceForm);
        };

        LoginController.prototype._updateServiceForm = function() {
          this.loginFormView.model.set('services', this.services.toJSON());
          this.loginFormView.render();
          this.loginFormView.hideHost();
          this.access_level_view = App.request("creds:accessLevel:view", {
            model: new Backbone.Model({
              access_level: 'Admin'
            }),
            save: false,
            showLabel: true
          });
          return this.show(this.access_level_view, {
            region: this.loginFormView.accessLevelRegion
          });
        };

        LoginController.prototype.onFormSubmit = function() {
          var data;
          $(':checked', this._mainView.ui.cred_type).val('login');
          data = Backbone.Syphon.serialize(this.loginLayout);
          this.model.set('login', data);
          return LoginController.__super__.onFormSubmit.apply(this, arguments);
        };

        return LoginController;

      })(New.Controller);
      return App.reqres.setHandler('creds:new', function(opts) {
        if (opts == null) {
          opts = {};
        }
        if (opts.login != null) {
          return new New.LoginController(opts);
        } else {
          return new New.Controller(opts);
        }
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_itemview', 'base_layout', 'apps/creds/new/templates/new_layout', 'apps/creds/new/templates/realm', 'apps/creds/new/templates/public', 'apps/creds/new/templates/private', 'apps/creds/new/templates/import'], function() {
    return this.Pro.module('CredsApp.New', function(New, App, Backbone, Marionette, $, _) {
      New.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          this._renderErrors = __bind(this._renderErrors, this);
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('creds/new/new_layout');

        Layout.prototype.ui = {
          cred_type: '.cred-type',
          tag_container: '.tag-container',
          errors: '.core-errors'
        };

        Layout.prototype.triggers = {
          'change [name="cred_type"]': 'type:selected',
          'submit form': 'preventFormSubmit'
        };

        Layout.prototype.modelEvents = {
          'change:errors': 'updateErrors'
        };

        Layout.prototype.regions = {
          tags: '.tags',
          formContainer: '.form-container.cred',
          loginFormContainer: '.login-form-container'
        };

        Layout.prototype.hideCredTypes = function() {
          return this.ui.cred_type.css('visibility', 'hidden');
        };

        Layout.prototype.updateErrors = function(core, errors) {
          errors = _.filter(errors, function(error) {
            return error['core'] != null;
          });
          return this._renderErrors(errors);
        };

        Layout.prototype.preventFormSubmit = function(e) {
          return e.preventDefault();
        };

        Layout.prototype._renderErrors = function(errors) {
          var _this = this;
          $('.error', this.el).remove();
          if (!_.isEmpty(errors) && (errors[0]['core'] != null)) {
            return _.each(errors[0]['core'], function(v, k) {
              var $msg, error, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = v.length; _i < _len; _i++) {
                error = v[_i];
                $msg = $('<div />', {
                  "class": 'error'
                }).text('The credential ' + error);
                _results.push(_this.ui.errors.append($msg));
              }
              return _results;
            });
          }
        };

        return Layout;

      })(App.Views.Layout);
      New.Realm = (function(_super) {

        __extends(Realm, _super);

        function Realm() {
          this._renderErrors = __bind(this._renderErrors, this);
          return Realm.__super__.constructor.apply(this, arguments);
        }

        Realm.prototype.template = Realm.prototype.templatePath("creds/new/realm");

        Realm.prototype.ui = {
          realmOptions: '#realm option',
          realm: "#realm",
          name: '#name',
          nameLabel: '[for="name"]'
        };

        Realm.prototype.events = {
          'change form': 'updateModel',
          'input form': 'updateModel',
          'change @ui.realm': 'typeChanged'
        };

        Realm.prototype.modelEvents = {
          'change:errors': 'updateErrors'
        };

        Realm.prototype.onShow = function() {
          Backbone.Syphon.deserialize(this, this.model.toJSON());
          return this.initUi();
        };

        Realm.prototype.onDestroy = function() {
          return this.updateModel();
        };

        Realm.prototype.updateModel = function() {
          var data;
          data = Backbone.Syphon.serialize(this);
          return this.model.set(data);
        };

        Realm.prototype.updateErrors = function(cred, errors) {
          errors = _.filter(errors, function(error) {
            return error['realm'] != null;
          });
          return this._renderErrors(errors);
        };

        Realm.prototype._renderErrors = function(errors) {
          var _this = this;
          $('.error', this.el).remove();
          if (!_.isEmpty(errors) && (errors[0]['realm'] != null)) {
            return _.each(errors[0]['realm'], function(v, k) {
              var $msg, error, name, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = v.length; _i < _len; _i++) {
                error = v[_i];
                name = "realm[" + k + "]";
                $msg = $('<div />', {
                  "class": 'error'
                }).text(error);
                _results.push($("input[name='" + name + "']", _this.el).addClass('invalid').after($msg));
              }
              return _results;
            });
          }
        };

        Realm.prototype.initUi = function() {
          var e, _ref;
          if (((_ref = this.model.get('realm')) != null ? _ref.key : void 0) == null) {
            this.ui.realmOptions.first().attr('selected', 'selected');
            this.ui.name.addClass('invisible');
          } else {
            e = {};
            e.target = $(':selected', this.ui.realm);
            this.typeChanged(e);
            Backbone.Syphon.deserialize(this, this.model.toJSON());
          }
          return this.updateErrors(null, this.model.get('errors'));
        };

        Realm.prototype.typeChanged = function(e) {
          var selected;
          selected = $(e.target).val();
          if (selected === "None") {
            this.ui.name.addClass('invisible');
            return this.ui.nameLabel.addClass('invisible');
          } else {
            this.ui.name.removeClass('invisible');
            return this.ui.nameLabel.removeClass('invisible');
          }
        };

        return Realm;

      })(App.Views.ItemView);
      New.Import = (function(_super) {

        __extends(Import, _super);

        function Import() {
          return Import.__super__.constructor.apply(this, arguments);
        }

        Import.prototype.template = Import.prototype.templatePath("creds/new/import");

        Import.prototype.ui = {
          passwordType: '.password-type',
          importType: '.import-type',
          importTypeValue: '[name="import[type]"]',
          fileInputRegion: '.file-input-region',
          importSelect: '[name="import[password_type]"]',
          nonReplayableValue: '[value="non-replayable"]',
          sshValue: '[value="ssh"]'
        };

        Import.prototype.events = {
          'change form': 'updateModel',
          'change input': 'updateModel',
          'change [name="import[type]"]': 'updatePrivateType'
        };

        Import.prototype.modelEvents = {
          'change:errors': 'updateErrors'
        };

        Import.prototype.regions = {
          fileInput: '.file-input-region',
          userFileInput: '.user-file-input-region',
          passFileInput: '.pass-file-input-region'
        };

        Import.prototype.onShow = function() {
          Backbone.Syphon.deserialize(this, this.model.toJSON());
          window.Forms.renderHelpLinks(this.el);
          if (this.model.get('import').type === 'pwdump' || this.model.get('import').type === 'user_pass') {
            return this.ui.importTypeValue.trigger('change');
          }
        };

        Import.prototype.updateModel = function() {
          var data;
          data = Backbone.Syphon.serialize(this);
          return this.model.set(data);
        };

        Import.prototype.updatePrivateType = function(e) {
          var type;
          type = $(e.target).val();
          if (type === "user_pass") {
            $(this.ui.importSelect).find(this.ui.nonReplayableValue).prop('disabled', true);
            $(this.ui.importSelect).find(this.ui.sshValue).prop('disabled', true);
          } else {
            $(this.ui.importSelect).find(this.ui.nonReplayableValue).prop('disabled', false);
            $(this.ui.importSelect).find(this.ui.sshValue).prop('disabled', false);
          }
          if (type === "csv" || type === "user_pass") {
            this.ui.passwordType.css('visibility', 'visible');
          } else {
            this.ui.passwordType.css('visibility', 'hidden');
          }
          return this.updateFileInput(type);
        };

        Import.prototype.updateFileInput = function(type) {
          if (type === "csv" || type === "pwdump") {
            this.ui.fileInputRegion.css('display', 'inline');
            return $(".user-pass-file-input-region").css('display', 'none');
          } else {
            this.ui.fileInputRegion.css('display', 'none');
            return $(".user-pass-file-input-region").css('display', 'inline');
          }
        };

        Import.prototype.updateErrors = function(cred, errors) {
          var $msg;
          $('.error', this.el).remove();
          if (!_.isEmpty(errors) && (errors['file_input'] != null)) {
            if (errors['file_input']['data']) {
              $msg = $('<div />', {
                "class": 'error'
              }).text(errors['file_input']['data']);
              $("input[name='file_input[data]']", this.el).addClass('invalid').after($msg);
            }
            if (errors['file_input']['username']) {
              $msg = $('<div />', {
                "class": 'error'
              }).text(errors['file_input']['username']);
              $("input[name='file_input[username]']", this.el).addClass('invalid').after($msg);
            }
            if (errors['file_input']['password']) {
              $msg = $('<div />', {
                "class": 'error'
              }).text(errors['file_input']['password']);
              return $("input[name='file_input[password]']", this.el).addClass('invalid').after($msg);
            }
          }
        };

        return Import;

      })(App.Views.Layout);
      New.Public = (function(_super) {

        __extends(Public, _super);

        function Public() {
          this._renderErrors = __bind(this._renderErrors, this);
          return Public.__super__.constructor.apply(this, arguments);
        }

        Public.prototype.template = Public.prototype.templatePath("creds/new/public");

        Public.prototype.events = {
          'change form': 'updateModel',
          'input form': 'updateModel'
        };

        Public.prototype.modelEvents = {
          'change:errors': 'updateErrors'
        };

        Public.prototype.onShow = function() {
          Backbone.Syphon.deserialize(this, this.model.toJSON());
          return this.updateErrors(null, this.model.get('errors'));
        };

        Public.prototype.onDestroy = function() {
          return this.updateModel();
        };

        Public.prototype.updateModel = function() {
          var data;
          data = Backbone.Syphon.serialize(this);
          return this.model.set(data);
        };

        Public.prototype.updateErrors = function(cred, errors) {
          errors = _.filter(errors, function(error) {
            return error['public'] != null;
          });
          return this._renderErrors(errors);
        };

        Public.prototype._renderErrors = function(errors) {
          var _this = this;
          $('.error', this.el).remove();
          if (!_.isEmpty(errors) && (errors[0]['public'] != null)) {
            return _.each(errors[0]['public'], function(v, k) {
              var $msg, error, name, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = v.length; _i < _len; _i++) {
                error = v[_i];
                name = "public[" + k + "]";
                $msg = $('<div />', {
                  "class": 'error'
                }).text(error);
                _results.push($("input[name='" + name + "']", _this.el).addClass('invalid').after($msg));
              }
              return _results;
            });
          }
        };

        return Public;

      })(App.Views.ItemView);
      return New.Private = (function(_super) {

        __extends(Private, _super);

        function Private() {
          this._renderErrors = __bind(this._renderErrors, this);
          return Private.__super__.constructor.apply(this, arguments);
        }

        Private.prototype.template = Private.prototype.templatePath("creds/new/private");

        Private.prototype.ui = {
          type: '#type',
          typeOptions: '#type option',
          options: '.option',
          data: '#data'
        };

        Private.prototype.events = {
          'change @ui.type': 'typeChanged',
          'change form': 'updateModel',
          'input form': 'updateModel'
        };

        Private.prototype.modelEvents = {
          'change:errors': 'updateErrors'
        };

        Private.prototype.onShow = function() {
          Backbone.Syphon.deserialize(this, this.model.toJSON());
          this.initUi();
          return this.updateErrors(null, this.model.get('errors'));
        };

        Private.prototype.onDestroy = function() {
          return this.updateModel();
        };

        Private.prototype.updateModel = function() {
          var data;
          data = Backbone.Syphon.serialize(this);
          return this.model.set(data);
        };

        Private.prototype.updateErrors = function(cred, errors) {
          errors = _.filter(errors, function(error) {
            return error['private'] != null;
          });
          return this._renderErrors(errors);
        };

        Private.prototype.initUi = function() {
          var _ref;
          if (((_ref = this.model.get('private')) != null ? _ref.type : void 0) == null) {
            this.ui.typeOptions.first().attr('selected', 'selected');
            return this.ui.data.addClass('invisible');
          } else {
            $(':selected', this.ui.type).change();
            return Backbone.Syphon.deserialize(this, this.model.toJSON());
          }
        };

        Private.prototype._renderErrors = function(errors) {
          var _this = this;
          $('.error', this.el).remove();
          if (!_.isEmpty(errors) && (errors[0]['private'] != null)) {
            return _.each(errors[0]['private'], function(v, k) {
              var $msg, error, name, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = v.length; _i < _len; _i++) {
                error = v[_i];
                name = "private[" + k + "]";
                $msg = $('<div />', {
                  "class": 'error'
                }).text(error);
                _results.push($("[name='" + name + "']", _this.el).addClass('invalid').after($msg));
              }
              return _results;
            });
          }
        };

        Private.prototype.replaceWithInput = function(el) {
          var newEl;
          newEl = jQuery("<input>");
          newEl.attr('type', 'text').attr('id', 'data').attr('name', "private[data]");
          return $("#data").replaceWith(newEl);
        };

        Private.prototype.replaceWithTextArea = function() {
          var newEl;
          newEl = jQuery("<textarea>");
          newEl.attr('id', 'data').attr('name', "private[data]").attr('rows', '4');
          return $("#data").replaceWith(newEl);
        };

        Private.prototype.blankInput = function() {
          return jQuery("#data").addClass('invisible');
        };

        Private.prototype.typeChanged = function(e) {
          var selected;
          selected = $(e.target).val();
          this.ui.options.addClass('invisible');
          $(".option." + selected, this.el).removeClass('invisible');
          if (selected === "none") {
            this.ui.data = this.ui.data.addClass('invisible');
          } else {
            this.ui.data = this.ui.data.removeClass('invisible');
          }
          if (this.ui.type.val() === 'plaintext') {
            return this.replaceWithInput();
          } else if (this.ui.type.val() !== 'none') {
            return this.replaceWithTextArea();
          } else {
            return this.blankInput();
          }
        };

        return Private;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/new/templates/import"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form class="import-form">\n  <div class="file-input-region"></div>\n\n  <div class="user-pass-file-input-region">\n    Username file:\n    <div class="user-file-input-region"></div>\n    Password file:\n    <div class="pass-file-input-region"></div>\n  </div>\n\n  <div class="import-file-input">\n    <label id="import-file-input" style="position: absolute; margin-left: 4px; margin-top: 2px"></label>\n  </div>\n\n  <div class="inline-help" data-field="import-file-input">\n    <a href class="help" data-field="import-file-input" target="_blank">\n      <img src="/assets/icons/silky/information-c0210a97250ec34cc04d6c8ff768012bf9e054abe33c7fcc558f65bf57a1661a.png" />\n    </a>\n    <h3>File Import</h3>\n    <div style="margin-top: 6px;">\n      <p>\n        The Following file types are supported:\n      </p>\n\n      <ul>\n        <li>\n          CSV - A comma separated file that contains plain text credentials or hashes. The file must contain\n          the following header row: username,private_data.\n        </li>\n        <li>\n          TXT - A text file that contains plain text credentials or hashes. Each credential must appear on a\n          separate line. Unless you are using the User/Pass option, you must include the following header row in the file:\n          username,private_data. The file can also be a PWDump file exported from Metasploit.\n        </li>\n        <li>\n          ZIP - A compressed file exported from Metasploit that contains a CSV file of credentials.\n          If the exported file also contained SSH keys, the ZIP file will contain a manifest file that maps\n          SSH keys to usernames.\n        </li>\n      </ul>\n\n    </div>\n  </div>\n\n\n  <div class="import-type">\n    <div class="radio-label">Format</div>\n    <div class="inline-radio">\n      <label>\n        <input name="import[type]" value="csv" type="radio" checked="checked">\n        CSV\n      </label>\n    </div>\n\n    <div class="inline-radio">\n      <label>\n        <input name="import[type]" value="pwdump" type="radio">\n        pwdump\n      </label>\n    </div>\n\n    <div class="inline-radio">\n      <label>\n        <input name="import[type]" value="user_pass" type="radio">\n        User/Pass\n      </label>\n    </div>\n\n    <div class="import-format">\n      <label id="import-format" style="position: absolute; margin-left: 4px; margin-top: 2px"></label>\n    </div>\n\n    <div class="inline-help" data-field="import-format">\n      <a href class="help" data-field="import-format" target="_blank">\n        <img src="/assets/icons/silky/information-c0210a97250ec34cc04d6c8ff768012bf9e054abe33c7fcc558f65bf57a1661a.png" />\n      </a>\n      <h3>Import Format</h3>\n      <div style="margin-top: 6px;">\n        The following file formats are supported:\n\n        <ul>\n          <li>\n            CSV - The contents of the file are comma delimited. You should always use this option\n            unless the imported file is a password dump.\n          </li>\n\n          <li>\n            PWDump - The contents of the file were exported from Metasploit as a password dump.\n            Password dumps only contain credentials that have logins.\n          </li>\n\n          <li>\n            User/Pass - This option will allow you to input separate username and password files using a text file format.\n            These inputs generate credentials for all possible permutations. To enable, input each username or password on its\n            own line without a header. NTLM hashes and plain text passwords are supported.\n          </li>\n\n\n        </ul>\n\n      </div>\n    </div>\n\n\n  </div>\n\n  <hr>\n\n  <div class="password-type">\n    <p>\n      Select the type that will be used for credentials that do not have a type defined in\n      your import file:\n    </p>\n\n\n    <div>\n      <select name="import[password_type]">\n        <option value="plaintext">Plaintext Password</option>\n        <option value="ssh">SSH Key</option>\n        <option value="ntlm">NTLM Hash</option>\n        <option value="non-replayable">Non-Replayable Hash</option>\n      </select>\n\n      <div class="password-help">\n        <div class="password-help-label">\n          <label id="password-type" style="position: absolute; margin-left: 4px; margin-top: 2px"></label>\n        </div>\n\n        <div class="inline-help" data-field="password-type">\n          <a href class="help" data-field="password-type" target="_blank">\n            <img src="/assets/icons/silky/information-c0210a97250ec34cc04d6c8ff768012bf9e054abe33c7fcc558f65bf57a1661a.png" />\n          </a>\n          <h3>Password Type</h3>\n          <div style="margin-top: 6px;">\n            <p>\n              All credentials must have a defined type. You can set the default value for credentials\n              that do not have a type defined in the imported file. If Metasploit imports a credential\n              that has an empty type field, it will automatically assign this type to the credential.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <hr>\n\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/new/templates/new_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="add-cred">\n    <div class="cred-type">\n        <div class="manual">\n            <input id="manual" name="cred_type" value="manual" type="radio" checked="checked">\n            <label for="manual">Manual</label>\n        </div>\n        <div class="import">\n            <input id="import" name="cred_type" value="import" type="radio">\n            <label for="import">Import</label>\n        </div>\n    </div>\n\n    <div class="form-container cred"></div>\n\n    <div class="login-form-container"></div>\n\n\n    <div class="tag-container clear-floats">\n        <label for="token-input-">Tags</label>\n        <div class="tags"></div>\n    </div>\n\n    <div class="core-errors"></div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/new/templates/private"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n  <div>\n    <label for="type">Private type</label>\n    <select id="type" name="private[type]">\n      <option value="none">None</option>\n      <option value="plaintext">Plaintext Password</option>\n      <option value="ssh">SSH Key</option>\n      <option value="ntlm">NTLM Hash</option>\n      <option value="hash">Hash</option>\n    </select>\n  </div>\n\n  <div class=\'clear-floats\'>\n    <div class="none">\n\n    </div>\n\n    <div class="plaintext invisible option">\n      <label for="data">Password</label>\n    </div>\n\n    <div class="ssh invisible option">\n      <label for="data">SSH Key</label>\n    </div>\n\n    <div class="ntlm invisible option">\n      <label for="data">NTLM Hash</label>\n    </div>\n\n    <div class="hash invisible option">\n      <label for="data">Hash</label>\n    </div>\n    <textarea id="data" type="text" name="private[data]"></textarea>\n  </div>\n\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/new/templates/public"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n    <label for="username">Public</label>\n    <input type="text" id="username" name="public[username]">\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/new/templates/realm"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var realm, _i, _len, _ref;
      
        __out.push('<form>\n  <div>\n    <label for="realm">Realm Type</label>\n    <select id="realm" name="realm[key]">\n        <option value="None">None</option>\n        ');
      
        _ref = Pro.Entities.Cred.Realms.ALL;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          realm = _ref[_i];
          __out.push('\n            <option value="');
          __out.push(__sanitize(realm));
          __out.push('">');
          __out.push(__sanitize(realm));
          __out.push('</option>\n        ');
        }
      
        __out.push('\n    </select>\n  </div>\n\n  <div class=\'clear-floats\'>\n    <label for="name">Realm Name</label>\n    <input id="name" name="realm[value]" type="text" />\n  </div>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_view', 'base_itemview', 'base_layout', 'apps/creds/shared/templates/clone_cell', 'apps/creds/shared/templates/private_cell', 'apps/creds/shared/templates/private_cell_disclosure_dialog', 'apps/creds/shared/templates/origin_cell', 'apps/creds/shared/templates/origin_cell_disclosure_dialog', 'entities/origin'], function() {
    return this.Pro.module('CredsApp.Shared', function(Shared, App, Backbone, Marionette, $, _) {
      var _this = this;
      Shared.CoresTableCloneCell = (function(_super) {

        __extends(CoresTableCloneCell, _super);

        function CoresTableCloneCell() {
          return CoresTableCloneCell.__super__.constructor.apply(this, arguments);
        }

        CoresTableCloneCell.prototype.template = JST['backbone/apps/creds/shared/templates/clone_cell'];

        CoresTableCloneCell.prototype.ui = {
          cloneButton: 'a.clone'
        };

        CoresTableCloneCell.prototype.events = {
          'click @ui.cloneButton': 'showCloneForm'
        };

        CoresTableCloneCell.prototype.initialize = function(opts) {
          this.credsCollection = opts.collection;
          return CoresTableCloneCell.__super__.initialize.call(this, opts);
        };

        CoresTableCloneCell.prototype.showCloneForm = function() {
          var $row;
          $row = $("<tr id='clone-form-" + this.model.id + "'></tr>");
          this.$el.closest('tr').before($row);
          return App.vent.trigger('clone:cred:clicked', this.model, this.credsCollection, $row);
        };

        return CoresTableCloneCell;

      })(App.Views.ItemView);
      Shared.CoresTablePublicCell = (function(_super) {

        __extends(CoresTablePublicCell, _super);

        function CoresTablePublicCell() {
          this.template = __bind(this.template, this);
          return CoresTablePublicCell.__super__.constructor.apply(this, arguments);
        }

        CoresTablePublicCell.prototype.events = {
          'click': "credClicked"
        };

        CoresTablePublicCell.prototype.initialize = function(opts) {
          this.opts = opts;
          return _.defaults(this.opts, {
            disableCredLinks: false
          });
        };

        CoresTablePublicCell.prototype.template = function() {
          var username;
          username = this.model.get('public.username');
          username = username != null ? username : '*BLANK*';
          if (this.opts.disableCredLinks) {
            return _.escape(username);
          } else {
            return "<a href='/workspaces/" + (_.escape(this.model.get('workspace_id'))) + "/credentials#creds/" + (_.escape(this.model.id)) + "'>" + (_.escape(username)) + "</a>";
          }
        };

        return CoresTablePublicCell;

      })(App.Views.ItemView);
      Shared.CoresTablePrivateCell = (function(_super) {

        __extends(CoresTablePrivateCell, _super);

        function CoresTablePrivateCell() {
          this.serializeData = __bind(this.serializeData, this);
          return CoresTablePrivateCell.__super__.constructor.apply(this, arguments);
        }

        CoresTablePrivateCell.prototype.template = JST['backbone/apps/creds/shared/templates/private_cell'];

        CoresTablePrivateCell.prototype.ui = {
          privateDisclosureLink: 'a.private-data-disclosure',
          filterEventLink: 'a.filter.event'
        };

        CoresTablePrivateCell.prototype.events = {
          'click @ui.privateDisclosureLink': 'showPrivateDataDialog',
          'click @ui.filterEventLink': 'navigateToIndexWithFilter'
        };

        CoresTablePrivateCell.prototype.initialize = function(opts) {
          return this.displayFilterLink = this.model.isSSHKey() ? false : !!opts.displayFilterLink;
        };

        CoresTablePrivateCell.prototype.showPrivateDataDialog = function() {
          var dialogView;
          dialogView = new Shared.CoresTablePrivateCellDisclosureDialog({
            model: this.model
          });
          return App.execute('showModal', dialogView, {
            modal: {
              title: 'Private Data',
              description: '',
              width: 600,
              height: 400
            },
            buttons: [
              {
                name: 'Close',
                "class": 'close'
              }
            ]
          });
        };

        CoresTablePrivateCell.prototype.navigateToIndexWithFilter = function(search) {
          if (this.model.isSSHKey()) {
            return;
          }
          return App.request('navigate:creds:index', {
            search: "private.data:'" + (this.model.get('private.data')) + "'"
          });
        };

        CoresTablePrivateCell.prototype.displayFilterEventLink = function() {
          return this.displayFilterLink && this.model.get('private.data') && !this.model.isSSHKey() && this.model.get('private.data').length > 50;
        };

        CoresTablePrivateCell.prototype.serializeData = function() {
          return _.extend(this.model.attributes, {
            truncated: this.model.isTruncated(),
            displayFilterLink: this.displayFilterLink,
            displayFilterEventLink: this.displayFilterEventLink()
          });
        };

        return CoresTablePrivateCell;

      })(App.Views.ItemView);
      Shared.CoresTablePrivateCellDisclosureDialog = (function(_super) {

        __extends(CoresTablePrivateCellDisclosureDialog, _super);

        function CoresTablePrivateCellDisclosureDialog() {
          return CoresTablePrivateCellDisclosureDialog.__super__.constructor.apply(this, arguments);
        }

        CoresTablePrivateCellDisclosureDialog.prototype.template = JST['backbone/apps/creds/shared/templates/private_cell_disclosure_dialog'];

        CoresTablePrivateCellDisclosureDialog.prototype.ui = {
          content: '.private-data'
        };

        CoresTablePrivateCellDisclosureDialog.prototype.onShow = function() {
          return this.selectText(this.ui.content[0]);
        };

        return CoresTablePrivateCellDisclosureDialog;

      })(App.Views.ItemView);
      Shared.CoresTableOriginCell = (function(_super) {

        __extends(CoresTableOriginCell, _super);

        function CoresTableOriginCell() {
          return CoresTableOriginCell.__super__.constructor.apply(this, arguments);
        }

        CoresTableOriginCell.prototype.template = JST['backbone/apps/creds/shared/templates/origin_cell'];

        CoresTableOriginCell.prototype.ui = {
          originDisclosureLink: 'a.origin-disclosure'
        };

        CoresTableOriginCell.prototype.events = {
          'click @ui.originDisclosureLink': 'showOriginDataDialog'
        };

        CoresTableOriginCell.prototype.showOriginDataDialog = function() {
          var dialogView;
          dialogView = new Shared.CoresTableOriginCellDisclosureDialog({
            model: this.model
          });
          return App.execute('showModal', dialogView, {
            modal: {
              title: 'Origin',
              description: '',
              width: 600,
              height: 200
            },
            buttons: [
              {
                name: 'Close',
                "class": 'close'
              }
            ]
          });
        };

        return CoresTableOriginCell;

      })(App.Views.ItemView);
      Shared.CoresTableOriginCellDisclosureDialog = (function(_super) {

        __extends(CoresTableOriginCellDisclosureDialog, _super);

        function CoresTableOriginCellDisclosureDialog() {
          return CoresTableOriginCellDisclosureDialog.__super__.constructor.apply(this, arguments);
        }

        CoresTableOriginCellDisclosureDialog.prototype.template = JST['backbone/apps/creds/shared/templates/origin_cell_disclosure_dialog'];

        CoresTableOriginCellDisclosureDialog.prototype.ui = {
          modalContent: '.origin-disclosure-modal'
        };

        CoresTableOriginCellDisclosureDialog.prototype.onShow = function() {
          var origin,
            _this = this;
          origin = App.request("origin:entity", this.model.id, this.model.get('origin_url'));
          return origin.fetch({
            success: function(model) {
              return _this.ui.modalContent.html(model.get('pretty_origin'));
            }
          });
        };

        return CoresTableOriginCellDisclosureDialog;

      })(App.Views.ItemView);
      App.reqres.setHandler('creds:shared:coresTableCloneCell', function(opts, config) {
        if (opts == null) {
          opts = {};
        }
        if (config == null) {
          config = {};
        }
        if (config.instantiate != null) {
          return new Shared.CoresTableCloneCell(opts);
        } else {
          return Shared.CoresTableCloneCell;
        }
      });
      App.reqres.setHandler('creds:shared:coresTablePrivateCell', function(opts, config) {
        if (opts == null) {
          opts = {};
        }
        if (config == null) {
          config = {};
        }
        if (config.instantiate != null) {
          return new Shared.CoresTablePrivateCell(opts);
        } else {
          return Shared.CoresTablePrivateCell;
        }
      });
      App.reqres.setHandler('creds:shared:coresTablePrivateCellDisclosureDialog', function(opts, config) {
        if (opts == null) {
          opts = {};
        }
        if (config == null) {
          config = {};
        }
        if (config.instantiate != null) {
          return new Shared.CoresTablePrivateCellDisclosureDialog(opts);
        } else {
          return Shared.CoresTablePrivateCellDisclosureDialog;
        }
      });
      App.reqres.setHandler('creds:shared:coresTableOriginCell', function(opts, config) {
        if (opts == null) {
          opts = {};
        }
        if (config == null) {
          config = {};
        }
        if (config.instantiate != null) {
          return new Shared.CoresTableOriginCell(opts);
        } else {
          return Shared.CoresTableOriginCell;
        }
      });
      App.reqres.setHandler('creds:shared:coresTablePublicCell', function(opts, config) {
        if (opts == null) {
          opts = {};
        }
        if (config == null) {
          config = {};
        }
        if (config.instantiate != null) {
          return new Shared.CoresTablePublicCell(opts);
        } else {
          return Shared.CoresTablePublicCell;
        }
      });
      return App.reqres.setHandler('creds:shared:coresTableOriginCellDisclosureDialog', function(opts, config) {
        if (opts == null) {
          opts = {};
        }
        if (config == null) {
          config = {};
        }
        if (config.instantiate != null) {
          return new Shared.CoresTableOriginCellDisclosureDialog(opts);
        } else {
          return Shared.CoresTableOriginCellDisclosureDialog;
        }
      });
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/shared/templates/clone_cell"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<a href="javascript:void(0)" class="clone" title="Clone and edit this credential"></a>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/shared/templates/origin_cell"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<a href="javascript:void(0)" class="origin-disclosure">');
      
        __out.push(__sanitize(this.origin));
      
        __out.push('</a>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/shared/templates/origin_cell_disclosure_dialog"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="origin-disclosure-modal">\n  <img class="spinner" src="/assets/spinner-e008bc0bca2fa6f9b9c113fad73551230961baec88c06b20997ec50171bb2b6b.gif" />\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/shared/templates/private_cell"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        if (this.displayFilterEventLink) {
          __out.push('\n  <a class="filter event" href="javascript:void(0)">\n    ');
          __out.push(__sanitize(this['private.data_truncated'] || this['core.private.data_truncated']));
          __out.push('\n  </a>\n');
        } else if (this.displayFilterLink) {
          __out.push('\n  <a class="filter" href="#creds?search=private.data:');
          __out.push(__sanitize(encodeURIComponent(this['private.data'])));
          __out.push('">\n    ');
          __out.push(__sanitize(this['private.data_truncated'] || this['core.private.data_truncated']));
          __out.push('\n  </a>\n');
        } else {
          __out.push('\n  ');
          __out.push(__sanitize(this['private.data_truncated'] || this['core.private.data_truncated']));
          __out.push('\n');
        }
      
        __out.push('\n\n');
      
        if (this.truncated) {
          __out.push('\n  <a href="javascript:void(0);" class="private-data-disclosure">more</a>\n');
        }
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/shared/templates/private_cell_disclosure_dialog"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('\n\n');
      
        if (this['private.type'] === 'ssh' || this['core.private.type'] === 'ssh') {
          __out.push('\n  <div class=\'ssh-key-fingerprint\'>\n    <h4>Fingerprint:</h4>\n\n    <div>');
          __out.push(__sanitize(this['private.full_fingerprint'] || this['core.private.full_fingerprint']));
          __out.push('</div>\n\n  </div>\n\n  <h4 class="private-key">Private key:</h4>\n');
        }
      
        __out.push('\n\n<div class=\'private-data\'>\n  ');
      
        __out.push(__sanitize(this['private.data'] || this['core.private.data']));
      
        __out.push('\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/table/table_controller', 'apps/creds/show/show_view', 'entities/login', 'lib/components/tags/index/index_controller', 'apps/creds/shared/templates/origin_cell', 'apps/creds/shared/templates/origin_cell_disclosure_dialog'], function() {
    return this.Pro.module("CredsApp.Show", function(Show, App) {
      return Show.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var cred, relatedLogins, show,
            _this = this;
          _.defaults(options, {
            show: true
          });
          this.id = options.id, cred = options.cred, show = options.show, this.workspace_id = options.workspace_id;
          this.cred || (this.cred = App.request("cred:entity", this.id));
          this.workspace_id || (this.workspace_id = WORKSPACE_ID);
          this.layout = new Show.Layout({
            model: this.cred
          });
          this.setMainView(this.layout);
          relatedLogins = App.request('logins:entities', {
            core_id: this.id,
            workspace_id: this.workspace_id
          });
          this.listenTo(this.layout, 'show', function() {
            var originCellView, privateCredView, tagsView;
            privateCredView = App.request('creds:shared:coresTablePrivateCell', {
              model: _this.cred,
              displayFilterLink: true
            }, {
              instantiate: true
            });
            originCellView = App.request('creds:shared:coresTableOriginCell', {
              model: _this.cred
            }, {
              instantiate: true
            });
            _this.cred.set('tag_count', _this.cred.get('tags').length);
            tagsView = App.request('tags:index:component', {
              instantiate: true,
              model: _this.cred
            });
            _this.show(privateCredView, {
              region: _this._mainView.privateRegion
            });
            _this.show(originCellView, {
              region: _this._mainView.originRegion
            });
            _this.show(tagsView, {
              region: _this._mainView.tags
            });
            return _this.relatedLoginsRegion(relatedLogins, _this.id);
          });
          this.listenTo(this.layout, 'reuse:show', function() {
            return App.vent.trigger('quickReuse:show', _this.id);
          });
          if (show) {
            return this.show(this.layout, {
              region: this.region,
              loading: {
                loadingType: 'overlay'
              }
            });
          }
        };

        Controller.prototype.relatedLoginsRegion = function(relatedLogins, core_id) {
          var tableController;
          return tableController = App.request("table:component", {
            title: 'Related Logins',
            region: this.layout.relatedLoginsRegion,
            selectable: true,
            taggable: true,
            "static": false,
            perPage: 20,
            defaultSort: 'created_at',
            actionButtons: [
              {
                label: 'Delete',
                activateOn: 'any',
                click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                  var controller;
                  controller = App.request('logins:delete', {
                    selectAllState: selectAllState,
                    selectedIDs: selectedIDs,
                    deselectedIDs: deselectedIDs,
                    selectedVisibleCollection: selectedVisibleCollection,
                    tableCollection: tableCollection,
                    credID: core_id
                  });
                  return App.execute("showModal", controller, {
                    modal: {
                      title: 'Are you sure?',
                      description: '',
                      height: 150,
                      width: 550,
                      hideBorder: true
                    },
                    buttons: [
                      {
                        name: 'Cancel',
                        "class": 'close'
                      }, {
                        name: 'OK',
                        "class": 'btn primary'
                      }
                    ]
                  });
                }
              }, {
                label: '+ Add',
                "class": 'add',
                click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection) {
                  var controller;
                  controller = App.request('logins:new', core_id);
                  return App.execute("showModal", controller, {
                    modal: {
                      title: 'Add Login',
                      hideBorder: true,
                      description: '',
                      height: 290,
                      width: 460
                    },
                    buttons: [
                      {
                        name: 'Cancel',
                        "class": 'close'
                      }, {
                        name: 'OK',
                        "class": 'btn primary'
                      }
                    ]
                  });
                }
              }, {
                label: 'Tag',
                "class": 'tag',
                containerClass: 'right',
                activateOn: 'any',
                click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                  var collection, controller, ids, models, query, url;
                  ids = selectAllState ? deselectedIDs : selectedIDs;
                  models = _.map(ids, function(id) {
                    return new Backbone.Model({
                      id: id
                    });
                  });
                  collection = new Backbone.Collection(models);
                  query = "";
                  url = "/workspaces/" + WORKSPACE_ID + "/metasploit/credential/cores/" + (_.escape(core_id)) + "/logins/quick_multi_tag.json";
                  controller = App.request('tags:new:component', collection, {
                    selectAllState: selectAllState,
                    selectedIDs: selectedIDs,
                    deselectedIDs: deselectedIDs,
                    q: query,
                    url: url,
                    serverAPI: tableCollection.server_api,
                    ids_only: true,
                    content: App.request('new:login:entity').get('taggingModalHelpContent')
                  });
                  return App.execute("showModal", controller, {
                    modal: {
                      title: 'Tags',
                      description: '',
                      height: 170,
                      width: 400,
                      hideBorder: true
                    },
                    buttons: [
                      {
                        name: 'Cancel',
                        "class": 'close'
                      }, {
                        name: 'OK',
                        "class": 'btn primary'
                      }
                    ],
                    doneCallback: function() {
                      return App.vent.trigger('login:tag:added', tableCollection);
                    }
                  });
                }
              }
            ],
            columns: [
              {
                attribute: 'service.name',
                label: 'Service'
              }, {
                attribute: 'service.port',
                label: 'Port'
              }, {
                attribute: 'service.host.name',
                label: 'Host',
                view: Show.SingleHostFilterLink
              }, {
                attribute: 'access_level',
                label: 'Access Level',
                view: Show.AccessLevel
              }, {
                attribute: 'tags',
                sortable: false,
                view: App.request('tags:index:component')
              }, {
                attribute: 'last_attempted_at',
                label: 'Last Attempted',
                view: Backbone.Marionette.ItemView.extend({
                  modelEvents: {
                    'change:last_attempted_at': 'render'
                  },
                  template: function(m) {
                    return _.escape(m.last_attempted_at);
                  }
                })
              }, {
                attribute: 'status',
                label: 'Validation',
                view: Show.Validation,
                hoverView: Show.ValidationHover,
                hoverOn: function() {
                  return this.model.get('status') !== Pro.Entities.Login.Status.SUCCESSFUL;
                }
              }, {
                label: 'Validate',
                sortable: false,
                "class": 'get_session',
                view: Show.ValidateAuthentication
              }
            ],
            collection: relatedLogins
          });
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery', 'rainbow_bar', 'base_layout', 'base_view', 'base_itemview', 'apps/creds/show/templates/show_layout', 'apps/creds/show/templates/access_level', 'apps/creds/show/templates/validate_authentication', 'apps/creds/show/templates/validation_hover', 'entities/login', 'lib/concerns/pollable'], function($, RainbowProgressBar) {
    return this.Pro.module("CredsApp.Show", function(Show, App) {
      Show.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('creds/show/show_layout');

        Layout.prototype.ui = {
          compromised_progress: '.compromised-progress',
          reuse: 'li.quick-reuse a'
        };

        Layout.prototype.regions = {
          bannerRegion: "#banner-region",
          relatedLoginsRegion: "#related-logins-region",
          bannerRegion: "#banner-region",
          privateRegion: ".private-region",
          tags: ".tags",
          originRegion: ".origin-region"
        };

        Layout.prototype.triggers = {
          'click @ui.reuse': 'reuse:show'
        };

        Layout.prototype._innerFill = '#FFFFFF';

        Layout.prototype._innerFillHover = '#FFFFFF';

        Layout.prototype._textFill = '#A0A0A0';

        Layout.prototype._fontStyle = '20px Arial';

        Layout.prototype._percentFill = '#A0A0A0';

        /*onShow: ->
            Not using this, at the moment
            @chart = new RainbowProgressBar(
            canvas: @ui.compromised_progress[0]
            textFill: @_textFill
            innerFill: @_innerFill
            innerFillHover: @_innerFillHover
            fontStyle: @_fontStyle
            percentFill: @_percentFill
          )
        @chart.setPercentage(0)
        
        animatePercent: () =>
          @chart.setPercentage(80)
        */


        Layout.prototype.templateHelpers = {
          privateTypeLink: function() {
            var linkUrl;
            if (!this["private"]["class"]) {
              return;
            }
            linkUrl = "#creds?search=private.type:'" + this['pretty_type'] + "'";
            return "<a class='filter' href=\"" + linkUrl + "\">\n  " + this['pretty_type'] + "\n</a>";
          },
          publicUsernameLink: function() {
            var linkUrl, safe_username;
            if (!((this["public"].username != null) && this["public"].username !== "")) {
              return "*BLANK*";
            }
            safe_username = _.escapeHTML(_.unescapeHTML(this["public"].username));
            linkUrl = "#creds?search=public.username:'" + safe_username + "'";
            return "<a class='filter' href=\"" + linkUrl + "\">\n  " + safe_username + "\n</a>";
          },
          realmKeyLink: function() {
            var linkUrl, _ref, _ref1;
            if (!((((_ref = this.realm) != null ? _ref.key : void 0) != null) && (((_ref1 = this.realm) != null ? _ref1.key : void 0) != null) !== "None")) {
              return "None";
            }
            linkUrl = "#creds?search=realm.key:'" + this.realm.key + "'%20realm.value:'" + this.realm.value + "'";
            return "<a class='filter' href=\"" + linkUrl + "\">\n  " + this.realm.key + "\n</a>";
          }
        };

        return Layout;

      })(App.Views.Layout);
      Show.RelatedLogins = (function(_super) {

        __extends(RelatedLogins, _super);

        function RelatedLogins() {
          return RelatedLogins.__super__.constructor.apply(this, arguments);
        }

        return RelatedLogins;

      })(App.Views.ItemView);
      Show.Validation = (function(_super) {

        __extends(Validation, _super);

        function Validation() {
          this.template = __bind(this.template, this);
          return Validation.__super__.constructor.apply(this, arguments);
        }

        Validation.prototype.modelEvents = {
          'change:attempting_login': 'render'
        };

        Validation.prototype.initialize = function(_arg) {
          this.model = _arg.model, this.column = _arg.column;
        };

        Validation.prototype.serializeData = function() {
          return this;
        };

        Validation.prototype.template = function() {
          if (this.model.get('attempting_login')) {
            return 'Validating…';
          } else if (this.model.get(this.column.attribute) === App.Entities.Login.Status.SUCCESSFUL) {
            return 'Validated';
          } else {
            return 'Not Validated';
          }
        };

        return Validation;

      })(App.Views.ItemView);
      Show.FilterLink = (function(_super) {

        __extends(FilterLink, _super);

        function FilterLink() {
          this.template = __bind(this.template, this);
          return FilterLink.__super__.constructor.apply(this, arguments);
        }

        FilterLink.prototype.initialize = function(_arg) {
          this.model = _arg.model, this.column = _arg.column;
        };

        FilterLink.prototype.serializeData = function() {
          return this;
        };

        FilterLink.prototype.template = function() {
          return "<a href='javascript:void(0)'>" + (_.escape(this.model.get(this.column.attribute))) + "</a>";
        };

        return FilterLink;

      })(App.Views.ItemView);
      Show.SingleHostFilterLink = (function(_super) {

        __extends(SingleHostFilterLink, _super);

        function SingleHostFilterLink() {
          this.template = __bind(this.template, this);
          return SingleHostFilterLink.__super__.constructor.apply(this, arguments);
        }

        SingleHostFilterLink.prototype.initialize = function(_arg) {
          this.model = _arg.model, this.column = _arg.column;
        };

        SingleHostFilterLink.prototype.serializeData = function() {
          return this;
        };

        SingleHostFilterLink.prototype.template = function() {
          return "<a href='#creds/" + (_.escape(this.model.get('core_id'))) + "/hosts/" + (_.escape(this.model.get('service.host.id'))) + "'>" + (_.escape(this.model.get(this.column.attribute))) + "</a>";
        };

        return SingleHostFilterLink;

      })(App.Views.ItemView);
      Show.ValidationHover = (function(_super) {

        __extends(ValidationHover, _super);

        function ValidationHover() {
          return ValidationHover.__super__.constructor.apply(this, arguments);
        }

        ValidationHover.prototype.attributes = {
          "class": 'validation-hover'
        };

        ValidationHover.prototype.initialize = function(_arg) {
          this.model = _arg.model, this.column = _arg.column;
        };

        ValidationHover.prototype.serializeData = function() {
          return this;
        };

        ValidationHover.prototype.template = ValidationHover.prototype.templatePath('creds/show/validation_hover');

        return ValidationHover;

      })(App.Views.ItemView);
      Show.ValidateAuthentication = (function(_super) {

        __extends(ValidateAuthentication, _super);

        function ValidateAuthentication() {
          this.serializeData = __bind(this.serializeData, this);

          this.setTask = __bind(this.setTask, this);

          this.poll = __bind(this.poll, this);

          this.attemptingLoginChanged = __bind(this.attemptingLoginChanged, this);

          this.imageClicked = __bind(this.imageClicked, this);
          return ValidateAuthentication.__super__.constructor.apply(this, arguments);
        }

        ValidateAuthentication.include('Pollable');

        ValidateAuthentication.prototype.template = ValidateAuthentication.prototype.templatePath("creds/show/validate_authentication");

        ValidateAuthentication.prototype.ui = {
          'icon': 'div'
        };

        ValidateAuthentication.prototype.events = {
          'click @ui.icon': 'imageClicked'
        };

        ValidateAuthentication.prototype.modelEvents = {
          'change:attempting_login': 'attemptingLoginChanged'
        };

        ValidateAuthentication.prototype.task = null;

        ValidateAuthentication.prototype.pollInterval = 3000;

        ValidateAuthentication.prototype.imageClicked = function() {
          return this.model.set({
            attempting_login: true
          });
        };

        ValidateAuthentication.prototype.attemptingLoginChanged = function() {
          var _this = this;
          this.render();
          if (this.model.get('attempting_login')) {
            return this.model.validateAuthentication().done(function(task) {
              _this.setTask(task);
              return _this.startPolling();
            });
          }
        };

        ValidateAuthentication.prototype.poll = function() {
          var _this = this;
          if (this.task.isCompleted() || this.task.isFailed() || this.task.isInterrupted() || this.task.isStopped()) {
            this.stopPolling();
            return this.model.fetch().done(function() {
              return _this.model.set({
                attempting_login: false
              });
            });
          } else {
            return this.task.fetch();
          }
        };

        ValidateAuthentication.prototype.setTask = function(task) {
          this.task = task;
        };

        ValidateAuthentication.prototype.serializeData = function() {
          return this;
        };

        return ValidateAuthentication;

      })(App.Views.ItemView);
      Show.AccessLevel = (function(_super) {

        __extends(AccessLevel, _super);

        function AccessLevel() {
          this.serializeData = __bind(this.serializeData, this);

          this.enableSelect = __bind(this.enableSelect, this);

          this.disableSelect = __bind(this.disableSelect, this);

          this.updateInput = __bind(this.updateInput, this);

          this.inputActivity = __bind(this.inputActivity, this);

          this.optionChanged = __bind(this.optionChanged, this);

          this.updateLevels = __bind(this.updateLevels, this);

          this.initialize = __bind(this.initialize, this);
          return AccessLevel.__super__.constructor.apply(this, arguments);
        }

        AccessLevel.prototype.template = AccessLevel.prototype.templatePath("creds/show/access_level");

        AccessLevel.prototype.ui = {
          'select': 'select',
          'input': 'input'
        };

        AccessLevel.prototype.events = {
          'change @ui.select': 'optionChanged',
          'keydown @ui.input': 'inputActivity',
          'change @ui.input': 'updateInput'
        };

        AccessLevel.prototype.collectionEvents = {
          levelsChanged: 'updateLevels'
        };

        AccessLevel.prototype.accessLevels = [];

        AccessLevel.prototype.showInput = false;

        AccessLevel.prototype.onShow = function() {
          return this.delegateEvents();
        };

        AccessLevel.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          if (!_.isUndefined(opts.accessLevels)) {
            this.accessLevels = opts.accessLevels;
          }
          _.defaults(opts, {
            save: true,
            showLabel: false
          });
          return this.save = opts.save, this.showLabel = opts.showLabel, opts;
        };

        AccessLevel.prototype.updateLevels = function(accessLevels) {
          this.accessLevels = accessLevels;
          return this.render();
        };

        AccessLevel.prototype.optionChanged = function() {
          var _ref, _ref1;
          if ((_ref = this.ui.select.val()) != null ? _ref.match(/Other.../) : void 0) {
            this.showInput = true;
            this.render();
            this.ui.input.val(this.model.get('access_level'));
            return (_ref1 = this.ui.input.focus()[0]) != null ? _ref1.select() : void 0;
          } else {
            this.showInput = false;
            this.model.set('access_level', this.ui.select.val());
            this.disableSelect();
            if (this.save) {
              return this.model.save().then(this.enableSelect);
            } else {
              return this.enableSelect();
            }
          }
        };

        AccessLevel.prototype.inputActivity = function(e) {
          if (e.keyCode === 13) {
            return this.updateInput();
          } else if (e.keyCode === 27) {
            this.showInput = false;
            return this.render();
          } else {
            this.debouncedUpdateInput || (this.debouncedUpdateInput = _.debounce(this.updateInput, 1000));
            return this.debouncedUpdateInput();
          }
        };

        AccessLevel.prototype.updateInput = function() {
          var newVal;
          if (_.isEmpty(this.ui.input) || _.isEmpty(this.ui.input.val())) {
            return;
          }
          newVal = this.ui.input.val().trim();
          if (newVal !== /Other.../ && !_.isEmpty(newVal)) {
            this.showInput = false;
            this.model.set('access_level', newVal);
            this.render();
            this.disableSelect();
            if (this.save) {
              return this.model.save().then(this.enableSelect);
            } else {
              return this.enableSelect();
            }
          }
        };

        AccessLevel.prototype.disableSelect = function() {
          return this.ui.select.attr('disabled', 'disabled');
        };

        AccessLevel.prototype.enableSelect = function() {
          return this.ui.select.removeAttr('disabled');
        };

        AccessLevel.prototype.serializeData = function() {
          return _.extend({}, this.model.attributes, {
            showInput: this.showInput,
            accessLevels: this.accessLevels,
            showLabel: this.showLabel
          });
        };

        return AccessLevel;

      })(App.Views.ItemView);
      return App.reqres.setHandler('creds:accessLevel:view', function(options) {
        if (options == null) {
          options = {};
        }
        return new Show.AccessLevel(options);
      });
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/show/templates/access_level"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var isDefault, level, levels, selected, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      
        if (!this.showInput) {
          __out.push('\n  <select name="access_level">\n    ');
          isDefault = false;
          __out.push('\n    ');
          levels = this.accessLevels;
          __out.push('\n    ');
          _ref = ['Admin', 'Read Only'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            level = _ref[_i];
            __out.push('\n\n      ');
            selected = ((_ref1 = this.access_level) != null ? _ref1.toLowerCase() : void 0) === level.toLowerCase();
            __out.push('\n      ');
            isDefault || (isDefault = selected);
            __out.push('\n      <option ');
            if (selected) {
              __out.push('selected');
            }
            __out.push('>');
            __out.push(__sanitize(level));
            __out.push('</option>\n\n    ');
          }
          __out.push('\n\n    ');
          for (_j = 0, _len1 = levels.length; _j < _len1; _j++) {
            level = levels[_j];
            __out.push('\n\n      ');
            selected = ((_ref2 = this.access_level) != null ? _ref2.toLowerCase() : void 0) === (level != null ? level.toLowerCase() : void 0);
            __out.push('\n      ');
            isDefault || (isDefault = selected);
            __out.push('\n\n      <option ');
            if (selected) {
              __out.push('selected');
            }
            __out.push('>');
            __out.push(__sanitize(level));
            __out.push('</option>\n    ');
          }
          __out.push('\n\n    ');
          if (!isDefault) {
            __out.push('\n      <option selected>');
            __out.push(__sanitize(this.access_level));
            __out.push('</option>\n    ');
          }
          __out.push('\n    <option>Other…</option>\n  </select>\n\n');
        } else {
          __out.push('\n  <input type=\'text\' maxlength=\'24\' />\n');
        }
      
        __out.push('\n\n');
      
        if (this.showLabel) {
          __out.push('\n    <label>Access Level</label>\n');
        }
      
        __out.push('\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/show/templates/related_logins"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
      
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/show/templates/show_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class=\'fixed\'>\n  <div id="banner-region" class="foundation">\n    <div id="single-cred-header">\n      <ul>\n        <li>\n          <div>\n            PUBLIC\n          </div>\n          <div class="black">\n            ');
      
        __out.push(this.publicUsernameLink());
      
        __out.push('\n          </div>\n        </li>\n\n        <li>\n          <div>\n            PRIVATE\n          </div>\n          <div class="black private-region" >\n\n          </div>\n        </li>\n\n        <li>\n          <div>\n            PRIVATE TYPE\n          </div>\n          <div class="black">\n            ');
      
        __out.push(this.privateTypeLink());
      
        __out.push('\n          </div>\n        </li>\n\n        <li>\n          <div>\n            REALM\n          </div>\n          <div class="black">\n            ');
      
        __out.push(this.realmKeyLink());
      
        __out.push('\n          </div>\n        </li>\n\n        <li>\n          <div>\n            ORIGIN\n          </div>\n          <div class="origin-region">\n          </div>\n        </li>\n\n        <li class="tags">\n          <div>\n            <span class="count">4</span> Tags\n          </div>\n        </li>\n\n        <li class="quick-reuse">\n          <a href="javascript:void(0)" class="btn primary launch">Reuse</a>\n        </li>\n\n      </ul>\n    </div>\n  </div>\n\n\n\n  <div class=\'sub-header foundation\'>\n    <div class="row">\n      <div class=\'hang\'>\n        <div class="columns small-5 white">\n        </div>\n\n        <div class="columns small-7 grey"></div>\n\n        <!--\n        <div class="columns small-2 grey">\n          <span class=\'large display-none\'>&#10003;</span> <span class=\'subtext display-none\'>validated</span>\n        </div>\n\n        <div class="columns small-2 grey">\n          <span class="instance-count display-none">457</span> <span class=\'subtext display-none\'>logins</span>\n        </div>\n\n        <div class="columns small-3 grey">\n          <div class="rainbow-progress-wrapper display-none" clickable="true">\n            <canvas class="compromised-progress" height="40px" width="84px"></canvas>\n            <div class="compromised-text">network compromised</div>\n          </div>\n        </div>\n        -->\n\n\n      </div>\n    </div>\n  </div>\n</div>\n\n\n<div id=\'related-logins-region\'>\n</div>\n\n\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/show/templates/validate_authentication"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        if (this.model.get('attempting_login')) {
          __out.push('\n  <div class=\'loading\'></div>\n');
        } else {
          __out.push('\n  <div class=\'key\'></div>\n');
        }
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/creds/show/templates/validation_hover"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push(__sanitize(this.model.get('status')));
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/hosts/delete/delete_view', 'lib/concerns/controllers/table_selections', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module("HostsApp.Delete", function(Delete, App, Backbone, Marionette, $, _) {
      return Delete.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('TableSelections');

        Controller.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection;
          return this.setMainView(new Delete.Layout);
        };

        Controller.prototype.onFormSubmit = function() {
          var defer, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          jQuery.ajax({
            url: Routes.destroy_multiple_hosts_path({
              workspace_id: WORKSPACE_ID
            }),
            type: 'DELETE',
            data: {
              selections: {
                select_all_state: this.selectAllState || null,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              search: this.tableCollection.server_api.search,
              ignore_pagination: true
            },
            success: function() {
              _this.tableCollection.removeMultiple(_this.selectedVisibleCollection);
              defer.resolve();
              App.vent.trigger('hosts:deleted');
              return App.execute('flash:display', {
                title: "Host" + (_this.pluralizedMessage('', 's')) + " deleted",
                message: "The host" + (_this.pluralizedMessage(' was', 's were ')) + " successfully deleted."
              });
            },
            error: function() {
              return App.execute('flash:display', {
                title: 'An error occurred',
                style: 'error',
                message: "There was a problem deleting the selected host" + (_this.multipleSelected() ? 's' : void 0)
              });
            }
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'apps/hosts/delete/templates/delete_layout'], function() {
    return this.Pro.module('HostsApp.Delete', function(Delete, App) {
      return Delete.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('hosts/delete/delete_layout');

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/hosts/delete/templates/delete_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="delete-text">\n  Deleting these hosts will permanently remove it from this project.\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/hosts/index/index_controller', 'apps/hosts/delete/delete_controller', 'lib/utilities/navigation', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module('HostsApp', function(HostsApp, App) {
      var API,
        _this = this;
      HostsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index",
          "hosts": "index",
          "hosts/:host_id": "show",
          "hosts/:host_id/:tab": "show"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function() {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/hosts/index/index_controller'], function() {
            var indexController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return indexController = new HostsApp.Index.Controller;
          });
        },
        show: function(host_id, tab) {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['/assets/hosts/backbone/controllers/host_view_controller-6e6371c826a1b256cf4c95c1118e7e80f9813613e56a22c3ca34b6388c52bc1a.js'], function(HostViewController) {
            var hostController;
            loading = false;
            App.execute('loadingOverlay:hide');
            hostController = new HostViewController({
              id: host_id
            });
            return hostController.Tab(tab != null ? tab : 'services', App.mainRegion);
          });
        },
        "delete": function(options) {
          return new HostsApp.Delete.Controller(options);
        }
      };
      App.addInitializer(function() {
        return new HostsApp.Router({
          controller: API
        });
      });
      App.addRegions({
        mainRegion: "#hosts-main-region"
      });
      App.vent.on("host:tag:added", function() {
        return App.execute('flash:display', {
          title: 'Host(s) Tagged ',
          message: 'The host(s) were successfully tagged.'
        });
      });
      return App.reqres.setHandler('hosts:delete', function(options) {
        if (options == null) {
          options = {};
        }
        return API["delete"](options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/analysis_tab/analysis_tab_controller', 'lib/components/tags/new/new_controller', 'entities/host', 'apps/hosts/index/index_views', 'css!css/components/pill'], function() {
    return this.Pro.module("HostsApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var actionButtons, columns, defaultSort, emptyView, filterOpts, hosts, show,
            _this = this;
          _.defaults(options, {
            show: true
          });
          show = options.show;
          hosts = App.request('hosts:entities', [], {
            workspace_id: WORKSPACE_ID,
            fetch: false
          });
          defaultSort = 'address';
          columns = [
            {
              attribute: 'address',
              escape: false,
              defaultDirection: 'asc'
            }, {
              attribute: 'name',
              escape: false
            }, {
              attribute: 'os_name',
              label: 'Operating System',
              escape: false
            }, {
              attribute: 'virtual_host',
              view: Index.VirtualCellView,
              label: 'VM',
              escape: false,
              "class": 'vm'
            }, {
              attribute: 'purpose'
            }, {
              attribute: 'service_count',
              label: 'Svcs',
              "class": 'services'
            }, {
              attribute: 'vuln_count',
              label: 'Vlns',
              "class": 'vulns'
            }, {
              attribute: 'exploit_attempt_count',
              label: 'Att',
              "class": 'attempts'
            }, {
              attribute: 'tags',
              sortable: false,
              escape: false
            }, {
              attribute: 'updated_at',
              label: 'Updated',
              escape: false
            }, {
              attribute: 'status',
              escape: false,
              sortable: false
            }
          ];
          actionButtons = [
            {
              label: 'Delete Hosts',
              "class": 'delete',
              activateOn: 'any',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var controller;
                controller = App.request('hosts:delete', {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs,
                  selectedVisibleCollection: selectedVisibleCollection,
                  tableCollection: tableCollection
                });
                return App.execute("showModal", controller, {
                  modal: {
                    title: 'Are you sure?',
                    description: '',
                    height: 150,
                    width: 550,
                    hideBorder: true
                  },
                  buttons: [
                    {
                      name: 'Cancel',
                      "class": 'close'
                    }, {
                      name: 'OK',
                      "class": 'btn primary'
                    }
                  ]
                });
              },
              containerClass: 'action-button-right-separator'
            }, {
              label: 'Tag Hosts',
              "class": 'tag-edit',
              activateOn: 'any',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var collection, controller, ids, models, query, url;
                ids = selectAllState ? deselectedIDs : selectedIDs;
                models = _.map(ids, function(id) {
                  return new Backbone.Model({
                    id: id
                  });
                });
                collection = new Backbone.Collection(models);
                query = "";
                url = Routes.quick_multi_tag_path(WORKSPACE_ID);
                controller = App.request('tags:new:component', collection, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs,
                  q: query,
                  url: url,
                  serverAPI: tableCollection.server_api,
                  ids_only: true,
                  content: 'Tag the selected hosts.'
                });
                return App.execute("showModal", controller, {
                  modal: {
                    title: 'Tags',
                    description: '',
                    height: 170,
                    width: 400,
                    hideBorder: true
                  },
                  buttons: [
                    {
                      name: 'Cancel',
                      "class": 'close'
                    }, {
                      name: 'OK',
                      "class": 'btn primary'
                    }
                  ],
                  doneCallback: function() {
                    App.vent.trigger('host:tag:added', tableCollection);
                    return tableCollection.fetch({
                      reset: true
                    });
                  }
                });
              },
              containerClass: 'action-button-right-separator'
            }, {
              label: 'Scan',
              "class": 'scan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newScanPath;
                newScanPath = Routes.new_scan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'host', newScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Import...',
              "class": 'import',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                }) + '#file';
              }
            }, {
              label: 'Nexpose Scan',
              "class": 'nexpose',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                });
              }
            }, {
              label: 'WebScan',
              "class": 'webscan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newWebScanPath;
                newWebScanPath = Routes.new_webscan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'host', newWebScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Modules',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var modulesPath;
                modulesPath = Routes.modules_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'host', modulesPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-separator'
            }, {
              label: 'Bruteforce',
              "class": 'brute',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newQuickBruteforcePath;
                newQuickBruteforcePath = Routes.workspace_brute_force_guess_index_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'host', newQuickBruteforcePath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Exploit',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newExploitPath;
                newExploitPath = Routes.new_exploit_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'host', newExploitPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-right-separator'
            }, {
              label: 'New Host',
              "class": 'new',
              click: function() {
                return window.location = Routes.new_host_path({
                  workspace_id: WORKSPACE_ID
                });
              }
            }
          ];
          filterOpts = {
            searchType: 'pro',
            placeHolderText: 'Search Hosts'
          };
          emptyView = App.request('analysis_tab:empty_view', {
            emptyText: "No hosts are associated with this project"
          });
          _.extend(options, {
            collection: hosts,
            columns: columns,
            defaultSort: defaultSort,
            actionButtons: actionButtons,
            filterOpts: filterOpts,
            emptyView: emptyView
          });
          this.analysisTabController = App.request('analysis_tab:component', options);
          this.layout = this.analysisTabController.layout;
          this.setMainView(this.layout);
          if (show) {
            return this.show(this.layout, {
              region: this.region
            });
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_itemview'], function() {
    return this.Pro.module('HostsApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      return Index.VirtualCellView = (function(_super) {

        __extends(VirtualCellView, _super);

        function VirtualCellView() {
          return VirtualCellView.__super__.constructor.apply(this, arguments);
        }

        VirtualCellView.prototype.template = function(data) {
          if (data.virtual_host) {
            return "<img title=\"" + data.virtual_host + "\" src=\"/assets/icons/os/vm_logo-93c1860595c834295429f25c8b0a3b3358790412ea9960646c9316306713d47a.png\" />";
          } else {
            return "&nbsp;";
          }
        };

        return VirtualCellView;

      })(Pro.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/imports/file/file_views', 'lib/components/file_input/file_input_controller'], function() {
    return this.Pro.module("ImportsApp.File", function(File, App) {
      File.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var _this = this;
          this.layout = new File.Layout();
          this.setMainView(this.layout);
          return this.listenTo(this._mainView, 'show', function() {
            _this.fileInput = App.request('file_input:component', {
              name: 'file'
            });
            return _this.show(_this.fileInput, {
              region: _this._mainView.fileInputRegion
            });
          });
        };

        Controller.prototype.useLastUploaded = function(fileName) {
          return this._mainView.useLastUploaded(fileName);
        };

        Controller.prototype.clearLastUploaded = function() {
          return this._mainView.clearLastUploaded();
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('file:imports', function(options) {
        if (options == null) {
          options = {};
        }
        return new File.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'apps/imports/file/templates/file_layout'], function() {
    return this.Pro.module('ImportsApp.File', function(File, App, Backbone, Marionette, $, _) {
      return File.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('imports/file/file_layout');

        Layout.prototype.ui = {
          blacklistHosts: '#nexpose_scan_task_blacklist_string',
          errors: '.error-container',
          useLastUploaded: '[name="use_last_uploaded"]',
          lastUploaded: '.last-uploaded'
        };

        Layout.prototype.regions = {
          fileInputRegion: '.file-input-region'
        };

        Layout.prototype.showErrors = function(errors) {
          this.ui.errors.css('display', 'block');
          this.ui.errors.addClass('errors');
          return this.ui.errors.html(_.escape(errors));
        };

        Layout.prototype.clearErrors = function() {
          this.ui.errors.removeClass('errors');
          return this.ui.errors.html();
        };

        Layout.prototype.clearLastUploaded = function() {
          this.lastUploaded = null;
          this.ui.lastUploaded.hide();
          return this.ui.useLastUploaded.val('');
        };

        Layout.prototype.useLastUploaded = function(fileName) {
          this.lastUploaded = fileName;
          this.ui.lastUploaded.show();
          this.ui.lastUploaded.text("Last Uploaded: " + fileName);
          return this.ui.useLastUploaded.val(fileName);
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/file/templates/file_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n  <div class="columns large-12 shared boxes">\n    <div class="row">\n      <div class="columns small-12">\n        <div class="error-container"></div>\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns small-12">\n        <div class="row">\n          <div class="columns small-2 empty"></div>\n          <div class="columns small-10">\n            <div class="last-uploaded" style="display: none;"></div>\n            <input type=\'hidden\' name=\'use_last_uploaded\'>\n          </div>\n        </div>\n\n        <div class="file-input-region"></div>\n        <div>\n          <ul>\n            <li class="text input optional" id="nexpose_scan_task_blacklist_string_input" style="opacity: 1;">\n              <div class="row">\n                <div class="columns large-2"><label class="label" for="nexpose_scan_task_blacklist_string" style="opacity: 1;">Excluded Addresses</label></div>\n                <div class="columns large-10">\n                  <textarea id="nexpose_scan_task_blacklist_string" name="blacklist_string" rows="20" style="opacity: 1;"></textarea>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['lib/utilities/navigation', 'apps/imports/index/index_controller', 'apps/imports/index/type', 'css!css/imports'], function() {
    return this.Pro.module('ImportsApp', function(ImportsApp, App) {
      var API, Index;
      Index = ImportsApp.Index;
      ImportsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "import",
          "nexpose": "importNexpose",
          "file": "importFile",
          "sonar": "importSonar"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        "import": function(type) {
          if (type == null) {
            type = Index.Type.Nexpose;
          }
          return new ImportsApp.Index.Controller({
            type: type
          });
        },
        importNexpose: function() {
          return API["import"](Index.Type.Nexpose);
        },
        importFile: function() {
          return API["import"](Index.Type.File);
        },
        importSonar: function() {
          return API["import"](Index.Type.Sonar);
        }
      };
      App.addInitializer(function() {
        return new ImportsApp.Router({
          controller: API
        });
      });
      App.addRegions({
        mainRegion: "#imports-main-region"
      });
      return App.vent.on("import:typeChange", function(type) {
        return App.navigate("#" + type, {
          trigger: false
        });
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/imports/index/index_views', 'apps/imports/nexpose/nexpose_controller', 'apps/imports/file/file_controller', 'apps/imports/sonar/sonar_controller', 'apps/imports/index/type', 'entities/nexpose/import', 'entities/nexpose/scan_and_import', 'entities/nexpose/file_import', 'lib/components/tags/new/new_controller'], function() {
    return this.Pro.module("ImportsApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this._updateFileImportButton = __bind(this._updateFileImportButton, this);

          this._updateScanAndImportButton = __bind(this._updateScanAndImportButton, this);

          this._updateSiteImportButton = __bind(this._updateSiteImportButton, this);

          this._resetTags = __bind(this._resetTags, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var showTypeSelection,
            _this = this;
          this.channel = Backbone.Radio.channel('imports:index');
          this.tagController = this._getTagController();
          _.defaults(options, {
            type: Index.Type.Nexpose,
            showTypeSelection: true
          });
          this.type = options.type, showTypeSelection = options.showTypeSelection;
          this.typeSelectionModel = new Index.ImportTypeSelection({
            type: this.type,
            showTypeSelection: showTypeSelection
          });
          this.typeSelectionView = new Index.TypeSelectionView({
            model: this.typeSelectionModel
          });
          this.layout = new Index.Layout({
            model: this.typeSelectionModel,
            channel: this.channel
          });
          this.setMainView(this.layout);
          this.listenTo(this._mainView, 'import:start', function() {
            var type;
            type = _this.typeSelectionModel.get('type');
            switch (type) {
              case Index.Type.File:
                return _this._launchFileImport();
              case Index.Type.Nexpose:
                if (_this.nexposeController.isSiteImport()) {
                  _this.table.collection.fetchIDs(_this.table.tableSelections).done(function(ids) {
                    return _this._launchSiteImport(ids);
                  });
                }
                if (_this.nexposeController.isScanAndImport()) {
                  return _this._launchScanAndImport();
                }
                break;
              case Index.Type.Sonar:
                return _this._launchSonarImport();
              default:
                throw "Invalid import type [" + type + "], cannot start import.";
            }
          });
          this.channel.reply('get:tags', function() {
            return _this._getTags();
          });
          this.channel.comply('enable:importButton', function() {
            return _this._mainView.enableImportButton();
          });
          this.channel.comply('disable:importButton', function() {
            return _this._mainView.disableImportButton();
          });
          this.listenTo(this.typeSelectionView, 'import:typeChange', function(model) {
            var type;
            type = model.get('type');
            App.vent.trigger('import:typeChange', type);
            _this._mainView.disableImportButton();
            _this._mainView.model.set('showAutoTagByOS', true);
            _this._mainView.model.set('showDontChangeExistingHosts', true);
            switch (type) {
              case Index.Type.File:
                return _this._showFileImport();
              case Index.Type.Nexpose:
                return _this._showNexposeImport();
              case Index.Type.Sonar:
                _this._mainView.model.set('showAutoTagByOS', false);
                _this._mainView.model.set('showDontChangeExistingHosts', false);
                return _this._showSonarImport();
              default:
                throw "Invalid import type [" + type + "]";
            }
          });
          this.listenTo(this._mainView, 'show', function() {
            if (showTypeSelection) {
              _this._showTypeSelection();
            }
            _this._showFooter();
            _this._mainView.model.set('showAutoTagByOS', true);
            _this._mainView.model.set('showDontChangeExistingHosts', true);
            switch (_this.type) {
              case Index.Type.File:
                return _this._showFileImport();
              case Index.Type.Nexpose:
                return _this._showNexposeImport();
              case Index.Type.Sonar:
                _this._mainView.model.set('showAutoTagByOS', false);
                _this._mainView.model.set('showDontChangeExistingHosts', false);
                return _this._showSonarImport();
              default:
                throw "Invalid import view type [" + _this.type + "]";
            }
          });
          return this.show(this._mainView);
        };

        Controller.prototype._showFileImport = function() {
          var _this = this;
          this._resetTags();
          this.fileController = App.request('file:imports', {});
          this.listenTo(this.fileController._mainView, 'show', function() {
            return _this.listenTo(_this.fileController.fileInput._mainView, 'file:changed', function() {
              return _this._updateFileImportButton();
            });
          });
          return this.show(this.fileController, {
            region: this._mainView.mainImportViewRegion
          });
        };

        Controller.prototype._showSonarImport = function() {
          this._resetTags(['sonar']);
          this.layout.expandTagSection();
          this.sonarController = App.request('sonar:imports', {
            importsIndexChannel: this.channel
          });
          return this.show(this.sonarController, {
            region: this._mainView.mainImportViewRegion
          });
        };

        Controller.prototype._showNexposeImport = function() {
          var nexposeImport,
            _this = this;
          this._resetTags();
          this._mainView.$el.on('site:rows:changed', this._updateSiteImportButton);
          nexposeImport = App.request('new:nexpose:import:entity', {
            consoles: gon.consoles
          });
          this.nexposeController = App.request('nexpose:imports', {
            model: nexposeImport
          });
          this.listenTo(this.nexposeController, "show:form", function() {
            return _this._mainView.disableImportButton();
          });
          this.listenTo(this.nexposeController, "scanAndImport:changed", function(whitelistHosts) {
            return _this._updateScanAndImportButton(whitelistHosts);
          });
          return this.show(this.nexposeController, {
            region: this._mainView.mainImportViewRegion
          });
        };

        Controller.prototype._showTypeSelection = function() {
          return this.show(this.typeSelectionView, {
            region: this._mainView.importTypeSelectRegion
          });
        };

        Controller.prototype._getTagController = function() {
          var collection, msg, query, url;
          msg = "<p>\n  A tag is an identifier that you can use to group together logins.\n  You apply tags so that you can easily search for logins.\n  For example, when you search for a particular tag, any login that\n  is labelled with that tag will appear in your search results.\n</p>\n<p>\n  To apply a tag, start typing the name of the tag you want to use in the\n  Tag field. As you type in the search box, Metasploit automatically predicts\n  the tags that may be similar to the ones you are searching for. If the tag\n  does not exist, Metasploit creates and adds it to the project.\n</p>";
          query = "";
          url = "";
          collection = new Backbone.Collection([]);
          return App.request('tags:new:component', collection, {
            q: query,
            url: url,
            content: msg
          });
        };

        Controller.prototype._showFooter = function() {
          return this.show(this.tagController, {
            region: this._mainView.tagsRegion
          });
        };

        Controller.prototype._resetTags = function(tags) {
          this.tagController.clearTokens();
          return this.tagController.addTokens(tags);
        };

        Controller.prototype._getTags = function() {
          var tokens;
          tokens = this.tagController.getTokens();
          return _.pluck(tokens, 'name');
        };

        Controller.prototype._launchFileImport = function() {
          var fileImport, iframeSaveOptions;
          fileImport = this.getFileImportEntity();
          iframeSaveOptions = this.iframeSaveOptions({
            fileImport: fileImport
          });
          return fileImport.save({}, iframeSaveOptions);
        };

        Controller.prototype._launchSiteImport = function(sites) {
          var scanAndImport;
          scanAndImport = this.getSiteImportEntity(sites);
          return scanAndImport.save({}, {
            success: function(model, response) {
              return window.location.replace(response.redirect_url);
            }
          });
        };

        Controller.prototype._launchScanAndImport = function() {
          var scanAndImport,
            _this = this;
          scanAndImport = this.getScanAndImportEntity();
          return scanAndImport.save({}, {
            success: function(model, response) {
              return window.location.replace(response.redirect_url);
            },
            error: function(model, response) {
              return _this.nexposeController.scanAndImport.showErrors(response.responseJSON.errors);
            }
          });
        };

        Controller.prototype._launchSonarImport = function() {
          return this.sonarController.submitImport();
        };

        Controller.prototype.validate = function(callback, model) {
          var opts,
            _this = this;
          if (model == null) {
            model = {};
          }
          opts = {
            success: function(model, response, options) {
              return typeof callback === "function" ? callback(model, response, options) : void 0;
            },
            error: function(model, response, options) {
              return typeof callback === "function" ? callback(model, response, options) : void 0;
            }
          };
          if (this.type === Index.Type.File) {
            opts = _.extend(opts, this.iframeSaveOptions({
              noFile: true,
              fileImport: model
            }));
          }
          return model.validateModel(opts);
        };

        Controller.prototype.iframeSaveOptions = function(opts) {
          var config, data, fileOpts, iframeSaveOptions,
            _this = this;
          if (opts == null) {
            opts = {};
          }
          config = _.defaults(opts, {
            noFile: false
          });
          iframeSaveOptions = {};
          if (!config.noFile) {
            data = config.fileImport.attributes;
            data.authenticity_token = $('meta[name=csrf-token]').attr('content');
            data.iframe = !config.noFile;
            fileOpts = {
              no_files: true,
              iframe: !config.noFile,
              files: this.fileController.fileInput._mainView.ui.file_input,
              data: data,
              complete: function(model, response) {
                if (response === 'error') {
                  return _this.fileController._mainView.showErrors(model.responseJSON.errors);
                } else {
                  _this.fileController._mainView.clearErrors();
                  return window.location.replace(response.redirect_url);
                }
              },
              error: function(_model, response) {
                return _this.fileController._mainView.showErrors(response.responseJSON.errors);
              }
            };
            _.extend(iframeSaveOptions, fileOpts);
          }
          return iframeSaveOptions;
        };

        Controller.prototype.getFileImportEntity = function() {
          var autotagOs, blacklist, file_path, preserveHosts;
          autotagOs = this._mainView.ui.autoTagOs.prop('checked');
          blacklist = this.fileController._mainView.ui.blacklistHosts.val();
          preserveHosts = this._mainView.ui.preserveHosts.prop('checked');
          file_path = this.fileController.fileInput._mainView.ui.file_input.val();
          return App.request('nexpose:fileImport:entity', {
            file_path: file_path,
            autotag_os: autotagOs,
            blacklist_string: blacklist,
            preserve_hosts: preserveHosts,
            tags: this.tagController.getDataOptions().new_entity_tags
          });
        };

        Controller.prototype.getSiteImportEntity = function(sites) {
          var autotagOs, preserveHosts, _ref;
          if (sites == null) {
            sites = [];
          }
          autotagOs = this._mainView.ui.autoTagOs.prop('checked');
          preserveHosts = this._mainView.ui.preserveHosts.prop('checked');
          return App.request('nexpose:scanAndImport:entity', {
            sites: sites,
            import_run_id: (_ref = this.nexposeController.importRun) != null ? _ref.get('id') : void 0,
            autotag_os: autotagOs,
            tags: this.tagController.getDataOptions().new_entity_tags,
            preserve_hosts: preserveHosts
          });
        };

        Controller.prototype.getScanAndImportEntity = function() {
          var autotagOs, blacklist, consoleId, preserveHosts, scanTemplate, whitelist, _ref, _ref1, _ref2;
          whitelist = (_ref = this.nexposeController.scanAndImport) != null ? _ref.ui.whitelistHosts.val() : void 0;
          blacklist = (_ref1 = this.nexposeController.scanAndImport) != null ? _ref1.ui.blacklistHosts.val() : void 0;
          scanTemplate = (_ref2 = this.nexposeController.scanAndImport) != null ? _ref2.ui.scanTemplate.val() : void 0;
          autotagOs = this._mainView.ui.autoTagOs.prop('checked');
          preserveHosts = this._mainView.ui.preserveHosts.prop('checked');
          consoleId = parseInt(this.nexposeController._mainView.ui.nexposeConsole.val());
          return App.request('nexpose:scanAndImport:entity', {
            scan: true,
            scan_template: scanTemplate,
            whitelist_string: whitelist,
            blacklist_string: blacklist,
            autotag_os: autotagOs,
            tags: this.tagController.getDataOptions().new_entity_tags,
            preserve_hosts: preserveHosts,
            console_id: consoleId
          });
        };

        Controller.prototype._updateSiteImportButton = function(eventObject, table) {
          this.table = table;
          if (!table.tableSelections.selectAllState) {
            if (Object.keys(table.tableSelections.selectedIDs).length > 0) {
              return this._mainView.enableImportButton();
            } else {
              return this._mainView.disableImportButton();
            }
          } else {
            return this._mainView.enableImportButton();
          }
        };

        Controller.prototype._updateScanAndImportButton = function(whitelistHosts) {
          var whitelistHostsEmpty;
          whitelistHostsEmpty = whitelistHosts.strip() === "";
          if (whitelistHostsEmpty) {
            return this._mainView.disableImportButton();
          } else {
            return this._mainView.enableImportButton();
          }
        };

        Controller.prototype._updateFileImportButton = function() {
          if (this.fileController.fileInput.isFileSet()) {
            return this._mainView.enableImportButton();
          } else {
            return this._mainView.disableImportButton();
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_layout', 'base_view', 'base_itemview', 'apps/imports/index/templates/index_layout', 'apps/imports/index/templates/type_selection_layout', 'apps/imports/index/type'], function() {
    return this.Pro.module('ImportsApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      Index.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('imports/index/index_layout');

        Layout.prototype.className = 'foundation';

        Layout.prototype.ui = {
          importBtn: '.import-btn',
          tagsLabel: '.tags-label',
          tagsPane: '.tags-pane',
          expandArrow: 'span.expand',
          collapseArrow: 'span.collapse',
          autoTagOs: '[name="imports[autotag_os]"]',
          preserveHosts: '#update_hosts'
        };

        Layout.prototype.events = {
          'click @ui.tagsLabel': '_toggleTags'
        };

        Layout.prototype.modelEvents = {
          'change:showAutoTagByOS': '_updateAutoTagOS',
          'change:showDontChangeExistingHosts': '_updateDontChangeExistingHosts'
        };

        Layout.prototype.triggers = {
          'click @ui.importBtn': 'import:start'
        };

        Layout.prototype.regions = {
          importTypeSelectRegion: '.import-type-select-region',
          mainImportViewRegion: '.main-import-view-region',
          tagsRegion: '.tags-region'
        };

        Layout.prototype._updateAutoTagOS = function(model, visible) {
          if (visible) {
            return this.ui.autoTagOs.parent().show();
          } else {
            return this.ui.autoTagOs.parent().hide();
          }
        };

        Layout.prototype._updateDontChangeExistingHosts = function(model, visible) {
          if (visible) {
            return this.ui.preserveHosts.parent().show();
          } else {
            return this.ui.preserveHosts.parent().hide();
          }
        };

        Layout.prototype._toggleTags = function() {
          this.ui.expandArrow.toggle();
          this.ui.collapseArrow.toggle();
          return this.ui.tagsPane.slideToggle('fast');
        };

        Layout.prototype.enableImportButton = function() {
          return this.ui.importBtn.removeClass('disabled');
        };

        Layout.prototype.disableImportButton = function() {
          return this.ui.importBtn.addClass('disabled');
        };

        Layout.prototype.expandTagSection = function() {
          this.ui.expandArrow.hide();
          this.ui.collapseArrow.show();
          return this.ui.tagsPane.show();
        };

        return Layout;

      })(App.Views.Layout);
      return Index.TypeSelectionView = (function(_super) {

        __extends(TypeSelectionView, _super);

        function TypeSelectionView() {
          this._importTypeChanged = __bind(this._importTypeChanged, this);
          return TypeSelectionView.__super__.constructor.apply(this, arguments);
        }

        TypeSelectionView.prototype.template = TypeSelectionView.prototype.templatePath('imports/index/type_selection_layout');

        TypeSelectionView.prototype.ui = {
          nexposeRadioButton: '#import-from-nexpose',
          fileRadioButton: '#import-from-file',
          sonarRadioButton: '#import-from-sonar',
          importType: '[name="imports[type]"]',
          selectedImportType: '[name="imports[type]"]:checked'
        };

        TypeSelectionView.prototype.events = {
          'change @ui.importType': '_importTypeChanged'
        };

        TypeSelectionView.prototype.onRender = function() {
          return this._setRadioButton();
        };

        TypeSelectionView.prototype._importTypeChanged = function(e) {
          var currentSelection;
          this._bindUIElements();
          currentSelection = e.currentTarget.value;
          switch (currentSelection) {
            case this.ui.fileRadioButton.val():
              this.model.set('type', Index.Type.File);
              break;
            case this.ui.nexposeRadioButton.val():
              this.model.set('type', Index.Type.Nexpose);
              break;
            case this.ui.sonarRadioButton.val():
              this.model.set('type', Index.Type.Sonar);
              break;
            default:
              throw "Invalid import selection [" + currentSelection + "]";
          }
          return this.trigger('import:typeChange', this.model);
        };

        TypeSelectionView.prototype._getFileRadioButtonVal = function() {
          return this.ui.fileRadioButton.val();
        };

        TypeSelectionView.prototype._setRadioButton = function() {
          var type;
          this._clearRadioButtons();
          type = this.model.get('type');
          switch (type) {
            case Index.Type.File:
              return this._selectFileRadioButton();
            case Index.Type.Nexpose:
              return this._selectNexposeRadioButton();
            case Index.Type.Sonar:
              return this._selectSonarRadioButton();
            default:
              throw "Error setting radio button [" + type + "]";
          }
        };

        TypeSelectionView.prototype._clearRadioButtons = function() {
          return this.ui.importType.prop('checked', false);
        };

        TypeSelectionView.prototype._selectFileRadioButton = function() {
          return this.ui.fileRadioButton.prop('checked', true);
        };

        TypeSelectionView.prototype._selectNexposeRadioButton = function() {
          return this.ui.nexposeRadioButton.prop('checked', true);
        };

        TypeSelectionView.prototype._selectSonarRadioButton = function() {
          return this.ui.sonarRadioButton.prop('checked', true);
        };

        return TypeSelectionView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/index/templates/index_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<fieldset class="shared">\n  <legend><span>Import Data</span></legend>\n\n\n  <div class="row v-padding import-type-select-region"></div>\n\n  <div class="row main-import-view-region"></div>\n\n  <div class="row">\n    <div class="row tags-label">\n      <div class="columns small-2 left-text">\n          <span class="collapse left-align">▼</span><span class="expand left-align">▶</span>&nbsp;Automatic Tagging (Optional)\n      </div>\n      <div class="columns small-8 empty"></div>\n    </div>\n\n    <div class="row tags-pane">\n      <div class="row">\n        <div class="columns small-1 add-tags">Add Tags</div>\n        <div class="columns small-3">\n            <div class="row tags-region"></div>\n            <div class="row">\n              <label>\n                <input type="checkbox" name="imports[autotag_os]">\n                Automatically Tag by OS\n              </label>\n            </div>\n        </div>\n        <div class="columns small-8 empty"></div>\n      </div>\n    </div>\n\n\n\n  </div>\n\n</fieldset>\n\n<div class="row">\n  <div class="columns large-12">\n    <div class="columns large-9 empty">\n\n    </div>\n\n    <div class="columns large-2 align-right">\n      <input id="update_hosts" type="checkbox" name="import[update_hosts]" ><label for="update_hosts">Don\'t change existing hosts</label>\n    </div>\n\n\n    ');
      
        if (this.showTypeSelection) {
          __out.push('\n      <div class="columns large-1 align-right">\n      <span class="btn disabled import-btn">\n        <input class="import" id="popup_submit" name="commit" type="submit" value="Import Data">\n      </span>\n      </div>\n    ');
        }
      
        __out.push('\n\n  </div>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/index/templates/type_selection_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="large-4 columns no-left-padding">\n  <div class="columns large-4 no-left-padding">\n    <input type="radio" id="import-from-nexpose" name="imports[type]" value="import-from-nexpose"/><label for="import-from-nexpose">From Nexpose</label>\n  </div>\n\n  <div class="large-4 columns left-align">\n    <input type="radio" id="import-from-file" name="imports[type]" value="import-from-file"/><label for="import-from-file">From file</label>\n  </div>\n\n  <div class="large-4 columns left-align">\n    <input type="radio" id="import-from-sonar" name="imports[type]" value="import-from-sonar"/><label for="import-from-sonar">From Sonar</label>\n  </div>\n\n</div>\n\n<div class="large-8 columns"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model'], function() {
    return this.Pro.module("ImportsApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      Index.Type = {
        File: 'file',
        Nexpose: 'nexpose',
        Sonar: 'sonar'
      };
      return Index.ImportTypeSelection = (function(_super) {

        __extends(ImportTypeSelection, _super);

        function ImportTypeSelection() {
          return ImportTypeSelection.__super__.constructor.apply(this, arguments);
        }

        ImportTypeSelection.prototype.defaults = {
          type: Index.Type.Nexpose,
          showTypeSelection: true
        };

        return ImportTypeSelection;

      })(App.Entities.Model);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/imports/nexpose/nexpose_views', 'lib/components/table/table_controller', 'lib/shared/nexpose_console/nexpose_console_controller', 'lib/shared/nexpose_sites/nexpose_sites_controller', 'lib/components/modal/modal_controller', 'entities/nexpose/sites', 'entities/nexpose/import_run', 'lib/concerns/pollable'], function() {
    return this.Pro.module("ImportsApp.Nexpose", function(Nexpose, App, Backbone, Marionette, $, _) {
      Nexpose.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this._setCheckboxes = __bind(this._setCheckboxes, this);

          this.setTableSelections = __bind(this.setTableSelections, this);

          this.poll = __bind(this.poll, this);

          this._importRunCallback = __bind(this._importRunCallback, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('Pollable');

        Controller.prototype.pollInterval = 2000;

        Controller.prototype.importType = {
          site: 'import_site',
          scan: 'scan_and_import'
        };

        Controller.prototype.initialize = function(options) {
          var _this = this;
          this.layout = new Nexpose.SiteImportLayout({
            model: options.model
          });
          this.setMainView(this.layout);
          this.listenTo(this._mainView, 'show', function() {
            _this.chooseConsole = new Nexpose.ChooseConsole();
            return _this.show(_this.chooseConsole, {
              region: _this._mainView.nexposeSitesRegion
            });
          });
          this.listenTo(this._mainView, 'selectImportType:nexpose', function() {
            if (_this._mainView.nexposeSitesRegion.currentView !== _this.chooseConsole) {
              return _this._showForm();
            }
          });
          this.listenTo(this._mainView, 'configureNexpose:nexpose', function() {
            var nexposeConsole;
            nexposeConsole = App.request('nexposeConsole:shared', {});
            App.execute('show:nexposeConsole', nexposeConsole);
            return _this.listenTo(nexposeConsole, 'consoleAdded:nexposeConsole', function(opts) {
              return _this._mainView.addNexposeConsoleToDropdown(opts);
            });
          });
          return this.listenTo(this._mainView, 'selectNexposeConsole:nexpose', function(opts) {
            var consoleId;
            consoleId = opts.view.ui.nexposeConsole.val();
            if (consoleId === 'none') {
              _this.chooseConsole = new Nexpose.ChooseConsole();
              delete _this.importRun;
              delete _this.scanAndImport;
              delete _this.nexposeSites;
              return _this.show(_this.chooseConsole, {
                region: _this._mainView.nexposeSitesRegion
              });
            } else {
              _this.importRun = App.request('nexpose:importRun:entity');
              _this.nexpose_console_id = consoleId;
              return _this.importRun.save({
                nexpose_console_id: _this.nexpose_console_id
              }).success(_this._importRunCallback);
            }
          });
        };

        Controller.prototype._importRunCallback = function() {
          App.execute("loadingOverlay:show");
          return this.startPolling();
        };

        Controller.prototype.poll = function() {
          if (this.importRun.isReadyToImport()) {
            this.stopPolling();
            return this._showForm();
          } else {
            return this.importRun.fetch();
          }
        };

        Controller.prototype._showForm = function() {
          this.trigger('show:form');
          if (this._mainView.ui.importTypeSelected.val() === 'scan_and_import') {
            return this._showScanAndImport();
          } else {
            return this._showSitesTable();
          }
        };

        Controller.prototype._showScanAndImport = function() {
          var _this = this;
          this.importRun.set('addresses', gon.addresses);
          this.scanAndImport = new Nexpose.ScanAndImportLayout({
            model: this.importRun
          });
          this.listenTo(this.scanAndImport, 'scanAndImport:changed', function(whitelistHosts) {
            return _this.trigger('scanAndImport:changed', whitelistHosts);
          });
          this.listenTo(this.scanAndImport, 'show', function() {
            App.execute("loadingOverlay:hide");
            return _this.trigger('scanAndImport:rendered');
          });
          return this.show(this.scanAndImport, {
            region: this._mainView.nexposeSitesRegion
          });
        };

        Controller.prototype._showSitesTable = function() {
          var collection,
            _this = this;
          collection = App.request('nexpose:sites:entities', [], {
            nexpose_import_run_id: this.importRun.get('id')
          });
          App.execute("loadingOverlay:hide");
          this.nexposeSites = App.request('nexposeSites:shared', {
            collection: collection
          });
          this.listenTo(this.nexposeSites._mainView, 'table:initialized', function() {
            return _this.trigger("nexposeSites:initialized");
          });
          return this.show(this.nexposeSites, {
            region: this._mainView.nexposeSitesRegion
          });
        };

        Controller.prototype.isSiteImport = function() {
          return this._mainView.ui.importTypeSelected.val() === this.importType.site;
        };

        Controller.prototype.isScanAndImport = function() {
          return this._mainView.ui.importTypeSelected.val() === this.importType.scan;
        };

        Controller.prototype.setTableSelections = function(sites, tableSelections) {
          var _this = this;
          return this.listenToOnce(this.nexposeSites._mainView.table.tableCollection, 'sync', function() {
            Pro.execute("loadingOverlay:hide");
            return _this._setCheckboxes(sites, tableSelections);
          });
        };

        Controller.prototype._setCheckboxes = function(sites, tableSelections) {
          var $row, site, _i, _j, _len, _len1, _results, _results1;
          if (tableSelections.selectAllState && tableSelections.selectAllState !== "false") {
            $(".select-all input", this.nexposeSites._mainView.$el).click();
            $(".checkbox input", this.nexposeSites._mainView.$el).each(function() {
              return this.click();
            });
            _results = [];
            for (_i = 0, _len = sites.length; _i < _len; _i++) {
              site = sites[_i];
              $row = $("span:contains('" + site + "')", this.nexposeSites._mainView.table._mainView.$el).closest('tr');
              _results.push($('td.checkbox input', $row).click());
            }
            return _results;
          } else {
            _results1 = [];
            for (_j = 0, _len1 = sites.length; _j < _len1; _j++) {
              site = sites[_j];
              $row = $("span:contains('" + site + "')", this.nexposeSites._mainView.table._mainView.$el).closest('tr');
              _results1.push($('td.checkbox input', $row).click());
            }
            return _results1;
          }
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('nexpose:imports', function(options) {
        if (options == null) {
          options = {};
        }
        return new Nexpose.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'apps/imports/nexpose/templates/scan_and_import_layout', 'apps/imports/nexpose/templates/site_import_layout', 'apps/imports/nexpose/templates/choose_console', 'lib/components/table/table_controller'], function() {
    return this.Pro.module('ImportsApp.Nexpose', function(Nexpose, App, Backbone, Marionette, $, _) {
      Nexpose.SiteImportLayout = (function(_super) {

        __extends(SiteImportLayout, _super);

        function SiteImportLayout() {
          this._importTypeChanged = __bind(this._importTypeChanged, this);
          return SiteImportLayout.__super__.constructor.apply(this, arguments);
        }

        SiteImportLayout.prototype.template = SiteImportLayout.prototype.templatePath('imports/nexpose/site_import_layout');

        SiteImportLayout.prototype.ui = {
          configureNexposeBtn: '.configure-nexpose',
          nexposeConsole: '[name="imports[nexpose_console]"]',
          importType: '[name="imports[nexpose][type]"]',
          importTypeSelected: '[name="imports[nexpose][type]"]:checked',
          errors: '.error-container',
          scanAndImport: '#scan-and-import',
          existing: '#existing'
        };

        SiteImportLayout.prototype.regions = {
          nexposeSitesRegion: '.nexpose-sites-region'
        };

        SiteImportLayout.prototype.events = {
          'change @ui.importType': '_importTypeChanged'
        };

        SiteImportLayout.prototype.triggers = {
          'click @ui.configureNexposeBtn': 'configureNexpose:nexpose',
          'change @ui.nexposeConsole': 'selectNexposeConsole:nexpose'
        };

        SiteImportLayout.prototype.setScanAndImport = function() {
          this.ui.scanAndImport.prop('checked', true);
          return this._importTypeChanged();
        };

        SiteImportLayout.prototype.setSiteImport = function() {
          this.ui.existing.prop('checked', true);
          return this._importTypeChanged();
        };

        SiteImportLayout.prototype.setConsole = function(consoleId) {
          this.ui.nexposeConsole.val(consoleId);
          return this.ui.nexposeConsole.trigger('change');
        };

        SiteImportLayout.prototype.showErrors = function(errors) {
          this.ui.errors.css('display', 'block');
          this.ui.errors.addClass('errors');
          return this.ui.errors.html(_.escape(errors));
        };

        SiteImportLayout.prototype._importTypeChanged = function() {
          this._bindUIElements();
          return this.trigger('selectImportType:nexpose', {
            view: this
          });
        };

        SiteImportLayout.prototype.addNexposeConsoleToDropdown = function(opts) {
          var $option, consoles;
          consoles = this.model.get('consoles');
          consoles[opts.name] = opts.id;
          this.model.set('consoles', consoles);
          $option = $('<option />', {
            value: opts.id
          }).text(opts.name);
          this.ui.nexposeConsole.append($option);
          $option.prop('selected', true);
          return this.ui.nexposeConsole.trigger('change');
        };

        return SiteImportLayout;

      })(App.Views.Layout);
      Nexpose.ScanAndImportLayout = (function(_super) {

        __extends(ScanAndImportLayout, _super);

        function ScanAndImportLayout() {
          return ScanAndImportLayout.__super__.constructor.apply(this, arguments);
        }

        ScanAndImportLayout.prototype.template = ScanAndImportLayout.prototype.templatePath('imports/nexpose/scan_and_import_layout');

        ScanAndImportLayout.prototype.ui = {
          whitelistHosts: '#nexpose_scan_task_whitelist_string',
          blacklistHosts: '#nexpose_scan_task_blacklist_string',
          scanTemplate: '#nexpose_scan_task_scan_template',
          error: '.error'
        };

        ScanAndImportLayout.prototype.events = {
          'keyup @ui.whitelistHosts': '_triggerWhiteListChange'
        };

        ScanAndImportLayout.prototype.onShow = function() {
          return this._triggerWhiteListChange();
        };

        ScanAndImportLayout.prototype._triggerWhiteListChange = function(e) {
          return this.trigger('scanAndImport:changed', this.ui.whitelistHosts.val());
        };

        ScanAndImportLayout.prototype.showErrors = function(errors) {
          var _this = this;
          this.bindUIElements();
          this.ui.error.remove();
          if (errors != null) {
            return _.each(errors, function(v, k) {
              var $msg, error, name, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = v.length; _i < _len; _i++) {
                error = v[_i];
                name = "nexpose_scan_task[" + k + "]";
                $msg = $('<div />', {
                  "class": 'error'
                }).text(error);
                _results.push($("[name='" + name + "']", _this.el).addClass('invalid').after($msg));
              }
              return _results;
            });
          }
        };

        return ScanAndImportLayout;

      })(App.Views.Layout);
      return Nexpose.ChooseConsole = (function(_super) {

        __extends(ChooseConsole, _super);

        function ChooseConsole() {
          return ChooseConsole.__super__.constructor.apply(this, arguments);
        }

        ChooseConsole.prototype.template = ChooseConsole.prototype.templatePath('imports/nexpose/choose_console');

        ChooseConsole.prototype.className = 'shared nexpose-sites';

        return ChooseConsole;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/nexpose/templates/choose_console"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="columns small-12">\n  <div class="columns small-12 shared boxes inset">\n    Select or configure a Nexpose Console.\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/nexpose/templates/scan_and_import_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var template, _i, _len, _ref, _ref1;
      
        __out.push('<div class="scan" style="display: block;">\n\n  <li class="text input optional" id="nexpose_scan_task_whitelist_string_input" style="opacity: 1;">\n    <div class="row">\n      <div class="columns large-2"><label class="label" for="nexpose_scan_task_whitelist_string" style="opacity: 1;">Scan targets</label></div>\n      <div class="columns large-10">\n        <textarea id="nexpose_scan_task_whitelist_string" name="nexpose_scan_task[whitelist_string]" rows="20" style="opacity: 1;">');
      
        __out.push(__sanitize((_ref = this.addresses) != null ? _ref[0] : void 0));
      
        __out.push('</textarea>\n      </div>\n    </div>\n\n\n  </li>\n\n  <li class="text input optional" id="nexpose_scan_task_blacklist_string_input" style="opacity: 1;">\n    <div class="row">\n      <div class="columns large-2"><label class="label" for="nexpose_scan_task_blacklist_string" style="opacity: 1;">Excluded Addresses</label></div>\n      <div class="columns large-10">    <textarea id="nexpose_scan_task_blacklist_string" name="nexpose_scan_task[blacklist_string]" rows="20" style="opacity: 1;"></textarea></div>\n    </div>\n  </li>\n\n  <li class="select input optional" id="nexpose_scan_task_scan_template_input" style="opacity: 1;">\n    <div class="row">\n      <div class="columns large-2">\n        <label class="label" for="nexpose_scan_task_scan_template" style="opacity: 1;">Scan template</label>\n      </div>\n\n      <div class="columns large-10 align-left">\n        <select id="nexpose_scan_task_scan_template" name="nexpose_scan_task[scan_template]" style="opacity: 1;">\n          ');
      
        _ref1 = this.templates;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          template = _ref1[_i];
          __out.push('\n            <option value="');
          __out.push(__sanitize(template.scan_template_id));
          __out.push('">');
          __out.push(__sanitize(template.name));
          __out.push('</option>\n          ');
        }
      
        __out.push('\n        </select>\n      </div>\n    </div>\n  </li>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/nexpose/templates/site_import_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var console, id, _ref;
      
        __out.push('<div class="columns large-12 shared boxes">\n  <div class="row">\n    <div class="columns small-12">\n      <div class="error-container"></div>\n    </div>\n  </div>\n\n  <div class="row">\n    <div class="columns large-2">\n      <select name="imports[nexpose_console]" class="imports_nexpose_console_select">\n        <option value="none">Choose a nexpose console...</option>\n        ');
      
        _ref = this.consoles;
        for (console in _ref) {
          id = _ref[console];
          __out.push('\n        <option value="');
          __out.push(__sanitize(id));
          __out.push('">');
          __out.push(__sanitize(console));
          __out.push('</option>\n        ');
        }
      
        __out.push('\n      </select>\n    </div>\n\n    <div class="columns large-10">\n      <div class="circle-container">\n        <div class="shared circle">+</div>\n      </div>\n\n      <div class="circle-label">\n        <a href="javascript:void(0)" class="configure-nexpose">Configure a Nexpose Console</a>\n      </div>\n    </div>\n\n  </div>\n\n  <div class="row v-padding">\n    <div class="columns large-2">\n      <input id="existing" type="radio" name="imports[nexpose][type]" checked="checked" value="import_site"/><label for="existing">Import existing data</label>\n    </div>\n    <div class="columns large-10 push-left">\n      <input id="scan-and-import" type="radio" name="imports[nexpose][type]" value="scan_and_import"/><label for="scan-and-import">Scan and import data</label>\n    </div>\n  </div>\n\n  <div class="row v-padding site-area">\n    <div class="nexpose-sites-region columns small-12"></div>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/imports/sonar/sonar_layout_view', 'lib/components/table/table_controller', 'entities/sonar/fdns', 'entities/sonar/import_run', 'lib/components/pro_search_filter/filter_controller', 'lib/concerns/pollable', 'entities/task'], function() {
    return this.Pro.module("ImportsApp.Sonar", function(Sonar, App, Backbone, Marionette, $, _) {
      Sonar.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this._rowsSelected = __bind(this._rowsSelected, this);

          this.poll = __bind(this.poll, this);

          this._renderErrors = __bind(this._renderErrors, this);

          this._importRunErrorCallback = __bind(this._importRunErrorCallback, this);

          this._importRunCallback = __bind(this._importRunCallback, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('Pollable');

        Controller.prototype.pollInterval = 2000;

        Controller.prototype.initialize = function(options) {
          var stateModel;
          stateModel = new Sonar.StateModel(options);
          this.importsIndexChannel = options.importsIndexChannel;
          this.layout = new Sonar.Layout({
            model: stateModel,
            importsIndexChannel: options.importsIndexChannel
          });
          this.setMainView(this.layout);
          this.listenTo(this.layout, 'show', function() {
            if (gon.licensed) {
              this.domainInputView = new Sonar.DomainInputView({
                model: stateModel
              });
              this.resultView = new Sonar.EmptyResultView({
                model: stateModel
              });
              this.listenTo(this.domainInputView, 'query:submit', function(domainUrl) {
                return this._submitQuery(domainUrl);
              });
              this.show(this.domainInputView, {
                region: this.layout.domainInputRegion
              });
              return this.show(this.resultView, {
                region: this.layout.resultsRegion
              });
            } else {
              return $('.mainContent').addDisableOverlay('MetasploitPro');
            }
          });
          return this.listenTo(this.layout, 'destroy', function() {
            return $('.mainContent').removeDisableOverlay('MetasploitPro');
          });
        };

        Controller.prototype.getDomainUrl = function() {
          return this.domainInputView.getInputText();
        };

        Controller.prototype.getLastSeen = function() {
          return this.domainInputView.getLastSeen();
        };

        Controller.prototype._submitQuery = function(domainUrl) {
          this.importRun = App.request('sonar:importRun:entity');
          return this.importRun.save({
            workspace_id: WORKSPACE_ID,
            domain: domainUrl,
            last_seen: parseInt(this.getLastSeen())
          }).success(this._importRunCallback).error(this._importRunErrorCallback);
        };

        Controller.prototype._importRunCallback = function(import_run) {
          $('.error', this.el).remove();
          this.task = new App.Entities.Task({
            workspace_id: WORKSPACE_ID,
            id: import_run.task_id
          });
          App.execute("loadingOverlay:show", {
            loadMsg: "<p>This query may take up to a minute to complete. </p>" + "<p>Do not navigate away from this page. You will lose your results and need to run the query again.</p>"
          });
          return this.startPolling();
        };

        Controller.prototype._importRunErrorCallback = function(response) {
          return this._renderErrors(response.responseJSON.errors);
        };

        Controller.prototype._renderErrors = function(errors) {
          var _this = this;
          $('.error', this.el).remove();
          if (!_.isEmpty(errors)) {
            return _.each(errors, function(v, k) {
              var $msg, error, name, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = v.length; _i < _len; _i++) {
                error = v[_i];
                name = "imports[sonar][" + k + "]";
                $msg = $('<div />', {
                  "class": 'error'
                }).text(error);
                _results.push($("[name='" + name + "']", _this.el).addClass('invalid').after($msg));
              }
              return _results;
            });
          }
        };

        Controller.prototype.poll = function() {
          if (this.task.isCompleted()) {
            this.stopPolling();
            App.execute("loadingOverlay:hide");
            return this._showFdnsTable();
          } else {
            return this.task.fetch();
          }
        };

        Controller.prototype._showFdnsTable = function() {
          var collection, columns, filterOpts;
          columns = [
            {
              label: 'Hostname',
              attribute: 'hostname'
            }, {
              label: 'Address',
              attribute: 'address'
            }, {
              label: 'Last seen',
              attribute: 'last_seen'
            }
          ];
          collection = App.request("fdnss:entities", {
            workspace_id: WORKSPACE_ID,
            import_run_id: this.importRun.get('id')
          });
          filterOpts = {
            placeHolderText: 'Search Hosts',
            filterValuesEndpoint: Routes.filter_values_workspace_sonar_import_fdnss_index_path(WORKSPACE_ID, this.importRun.get('id')),
            keys: ['hostname', 'address']
          };
          this.tableController = App.request("table:component", {
            region: this.layout.resultsRegion,
            htmlID: 'sonar-table',
            taggable: true,
            selectable: true,
            "static": false,
            filterOpts: filterOpts,
            collection: collection,
            perPage: 20,
            defaultSort: 'last_seen',
            columns: columns
          });
          this.tableController.carpenterRadio.on('table:rows:selected', this._rowsSelected);
          this.tableController.carpenterRadio.on('table:rows:deselected', this._rowsSelected);
          this.tableController.carpenterRadio.on('table:row:selected', this._rowsSelected);
          return this.tableController.carpenterRadio.on('table:row:deselected', this._rowsSelected);
        };

        Controller.prototype._rowsSelected = function() {
          if (!this.tableController.tableSelections.selectAllState) {
            if (Object.keys(this.tableController.tableSelections.selectedIDs).length > 0) {
              return this.importsIndexChannel.command('enable:importButton');
            } else {
              return this.importsIndexChannel.command('disable:importButton');
            }
          } else {
            return this.importsIndexChannel.command('enable:importButton');
          }
        };

        Controller.prototype.submitImport = function() {
          var data, tags;
          App.execute("loadingOverlay:show");
          tags = this.importsIndexChannel.request('get:tags');
          data = {
            import_run_id: this.importRun.get('id'),
            tags: tags,
            workspace_id: WORKSPACE_ID
          };
          return this.tableController.postTableState({
            url: Routes.workspace_sonar_imports_path({
              workspace_id: WORKSPACE_ID
            }) + '.json',
            data: data,
            success: function(data) {
              return window.location.href = Routes.task_detail_path(WORKSPACE_ID, data.task_id);
            },
            error: function(data) {
              return App.execute('sonar:imports:display:error', {
                message: "Doge"
              });
            }
          });
        };

        return Controller;

      })(App.Controllers.Application);
      App.reqres.setHandler('sonar:imports', function(options) {
        if (options == null) {
          options = {};
        }
        return new Sonar.Controller(options);
      });
      return Sonar.StateModel = (function(_super) {

        __extends(StateModel, _super);

        function StateModel() {
          return StateModel.__super__.constructor.apply(this, arguments);
        }

        StateModel.prototype.defaults = {
          domainUrl: '',
          disableQuery: true
        };

        return StateModel;

      })(Backbone.Model);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_itemview', 'apps/imports/sonar/templates/domain_input_view'], function() {
    return this.Pro.module('ImportsApp.Sonar', function(Sonar, App, Backbone, Marionette, $, _) {
      return Sonar.DomainInputView = (function(_super) {

        __extends(DomainInputView, _super);

        function DomainInputView() {
          return DomainInputView.__super__.constructor.apply(this, arguments);
        }

        DomainInputView.prototype.template = DomainInputView.prototype.templatePath('imports/sonar/domain_input_view');

        DomainInputView.prototype.ui = {
          inputText: '#sonar-domain-input-textbox',
          queryButton: '#sonar-domain-query-button',
          errors: '#sonar-domain-input-error-container',
          lastSeen: '#sonar-last-seen-input'
        };

        DomainInputView.prototype.events = {
          'click @ui.queryButton': '_queryClicked',
          'keyup @ui.inputText': '_inputChanged'
        };

        DomainInputView.prototype.modelEvents = {
          'change:domainUrl': '_domainChanged'
        };

        DomainInputView.prototype.onShow = function() {
          return this._initQueryTooltip();
        };

        DomainInputView.prototype._initQueryTooltip = function() {
          this.ui.queryButton.css('pointer-events', 'all');
          this.ui.queryButton.attr('title', "Must enter a domain");
          return this.ui.queryButton.tooltip();
        };

        DomainInputView.prototype._domainChanged = function(model, val) {
          if (val.length > 0) {
            this._enableQuery();
            return this.model.set('disableQuery', false);
          } else {
            this._disableQuery();
            return this.model.set('disableQuery', true);
          }
        };

        DomainInputView.prototype._queryClicked = function() {
          var domain;
          console.log('query clicked');
          domain = this.ui.inputText.val();
          return this._queryDomain(domain);
        };

        DomainInputView.prototype._inputChanged = function(e) {
          var text;
          text = e.target.value;
          this.model.set('domainUrl', text);
          return this.trigger('input:changed', text);
        };

        DomainInputView.prototype._disableQuery = function() {
          this._initQueryTooltip();
          return this.ui.queryButton.addClass('disabled');
        };

        DomainInputView.prototype._enableQuery = function() {
          this.ui.queryButton.tooltip('disable');
          return this.ui.queryButton.removeClass('disabled');
        };

        DomainInputView.prototype.getInputText = function() {
          return this.ui.inputText.val();
        };

        DomainInputView.prototype.getLastSeen = function() {
          return this.ui.lastSeen.val();
        };

        DomainInputView.prototype._queryDomain = function(domain) {
          if (!(domain.trim().length > 0)) {
            return;
          }
          if (this._validateDomain(domain)) {
            console.log("Querying Sonar for domain <" + domain + ">...");
            return this.trigger('query:submit', domain);
          } else {
            return this.showErrors("" + domain + " is not a valid domain");
          }
        };

        DomainInputView.prototype._validateDomain = function(domain) {
          return true;
        };

        DomainInputView.prototype.showErrors = function(errors) {
          this.ui.errors.css('display', 'block');
          this.ui.errors.addClass('errors');
          return this.ui.errors.html(_.escape(errors));
        };

        DomainInputView.prototype.clearErrors = function() {
          this.ui.errors.removeClass('errors');
          return this.ui.errors.html();
        };

        return DomainInputView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'apps/imports/sonar/templates/sonar_layout', 'apps/imports/sonar/sonar_domain_input_view', 'apps/imports/sonar/sonar_result_view'], function() {
    return this.Pro.module('ImportsApp.Sonar', function(Sonar, App, Backbone, Marionette, $, _) {
      Sonar.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('imports/sonar/sonar_layout');

        Layout.prototype.regions = {
          domainInputRegion: "#sonar-domain-input-region",
          resultsRegion: "#sonar-results-region"
        };

        Layout.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          return this.importsIndexChannel = opts.importsIndexChannel, opts;
        };

        return Layout;

      })(App.Views.Layout);
      return App.commands.setHandler("sonar:imports:display:error", function(opts) {
        opts = _.defaults(opts, {
          title: 'An error occurred',
          style: 'error',
          message: "There was a problem pushing the results to Nexpose."
        });
        return App.execute('flash:display', opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_itemview', 'apps/imports/sonar/templates/result_view', 'apps/imports/sonar/templates/empty_result_view'], function() {
    return this.Pro.module('ImportsApp.Sonar', function(Sonar, App, Backbone, Marionette, $, _) {
      Sonar.ResultView = (function(_super) {

        __extends(ResultView, _super);

        function ResultView() {
          return ResultView.__super__.constructor.apply(this, arguments);
        }

        ResultView.prototype.template = ResultView.prototype.templatePath('imports/sonar/result_view');

        ResultView.prototype.ui = {
          resultsTable: '#sonar-results-table'
        };

        ResultView.prototype.onShow = function(opts) {
          var collection, columns, tableController, tableOpts;
          if (opts == null) {
            opts = {};
          }
          columns = [
            {
              label: 'Address',
              attribute: 'address'
            }, {
              label: 'Host Name',
              attribute: 'name'
            }, {
              label: 'Service',
              attribute: 'host.service'
            }, {
              label: 'Last Updated',
              attribute: 'updated_at'
            }
          ];
          collection = new Backbone.Collection([
            {
              'address': '10.0.0.1',
              'name': 'hostname-01',
              'host.service': 'smb',
              'updated_at': '2015-10-21 09:38:26AM -06:00'
            }, {
              'address': '10.0.0.2',
              'name': 'hostname-02',
              'host.service': 'smb',
              'updated_at': '2015-10-21 09:38:26AM -06:00'
            }, {
              'address': '10.0.0.3',
              'name': 'hostname-03',
              'host.service': 'smb',
              'updated_at': '2015-10-21 09:38:26AM -06:00'
            }, {
              'address': '10.0.0.4',
              'name': 'hostname-04',
              'host.service': 'smb',
              'updated_at': '2015-10-21 09:38:26AM -06:00'
            }, {
              'address': '10.0.0.5',
              'name': 'hostname-05',
              'host.service': 'smb',
              'updated_at': '2015-10-21 09:38:26AM -06:00'
            }
          ]);
          tableOpts = {
            region: new Backbone.Marionette.Region({
              el: this.ui.resultsTable
            }),
            columns: columns,
            selectable: true,
            collection: collection
          };
          return tableController = App.request("table:component", tableOpts);
        };

        return ResultView;

      })(App.Views.ItemView);
      return Sonar.EmptyResultView = (function(_super) {

        __extends(EmptyResultView, _super);

        function EmptyResultView() {
          return EmptyResultView.__super__.constructor.apply(this, arguments);
        }

        EmptyResultView.prototype.template = EmptyResultView.prototype.templatePath('imports/sonar/empty_result_view');

        EmptyResultView.prototype.className = 'shared nexpose-sites';

        return EmptyResultView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/sonar/templates/domain_input_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="row">\n\n  <div class="columns small-12">\n    <div id="sonar-domain-input-error-container" class="error-container"></div>\n  </div>\n\n  <div class="columns large-12">\n\n    <div class="inline-block domain">\n      <label for="sonar-domain-input-textbox" hidden>Sonar Domain</label>\n      <input id="sonar-domain-input-textbox" type="text" name="imports[sonar][domain]" placeholder="Example: rapid7.com" value="');
      
        __out.push(__sanitize(this.domainUrl));
      
        __out.push('">\n    </div>\n\n    <div class="inline-block last-seen">\n      <label>\n        Last seen within\n        <input id="sonar-last-seen-input" name="imports[sonar][last_seen]" type="number" min="1" maxlength="3" value="30"/>\n        day(s)\n      </label>\n    </div>\n\n    <div class="inline-block query">\n      <span id="sonar-domain-query-button" class="btn disabled">\n        <input class="generic" name="commit" type="submit" value="Query">\n      </span>\n    </div>\n\n\n  </div>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/sonar/templates/empty_result_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="row v-padding">\n  <div id="sonar-empty-results" class="columns small-12">\n    <div class="columns small-12 shared boxes inset">\n      Query Sonar for Results\n    </div>\n  </div>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/sonar/templates/result_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="row v-padding">\n  <div id="sonar-results-table" class="columns large-12"></div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/imports/sonar/templates/sonar_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="sonar-import-container" class="columns large-12 shared boxes">\n  <div id="sonar-domain-input-region"></div>\n  <div id="sonar-results-region"></div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/logins/delete/delete_view', 'lib/concerns/controllers/table_selections'], function() {
    return this.Pro.module("LoginsApp.Delete", function(Delete, App, Backbone, Marionette, $, _) {
      return Delete.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.onFormSubmit = __bind(this.onFormSubmit, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('TableSelections');

        Controller.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection, this.credID = opts.credID;
          return this.setMainView(new Delete.Layout);
        };

        Controller.prototype.onFormSubmit = function() {
          var defer, destroyPath, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          destroyPath = gon.destroy_multiple_workspace_metasploit_credential_cores_path.split('/');
          destroyPath.splice(6, 0, this.credID, "logins").shift();
          destroyPath = destroyPath.join('/');
          jQuery.ajax({
            url: destroyPath,
            type: 'DELETE',
            data: {
              selections: {
                select_all_state: this.selectAllState || null,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              ignore_pagination: true
            },
            success: function() {
              _this.tableCollection.removeMultiple(_this.selectedVisibleCollection.models);
              defer.resolve();
              App.vent.trigger('logins:deleted');
              return App.execute('flash:display', {
                title: "Login" + (_this.pluralizedMessage('', 's')) + "  deleted",
                message: "The login" + (_this.pluralizedMessage(' was', 's were ')) + " successfully deleted."
              });
            },
            error: function() {
              return App.execute('flash:display', {
                title: 'An error occurred',
                style: 'error',
                message: 'There was a problem deleting the selected login(s).'
              });
            }
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'apps/logins/delete/templates/delete_layout'], function() {
    return this.Pro.module('LoginsApp.Delete', function(Delete, App) {
      return Delete.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('logins/delete/delete_layout');

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/logins/delete/templates/delete_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="delete-text">\n    Deleting these logins will permanently remove them from this project.\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['lib/utilities/navigation', 'apps/logins/new/new_controller', 'apps/logins/delete/delete_controller', 'lib/components/modal/modal_controller'], function() {
    return this.Pro.module('LoginsApp', function(LoginsApp, App, Backbone, Marionette, $, _, HostViewController) {
      var API;
      LoginsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          ":id/logins/new": "_new"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        _new: function() {
          return App.execute("showModal", new LoginsApp.New.Controller);
        },
        "delete": function(options) {
          return new LoginsApp.Delete.Controller(options);
        }
      };
      App.addInitializer(function() {
        return new LoginsApp.Router({
          controller: API
        });
      });
      return App.reqres.setHandler('logins:delete', function(options) {
        if (options == null) {
          options = {};
        }
        return API["delete"](options);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/logins/new/new_view', 'lib/components/tags/new/new_controller', 'apps/creds/show/show_view', 'entities/service', 'entities/host'], function() {
    return this.Pro.module("LoginsApp.New", function(New, App, Backbone, Marionette, $, _) {
      New.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this._updateServiceForm = __bind(this._updateServiceForm, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(core_id) {
          var _this = this;
          this.core_id = core_id;
          this.hosts = App.request("hosts:entities:limited", {}, {
            workspace_id: WORKSPACE_ID
          });
          this.access_level_view = App.request("creds:accessLevel:view", {
            model: new Backbone.Model({
              access_level: 'Admin'
            }),
            save: false,
            showLabel: true
          });
          this.formView = new New.Form({
            model: new Backbone.Model({
              hosts: {},
              services: {}
            })
          });
          this.setMainView(new New.Layout());
          this.listenTo(this.hosts, "reset", function() {
            _this._mainView.removeLoading();
            _this.formView.model.set('hosts', _this.hosts.toJSON());
            _this.formView.render();
            _this.formView.updateService();
            _this.access_level_view = App.request("creds:accessLevel:view", {
              model: _this.access_level_view.model,
              save: false,
              showLabel: true
            });
            return _this.show(_this.access_level_view, {
              region: _this.formView.accessLevelRegion,
              preventDestroy: true
            });
          });
          this.listenTo(this.formView, "updateServices", function(args) {
            return _this.updateServices(args);
          });
          return this.listenTo(this._mainView, 'show', function() {
            this.show(this.formView, {
              region: this._mainView.form,
              preventDestroy: true
            });
            this.showTagging();
            return this.hosts.fetch({
              reset: true
            });
          });
        };

        Controller.prototype.showTagging = function() {
          var collection, msg, query, url;
          msg = "<p>\n  A tag is an identifier that you can use to group together logins.\n  You apply tags so that you can easily search for logins.\n  For example, when you search for a particular tag, any login that\n  is labelled with that tag will appear in your search results.\n</p>\n<p>\n  To apply a tag, start typing the name of the tag you want to use in the\n  Tag field. As you type in the search box, Metasploit automatically predicts\n  the tags that may be similar to the ones you are searching for. If the tag\n  does not exist, Metasploit creates and adds it to the project.\n</p>";
          query = "";
          url = "";
          collection = new Backbone.Collection([]);
          this.tagController = App.request('tags:new:component', collection, {
            q: query,
            url: url,
            content: msg
          });
          return this.show(this.tagController, {
            region: this._mainView.tags
          });
        };

        Controller.prototype.updateServices = function(args) {
          this.$viewEl = args.view.$el;
          this.host_id = $('select.host', this.$viewEl).val();
          this.services = App.request("services:entities", {
            host_id: this.host_id
          });
          return this.services.fetch({
            reset: true
          }).then(this._updateServiceForm);
        };

        Controller.prototype._updateServiceForm = function() {
          this.formView.model.set('services', this.services.toJSON());
          this.formView.render();
          this.access_level_view = App.request("creds:accessLevel:view", {
            model: this.access_level_view.model,
            save: false,
            showLabel: true
          });
          this.show(this.access_level_view, {
            region: this.formView.accessLevelRegion,
            preventDestroy: true
          });
          return $('select.host', this.$viewEl).val(this.host_id);
        };

        Controller.prototype.onFormSubmit = function() {
          var data, defer, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          data = Backbone.Syphon.serialize(this._mainView);
          this.loginModel = App.request("new:login:entity", data);
          this.loginModel.set('tags', this.tagController.getDataOptions());
          this.loginModel.unset('errors');
          this.loginModel.set('core_id', this.core_id);
          this.loginModel.save({}, {
            success: function() {
              defer.resolve();
              return App.vent.trigger('login:added');
            },
            error: function(login, response) {
              var errors;
              errors = $.parseJSON(response.responseText).error;
              _this.loginModel.set('errors', errors);
              return _this._mainView.updateErrors(errors);
            }
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('logins:new', function(core_id) {
        return new New.Controller(core_id);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_itemview', 'base_layout', 'apps/logins/new/templates/new_layout', 'apps/logins/new/templates/form'], function() {
    return this.Pro.module('LoginsApp.New', function(New, App, Backbone, Marionette, $, _) {
      New.Form = (function(_super) {

        __extends(Form, _super);

        function Form() {
          return Form.__super__.constructor.apply(this, arguments);
        }

        Form.prototype.template = Form.prototype.templatePath('logins/new/form');

        Form.prototype.regions = {
          accessLevelRegion: '.access-level-region'
        };

        Form.prototype.ui = {
          host: 'select.host'
        };

        Form.prototype.triggers = {
          'change @ui.host': 'updateServices'
        };

        Form.prototype.updateService = function() {
          return this.ui.host.trigger('change');
        };

        Form.prototype.hideHost = function() {
          return this.ui.host.parent().hide();
        };

        return Form;

      })(App.Views.Layout);
      return New.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('logins/new/new_layout');

        Layout.prototype.regions = {
          tags: '.tags',
          form: 'form'
        };

        Layout.prototype.ui = {
          tags: '.tag-container'
        };

        Layout.prototype.className = 'tab-loading';

        Layout.prototype.removeTags = function() {
          return this.ui.tags.remove();
        };

        Layout.prototype.removeLoading = function() {
          return this.$el.removeClass('tab-loading');
        };

        Layout.prototype.updateErrors = function(errors) {
          var _this = this;
          $('.error').remove();
          if (errors != null) {
            return _.each(errors, function(v, k) {
              var $msg, error, name, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = v.length; _i < _len; _i++) {
                error = v[_i];
                if (k === 'port' || k === 'proto') {
                  k = 'service';
                }
                name = "" + k;
                $msg = $('<div />', {
                  "class": 'error'
                }).text(error);
                _results.push($("[name='" + name + "']", _this.el).addClass('invalid').parent('div').after($msg));
              }
              return _results;
            });
          }
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/logins/new/templates/form"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var host, service, _i, _j, _len, _len1, _ref, _ref1;
      
        __out.push('<div style=\'clear:both;margin-top:10px;\'>\n  <select class="host" name="host[id]">\n    ');
      
        _ref = this.hosts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          host = _ref[_i];
          __out.push('\n    <option value="');
          __out.push(__sanitize(host.id));
          __out.push('">');
          __out.push(__sanitize(host.name));
          __out.push('/');
          __out.push(__sanitize(host.address));
          __out.push('</option>\n    ');
        }
      
        __out.push('\n  </select>\n  <label for="host">Host</label>\n</div>\n\n\n<div class=\'clear-floats\'>\n  <select id="service" name="service">\n    ');
      
        _ref1 = this.services;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          service = _ref1[_j];
          __out.push('\n    <option value="');
          __out.push(__sanitize(service.id));
          __out.push('">');
          __out.push(__sanitize(service.name));
          __out.push('/');
          __out.push(__sanitize(service.proto));
          __out.push('/');
          __out.push(__sanitize(service.port));
          __out.push('</option>\n    ');
        }
      
        __out.push('\n  </select>\n  <label for="service">Service</label>\n\n</div>\n\n\n<div class="clear-floats access-level-region">\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/logins/new/templates/new_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push(' <div class="form-container login">\n   <form onsubmit=\'return false\'>\n\n\n\n   </form>\n\n    <div class="tag-container">\n     <label for="token-input-">Tags</label>\n     <div class="tags"></div>\n    </div>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/loots/delete/delete_view', 'lib/concerns/controllers/table_selections', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module("LootsApp.Delete", function(Delete, App, Backbone, Marionette, $, _) {
      return Delete.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('TableSelections');

        Controller.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection;
          return this.setMainView(new Delete.Layout);
        };

        Controller.prototype.onFormSubmit = function() {
          var defer, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          jQuery.ajax({
            url: Routes.destroy_multiple_workspace_loots_path({
              workspace_id: WORKSPACE_ID
            }),
            type: 'DELETE',
            data: {
              selections: {
                select_all_state: this.selectAllState || null,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              search: this.tableCollection.server_api.search,
              ignore_pagination: true
            },
            success: function() {
              _this.tableCollection.removeMultiple(_this.selectedVisibleCollection);
              defer.resolve();
              App.vent.trigger('loots:deleted');
              return App.execute('flash:display', {
                title: "Evidence deleted",
                message: "The evidence was successfully deleted."
              });
            },
            error: function() {
              return App.execute('flash:display', {
                title: 'An error occurred',
                style: 'error',
                message: "There was a problem deleting the selected evidence"
              });
            }
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'apps/loots/delete/templates/delete_layout'], function() {
    return this.Pro.module('LootsApp.Delete', function(Delete, App) {
      return Delete.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('loots/delete/delete_layout');

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/loots/delete/templates/delete_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="delete-text">\n  Deleting this evidence will permanently remove it from this project.\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/analysis_tab/analysis_tab_controller', 'apps/loots/index/index_views', 'entities/loot', 'css!css/components/pill'], function() {
    return this.Pro.module("LootsApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var actionButtons, columns, defaultSort, emptyView, filterOpts, loots, show,
            _this = this;
          _.defaults(options, {
            show: true
          });
          show = options.show;
          loots = App.request('loots:entities', {
            index: true,
            fetch: false
          });
          defaultSort = 'created_at';
          columns = [
            {
              attribute: 'host.name',
              label: 'Host Name',
              escape: false,
              sortable: true
            }, {
              label: 'Type',
              attribute: 'ltype'
            }, {
              attribute: 'name'
            }, {
              attribute: 'size',
              sortable: false
            }, {
              attribute: 'info'
            }, {
              attribute: 'data',
              view: Index.DataCellView,
              sortable: false
            }, {
              label: 'Created',
              attribute: 'created_at',
              defaultDirection: 'desc'
            }
          ];
          actionButtons = [
            {
              label: 'Delete Captured Data',
              "class": 'delete',
              activateOn: 'any',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var controller;
                controller = App.request('loots:delete', {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs,
                  selectedVisibleCollection: selectedVisibleCollection,
                  tableCollection: tableCollection
                });
                return App.execute("showModal", controller, {
                  modal: {
                    title: 'Are you sure?',
                    description: '',
                    height: 150,
                    width: 550,
                    hideBorder: true
                  },
                  buttons: [
                    {
                      name: 'Cancel',
                      "class": 'close'
                    }, {
                      name: 'OK',
                      "class": 'btn primary'
                    }
                  ]
                });
              },
              containerClass: 'action-button-right-separator'
            }, {
              label: 'Scan',
              "class": 'scan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newScanPath;
                newScanPath = Routes.new_scan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'loot', newScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Import...',
              "class": 'import',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                }) + '#file';
              }
            }, {
              label: 'Nexpose Scan',
              "class": 'nexpose',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                });
              }
            }, {
              label: 'WebScan',
              "class": 'webscan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newWebScanPath;
                newWebScanPath = Routes.new_webscan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'loot', newWebScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Modules',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var modulesPath;
                modulesPath = Routes.modules_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'loot', modulesPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-separator'
            }, {
              label: 'Bruteforce',
              "class": 'brute',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newQuickBruteforcePath;
                newQuickBruteforcePath = Routes.workspace_brute_force_guess_index_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'loot', newQuickBruteforcePath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Exploit',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newExploitPath;
                newExploitPath = Routes.new_exploit_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'loot', newExploitPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }
          ];
          filterOpts = {
            searchType: 'pro',
            placeHolderText: 'Search Evidence'
          };
          emptyView = App.request('analysis_tab:empty_view', {
            emptyText: "No captured data is associated with this project"
          });
          _.extend(options, {
            collection: loots,
            columns: columns,
            defaultSort: defaultSort,
            actionButtons: actionButtons,
            filterOpts: filterOpts,
            emptyView: emptyView
          });
          this.analysisTabController = App.request('analysis_tab:component', options);
          this.layout = this.analysisTabController.layout;
          this.setMainView(this.layout);
          if (show) {
            return this.show(this.layout, {
              region: this.region
            });
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_itemview'], function() {
    return this.Pro.module('LootsApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      return Index.DataCellView = (function(_super) {

        __extends(DataCellView, _super);

        function DataCellView() {
          return DataCellView.__super__.constructor.apply(this, arguments);
        }

        DataCellView.prototype.ui = {
          noteDataDisclosureLink: 'a.loot-data-view'
        };

        DataCellView.prototype.events = {
          'click @ui.noteDataDisclosureLink': 'displayModal'
        };

        DataCellView.prototype.template = function(data) {
          return data['data'];
        };

        DataCellView.prototype.displayModal = function(e) {
          var $dialog;
          $dialog = $("<div style='display:hidden'>" + (this.$el.find('.loot-data').html()) + "</div>").appendTo('body');
          $dialog.dialog({
            title: "Loot data",
            maxheight: 530,
            width: 670,
            buttons: {
              "Close": function() {
                return $(this).dialog('close');
              }
            }
          });
          return e.preventDefault();
        };

        return DataCellView;

      })(Pro.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/loots/index/index_controller', 'apps/loots/delete/delete_controller', 'lib/utilities/navigation'], function() {
    return this.Pro.module('LootsApp', function(LootsApp, App) {
      var API,
        _this = this;
      LootsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index",
          "loots": "index"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function() {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/loots/index/index_controller'], function() {
            var indexController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return indexController = new LootsApp.Index.Controller;
          });
        },
        "delete": function(options) {
          return new LootsApp.Delete.Controller(options);
        }
      };
      App.addInitializer(function() {
        return new LootsApp.Router({
          controller: API
        });
      });
      App.addRegions({
        mainRegion: "#loots-main-region"
      });
      return App.reqres.setHandler('loots:delete', function(options) {
        if (options == null) {
          options = {};
        }
        return API["delete"](options);
      });
    });
  });

}).call(this);
(function() {

  define(['d3_min', 'jquery', 'd3_transform'], function(d3, $) {
    var minimap;
    return minimap = function() {
      var base, frameX, frameY, height, minimapScale, scale, target, width, x, y, zoom;
      minimapScale = null;
      scale = 1;
      zoom = null;
      base = null;
      target = null;
      width = 0;
      height = 0;
      x = 0;
      y = 0;
      frameX = 0;
      frameY = 0;
      minimap = function(selection) {
        var container, drag, frame, getXYFromTranslate, normalizeDrag, toggleMap;
        base = selection;
        container = selection.append("g").attr("class", "minimap").call(zoom);
        zoom.on("zoom.minimap", function() {
          return scale = d3.event.scale;
        });
        getXYFromTranslate = function(translateString) {
          var split;
          split = translateString.split(",");
          x = split[0] ? ~~split[0].split("(")[1] : 0;
          y = split[1] ? ~~split[1].split(")")[0] : 0;
          return [x, y];
        };
        normalizeDrag = function(_arg) {
          var x, y;
          x = _arg[0], y = _arg[1];
          return [x, y];
        };
        toggleMap = function() {
          return container.attr('display', zoom.scale() < 1.1 ? 'none' : '');
        };
        minimap.node = container.node();
        frame = container.append("g").attr("class", "frame");
        frame.append("rect").attr("class", "background").attr("width", width).attr("height", height).attr("filter", "url(#minimapDropShadow)");
        drag = d3.behavior.drag().on("dragstart.minimap", function() {
          var frameTranslate;
          frameTranslate = normalizeDrag(getXYFromTranslate(frame.attr("transform")));
          frameX = frameTranslate[0];
          return frameY = frameTranslate[1];
        }).on("drag.minimap", function() {
          var frameTranslate, translate;
          d3.event.sourceEvent.stopImmediatePropagation();
          frameTranslate = normalizeDrag([frameX + d3.event.dx, frameY + d3.event.dy]);
          frameX = frameTranslate[0];
          frameY = frameTranslate[1];
          frame.attr("transform", d3.svg.transform().translate([frameX, frameY]));
          translate = [-frameX * scale, -frameY * scale];
          target.attr("transform", d3.svg.transform().translate(translate).scale(scale));
          zoom.translate(translate);
          return toggleMap();
        });
        frame.call(drag);
        minimap.render = function() {
          var node, targetTransform, translate;
          scale = zoom.scale();
          container.attr("transform", d3.svg.transform().scale(minimapScale).translate([50, 220]));
          node = target.node().cloneNode(true);
          node.removeAttribute("id");
          base.selectAll(".minimap .panCanvas").remove();
          minimap.node.appendChild(node);
          targetTransform = getXYFromTranslate(target.attr("transform"));
          translate = d3.svg.transform().translate([-targetTransform[0] / scale, -targetTransform[1] / scale]);
          frame.attr("transform", translate).select(".background").attr("width", width / scale).attr("height", height / scale);
          frame.node().parentNode.appendChild(frame.node());
          d3.select(node).attr("transform", d3.svg.transform().translate([1, 1]));
          toggleMap();
          return this;
        };
        return minimap.update = function() {
          var translate;
          frame.attr("transform", d3.svg.transform().translate([frameX, frameY]));
          translate = [-frameX * scale, -frameY * scale];
          target.attr("transform", d3.svg.transform().translate(translate).scale(scale));
          zoom.translate(translate);
          toggleMap();
          return this;
        };
      };
      minimap.width = function(value) {
        if (!arguments.length) {
          return width;
        }
        width = parseInt(value, 10);
        return this;
      };
      minimap.height = function(value) {
        if (!arguments.length) {
          return height;
        }
        height = parseInt(value, 10);
        return this;
      };
      minimap.x = function(value) {
        if (!arguments.length) {
          return frameX;
        }
        frameX = parseInt(value, 10);
        return this;
      };
      minimap.y = function(value) {
        if (!arguments.length) {
          return frameY;
        }
        frameY = parseInt(value, 10);
        return this;
      };
      minimap.scale = function(value) {
        if (!arguments.length) {
          return scale;
        }
        scale = value;
        frameX /= scale;
        frameY /= scale;
        return this;
      };
      minimap.minimapScale = function(value) {
        if (!arguments.length) {
          return minimapScale;
        }
        minimapScale = value;
        return this;
      };
      minimap.zoom = function(value) {
        if (!arguments.length) {
          return zoom;
        }
        zoom = value;
        return this;
      };
      minimap.target = function(value) {
        if (!arguments.length) {
          return target;
        }
        target = value;
        width = parseInt(target.attr("width"), 10);
        height = parseInt(target.attr("height"), 10);
        return this;
      };
      return minimap;
    };
  });

}).call(this);
(function() {

  define(['d3_min'], function(d3) {
    var MAX_NODE_RADIUS, MIN_DEPTH_PAD, MIN_NODE_RADIUS, PcbLayout, calculateCircleRadius, d3_layout_hierarchyVisitAfter;
    d3_layout_hierarchyVisitAfter = function(node, callback) {
      var children, i, n, nodes, nodes2, _results;
      nodes = [node];
      nodes2 = [];
      while ((node = nodes.pop()) != null) {
        nodes2.push(node);
        if ((children = node.children) && (n = children.length)) {
          i = -1;
          while (++i < n) {
            nodes.push(children[i]);
          }
        }
      }
      _results = [];
      while ((node = nodes2.pop()) != null) {
        _results.push(callback(node));
      }
      return _results;
    };
    MAX_NODE_RADIUS = 100;
    MIN_NODE_RADIUS = 60;
    MIN_DEPTH_PAD = 100;
    calculateCircleRadius = function(depth, maxDepth) {
      maxDepth++;
      return Math.floor(Math.max(MAX_NODE_RADIUS - (depth / maxDepth) * (MAX_NODE_RADIUS - MIN_NODE_RADIUS), MIN_NODE_RADIUS));
    };
    return PcbLayout = function() {
      var cluster, hierarchy, iterations, size;
      hierarchy = d3.layout.hierarchy().value(null).sort(null);
      size = [1, 1];
      iterations = 0;
      cluster = function(d, i) {
        var availableDepthPadding, c, depthDimensions, depthIndices, depthMap, depthWidths, fits, h, layout, levelMap, maxDepth, nodeCount, nodes, root, totalWidthNecessary, w, xForNode;
        nodes = hierarchy.call(this, d, i);
        root = nodes[0];
        maxDepth = 0;
        depthMap = [];
        levelMap = [];
        nodeCount = 0;
        fits = false;
        layout = null;
        w = Math.max(size[0], 600);
        h = Math.max(size[1], 600);
        _.each(nodes, function(d) {
          var _name;
          maxDepth = Math.max(maxDepth, d.depth);
          depthMap[_name = d.depth] || (depthMap[_name] = []);
          depthMap[d.depth].push(d);
          return nodeCount++;
        });
        iterations = 0;
        while (!(fits || iterations > 1000)) {
          depthWidths = new Array(maxDepth);
          depthDimensions = new Array(maxDepth);
          totalWidthNecessary = 0;
          c = false;
          _.times(maxDepth + 1, function(idx) {
            var nodeSize, nodesPerCol, nodesPerRow;
            if (c) {
              return;
            }
            nodeSize = Math.max(calculateCircleRadius(idx, maxDepth) * 2 - iterations, 5);
            nodesPerCol = Math.max(Math.floor(h / nodeSize), 1);
            nodesPerRow = Math.ceil(depthMap[idx].length / nodesPerCol);
            if (nodesPerRow === 1 && nodesPerCol > 200) {
              nodesPerRow = Math.max(Math.floor(w / (maxDepth + 1) / nodeSize), 1);
              nodesPerCol = Math.ceil(depthMap[idx].length / nodesPerRow);
            }
            if (nodesPerRow > 1 && depthMap[idx].length < 5 && iterations < 400) {
              c = true;
              iterations++;
              return;
            }
            depthWidths[idx] = nodesPerRow * nodeSize;
            depthDimensions[idx] = [nodesPerRow, nodesPerCol];
            totalWidthNecessary += depthWidths[idx];
            return levelMap[idx] = Math.floor(depthMap[idx].length / nodesPerRow);
          });
          if (c) {
            continue;
          }
          fits = totalWidthNecessary < (w - MIN_DEPTH_PAD);
          if (!fits) {
            iterations++;
            w += 5;
            h += 5;
          }
        }
        availableDepthPadding = (w - totalWidthNecessary) / maxDepth;
        if (_.isFinite(availableDepthPadding)) {
          availableDepthPadding = Math.min(availableDepthPadding, 400);
        } else {
          availableDepthPadding = w / 2;
        }
        depthIndices = {};
        xForNode = function(node) {
          var x;
          x = 0;
          _.times(node.depth, function(i) {
            return x += depthWidths[i] + availableDepthPadding;
          });
          return x + availableDepthPadding;
        };
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var currLevel, currOffset, left, levels, nodeSize, padding, partitionHeight, prevSize, push, realLevels, siblingIdx, siblings, top, _name;
          depthIndices[_name = node.depth] || (depthIndices[_name] = []);
          siblings = depthIndices[node.depth];
          nodeSize = Math.max(calculateCircleRadius(node.depth, maxDepth) * 2 - iterations, 5);
          prevSize = Math.max(calculateCircleRadius(node.depth, maxDepth - 1) * 2 - iterations, 5);
          node.radius = nodeSize / 2;
          siblingIdx = siblings.length;
          top = Math.floor(siblingIdx / depthDimensions[node.depth][0]) % depthDimensions[node.depth][1];
          left = Math.floor(siblingIdx % depthDimensions[node.depth][0]);
          if (left % 2 === 1) {
            top += .5;
          }
          push = MAX_NODE_RADIUS / 6;
          if (depthMap[node.depth].length <= depthDimensions[node.depth][1]) {
            partitionHeight = h / (depthMap[node.depth].length + 1);
            node.x = push + partitionHeight * (siblingIdx + 1) - nodeSize / 2;
          } else {
            levels = levelMap[node.depth];
            realLevels = Math.floor(depthMap[node.depth].length / depthDimensions[node.depth][0]);
            currLevel = Math.floor(siblingIdx / depthDimensions[node.depth][1]);
            padding = h - levels * nodeSize;
            currOffset = (padding / levels) * currLevel;
            if (_.isNaN(currOffset)) {
              currOffset = 0;
            }
            node.x = push + top * padding / levels + nodeSize * top + (levels - realLevels) * ((padding / levels) + nodeSize) / 2;
          }
          node.y = xForNode(node) + (left * nodeSize);
          return siblings.push(node);
        });
        return nodes;
      };
      cluster.size = function(x) {
        if (!arguments.length) {
          return size;
        }
        size = x;
        return this;
      };
      cluster.iterations = function() {
        return iterations;
      };
      cluster.links = function(nodes) {
        return d3.merge(_.map(nodes, (function(parent) {
          return (parent.children || []).map(function(child) {
            return {
              source: parent,
              target: child
            };
          });
        })));
      };
      d3.rebind(cluster, hierarchy, "sort", "children", "value");
      cluster.nodes = cluster;
      return cluster;
    };
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/meta_modules/domino/templates/graph"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class=\'graph\'>\n  <div class=\'please-wait\'>\n    <div class=\'middle\'><img src="/assets/icons/silky/information-c0210a97250ec34cc04d6c8ff768012bf9e054abe33c7fcc558f65bf57a1661a.png" /> Waiting for initial nodes...</div>\n  </div>\n</div>\n<div class=\'host-info-region\'>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/meta_modules/domino/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class=\'graph-controls\'>\n  <label class=\'vertical\'>\n    <input type=\'radio\' name=\'orientation\' value=\'vertical\' title=\'Vertical\' checked />\n    <span class=\'icon\' title=\'Vertical\' />\n  </label>\n  <label class=\'horizontal\'>\n    <input type=\'radio\' name=\'orientation\' value=\'horizontal\' title=\'Horizontal\'  />\n    <span class=\'icon\' title=\'Horizontal\' />\n  </label>\n  <label class=\'radial\' style=\'display:none\'>\n    <input type=\'radio\' name=\'orientation\' value=\'radial_tree\' title=\'Radial\'  />\n    <span class=\'icon\' title=\'Radial\' />\n  </label>\n  <label class=\'full-screen\'>\n    <input type=\'checkbox\' name=\'full-screen\' />\n    <span class=\'icon\' title=\'Fullscreen\' />\n  </label>\n</div>\n<div class=\'d3-graph-visualization\'></div>\n<div class=\'node-info-region\'></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/meta_modules/domino/templates/node_info"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<label class=\'no-margin\'>Host Name</label>\n<div class=\'host-name\'>\n  ');
      
        if (this.host_name) {
          __out.push('\n    ');
          __out.push(__sanitize(this.host_name));
          __out.push(' ');
          __out.push(__sanitize(typeof this.address === 'string' ? "(" + this.address + ")" : void 0));
          __out.push('\n  ');
        } else {
          __out.push('\n    ');
          __out.push(__sanitize(this.address));
          __out.push('\n  ');
        }
      
        __out.push('\n</div>\n<hr />\n');
      
        if (this.hasParent) {
          __out.push('\n  <label>Initial Credential Information</label>\n  <div class=\'table\'>\n    <label class=\'left\'>Public</label>\n    <span class=\'right truncate\'>');
          __out.push(__sanitize(this.credInfo["public"]));
          __out.push('</span>\n  </div>\n  <div class=\'table\'>\n    <label class=\'left\'>Private</label>\n    <span class=\'right truncate\'>');
          __out.push(__sanitize(this.credInfo["private"]));
          __out.push('</span>\n  </div>\n  ');
          if ((this.credInfo.realm != null) && this.credInfo.realm.length) {
            __out.push('\n    <div class=\'table\'>\n      <label class=\'left\'>Realm</label>\n      <span class=\'right truncate\'>');
            __out.push(__sanitize(this.credInfo.realm));
            __out.push('</span>\n    </div>\n  ');
          }
          __out.push('\n  <div class=\'table\'>\n    <label class=\'left\'>Service</label>\n    <span class=\'right truncate\'>');
          __out.push(__sanitize(this.credInfo.service_name));
          __out.push('</span>\n  </div>\n  <div class=\'table\'>\n    <label class=\'left\'>Port</label>\n    <span class=\'right truncate\'>');
          __out.push(__sanitize(this.credInfo.service_port));
          __out.push('</span>\n  </div>\n  <div style=\'clear:both\'></div>\n');
        } else {
          __out.push('\n<!--   <label>Initial Session</label>\n  <div class=\'session\'>\n  </div>\n -->  <div style=\'clear:both\'></div>\n');
        }
      
        __out.push('\n<hr />\n<label>Number of Unique Credentials Captured</label>\n<div class=\'unique-creds\'>\n  ');
      
        __out.push(__sanitize(this.captured_creds_count));
      
        __out.push(' credential');
      
        if (this.captured_creds_count !== 1) {
          __out.push(__sanitize('s'));
        }
      
        __out.push('\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'apps/meta_modules/domino/visualization_views', 'base_controller'], function($) {
    return this.Pro.module('MetaModulesApp.Domino', function(Domino, App) {
      return Domino.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.tabClicked = __bind(this.tabClicked, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.layout = null;

        Controller.prototype.task = null;

        Controller.prototype.initialize = function(opts) {
          var _base, _ref,
            _this = this;
          if (opts == null) {
            opts = {};
          }
          this.task = opts.task;
          if ((_ref = (_base = this.task).updateGraph) == null) {
            _base.updateGraph = (function() {
              this.get('allNodes') || this.set({
                allNodes: []
              });
              this.get('allEdges') || this.set({
                allEdges: []
              });
              if (!this.get('nodes').consumed) {
                this.get('nodes').consumed = true;
                this.set({
                  allNodes: this.get('allNodes').concat(this.get('nodes') || [])
                });
              }
              if (!this.get('edges').consumed) {
                this.get('edges').consumed = true;
                return this.set({
                  allEdges: this.get('allEdges').concat(this.get('edges') || [])
                });
              }
            }).bind(this.task);
          }
          this.task.updateGraph();
          this.task.off('change:nodes change:edges', this.task.updateGraph);
          this.task.on('change:nodes change:edges', this.task.updateGraph);
          this.layout = new Domino.Views.Layout(this);
          this.setMainView(this.layout);
          this.d3View = new Domino.Views.D3({
            task: this.task
          });
          this.nodeInfoView = new Domino.Views.NodeInfo();
          this.listenTo(this.layout, 'show', function() {
            _this.show(_this.d3View, {
              region: _this.layout.d3
            });
            return _this.show(_this.nodeInfoView, {
              region: _this.layout.nodeInfo
            });
          });
          this.listenTo(this.layout, 'orientation:changed', function() {
            var orientation;
            orientation = _this.layout.selectedOrientation();
            if (orientation === Domino.Views.D3.LAYOUTS.RADIAL_TREE) {
              _this.d3View.layout = Domino.Views.D3.LAYOUTS.RADIAL_TREE;
              _this.d3View.orientation = Domino.Views.D3.ORIENTATIONS.VERTICAL;
            } else {
              _this.d3View.layout = Domino.Views.D3.LAYOUTS.TREE;
              _this.d3View.orientation = orientation;
            }
            return _this.d3View.updateD3();
          });
          this.listenTo(this.layout, 'layout:changed', function() {
            _this.d3View.layout = _this.layout.selectedLayout();
            return _this.d3View.updateD3();
          });
          this.listenTo(this.layout, 'sizetofit:resized', function() {
            return _this.d3View.updateD3();
          });
          this.listenTo(this.layout, 'fullscreen:changed', function() {
            return _this.d3View.toggleFullscreen(_this.layout.selectedFullscreen());
          });
          this.listenTo(this.d3View, 'node:mouseover', function(nodeData) {
            var url;
            _this.nodeInfoView.$el.show();
            _this.nodeInfoView.setNodeData(nodeData);
            url = Routes.task_detail_path(WORKSPACE_ID, _this.task.id) + ("/stats/node.json?node_id=" + nodeData.data.id);
            return $.getJSON(url).done(function(data) {
              nodeData.data.captured_creds_count = parseInt(data[0].captured_creds_count);
              nodeData.data.address = data[0].address;
              if (_this.nodeInfoView._isShown) {
                return _this.nodeInfoView.setNodeData(nodeData);
              }
            });
          });
          this.listenTo(this.d3View, 'node:mouseout', function(nodeData) {
            return _this.nodeInfoView.$el.hide();
          });
          this.listenTo(this.task, 'change:nodes change:edges', _.debounce((function() {
            if (_this.task.get('nodes').graphConsumed) {
              return;
            }
            if (_this.task.get('nodes').length < 1 && _this.task.get('edges').length < 1) {
              return;
            }
            _this.task.get('nodes').graphConsumed = true;
            return _this.d3View.updateGraph(_this.task.get('nodes'), _this.task.get('edges'));
          }), 100));
          return this.show(this.getMainView(), {
            region: opts.region
          });
        };

        Controller.prototype.tabClicked = function(idx) {
          if (idx === 0) {
            return this.d3View.updateD3();
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['d3_min', 'jquery', 'apps/meta_modules/domino/minimap', 'apps/meta_modules/domino/pcb_layout', 'd3_transform', 'base_view', 'base_layout', 'apps/meta_modules/domino/templates/layout', 'apps/meta_modules/domino/templates/graph', 'apps/meta_modules/domino/templates/node_info', 'lib/components/table/table_view', 'lib/concerns/views/size_to_fit'], function(d3, $, minimap, PcbLayout) {
    var DEBOUNCE_DELAY, KEY_EDGE_FN, KEY_FN, MAX_ASPECT, MAX_NODE_RADIUS, MIN_NODE_RADIUS, isInViewPort;
    DEBOUNCE_DELAY = 100;
    MAX_ASPECT = 1;
    MAX_NODE_RADIUS = 100;
    MIN_NODE_RADIUS = 60;
    KEY_FN = function(d) {
      return d.id;
    };
    KEY_EDGE_FN = function(d) {
      return d.source.id + ',' + d.target.id;
    };
    isInViewPort = function(el) {
      var rect;
      rect = el.getBoundingClientRect();
      rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight);
      return rect.right <= (window.innerWidth || document.documentElement.clientWidth);
    };
    return this.Pro.module('MetaModulesApp.Domino.Views', function(Views, App) {
      Views.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          this.onRender = __bind(this.onRender, this);

          this.fullscreenChanged = __bind(this.fullscreenChanged, this);

          this.selectedFullscreen = __bind(this.selectedFullscreen, this);

          this.selectedLayout = __bind(this.selectedLayout, this);

          this.selectedOrientation = __bind(this.selectedOrientation, this);
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.include("SizeToFit");

        Layout.prototype.task = null;

        Layout.prototype.edges = null;

        Layout.prototype.nodes = null;

        Layout.prototype.template = Layout.prototype.templatePath('meta_modules/domino/layout');

        Layout.prototype.ui = {
          controls: '.graph-controls',
          resizeEl: '.d3-graph-visualization'
        };

        Layout.prototype.regions = {
          d3: '.d3-graph-visualization',
          nodeInfo: '.node-info-region'
        };

        Layout.prototype.triggers = {
          'change input[name=orientation]': 'orientation:changed',
          'change input[name=layout]': 'layout:changed'
        };

        Layout.prototype.events = {
          'change input[name="full-screen"]': 'fullscreenChanged'
        };

        Layout.prototype.selectedOrientation = function() {
          return this.ui.controls.find('[name=orientation]:checked').blur().val();
        };

        Layout.prototype.selectedLayout = function() {
          return this.ui.controls.find('[name=layout]:checked').blur().val();
        };

        Layout.prototype.selectedFullscreen = function() {
          return this.ui.controls.find('[name="full-screen"]').is(':checked');
        };

        Layout.prototype.fullscreenChanged = function() {
          this.setResizeDisabled(this.selectedFullscreen());
          return this.trigger('fullscreen:changed');
        };

        Layout.prototype.onRender = function() {
          return this.ui.controls.tooltip();
        };

        return Layout;

      })(App.Views.Layout);
      Views.NodeInfo = (function(_super) {

        __extends(NodeInfo, _super);

        function NodeInfo() {
          this.serializeData = __bind(this.serializeData, this);

          this.setNodeData = __bind(this.setNodeData, this);

          this.setLoading = __bind(this.setLoading, this);
          return NodeInfo.__super__.constructor.apply(this, arguments);
        }

        NodeInfo.prototype.className = 'node-info';

        NodeInfo.prototype.attributes = {
          style: 'display: none'
        };

        NodeInfo.prototype.template = NodeInfo.prototype.templatePath('meta_modules/domino/node_info');

        NodeInfo.prototype.setLoading = function(loading) {};

        NodeInfo.prototype.setNodeData = function(_arg) {
          var graphHeight, graphOrientation, graphWidth, h, mouse, rect, w;
          this.node = _arg.node, this.data = _arg.data, mouse = _arg.mouse, graphHeight = _arg.graphHeight, graphWidth = _arg.graphWidth, graphOrientation = _arg.graphOrientation;
          this.render();
          w = window.innerHeight || document.documentElement.clientHeight;
          h = window.innerHeight || document.documentElement.clientHeight;
          if (graphOrientation === Views.D3.ORIENTATIONS.VERTICAL) {
            this.$el.css({
              top: mouse[1] - 100,
              left: mouse[0] + 170,
              bottom: 'auto',
              right: 'auto'
            });
            rect = this.$el[0].getBoundingClientRect();
            if (rect.bottom >= h - 40) {
              this.$el.css({
                top: 'auto',
                bottom: graphHeight - mouse[1]
              });
              rect = this.$el[0].getBoundingClientRect();
            }
            if (rect.right >= w) {
              return this.$el.css({
                right: graphWidth - (mouse[0] - 50),
                left: 'auto'
              });
            }
          } else {
            this.$el.css({
              top: mouse[1] + 60,
              left: mouse[0],
              bottom: 'auto',
              right: 'auto'
            });
            rect = this.$el[0].getBoundingClientRect();
            if (rect.bottom >= h - 40) {
              this.$el.css({
                top: 'auto',
                bottom: graphHeight - (mouse[1] - 60)
              });
              rect = this.$el[0].getBoundingClientRect();
            }
            if (rect.left <= 0) {
              this.$el.css({
                left: mouse[0] + 30
              });
              rect = this.$el[0].getBoundingClientRect();
            }
            if (rect.left <= 0) {
              this.$el.css({
                left: mouse[0] + 60
              });
              rect = this.$el[0].getBoundingClientRect();
            }
            if (rect.right >= w) {
              this.$el.css({
                left: mouse[0] + 30
              });
              rect = this.$el[0].getBoundingClientRect();
            }
            if (rect.right >= w) {
              return this.$el.css({
                left: mouse[0]
              });
            }
          }
        };

        NodeInfo.prototype.serializeData = function() {
          return this.data;
        };

        return NodeInfo;

      })(Marionette.ItemView);
      return Views.D3 = (function(_super) {

        __extends(D3, _super);

        function D3() {
          this._updateNestedStructure = __bind(this._updateNestedStructure, this);

          this._buildNestedStructure = __bind(this._buildNestedStructure, this);

          this._trimText = __bind(this._trimText, this);

          this._fixText = __bind(this._fixText, this);

          this.selectNext = __bind(this.selectNext, this);

          this.selectPrev = __bind(this.selectPrev, this);

          this.nodeMouseover = __bind(this.nodeMouseover, this);

          this.nodeMouseout = __bind(this.nodeMouseout, this);

          this.eventInsideSameParentNode = __bind(this.eventInsideSameParentNode, this);

          this.refreshSize = __bind(this.refreshSize, this);

          this.toggleFullscreen = __bind(this.toggleFullscreen, this);

          this._updateD3 = __bind(this._updateD3, this);

          this.updateD3 = __bind(this.updateD3, this);

          this.updateGraph = __bind(this.updateGraph, this);

          this.zoomHandler = __bind(this.zoomHandler, this);

          this.initD3 = __bind(this.initD3, this);

          this.updateKey = __bind(this.updateKey, this);

          this.keyUp = __bind(this.keyUp, this);

          this.keyDown = __bind(this.keyDown, this);

          this.onShow = __bind(this.onShow, this);
          return D3.__super__.constructor.apply(this, arguments);
        }

        D3.TRANSITION_LENGTH = 300;

        D3.LAYOUTS = {
          TREE: 'tree',
          RADIAL_TREE: 'radial_tree'
        };

        D3.ORIENTATIONS = {
          HORIZONTAL: 'horizontal',
          VERTICAL: 'vertical'
        };

        D3.prototype.orientation = 'vertical';

        D3.prototype.layout = 'tree';

        D3.prototype.width = null;

        D3.prototype.height = null;

        D3.prototype.base = null;

        D3.prototype.wrapperBorder = 0;

        D3.prototype.minimap = null;

        D3.prototype.minimapPadding = 20;

        D3.prototype.minimapScale = 0.2;

        D3.prototype.zoomEnabled = true;

        D3.prototype.dragEnabled = true;

        D3.prototype.hoveredNode = null;

        D3.prototype.xScale = null;

        D3.prototype.yScale = null;

        D3.prototype.circles = [];

        D3.prototype.root = null;

        D3.prototype.treeLayout = null;

        D3.prototype.diagonal = null;

        D3.prototype.template = D3.prototype.templatePath('meta_modules/domino/graph');

        D3.prototype.keyMap = {
          38: 'up',
          40: 'down',
          39: 'right',
          37: 'left'
        };

        D3.prototype.ui = {
          graph: '.graph',
          pleaseWait: '.please-wait'
        };

        D3.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          this.task = opts.task;
          this.keys = {
            up: false,
            down: false,
            left: false,
            right: false
          };
          this.initialNodes = this.task.get('allNodes') || [];
          this.initialEdges = this.task.get('allEdges') || [];
          return _.each(this.initialNodes, function(n) {
            delete n.children;
            delete n.childrenMap;
            return delete n.hasParent;
          });
        };

        D3.prototype.onShow = function() {
          this.$el.parents('.drilldown-padding').css({
            padding: 0
          });
          $(window).on('keydown.domino', this.keyDown);
          return $(window).on('keyup.domino', this.keyUp);
        };

        D3.prototype.onDestroy = function() {
          this.$el.parents('.drilldown-padding').css({
            padding: 10
          });
          $(window).off('keydown.domino');
          return $(window).off('keyup.domino');
        };

        D3.prototype.keyDown = function(e) {
          var key;
          key = this.keyMap[e.which];
          if (key != null) {
            this.keys[key] = true;
          }
          return this.updateKey(key);
        };

        D3.prototype.keyUp = function(e) {
          var key;
          key = this.keyMap[e.which];
          if (key != null) {
            this.keys[key] = false;
          }
          return this.updateKey(key);
        };

        D3.prototype.updateKey = function(key) {
          var _base, _ref;
          if (!this.keys[key]) {
            return;
          }
          if (key === 'left') {
            this.minimap.x(this.minimap.x() - 5);
            d3.event = {
              translate: [this.panX - 5, this.panY]
            };
          }
          if (key === 'right') {
            this.minimap.x(this.minimap.x() + 5);
            d3.event = {
              translate: [this.panX + 5, this.panY]
            };
          }
          if (key === 'down') {
            this.minimap.y(this.minimap.y() + 5);
            d3.event = {
              translate: [this.panX, this.panY + 5]
            };
          }
          if (key === 'up') {
            this.minimap.y(this.minimap.y() - 5);
            d3.event = {
              translate: [this.panX, this.panY - 5]
            };
          }
          d3.event.scale = this.zoom;
          if ((_ref = (_base = d3.event).scale) == null) {
            _base.scale = 1;
          }
          this.zoomHandler(this.zoom);
          d3.event = null;
          return _.delay(this.updateKey, 200, key);
        };

        D3.prototype.initD3 = function() {
          var zoom;
          if (this.wrapSvg != null) {
            return;
          }
          if (_.isEmpty(this.task.get('allNodes'))) {
            return;
          }
          this.refreshSize();
          if (this.root == null) {
            this._buildNestedStructure(this.initialNodes, this.initialEdges);
          }
          this.xScale = d3.scale.linear().domain([-this.width / 2, this.width / 2]).range([0, this.width]);
          this.yScale = d3.scale.linear().domain([-this.height / 2, this.height / 2]).range([this.height, 0]);
          zoom = d3.behavior.zoom().x(this.xScale).y(this.yScale).scaleExtent([0.9, 10]).on("zoom.canvas", this.zoomHandler);
          this.wrapSvg = d3.select(this.ui.graph[0]).append('svg').attr("width", this.width).attr("height", this.height);
          this.svg = this.wrapSvg.append("g");
          this.svgDefs = this.svg.append("defs");
          this.rect = this.svgDefs.append("clipPath").attr("id", "wrapperClipPathDemo01").attr("class", "wrapper clipPath").append("rect").attr("class", "background").attr("width", this.width).attr("height", this.height);
          this.svgDefs.append("clipPath").attr("id", "minimapClipPath").attr("width", this.width).attr("height", this.height).attr("transform", d3.svg.transform().translate([this.width + this.minimapPadding, this.minimapPadding / 2])).append("rect").attr("class", "background").attr("width", this.width).attr("height", this.height);
          this.filter = this.svgDefs.append("svg:filter").attr("id", "minimapDropShadow").attr("x", "-20%").attr("y", "-20%").attr("width", "150%").attr("height", "150%");
          this.filter.append("svg:feOffset").attr("result", "offOut").attr("in", "SourceGraphic").attr("dx", "1").attr("dy", "1");
          this.filter.append("svg:feColorMatrix").attr("result", "matrixOut").attr("in", "offOut").attr("type", "matrix").attr("values", "0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.5 0");
          this.filter.append("svg:feGaussianBlur").attr("result", "blurOut").attr("in", "matrixOut").attr("stdDeviation", "10");
          this.filter.append("svg:feBlend").attr("in", "SourceGraphic").attr("in2", "blurOut").attr("mode", "normal");
          this.minimapRadialFill = this.svgDefs.append("radialGradient").attr({
            id: "minimapGradient",
            gradientUnits: "userSpaceOnUse",
            cx: "500",
            cy: "500",
            r: "400",
            fx: "500",
            fy: "500"
          });
          this.minimapRadialFill.append("stop").attr("offset", "0%").attr("stop-color", "#FFFFFF");
          this.minimapRadialFill.append("stop").attr("offset", "40%").attr("stop-color", "#EEEEEE");
          this.minimapRadialFill.append("stop").attr("offset", "100%").attr("stop-color", "#E0E0E0");
          this.outerWrapper = this.svg.append("g").attr("class", "wrapper outer");
          this.outerWrapper.append("rect").attr("class", "background").attr("width", this.width).attr("height", this.height);
          this.innerWrapper = this.outerWrapper.append("g").attr("class", "wrapper inner").attr("clip-path", "url(#wrapperClipPathDemo01)").call(zoom);
          this.innerWrapper.append("rect").attr("class", "background").attr("width", this.width).attr("height", this.height);
          this.panCanvas = this.innerWrapper.append("g").attr("class", "panCanvas").attr("width", this.width).attr("height", this.height);
          this.panCanvas.append("rect").attr("class", "background").attr("width", this.width).attr("height", this.height);
          this.minimap = minimap().zoom(zoom).target(this.panCanvas).minimapScale(this.minimapScale);
          this.svg.call(this.minimap);
          zoom.scale(1);
          this.zoomHandler(1);
          return this.panLayer = this.panCanvas.append("g").attr("transform", d3.svg.transform().translate([0, 0]));
        };

        D3.prototype.zoomHandler = function(newScale, evt) {
          var bbound, className, lbound, rbound, scale, tbound, translation, z, _ref;
          if (evt == null) {
            evt = null;
          }
          if (!this.zoomEnabled) {
            return;
          }
          scale = d3.event ? d3.event.scale : newScale;
          if (this.dragEnabled) {
            tbound = -this.height * scale;
            bbound = this.height * scale;
            lbound = -this.width * scale;
            rbound = this.width * scale;
            translation = (_ref = d3.event) != null ? _ref.translate : void 0;
            if (translation == null) {
              translation = evt;
            }
            if (translation == null) {
              translation = [0, 0];
            }
            translation = [Math.max(Math.min(translation[0], rbound), lbound), Math.max(Math.min(translation[1], bbound), tbound)];
            className = '';
            if (!_.isUndefined(this.aspect)) {
              z = Math.min(Math.floor(this.aspect * scale * 10), 18);
              _.times(Math.min(Math.floor(this.aspect * scale * 10), 19), function(i) {
                if (i % 2 === 0) {
                  return className += ' z' + i;
                }
              });
              if (_.isBlank(className)) {
                className = 'z-1';
              }
              $(this.el).attr('class', className);
              if (z !== this.oldZ) {
                this._fixText();
              }
              this.oldZ = z;
            }
            this.panX = translation[0];
            this.panY = translation[1];
            d3.select(".panCanvas, .panCanvas .bg").attr("transform", d3.svg.transform().translate(translation).scale(scale));
            this.minimap.scale(scale);
            this.minimap.render();
            return this.zoom = scale;
          }
        };

        D3.prototype.updateGraph = function(nodes, links) {
          this._updateNestedStructure(nodes, links);
          return this._updateD3();
        };

        D3.prototype.updateD3 = function(opts) {
          this._updateD3Debounced || (this._updateD3Debounced = _.debounce(this._updateD3, DEBOUNCE_DELAY));
          return this._updateD3Debounced();
        };

        D3.prototype._updateD3 = function() {
          var aspect, aspectX, aspectY, diagonal, fnD3Transform, links, maxX, maxY, me, minX, minY, nodes, nodesEnter, offX, offY,
            _this = this;
          if (!((this.root != null) && (this.wrapSvg != null))) {
            this.initD3();
          }
          if (!((this.root != null) && (this.wrapSvg != null))) {
            return;
          }
          this.ui.pleaseWait.hide();
          if (!this.fullscreen) {
            this.refreshSize();
          }
          this.wrapSvg.transition().duration(Views.D3.TRANSITION_LENGTH).attr('width', this.width).attr('height', this.height);
          this.rect.transition().duration(Views.D3.TRANSITION_LENGTH).attr("width", this.width).attr("height", this.height);
          this.svgDefs.select(".clipPath .background").attr("width", this.width).attr("height", this.height);
          this.svg.attr("width", this.width + this.minimapPadding * 2 + (this.width * this.minimapScale)).attr("height", this.height);
          this.outerWrapper.select(".background").attr("width", this.width).attr("height", this.height);
          this.innerWrapper.select(".background").attr("width", this.width).attr("height", this.height);
          this.panCanvas.attr("width", this.width).attr("height", this.height).select(".background").attr("width", this.width).attr("height", this.height);
          if (this.layout === Views.D3.LAYOUTS.RADIAL_TREE) {
            diagonal = d3.svg.diagonal.radial().projection(function(d) {
              return [d.y, d.x / 180 * Math.PI];
            });
          } else if (this.orientation === Views.D3.ORIENTATIONS.VERTICAL) {
            diagonal = d3.svg.diagonal().projection(function(d) {
              return [d.x, d.y];
            });
            this.svg.transition().duration(Views.D3.TRANSITION_LENGTH).attr("transform", d3.svg.transform().translate([0, 0]));
          } else {
            diagonal = d3.svg.diagonal().projection(function(d) {
              return [d.y, d.x];
            });
            this.svg.transition().duration(Views.D3.TRANSITION_LENGTH).attr("transform", d3.svg.transform().translate([0, 0]));
          }
          if (this.layout === Views.D3.LAYOUTS.TREE) {
            this.treeLayout = PcbLayout();
            if (this.orientation === Views.D3.ORIENTATIONS.HORIZONTAL) {
              this.treeLayout.size([this.width, this.height]);
            } else {
              this.treeLayout.size([this.height, this.width]);
            }
          } else {
            this.treeLayout = d3.layout.cluster();
            this.treeLayout.size([360, Math.min(this.width, this.height) - 70]);
            this.treeLayout.separation(function(a, b) {
              var _ref;
              return ((_ref = a.parent === b.parent) != null ? _ref : {
                1: 2
              }) / a.depth;
            });
            this.treeLayout.sort(null);
          }
          this.svgNodes = this.treeLayout.nodes(this.root);
          this.svgLinks = this.treeLayout.links(this.svgNodes);
          minX = d3.min(this.svgNodes, function(n) {
            return n.x - n.radius;
          });
          minY = d3.min(this.svgNodes, function(n) {
            return n.y - n.radius;
          });
          maxX = d3.max(this.svgNodes, function(n) {
            return n.x + n.radius;
          });
          maxY = d3.max(this.svgNodes, function(n) {
            return n.y + n.radius;
          });
          aspect = 1;
          if (this.layout === Views.D3.LAYOUTS.TREE) {
            if (this.orientation === Views.D3.ORIENTATIONS.HORIZONTAL) {
              aspectX = (this.height - 50) / (maxX - minX);
              aspectY = (this.width - 50) / (maxY - minY);
              aspect = Math.min(aspectX, aspectY, MAX_ASPECT);
              offY = -minX + (Math.max(this.height - Math.abs(maxX - minX) * aspect, 0) / 2) / aspect;
              offX = -minY + (Math.max(this.width - Math.abs(maxY - minY) * aspect, 0) / 2) / aspect;
            } else {
              aspectX = (this.height - 50) / (maxY - minY);
              aspectY = (this.width - 50) / (maxX - minX);
              aspect = Math.min(aspectX, aspectY, MAX_ASPECT);
              offX = -minX + (Math.max(this.width - Math.abs(maxX - minX) * aspect, 0) / 2) / aspect;
              offY = -minY + (Math.max(this.height - Math.abs(maxY - minY) * aspect, 0) / 2) / aspect;
            }
          } else {
            aspect = 0.5;
            offX = this.width;
            offY = this.height;
          }
          this.aspect = aspect;
          this.panLayer.transition().duration(Views.D3.TRANSITION_LENGTH).attr('transform', d3.svg.transform().scale(aspect, aspect).translate([offX, offY]));
          fnD3Transform = function(x, y) {
            if (_this.layout === Views.D3.LAYOUTS.RADIAL_TREE) {
              return d3.svg.transform().rotate(x - 90).translate(y);
            } else if (_this.orientation === Views.D3.ORIENTATIONS.VERTICAL) {
              return d3.svg.transform().translate([x, y]);
            } else {
              return d3.svg.transform().translate([y, x]);
            }
          };
          links = this.panLayer.selectAll(".link").data(this.svgLinks, KEY_EDGE_FN);
          links.enter().append("path").attr("class", "link");
          links.transition().duration(Views.D3.TRANSITION_LENGTH).attr("d", diagonal);
          nodes = this.panLayer.selectAll(".node").data(this.svgNodes, KEY_FN);
          me = this;
          nodesEnter = nodes.enter().append("g").attr("class", "node").on('mouseover', function(d) {
            return me.nodeMouseover(d, this);
          }).on('mouseout', function(d) {
            return me.nodeMouseout(d, this);
          });
          nodesEnter.append("circle").attr("class", "outer-circle");
          nodesEnter.append("circle").attr("class", "inner-circle");
          nodesEnter.append("text");
          nodes.transition().duration(Views.D3.TRANSITION_LENGTH).attr("transform", function(d) {
            return fnD3Transform(d.x, d.y)();
          });
          _.each(nodes[0], function(d) {
            var data;
            d.parentNode.appendChild(d);
            data = d3.select(d).data()[0];
            return d3.select(d).classed({
              tiny: data.radius <= MIN_NODE_RADIUS,
              node: true,
              important: data.high_value
            });
          });
          this.d3Node = this.panLayer.selectAll(".node").data(this.svgNodes, KEY_FN);
          this.d3Link = this.panLayer.selectAll(".link").data(this.svgLinks, KEY_EDGE_FN);
          _.each(this.svgNodes, function(n) {
            if (_this.layout === Views.D3.LAYOUTS.RADIAL_TREE) {
              return n.radius = 40;
            }
          });
          this.panLayer.selectAll("circle.outer-circle").data(this.svgNodes, KEY_FN).attr("r", function(d) {
            return d.radius;
          });
          this.panLayer.selectAll("circle.inner-circle").data(this.svgNodes, KEY_FN).attr("r", function(d) {
            return Math.max(d.radius - Math.max(9 - d.depth, 0), 1);
          });
          this.panLayer.selectAll("text").data(this.svgNodes, KEY_FN).transition().duration(Views.D3.TRANSITION_LENGTH).attr("dx", 0).attr("dy", (this.oldZ != null) && this.oldZ > 12 ? 3 : 4).style("text-anchor", "middle");
          if (!this.minimapRendered) {
            _.delay((function() {
              if (!_this.minimapRendered) {
                return _this.minimap.render();
              }
            }), 500);
            this.minimapRendered = true;
          }
          this.zoomHandler(this.zoom);
          return this._fixText();
        };

        D3.prototype.toggleFullscreen = function(fullscreen) {
          var parent, parent2,
            _this = this;
          this.fullscreen = fullscreen;
          parent = this.$el.parents('.table-region');
          parent2 = this.$el.parents('.d3-graph-visualization');
          this.zoomHandler(1);
          if (this.fullscreen) {
            parent.css({
              position: 'fixed',
              left: 0,
              right: 0,
              top: 0,
              bottom: 0,
              zIndex: 999,
              background: 'white'
            });
            parent2.css({
              overflow: 'none'
            });
          } else {
            parent.css({
              position: 'static'
            });
            parent2.css({
              overflow: 'hidden'
            });
          }
          return _.defer(function() {
            if (_this.fullscreen) {
              _this.width = _this.$el.width();
              _this.height = $(window).height();
              return _this.updateD3();
            } else {
              return _.delay((function() {
                return $(window).trigger('resize.sizeToFit');
              }), 1000);
            }
          });
        };

        D3.prototype.refreshSize = function() {
          this.width = this.$el.parent().width();
          return this.height = this.$el.parent().height();
        };

        D3.prototype.eventInsideSameParentNode = function() {
          var $fromNode, $toNode;
          $fromNode = $(d3.event.fromElement).parents('.node');
          $toNode = $(d3.event.toElement).parents('.node');
          return $fromNode.length && $toNode.length && $fromNode[0] === $toNode[0];
        };

        D3.prototype.nodeMouseout = function(d, node) {
          var next, prev;
          if (this.eventInsideSameParentNode()) {
            return;
          }
          d3.select(node).classed({
            hover: false
          });
          prev = this.selectPrev(d);
          prev.nodes.classed({
            selected: false
          });
          prev.links.classed({
            selected: false
          });
          next = this.selectNext(d);
          next.nodes.classed({
            forward: false
          });
          next.links.classed({
            forward: false
          });
          return this.trigger('node:mouseout', {
            node: node,
            data: d,
            mouse: d3.mouse(this.wrapSvg[0][0])
          });
        };

        D3.prototype.nodeMouseover = function(d, node) {
          var next, prev;
          if (this.eventInsideSameParentNode()) {
            return;
          }
          d3.select(node).classed({
            hover: true
          });
          node.parentNode.appendChild(node);
          prev = this.selectPrev(d);
          prev.nodes.classed({
            selected: true
          });
          prev.links.classed({
            selected: true
          });
          next = this.selectNext(d);
          next.nodes.classed({
            forward: true
          });
          next.links.classed({
            forward: true
          });
          return this.trigger('node:mouseover', {
            node: node,
            data: d,
            graphHeight: this.ui.graph.height(),
            graphWidth: this.ui.graph.width(),
            mouse: d3.mouse(this.wrapSvg[0][0]),
            graphOrientation: this.orientation
          });
        };

        D3.prototype.selectPrev = function(nodeData) {
          var nodeIds, parentData;
          nodeIds = {};
          nodeIds[nodeData.id] = true;
          while (parentData = nodeData != null ? nodeData.parent : void 0) {
            nodeIds[parentData.id] = true;
            nodeData = parentData;
          }
          return {
            nodes: this.d3Node.filter(function(d) {
              return nodeIds[d.id] != null;
            }),
            links: this.d3Link.filter(function(d) {
              return (nodeIds[d.source.id] != null) && (nodeIds[d.target.id] != null);
            })
          };
        };

        D3.prototype.selectNext = function(nodeData, nodeIds) {
          var child, top, _i, _len, _ref;
          top = !(nodeIds != null);
          if (top) {
            nodeIds = {};
          }
          nodeIds[nodeData.id] = true;
          if (nodeData.children != null) {
            _ref = nodeData.children;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              child = _ref[_i];
              this.selectNext(child, nodeIds);
            }
          }
          if (top) {
            return {
              nodes: this.d3Node.filter(function(d) {
                return nodeIds[d.id] != null;
              }),
              links: this.d3Link.filter(function(d) {
                return (nodeIds[d.source.id] != null) && (nodeIds[d.target.id] != null);
              })
            };
          }
        };

        D3.prototype._fixText = function() {
          var _this = this;
          this.debouncedFixText || (this.debouncedFixText = _.debounce((function() {
            var me;
            me = _this;
            return _this.panLayer.selectAll("text").data(_this.svgNodes, KEY_FN).each(function(d) {
              var rad;
              rad = Math.max(d.radius - Math.max(9 - d.depth, 0), 1);
              if (rad * me.minimap.scale() < 40) {
                return d3.select(this).attr('display', 'none');
              } else {
                d3.select(this).attr('display', 'block');
                return me._trimText(this, d.host_name || d.address, (rad - 9) * 2);
              }
            });
          }), 100));
          return this.debouncedFixText();
        };

        D3.prototype._trimText = function(textObj, textString, width) {
          var x;
          textObj.textContent = textString;
          try {
            if (textObj.getSubStringLength(0, textString.length) >= width) {
              x = textString.length - 1;
              while (x > 0) {
                if (textObj.getSubStringLength(0, x) <= width) {
                  textObj.textContent = textString.substring(0, x) + "…";
                  return;
                }
                x--;
              }
              return textObj.style.display = 'none';
            }
          } catch (_error) {}
        };

        D3.prototype._buildNestedStructure = function(nodes, edges) {
          var bail, roots,
            _this = this;
          if (!(nodes.length > 0 || edges.length > 0)) {
            return;
          }
          this.allEdges || (this.allEdges = [].concat(edges));
          this.nodesQuick || (this.nodesQuick = {});
          _.each(nodes, function(node) {
            return _this.nodesQuick[node.id] = node;
          });
          bail = false;
          _.every(this.allEdges, function(edge) {
            var dest, source;
            source = _this.nodesQuick[edge.source_node_id];
            dest = _this.nodesQuick[edge.dest_node_id];
            dest.credInfo = edge;
            if (dest != null) {
              dest.hasParent = true;
            }
            source.children || (source.children = []);
            source.childrenMap || (source.childrenMap = {});
            if ((dest != null) && !(source.childrenMap[dest.id] != null)) {
              source.childrenMap[dest.id] = 1;
              source.children.push(dest);
            }
            return true;
          });
          if (bail) {
            return;
          }
          this.leafNodes = 0;
          this.root = null;
          roots = [];
          _.each(nodes, function(node) {
            if (!node.hasParent) {
              roots.push(node);
            }
            if (!node.children) {
              return _this.leafNodes++;
            }
          });
          return this.root = _.min(roots, function(obj) {
            return obj.id;
          });
        };

        D3.prototype._updateNestedStructure = function(nodes, edges) {
          var newNodes,
            _this = this;
          if (nodes.length > 0 && !(this.nodesQuick != null)) {
            return this._buildNestedStructure(nodes, edges);
          }
          newNodes = [];
          _.each(nodes, function(node) {
            if (_this.nodesQuick[node.id] == null) {
              newNodes.push(node);
              _this.nodesQuick[node.id] = node;
              return _this.leafNodes++;
            }
          });
          this.allEdges = this.allEdges.concat(edges);
          _.each(this.allEdges, function(edge) {
            var dest, source;
            source = _this.nodesQuick[edge.source_node_id];
            dest = _this.nodesQuick[edge.dest_node_id];
            if (!((source != null) && (dest != null))) {
              return;
            }
            if (edge.added) {
              return;
            }
            edge.added = true;
            dest.credInfo = edge;
            if (dest != null) {
              dest.hasParent = true;
            }
            source.children || (source.children = []);
            source.childrenMap || (source.childrenMap = {});
            if (source.childrenMap[dest.id] == null) {
              source.childrenMap[dest.id] = 1;
              return source.children.push(dest);
            }
          });
          return this.root;
        };

        return D3;

      })(Marionette.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/notes/delete/delete_view', 'lib/concerns/controllers/table_selections', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module("NotesApp.Delete", function(Delete, App, Backbone, Marionette, $, _) {
      return Delete.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('TableSelections');

        Controller.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection;
          return this.setMainView(new Delete.Layout);
        };

        Controller.prototype.onFormSubmit = function() {
          var defer, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          jQuery.ajax({
            url: Routes.destroy_multiple_workspace_notes_path({
              workspace_id: WORKSPACE_ID
            }),
            type: 'DELETE',
            data: {
              selections: {
                select_all_state: this.selectAllState || null,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              search: this.tableCollection.server_api.search,
              ignore_pagination: true
            },
            success: function() {
              _this.tableCollection.removeMultiple(_this.selectedVisibleCollection);
              defer.resolve();
              App.vent.trigger('notes:deleted');
              return App.execute('flash:display', {
                title: "Note" + (_this.pluralizedMessage('', 's')) + " deleted",
                message: "The note" + (_this.pluralizedMessage(' was', 's were ')) + " successfully deleted."
              });
            },
            error: function() {
              return App.execute('flash:display', {
                title: 'An error occurred',
                style: 'error',
                message: "There was a problem deleting the selected note" + (_this.multipleSelected() ? 's' : void 0)
              });
            }
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'apps/notes/delete/templates/delete_layout'], function() {
    return this.Pro.module('NotesApp.Delete', function(Delete, App) {
      return Delete.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('notes/delete/delete_layout');

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/notes/delete/templates/delete_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="delete-text">\n  Deleting these notes will permanently remove them from this project.\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/notes/notes_app', 'apps/notes/index/index_views', 'lib/components/analysis_tab/analysis_tab_controller', 'apps/notes/index/index_views', 'entities/note', 'css!css/components/pill'], function() {
    return this.Pro.module("NotesApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var actionButtons, columns, defaultSort, emptyView, filterOpts, notes, show,
            _this = this;
          _.defaults(options, {
            show: true
          });
          show = options.show;
          notes = App.request('notes:entities', {
            fetch: false
          });
          defaultSort = 'host.name';
          columns = [
            {
              attribute: 'host.name',
              label: 'Host Name',
              escape: false,
              defaultDirection: 'asc'
            }, {
              attribute: 'ntype',
              label: 'Type',
              escape: false
            }, {
              attribute: 'data',
              escape: false,
              view: Index.DataCellView
            }, {
              label: 'Created',
              attribute: 'created_at'
            }, {
              attribute: 'critical',
              label: 'Status',
              view: Index.StatusCellView
            }
          ];
          actionButtons = [
            {
              label: 'Delete Notes',
              "class": 'delete',
              activateOn: 'any',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var controller;
                controller = App.request('notes:delete', {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs,
                  selectedVisibleCollection: selectedVisibleCollection,
                  tableCollection: tableCollection
                });
                return App.execute("showModal", controller, {
                  modal: {
                    title: 'Are you sure?',
                    description: '',
                    height: 150,
                    width: 550,
                    hideBorder: true
                  },
                  buttons: [
                    {
                      name: 'Cancel',
                      "class": 'close'
                    }, {
                      name: 'OK',
                      "class": 'btn primary'
                    }
                  ]
                });
              },
              containerClass: 'action-button-right-separator'
            }, {
              label: 'Scan',
              "class": 'scan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newScanPath;
                newScanPath = Routes.new_scan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'note', newScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Import...',
              "class": 'import',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                }) + '#file';
              }
            }, {
              label: 'Nexpose Scan',
              "class": 'nexpose',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                });
              }
            }, {
              label: 'WebScan',
              "class": 'webscan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newWebScanPath;
                newWebScanPath = Routes.new_webscan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'note', newWebScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Modules',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var modulesPath;
                modulesPath = Routes.modules_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'note', modulesPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-separator'
            }, {
              label: 'Bruteforce',
              "class": 'brute',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newQuickBruteforcePath;
                newQuickBruteforcePath = Routes.workspace_brute_force_guess_index_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'note', newQuickBruteforcePath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Exploit',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newExploitPath;
                newExploitPath = Routes.new_exploit_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'note', newExploitPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }
          ];
          filterOpts = {
            searchType: 'pro',
            placeHolderText: 'Search Notes'
          };
          emptyView = App.request('analysis_tab:empty_view', {
            emptyText: "No notes are associated with this project"
          });
          _.extend(options, {
            collection: notes,
            columns: columns,
            defaultSort: defaultSort,
            actionButtons: actionButtons,
            filterOpts: filterOpts,
            emptyView: emptyView
          });
          this.analysisTabController = App.request('analysis_tab:component', options);
          this.layout = this.analysisTabController.layout;
          this.setMainView(this.layout);
          if (show) {
            return this.show(this.layout, {
              region: this.region
            });
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_itemview'], function() {
    return this.Pro.module('NotesApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      Index.DataCellView = (function(_super) {

        __extends(DataCellView, _super);

        function DataCellView() {
          return DataCellView.__super__.constructor.apply(this, arguments);
        }

        DataCellView.prototype.ui = {
          noteDataDisclosureLink: 'a.note-data-view'
        };

        DataCellView.prototype.events = {
          'click @ui.noteDataDisclosureLink': 'displayModal'
        };

        DataCellView.prototype.template = function(data) {
          return data['data'];
        };

        DataCellView.prototype.displayModal = function(e) {
          var $dialog;
          $dialog = $("<div style='display:hidden'>" + (this.$el.find('.note-data').html()) + "</div>").appendTo('body');
          $dialog.dialog({
            title: "Note data",
            buttons: {
              "Close": function() {
                return $(this).dialog('close');
              }
            },
            open: function(event, ui) {
              $(this).css({
                'max-height': 400,
                'overflow-y': 'auto'
              });
              if ($(this).parent().position().top === 0) {
                return $('.ui-resizable').css({
                  'top': '100px'
                });
              }
            }
          });
          return e.preventDefault();
        };

        return DataCellView;

      })(Pro.Views.ItemView);
      return Index.StatusCellView = (function(_super) {

        __extends(StatusCellView, _super);

        function StatusCellView() {
          return StatusCellView.__super__.constructor.apply(this, arguments);
        }

        StatusCellView.prototype.template = function(data) {
          if (data.critical === "true" && (data.seen === "false" || data.seen === null)) {
            return "<img title=\"flagged\" src=\"/assets/icons/flag_red-5804818c614ec1e9cdf256e6aab3602b63b57d7a03609f71c56f709b48003014.png\" />";
          } else {
            return "&nbsp;";
          }
        };

        return StatusCellView;

      })(Pro.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/notes/index/index_controller', 'apps/notes/delete/delete_controller', 'lib/utilities/navigation'], function() {
    return this.Pro.module('NotesApp', function(NotesApp, App) {
      var API,
        _this = this;
      NotesApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index",
          "notes": "index"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function() {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/notes/index/index_controller'], function() {
            var indexController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return indexController = new NotesApp.Index.Controller;
          });
        },
        "delete": function(options) {
          return new NotesApp.Delete.Controller(options);
        }
      };
      App.addInitializer(function() {
        return new NotesApp.Router({
          controller: API
        });
      });
      App.addRegions({
        mainRegion: "#notes-main-region"
      });
      return App.reqres.setHandler('notes:delete', function(options) {
        if (options == null) {
          options = {};
        }
        return API["delete"](options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/related_modules/related_modules_app', 'apps/related_modules/index/index_views', 'lib/components/analysis_tab/analysis_tab_controller', 'lib/components/table/table_controller', 'lib/components/pill/pill_controller', 'lib/components/stars/stars_controller', 'lib/components/os/os_controller', 'lib/components/tabs/tabs_controller', 'lib/shared/cve_cell/cve_cell_controller', 'lib/components/tags/index/index_controller', 'lib/concerns/pollable'], function() {
    return this.Pro.module("RelatedModulesApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var actionButtons, columns, defaultSort, emptyView, filterOpts, modules, show;
          _.defaults(options, {
            show: true
          });
          show = options.show;
          modules = App.request('workspaceRelatedModules:entities', {
            workspace_id: WORKSPACE_ID
          });
          defaultSort = 'disclosure_date';
          columns = [
            {
              label: 'Platform',
              attribute: 'module_icons',
              view: Pro.Components.Os.Controller,
              sortable: false
            }, {
              label: 'Module',
              attribute: 'module',
              sortable: true,
              sortAttribute: 'name',
              view: Index.AddressCellView
            }, {
              label: 'Hosts',
              attribute: 'hosts',
              view: Index.HostAddressCellView,
              sortable: false
            }, {
              label: 'Vulnerabilities',
              attribute: 'module_vulns',
              view: Index.VulnerabilityCellView,
              sortable: false
            }, {
              label: 'References',
              attribute: 'references',
              view: Pro.Shared.CveCell.Controller,
              sortable: false
            }, {
              label: 'Disclosure',
              attribute: 'disclosure_date',
              sortable: true,
              view: Index.DateCellView
            }, {
              label: 'Ranking',
              attribute: 'rating',
              sortAttribute: 'rank',
              view: Pro.Components.Stars.Controller
            }
          ];
          actionButtons = [
            {
              label: 'Scan',
              "class": 'scan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newScanPath;
                newScanPath = Routes.new_scan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'vuln', newScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Import...',
              "class": 'import',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                }) + '#file';
              }
            }, {
              label: 'Nexpose Scan',
              "class": 'nexpose',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                });
              }
            }, {
              label: 'WebScan',
              "class": 'webscan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newWebScanPath;
                newWebScanPath = Routes.new_webscan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'vuln', newWebScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-left-separator'
            }, {
              label: 'Bruteforce',
              "class": 'brute',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newQuickBruteforcePath;
                newQuickBruteforcePath = Routes.workspace_brute_force_guess_index_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'vuln', newQuickBruteforcePath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Exploit',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newExploitPath;
                newExploitPath = Routes.new_exploit_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'vuln', newExploitPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-right-separator'
            }
          ];
          filterOpts = {
            searchType: 'pro',
            placeHolderText: 'Search Modules'
          };
          emptyView = App.request('analysis_tab:empty_view', {
            emptyText: "No Modules are associated with this project"
          });
          _.extend(options, {
            filterOpts: filterOpts,
            collection: modules,
            columns: columns,
            defaultSort: defaultSort,
            actionButtons: actionButtons,
            emptyView: emptyView
          });
          this.analysisTabController = App.request('analysis_tab:component', options);
          this.layout = this.analysisTabController.layout;
          this.setMainView(this.layout);
          if (show) {
            return this.show(this.layout, {
              region: this.region
            });
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview'], function() {
    return this.Pro.module('RelatedModulesApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      Index.NameCellView = (function(_super) {

        __extends(NameCellView, _super);

        function NameCellView() {
          this.template = __bind(this.template, this);
          return NameCellView.__super__.constructor.apply(this, arguments);
        }

        NameCellView.prototype.initialize = function(attribute, idAttribute) {
          var _ref, _ref1;
          this.attribute = attribute;
          this.idAttribute = idAttribute;
          if ((_ref = this.attribute) == null) {
            this.attribute = 'name';
          }
          return (_ref1 = this.idAttribute) != null ? _ref1 : this.idAttribute = 'id';
        };

        NameCellView.prototype.template = function(data) {
          var id, maxLength, text, truncatedText, workspaceRelatedModulesPath;
          maxLength = 75;
          id = data[this.idAttribute];
          workspaceRelatedModulesPath = _.escape(Routes.workspace_related_modules_path(WORKSPACE_ID));
          text = data.name || '';
          truncatedText = text.length > maxLength ? text.substring(0, maxLength) + '…' : text;
          return "<a href='" + workspaceRelatedModulesPath + "#vulns/" + id + "'> " + truncatedText + " </a>";
        };

        return NameCellView;

      })(Pro.Views.ItemView);
      Index.DateCellView = (function(_super) {

        __extends(DateCellView, _super);

        function DateCellView() {
          this.template = __bind(this.template, this);
          return DateCellView.__super__.constructor.apply(this, arguments);
        }

        DateCellView.prototype.template = function(data) {
          return "<div>" + (data.disclosure_date.split(' ').join('&nbsp')) + "</div>";
        };

        return DateCellView;

      })(App.Views.ItemView);
      Index.AddressCellView = (function(_super) {

        __extends(AddressCellView, _super);

        function AddressCellView() {
          return AddressCellView.__super__.constructor.apply(this, arguments);
        }

        AddressCellView.prototype.template = function(data) {
          var hosts, mapped_hosts;
          hosts = JSON.parse(data.hosts);
          mapped_hosts = hosts.map(function(h) {
            return h.address;
          });
          return "<a title='" + (_.escape(data.info)) + "' href='" + (Routes.new_module_run_path({
            workspace_id: WORKSPACE_ID,
            path: data["module"]
          })) + "?target_host=" + (mapped_hosts.join(", ")) + "'>" + data["name"] + "</a>";
        };

        return AddressCellView;

      })(App.Views.ItemView);
      Index.VulnerabilityCellView = (function(_super) {

        __extends(VulnerabilityCellView, _super);

        function VulnerabilityCellView() {
          return VulnerabilityCellView.__super__.constructor.apply(this, arguments);
        }

        VulnerabilityCellView.prototype.template = function(data) {
          var module_vulns, module_vulns_mapped, uniqueVulns;
          module_vulns = JSON.parse(data.module_vulns);
          uniqueVulns = _.uniq(module_vulns, function(m) {
            return m.name;
          });
          module_vulns_mapped = uniqueVulns.map(function(vuln) {
            var safe_name, vuln_display, vuln_title;
            safe_name = _.escapeHTML(_.unescapeHTML(vuln.name));
            vuln_display = safe_name.match(/(CVE|USN|MS)((-\d{4}-\d{1,7})|(\d{2}-\d{1,4}))/g) || safe_name;
            vuln_title = safe_name;
            return ("<a title='" + (_.escape(vuln_title)) + "' href='" + (Routes.workspace_vuln_path(WORKSPACE_ID, vuln.id)) + "'>") + vuln_display + '</a>';
          });
          return "" + (module_vulns_mapped.join(', ')) + "&nbsp(" + data.module_vulns_count + ")";
        };

        return VulnerabilityCellView;

      })(App.Views.ItemView);
      return Index.HostAddressCellView = (function(_super) {

        __extends(HostAddressCellView, _super);

        function HostAddressCellView() {
          return HostAddressCellView.__super__.constructor.apply(this, arguments);
        }

        HostAddressCellView.prototype.template = function(data) {
          var hosts, hosts_mapped, lessThanThreeHosts;
          hosts = JSON.parse(data.hosts);
          lessThanThreeHosts = hosts.length > 3 ? hosts.slice(0, 3) : hosts;
          hosts_mapped = lessThanThreeHosts.map(function(host) {
            return ("<a title='" + host.address + ": " + (host.service_names.join(", ")) + "' href='" + (Routes.host_path(host.id)) + "'>") + (host.name || host.address) + '</a>';
          });
          return "" + (hosts_mapped.join(', ')) + (hosts.length > 3 ? '...' : '') + "&nbsp(" + data.module_hosts_count + ")";
        };

        return HostAddressCellView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['css!css/vulns', 'apps/hosts/hosts_app', 'lib/utilities/navigation', 'lib/components/window_slider/window_slider_controller'], function() {
    return this.Pro.module('RelatedModulesApp', function(RelatedModulesApp, App) {
      var API,
        _this = this;
      RelatedModulesApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index",
          "related_modules": "index"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function() {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/related_modules/index/index_controller'], function() {
            var indexController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return indexController = new RelatedModulesApp.Index.Controller;
          });
        }
      };
      App.addInitializer(function() {
        return new RelatedModulesApp.Router({
          controller: API
        });
      });
      return App.addRegions({
        mainRegion: "#related-modules-main-region"
      });
    });
  });

}).call(this);
(function() {
  var PRELOADED_REPORT_IMAGES, PRELOADED_RETINA_REPORT_IMAGES, RetinaDetector, reportImages;

  RetinaDetector = {
    useRetinaImages: function() {
      return this.isHighDensity() || this.isRetina();
    },
    isHighDensity: function() {
      return (window.matchMedia && (window.matchMedia('only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)').matches)) || (window.devicePixelRatio && window.devicePixelRatio > 1.3);
    },
    isRetina: function() {
      return ((window.matchMedia && (window.matchMedia('only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx), only screen and (min-resolution: 75.6dpcm)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min--moz-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)').matches)) || (window.devicePixelRatio && window.devicePixelRatio > 2)) && /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
    }
  };

  PRELOADED_REPORT_IMAGES = ["/assets/reports/formats/html-icon-not-generated-ab9f11f17298ca2804a0bbbfce9e981614f5d8c9e9471209cbee9e3bf005ca16.png", "/assets/reports/formats/html-icon-regenerate-898abf9318ab75b2babf513b480e7cd4ea691d79258df1e7eb5ab6254548157b.png", "/assets/reports/formats/html-icon-84921e90cb5f88b692c4637509f478a961ef4954dfa27a6a03ca003118084b5d.png", "/assets/reports/formats/pdf-icon-not-generated-1b989ee6bff7039c40ec4b6cb1a26b38268cdbcc4efd405bb86ca3f7a1e0be8d.png", "/assets/reports/formats/pdf-icon-regenerate-b140550721d7b14f6a3506c1479fed80dc7e505172e148d87892c45423b187c8.png", "/assets/reports/formats/pdf-icon-9e73790736387ef8f3f871c874931e792165a20d156a92679d9c145911d4cf09.png", "/assets/reports/formats/regenerate-icon-50b74979511f9c63f5b57a0b810fb91f27d6e2b78a5b74285e3ee512ad0962de.png", "/assets/reports/formats/rtf-icon-not-generated-7b20f13eb028ec22e6cdd61c578ad7daccd094b13dec50aeb968db2fc3ab7ad1.png", "/assets/reports/formats/rtf-icon-regenerate-a4e97186af42b50f536babb01fc4ea0e11c08ac8cf7c406a0c6b0f6876baf0ac.png", "/assets/reports/formats/rtf-icon-50714123dfa8ac68330425fcce610588e626df1645d6798c991f42ecd7cebcb3.png", "/assets/reports/formats/word-icon-not-generated-bf2959a63114ecd803f33067b36859b560abc2ffaf8bc3dbc7b79299bd778de2.png", "/assets/reports/formats/word-icon-regenerate-9db024256f7c33b28a55c9b4b8674f195cbfb2f4ef93746e9d77a02cbf02132f.png", "/assets/reports/formats/word-icon-552d907b5e9db6ce9f43f589b80bd50ce5bcf4db90c9134490e59ab62a4073b0.png", "/assets/reports/formats/xml-icon-not-generated-9e794628ecf2db1cc577772d67e084dc45fc559e34f39ea3f4f03e89ae669fcd.png", "/assets/reports/formats/xml-icon-regenerate-c9c8ab94229535c8e8e0bc4746fd9638968bd83e49a8e77e58e63ffac3e913a0.png", "/assets/reports/formats/xml-icon-b9504557c63cf35407c00f370cfda666da825916998f1bf0d75d51666a952ef1.png", "/assets/reports/actions/destroy-action-icon-hover-43cbbe8fa8eda87d6360111b2481113d6bbe02af7957cc75a90db81e016124c8.png", "/assets/reports/actions/destroy-action-icon-d1aa2f79981588b0dd617e8624eecb3b0c47a6e712d88e94877eedd1784ba13f.png", "/assets/reports/actions/download-action-icon-hover-cfcbdf77ab16436453ce76bb99c40197784da6f2a8158f57516bafe777a65a6e.png", "/assets/reports/actions/download-action-icon-fae3a947ef09eed04e227da178df9e2a9564e16208e700e34ddc8278d0842a97.png", "/assets/reports/actions/email-action-icon-hover-6ff36cb6b5e223d172a1730fadc269a38d22f5e3ee194eedf9ba1c1d8ded2351.png", "/assets/reports/actions/email-action-icon-6bbc97d07282ba607a021b3ec7db292659c31c9d548c65226631d1eef28cb378.png"];

  PRELOADED_RETINA_REPORT_IMAGES = ["/assets/reports/formats/html-icon-not-generated@2x-824132c0b40c321b24bd77e757aa62748b7eb938be466673e9f3044e907673e2.png", "/assets/reports/formats/html-icon-regenerate@2x-965fd43d17ce2d4b97dd58b7dd6974640bb08f71fb5dd670381218dbf3c34a87.png", "/assets/reports/formats/html-icon@2x-f52574940d3e393b0f0eec9cb7f312f0c90cc1d2b8e95774e7efdde9510670b3.png", "/assets/reports/formats/pdf-icon-not-generated@2x-9a33b878adc4b329a2386b25cb0bd6245417217970a9928ae073a38288db91f3.png", "/assets/reports/formats/pdf-icon-regenerate@2x-755b71b660398a4387947d6ba881e5553d62f861bfd8ca194f81a97c65b8d313.png", "/assets/reports/formats/pdf-icon@2x-c7b0d4d131db3f7de2782d0aaa927fd6a89964e24e1b43e649c9919c66a02187.png", "/assets/reports/formats/rtf-icon-not-generated@2x-7ac30ac53e564eff5467e081f304d5b582be4d75fcc7a557e00047c369d52105.png", "/assets/reports/formats/rtf-icon-regenerate@2x-aeff78c64ee4eb344a7c25f652898e24afef4f09cd0f2f09789517c5f69ac726.png", "/assets/reports/formats/rtf-icon@2x-7d95ebd6f72308214fb5034cee4b7d29ce6748b72dd4c9c0c73d7f7d7166236c.png", "/assets/reports/formats/word-icon-not-generated@2x-d63c7250a374be226fa30b4104778b25b99a9021786edcfc0b6a716c420d1c33.png", "/assets/reports/formats/word-icon-regenerate@2x-1dd05275533ccbf7cf6e04236cabe0492a3722ce1bef40459c754053717cff56.png", "/assets/reports/formats/word-icon@2x-4cd5d524d0546151880fafcba1b43217ebe9ff0519df2a7b67b1c3f3e1ac8cb9.png", "/assets/reports/formats/xml-icon-not-generated@2x-c630ea88f940710a7ca4b4d2d646ce686d8b66df1f79efc8a8f5a80f52a6713e.png", "/assets/reports/formats/xml-icon-regenerate@2x-dad17e19207bbc54f8b1f5ec9c73a1503d4727e4bacc934c5e30741e8d5e92fa.png", "/assets/reports/formats/xml-icon@2x-301df9a1507eb1e8079e9a18cc26cee41d61012efa5ef30cf2290effbe57b4e4.png", "/assets/reports/actions/destroy-action-icon-hover@2x-911b81a04fd688ae8447f026b8731f72aa849ff15f561db5b4efd9c67ab3a33b.png", "/assets/reports/actions/destroy-action-icon@2x-b559b30dbb79447549cbb5a906687decbe341d768cb542f638cdd0c82108c69d.png", "/assets/reports/actions/download-action-icon-hover@2x-76a837dbdf44bfdf5c6c2948181ca6aa6382d73a7b071de097f86775bcc94429.png", "/assets/reports/actions/download-action-icon@2x-83ade9b1312dd22823d6cc829da8113f222de0570beff1ab5f44ed8b22e43067.png", "/assets/reports/actions/email-action-icon-hover@2x-4de287fe93c7497e961fb51cfbdd409118f6171ad1253864ee35def1c5e42559.png", "/assets/reports/actions/email-action-icon@2x-a6e53dfb60a0b68904763e1521bf60a36d5e7d12778d275a18362f4cd6523304.png"];

  reportImages = RetinaDetector.useRetinaImages() ? PRELOADED_RETINA_REPORT_IMAGES : PRELOADED_REPORT_IMAGES;

  jQuery('body').append("<div id='preload-images' style='position: absolute; left: -100000px;'></div>");

  _.each(reportImages, function(src) {
    return jQuery('#preload-images').append("<img src='" + src + "'>");
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/reports/show/show_controller', 'entities/report', 'entities/report_artifact'], function() {
    return this.Pro.module('ReportsApp', function(ReportsApp, App) {
      var API;
      ReportsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "reports/:id": "show"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        show: function(id, report, reportArtifacts) {
          if (report == null) {
            report = App.request('new:reports:entity', gon.report);
          }
          if (reportArtifacts == null) {
            reportArtifacts = App.request('new:report_artifacts:entities', gon.report.report_artifacts);
          }
          return new ReportsApp.Show.Controller({
            id: report.id,
            report: report,
            reportArtifacts: reportArtifacts
          });
        }
      };
      App.vent.on('show:report', function(report, reportArtifacts) {
        return API.show(report.id, report, reportArtifacts);
      });
      App.addInitializer(function() {
        return new ReportsApp.Router({
          controller: API
        });
      });
      App.addInitializer(function() {
        return API.show();
      });
      App.addRegions({
        mainRegion: "#reports-main-region"
      });
      return App.addInitializer(function() {
        return this.module("ReportsApp").start();
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'entities/report_artifact', 'entities/report', 'apps/reports/show/show_view'], function() {
    return this.Pro.module("ReportsApp.Show", function(Show, App) {
      var API;
      Show.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var id, report, reportArtifacts, selectedReportArtifact,
            _this = this;
          report = options.report, id = options.id, reportArtifacts = options.reportArtifacts;
          report || (report = App.request('report:entity', id));
          reportArtifacts || (reportArtifacts = App.request('report_artifacts:entities'));
          selectedReportArtifact = App.request('report:formats:next', reportArtifacts);
          this.listenTo(report, 'updated', function() {
            return App.vent.trigger('report:updated', report);
          });
          this.layout = this.getLayoutView();
          this.listenTo(this.layout, "show", function() {
            _this.headerRegion(report);
            _this.infoRegion(report);
            _this.formatsRegion(report, reportArtifacts);
            _this.actionsRegion();
            return _this.displayRegion(selectedReportArtifact, reportArtifacts);
          });
          return this.show(this.layout);
        };

        Controller.prototype.showReportArtifact = function(reportArtifact) {
          this.layout.displayRegion.reset();
          return this.displayRegion(reportArtifact);
        };

        Controller.prototype.headerRegion = function(report) {
          var headerView;
          headerView = this.getHeaderView(report);
          return this.layout.headerRegion.show(headerView);
        };

        Controller.prototype.infoRegion = function(report) {
          var infoView;
          infoView = this.getInfoView(report);
          return this.layout.infoRegion.show(infoView);
        };

        Controller.prototype.formatsRegion = function(report, reportArtifacts) {
          var formatsView;
          formatsView = this.getFormatsView(report, reportArtifacts);
          return this.layout.formatsRegion.show(formatsView);
        };

        Controller.prototype.actionsRegion = function() {
          var actionsView;
          actionsView = this.getActionsView();
          return this.layout.actionsRegion.show(actionsView);
        };

        Controller.prototype.displayRegion = function(reportArtifactToDisplay, reportArtifacts) {
          var displayView;
          displayView = this.getDisplayView(reportArtifactToDisplay, reportArtifacts);
          return this.layout.displayRegion.show(displayView);
        };

        Controller.prototype.getLayoutView = function() {
          return new Show.Layout;
        };

        Controller.prototype.getHeaderView = function(report) {
          return new Show.Header({
            model: report
          });
        };

        Controller.prototype.getInfoView = function(report) {
          return new Show.Info({
            model: report
          });
        };

        Controller.prototype.getFormatsView = function(report, reportArtifacts) {
          return new Show.Formats({
            collection: reportArtifacts,
            report: report
          });
        };

        Controller.prototype.getActionsView = function() {
          return new Show.Actions;
        };

        Controller.prototype.getDisplayView = function(reportArtifact, reportArtifacts) {
          return new Show.Display({
            model: reportArtifact,
            reportArtifacts: reportArtifacts
          });
        };

        return Controller;

      })(App.Controllers.Application);
      API = {
        selectedFormatCheckboxes: function() {
          return Pro.mainRegion.currentView.formatsRegion.currentView.selectedFormats();
        },
        regeneratingFormats: function() {
          return Pro.mainRegion.currentView.formatsRegion.currentView.regeneratingFormats();
        },
        displayReportArtifact: function(reportArtifact, reportArtifacts) {
          var displayView;
          Pro.mainRegion.currentView.displayRegion.reset();
          displayView = new Show.Display({
            model: reportArtifact,
            reportArtifacts: reportArtifacts
          });
          return Pro.mainRegion.currentView.displayRegion.show(displayView);
        },
        nextFormatToDisplay: function(reportArtifacts) {
          var getNextArtifact, initialArtifact;
          getNextArtifact = function() {
            var html, pdf, rtf, word;
            if (pdf = reportArtifacts.findWhere({
              file_format: 'pdf',
              not_generated: false
            })) {
              return pdf;
            }
            if (html = reportArtifacts.findWhere({
              file_format: 'html',
              not_generated: false
            })) {
              return html;
            }
            if (rtf = reportArtifacts.findWhere({
              file_format: 'rtf',
              not_generated: false
            })) {
              return rtf;
            }
            if (word = reportArtifacts.findWhere({
              file_format: 'word',
              not_generated: false
            })) {
              return word;
            }
          };
          initialArtifact = getNextArtifact();
          if (initialArtifact) {
            initialArtifact.set('displayed', true);
          }
          return initialArtifact;
        }
      };
      App.reqres.setHandler('report:formats:selected', API.selectedFormatCheckboxes);
      App.reqres.setHandler('report:formats:regenerating', API.regeneratingFormats);
      App.commands.setHandler('report:formats:display', function(reportArtifact, reportArtifacts) {
        App.vent.trigger('report:formats:displayed', reportArtifact);
        return API.displayReportArtifact(reportArtifact, reportArtifacts);
      });
      return App.reqres.setHandler('report:formats:next', API.nextFormatToDisplay);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery', 'base_view', 'base_itemview', 'base_layout', 'base_compositeview', 'apps/reports/show/templates/_file_format', 'apps/reports/show/templates/show_actions', 'apps/reports/show/templates/show_display', 'apps/reports/show/templates/show_email_form', 'apps/reports/show/templates/show_formats', 'apps/reports/show/templates/show_header', 'apps/reports/show/templates/show_info', 'apps/reports/show/templates/show_info_dialog', 'apps/reports/show/templates/show_layout', 'apps/reports/preload_images', 'entities/report_artifact', 'entities/report'], function($) {
    return this.Pro.module('ReportsApp.Show', function(Show, App, Backbone, Marionette, jQuery, _) {
      Show.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('reports/show/show_layout');

        Layout.prototype.regions = {
          headerRegion: '#report-header-region',
          infoRegion: '#report-info-region',
          formatsRegion: '#report-formats-region',
          actionsRegion: '#report-actions-region',
          displayRegion: '#report-display-region'
        };

        return Layout;

      })(App.Views.Layout);
      Show.Header = (function(_super) {

        __extends(Header, _super);

        function Header() {
          return Header.__super__.constructor.apply(this, arguments);
        }

        Header.prototype.template = Header.prototype.templatePath('reports/show/show_header');

        return Header;

      })(App.Views.ItemView);
      Show.Info = (function(_super) {

        __extends(Info, _super);

        function Info() {
          return Info.__super__.constructor.apply(this, arguments);
        }

        Info.prototype.template = Info.prototype.templatePath('reports/show/show_info');

        Info.prototype.className = 'info-wrapper';

        Info.prototype.events = {
          'click #report-info-button': 'showReportInfo'
        };

        Info.prototype.showReportInfo = function() {
          return this.showDialog(new Show.InfoDialog({
            model: this.model
          }), {
            title: 'Report Information',
            "class": 'report-info-dialog',
            buttons: [
              {
                name: 'Close',
                "class": 'close'
              }
            ]
          });
        };

        return Info;

      })(App.Views.ItemView);
      Show.InfoDialog = (function(_super) {

        __extends(InfoDialog, _super);

        function InfoDialog() {
          return InfoDialog.__super__.constructor.apply(this, arguments);
        }

        InfoDialog.prototype.template = InfoDialog.prototype.templatePath('reports/show/show_info_dialog');

        return InfoDialog;

      })(App.Views.ItemView);
      Show.Format = (function(_super) {

        __extends(Format, _super);

        function Format() {
          this.onDestroy = __bind(this.onDestroy, this);

          this.stopPoll = __bind(this.stopPoll, this);

          this.poll = __bind(this.poll, this);
          return Format.__super__.constructor.apply(this, arguments);
        }

        Format.prototype.template = Format.prototype.templatePath('reports/show/_file_format');

        Format.prototype.tagName = 'li';

        Format.prototype.className = 'file-format';

        Format.prototype.ui = {
          regenerate_button: '.regenerate-button',
          format_button: '.format-button'
        };

        Format.prototype.events = {
          'click @ui.regenerate_button': 'regenerateFormat',
          'click @ui.format_button': 'handleFormatClick'
        };

        Format.prototype.modelEvents = {
          'change': 'render'
        };

        Format.prototype.handleFormatClick = function() {
          if (!(this.model.get('displayed') || this.model.get('not_generated'))) {
            return App.execute('report:formats:display', this.model);
          }
        };

        Format.prototype.regenerateFormat = function() {
          var file_format, regeneratingFormat,
            _this = this;
          if (this.model.get('artifact_file_exists')) {
            return alert('Please delete existing report type before generating');
          } else if (!this.model.get('artifact_file_exists') && !this.model.get('not_generated')) {
            return alert('Report artifact not found on filesystem. Please delete this format and regenerate it.');
          } else if (!this.model.regenerating()) {
            regeneratingFormat = App.request('report:formats:regenerating');
            if (regeneratingFormat) {
              alert("Please wait until the " + (regeneratingFormat.get('file_format')) + " format is done generating.");
              return false;
            }
            this.model.set('status', 'regenerating');
            App.vent.trigger('report:formats:regenerating', this.model);
            this.addTooltip();
            file_format = this.model.get('file_format');
            return $.ajax({
              url: gon.regenerate_format_path,
              type: 'POST',
              data: {
                file_format: file_format
              },
              success: function() {
                return _this.poll();
              },
              error: function() {
                return _this.model.set('status', 'error');
              }
            });
          }
        };

        Format.prototype.pollingInterval = 5000;

        Format.prototype.poll = function() {
          var fetchStatus,
            _this = this;
          fetchStatus = function() {
            var file_format;
            file_format = _this.model.get('file_format');
            return $.ajax({
              url: gon.regeneration_status_path,
              type: 'POST',
              data: {
                file_format: file_format
              },
              success: function(data) {
                if (data.status === 'complete') {
                  _this.model.set(data);
                  _this.addTooltip();
                  return App.vent.trigger('report:formats:regenerated', _this.model);
                } else {
                  _this.model.set('status', data.status);
                  return _this._poller = setTimeout((function() {
                    return fetchStatus();
                  }), _this.pollingInterval);
                }
              },
              error: function() {
                return _this.model.set('status', 'error');
              }
            });
          };
          return fetchStatus();
        };

        Format.prototype.startPoll = function() {
          if (this.model.regenerating()) {
            return this.poll();
          }
        };

        Format.prototype.stopPoll = function() {
          return clearTimeout(this._poller);
        };

        Format.prototype.addTooltip = function() {
          var tip;
          if (this.model.regenerating()) {
            return this.ui.format_button.tooltip({
              content: 'Regenerating.'
            });
          } else if (this.model.get('not_generated')) {
            return this.ui.format_button.tooltip({
              content: 'Not yet generated.'
            });
          } else if (!this.model.get('artifact_file_exists')) {
            return this.ui.format_button.tooltip({
              content: 'Error finding report artifact on filesystem. '
            });
          } else {
            tip = "Created " + (this.model.get('pretty_created_at'));
            if (this.model.get('pretty_accessed_at')) {
              tip += "<br />Accessed " + (this.model.get('pretty_accessed_at'));
            }
            return this.ui.format_button.tooltip({
              content: tip
            });
          }
        };

        Format.prototype.onDestroy = function() {
          return this.stopPoll();
        };

        Format.prototype.onShow = function() {
          this.startPoll();
          return this.addTooltip();
        };

        return Format;

      })(App.Views.ItemView);
      Show.Formats = (function(_super) {

        __extends(Formats, _super);

        function Formats() {
          this.selectedFormats = __bind(this.selectedFormats, this);

          this.handleFormatDestruction = __bind(this.handleFormatDestruction, this);

          this.regeneratingFormats = __bind(this.regeneratingFormats, this);
          return Formats.__super__.constructor.apply(this, arguments);
        }

        Formats.prototype.template = Formats.prototype.templatePath('reports/show/show_formats');

        Formats.prototype.childView = Show.Format;

        Formats.prototype.childViewContainer = 'ul';

        Formats.prototype.className = 'info-wrapper';

        Formats.prototype.initialize = function(options) {
          var _this = this;
          App.vent.on('report:formats:destroyed', function(reportArtifact) {
            return _this.handleFormatDestruction(reportArtifact);
          });
          App.vent.on('report:formats:displayed', function(reportArtifact) {
            return _this.handleArtifactDisplay(reportArtifact);
          });
          this.report = options.report;
          return Formats.__super__.initialize.call(this, options);
        };

        Formats.prototype.regeneratingFormats = function() {
          return this.collection.findWhere({
            status: 'regenerating'
          });
        };

        Formats.prototype.handleFormatDestruction = function(reportArtifact) {
          var nextArtifact;
          this.render();
          if (reportArtifact.get('displayed')) {
            nextArtifact = App.request('report:formats:next', this.collection);
            return App.execute('report:formats:display', nextArtifact, this.collection);
          } else if (this.collection.where({
            not_generated: true
          }).size() === this.collection.size()) {
            return App.execute('report:formats:display', null, this.collection);
          }
        };

        Formats.prototype.handleArtifactDisplay = function(reportArtifact) {
          var displayed;
          if (reportArtifact) {
            displayed = this.collection.findWhere({
              displayed: true
            });
            if (displayed) {
              displayed.set({
                displayed: false
              });
            }
            return reportArtifact.set('displayed', true);
          }
        };

        Formats.prototype.selectedFormats = function() {
          var currentlySelectedFormats;
          currentlySelectedFormats = [];
          this.children.each(function(formatView) {
            if (formatView.$el.find('input[type=checkbox]').prop('checked')) {
              return currentlySelectedFormats.push(formatView.model);
            }
          });
          return currentlySelectedFormats;
        };

        Formats.prototype.allReportFormats = function() {
          var regeneratingFormats, reportArtifactsAndFormats,
            _this = this;
          reportArtifactsAndFormats = new App.Entities.ReportArtifactsCollection;
          _.each(this.report.get('allowed_file_formats'), function(format) {
            var existingArtifact;
            existingArtifact = _this.collection.where({
              file_format: format
            });
            if (existingArtifact.size() > 0) {
              existingArtifact = existingArtifact.first();
              if (!(existingArtifact.get('artifact_file_exists') || existingArtifact.get('not_generated'))) {
                existingArtifact.set('status', 'error');
              }
              return reportArtifactsAndFormats.add(existingArtifact);
            } else {
              return reportArtifactsAndFormats.add({
                file_format: format,
                not_generated: true
              });
            }
          });
          if (this.report.get('state') === 'regenerating') {
            regeneratingFormats = this.report.get('file_formats');
            _.each(regeneratingFormats, function(fileFormat) {
              var regeneratingArtifact;
              regeneratingArtifact = new App.Entities.ReportArtifact({
                file_format: fileFormat,
                status: 'regenerating'
              });
              reportArtifactsAndFormats.remove(reportArtifactsAndFormats.findWhere({
                file_format: fileFormat
              }));
              return reportArtifactsAndFormats.add(regeneratingArtifact);
            });
          }
          return reportArtifactsAndFormats;
        };

        Formats.prototype.onBeforeRender = function() {
          return this.collection = this.allReportFormats();
        };

        return Formats;

      })(App.Views.CompositeView);
      Show.Actions = (function(_super) {

        __extends(Actions, _super);

        function Actions() {
          this.destroyReportArtifacts = __bind(this.destroyReportArtifacts, this);
          return Actions.__super__.constructor.apply(this, arguments);
        }

        Actions.prototype.template = Actions.prototype.templatePath('reports/show/show_actions');

        Actions.prototype.className = 'info-wrapper';

        Actions.prototype.events = {
          'click #download-report': 'downloadReportArtifact',
          'click #destroy-report': 'destroyReportArtifacts',
          'click #email-report': 'emailReportArtifacts'
        };

        Actions.prototype.downloadReportArtifact = function() {
          var selectedFormats;
          selectedFormats = App.request('report:formats:selected');
          switch (false) {
            case selectedFormats.size() !== 0:
              return alert('Please select a report format to download.');
            case !(selectedFormats.size() > 1):
              return alert('Please select a single report format for downloading.');
            default:
              return $('<iframe/>').attr({
                src: selectedFormats[0].get('download_url'),
                style: 'display: none;'
              }).appendTo(this.$el);
          }
        };

        Actions.prototype.destroyReportArtifacts = function() {
          var selectedFormats, selectedFormatsIndicator;
          selectedFormats = App.request('report:formats:selected');
          if (selectedFormats.size() === 0) {
            alert('Please select at least one report format to destroy.');
            return false;
          } else if (selectedFormats.size() === 1) {
            selectedFormatsIndicator = 'format';
          } else if (selectedFormats.size() > 1) {
            selectedFormatsIndicator = 'formats';
          }
          if (confirm("Are you sure you want to destroy the selected " + selectedFormatsIndicator + "?")) {
            return _.each(selectedFormats, function(format) {
              format.destroy({
                silent: true
              });
              return App.vent.trigger('report:formats:destroyed', format);
            });
          }
        };

        Actions.prototype.emailReportArtifacts = function() {
          var selectedFormats;
          selectedFormats = App.request('report:formats:selected');
          if (selectedFormats.size() === 0) {
            alert('Please select at least one report format to email.');
            return false;
          }
          return this.showDialog(new Show.EmailForm, {
            title: 'Email Report',
            height: 200,
            "class": 'report-email-dialog',
            buttons: [
              {
                name: 'Cancel',
                "class": 'close'
              }, {
                name: 'Send',
                "class": 'btn primary'
              }
            ]
          });
        };

        return Actions;

      })(App.Views.ItemView);
      Show.EmailForm = (function(_super) {

        __extends(EmailForm, _super);

        function EmailForm() {
          return EmailForm.__super__.constructor.apply(this, arguments);
        }

        EmailForm.prototype.template = EmailForm.prototype.templatePath('reports/show/show_email_form');

        EmailForm.prototype.ui = {
          reportEmailAddressesTextarea: '#report-email-addresses'
        };

        EmailForm.prototype.onDialogButtonPrimaryClicked = function() {
          return this.sendEmail();
        };

        EmailForm.prototype.sendEmail = function() {
          var emailAddresses, reportArtifactIDs, selectedFormats;
          emailAddresses = this.ui.reportEmailAddressesTextarea.val();
          selectedFormats = App.request('report:formats:selected');
          reportArtifactIDs = _.collect(selectedFormats, function(format) {
            return format.id;
          });
          return $.post(gon.email_report_artifacts_path, {
            recipients: emailAddresses,
            report_artifact_ids: reportArtifactIDs
          });
        };

        return EmailForm;

      })(App.Views.ItemView);
      return Show.Display = (function(_super) {

        __extends(Display, _super);

        function Display() {
          return Display.__super__.constructor.apply(this, arguments);
        }

        Display.prototype.template = Display.prototype.templatePath('reports/show/show_display');

        Display.prototype.ui = {
          displayPanel: '#report-display-panel',
          messages: '.report-display-panel-message',
          unembeddableMessage: '#unembeddable-message',
          noArtifactsMessage: '#no-artifacts-message',
          brokenArtifactMessage: '#broken-artifact-message'
        };

        Display.prototype.initialize = function(options) {
          this.reportArtifacts = options.reportArtifacts;
          return Display.__super__.initialize.call(this, options);
        };

        Display.prototype.displayArtifact = function() {
          if (this.reportArtifacts && (this.reportArtifacts.size() === 0 || this.reportArtifacts.where({
            not_generated: true
          }).size() === this.reportArtifacts.size())) {
            return this.ui.noArtifactsMessage.css('display', 'table');
          } else if (!this.model.get('artifact_file_exists')) {
            return this.ui.brokenArtifactMessage.css('display', 'table');
          } else {
            this.ui.messages.hide();
            switch (this.model.get('file_format')) {
              case 'pdf':
                return this.displayPDF();
              case 'html':
                return this.displayHTML();
              case 'rtf':
                return this.ui.unembeddableMessage.css('display', 'table');
              case 'word':
                return this.ui.unembeddableMessage.css('display', 'table');
            }
          }
        };

        Display.prototype.displayHTML = function() {
          return this.$el.html("<iframe src='" + (this.model.get('url')) + "' seamless='seamless'></iframe>");
        };

        Display.prototype.displayPDF = function() {
          var pdfEmbed;
          pdfEmbed = "        <object width=\"100%\" height=\"100%\" type=\"application/pdf\" data=\"" + (this.model.get('url')) + "\" id=\"pdf\">          <div id=\"report-pdf-embed-error-message\" class=\"report-display-panel-message\">            <p>It appears you don't have Adobe Reader or PDF support in this web browser.            <a href=\"" + (this.model.get('download_url')) + "\">Click here to download the PDF.</a></p>          </div>       </object>";
          return this.ui.displayPanel.append(pdfEmbed);
        };

        Display.prototype.onShow = function() {
          return this.displayArtifact();
        };

        return Display;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/_file_format"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        if (!(this.not_generated || this.status === 'regenerating')) {
          __out.push('\n  <input type="checkbox" class="report-format-checkbox" />\n');
        }
      
        __out.push('\n\n<div title="" class=\'format-button ');
      
        __out.push(__sanitize(this.file_format));
      
        __out.push(' ');
      
        if (this.not_generated) {
          __out.push(__sanitize('not-generated'));
        }
      
        __out.push(' ');
      
        __out.push(__sanitize(this.status));
      
        __out.push(' ');
      
        if (this.displayed) {
          __out.push(__sanitize('displayed'));
        }
      
        __out.push(' \'></div>\n\n\n<div class=\'regenerate-button ');
      
        __out.push(__sanitize(this.status));
      
        __out.push('\'></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/show_actions"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<h3>Report Actions</h3>\n\n<div id="report-actions">\n  <div class="action">\n    <button id="email-report"></button>\n  </div>\n  <div class="action">\n    <button id="download-report"></button>\n  </div>\n  <div class="action">\n    <button id="destroy-report"></button>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/show_display"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="report-display-panel">\n  <div id="unembeddable-message" class="report-display-panel-message">\n    <span>This filetype cannot be previewed in the browser.</span>\n  </div>\n  <div id="no-artifacts-message" class="report-display-panel-message">\n    <span>No report formats remaining for this report. Please click a format button on the left to begin regenerating this report.</span>\n  </div>\n  <div id="broken-artifact-message" class="report-display-panel-message">\n    <span>There was an error displaying the report. The report artifact file could not be found on the filesystem. Please delete and regenerate the file formats.</span>\n  </div>\n</div>\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/show_email_form"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form method="post" action="javascript:void(0)">\n  <div class="option">\n    <label>Email addresses</label>\n    <textarea id="report-email-addresses" placeholder="address1@example.com, address2@example.com"/>\n  </div>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/show_formats"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<h3>Report Formats</h3>\n\n<ul></ul>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/show_header"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="report-name-and-type">\n  <h1>');
      
        __out.push(__sanitize(this.name));
      
        __out.push('</h1>\n  <h2>');
      
        __out.push(__sanitize(this.pretty_report_type));
      
        __out.push(' Report</h2>\n</div>\n<div id="report-created-at">\n  Creation date: ');
      
        __out.push(__sanitize(this.pretty_created_at));
      
        __out.push('\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/show_info"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<h3>Report Information</h3>\n\n<div id="report-info-button">i</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/show_info_dialog"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var address, option, section, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      
        __out.push('<div class="row">\n  <div class="label">Report Name</div>\n  <div class="value">');
      
        __out.push(__sanitize(this.name));
      
        __out.push('</div>\n</div>\n\n<div class="row">\n  <div class="label">Report Type</div>\n  <div class="value">');
      
        __out.push(__sanitize(this.pretty_report_type));
      
        __out.push('</div>\n</div>\n\n<div class="row">\n  <div class="label">Created</div>\n  <div class="value">');
      
        __out.push(__sanitize(this.pretty_created_at));
      
        __out.push('</div>\n</div>\n\n<div class="row">\n  <div class="label">Created By</div>\n  <div class="value">');
      
        __out.push(__sanitize(this.created_by));
      
        __out.push('</div>\n</div>\n\n<div class="row">\n  <div class="label">Report Sections Selected</div>\n  <div class="value">\n    <ul>\n      ');
      
        _ref = this.sections;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          section = _ref[_i];
          __out.push('\n        <li>');
          __out.push(__sanitize(section.name));
          __out.push('</li>\n      ');
        }
      
        __out.push('\n    </ul>\n  </div>\n</div>\n\n<div class="row">\n  <div class="label">Report Options Selected</div>\n  <div class="value">\n    <ul>\n      ');
      
        _ref1 = this.options;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          option = _ref1[_j];
          __out.push('\n        <li>');
          __out.push(__sanitize(option.name));
          __out.push('</li>\n      ');
        }
      
        __out.push('\n    </ul>\n  </div>\n</div>\n\n');
      
        if (this.included_addresses.size() > 1 || this.excluded_addresses.size() > 1) {
          __out.push('\n  <div class="row">\n    <div class="label">Addresses</div>\n    <div class="value">\n      <div class="col">\n        <div class="col-header">Included</div>\n        <ul>\n          ');
          _ref2 = this.included_addresses;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            address = _ref2[_k];
            __out.push('\n            <li>');
            __out.push(__sanitize(address));
            __out.push('</li>\n          ');
          }
          __out.push('\n        </ul>\n      </div>\n      <div class="col">\n        <div class="col-header">Excluded</div>\n        <ul>\n          ');
          _ref3 = this.excluded_addresses;
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            address = _ref3[_l];
            __out.push('\n            <li>');
            __out.push(__sanitize(address));
            __out.push('</li>\n          ');
          }
          __out.push('\n        </ul>\n      </div>\n    </div>\n  </div>\n');
        }
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/reports/show/templates/show_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="report-header-region"></div>\n<div id="report-body">\n  <div id="report-left-panel">\n    <section id="report-info-region"></section>\n    <section id="report-formats-region"></section>\n    <section id="report-actions-region"></section>\n  </div>\n  <div id="report-display-region"></div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/services/delete/delete_view', 'lib/concerns/controllers/table_selections', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module("ServicesApp.Delete", function(Delete, App, Backbone, Marionette, $, _) {
      return Delete.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('TableSelections');

        Controller.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection;
          return this.setMainView(new Delete.Layout);
        };

        Controller.prototype.onFormSubmit = function() {
          var defer, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          jQuery.ajax({
            url: Routes.destroy_multiple_workspace_services_path({
              workspace_id: WORKSPACE_ID
            }),
            type: 'DELETE',
            data: {
              selections: {
                select_all_state: this.selectAllState || null,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              search: this.tableCollection.server_api.search,
              ignore_pagination: true
            },
            success: function() {
              _this.tableCollection.removeMultiple(_this.selectedVisibleCollection);
              defer.resolve();
              App.vent.trigger('services:deleted');
              return App.execute('flash:display', {
                title: "Service" + (_this.pluralizedMessage('', 's')) + " deleted",
                message: "The service" + (_this.pluralizedMessage(' was', 's were')) + " successfully deleted."
              });
            },
            error: function() {
              return App.execute('flash:display', {
                title: 'An error occurred',
                style: 'error',
                message: "There was a problem deleting the selected service" + (_this.multipleSelected() ? 's' : void 0)
              });
            }
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'apps/services/delete/templates/delete_layout'], function() {
    return this.Pro.module('ServicesApp.Delete', function(Delete, App) {
      return Delete.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('services/delete/delete_layout');

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/services/delete/templates/delete_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="delete-text">\n  Deleting these services will permanently remove them from this project.\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/services/index/index_views', 'lib/components/analysis_tab/analysis_tab_controller', 'entities/service', 'entities/host', 'lib/components/tags/new/new_controller', 'css!css/components/pill'], function() {
    return this.Pro.module("ServicesApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var actionButtons, columns, defaultSort, emptyView, filterOpts, services, show,
            _this = this;
          _.defaults(options, {
            show: true
          });
          show = options.show;
          services = App.request('services:entities', {
            index: true,
            fetch: false
          });
          defaultSort = 'host.name';
          columns = [
            {
              attribute: 'host.name',
              label: 'Host Name',
              escape: false,
              defaultDirection: 'asc'
            }, {
              attribute: 'name'
            }, {
              attribute: 'proto',
              label: 'Protocol'
            }, {
              attribute: 'port'
            }, {
              attribute: 'info',
              view: Index.InfoCellView
            }, {
              attribute: 'state',
              view: Index.StateCellView,
              escape: false
            }, {
              attribute: 'updated_at'
            }
          ];
          actionButtons = [
            {
              label: 'Delete Services',
              "class": 'delete',
              activateOn: 'any',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var controller;
                controller = App.request('services:delete', {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs,
                  selectedVisibleCollection: selectedVisibleCollection,
                  tableCollection: tableCollection
                });
                return App.execute("showModal", controller, {
                  modal: {
                    title: 'Are you sure?',
                    description: '',
                    height: 150,
                    width: 550,
                    hideBorder: true
                  },
                  buttons: [
                    {
                      name: 'Cancel',
                      "class": 'close'
                    }, {
                      name: 'OK',
                      "class": 'btn primary'
                    }
                  ]
                });
              }
            }, {
              label: 'Tag Hosts',
              "class": 'tag-edit',
              activateOn: 'any',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var collection, controller, ids, models, query, url;
                ids = selectAllState ? deselectedIDs : selectedIDs;
                models = _.map(ids, function(id) {
                  return new Backbone.Model({
                    id: id
                  });
                });
                collection = new Backbone.Collection(models);
                query = "";
                url = Routes.quick_multi_tag_workspace_services_path(WORKSPACE_ID);
                controller = App.request('tags:new:component', collection, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs,
                  q: query,
                  url: url,
                  serverAPI: tableCollection.server_api,
                  ids_only: true,
                  content: 'Tag the associated hosts of the services selected.'
                });
                return App.execute("showModal", controller, {
                  modal: {
                    title: 'Tags',
                    description: '',
                    height: 170,
                    width: 400,
                    hideBorder: true
                  },
                  buttons: [
                    {
                      name: 'Cancel',
                      "class": 'close'
                    }, {
                      name: 'OK',
                      "class": 'btn primary'
                    }
                  ],
                  doneCallback: function() {
                    return App.vent.trigger('host:tag:added', tableCollection);
                  }
                });
              },
              containerClass: 'action-button-right-separator'
            }, {
              label: 'Scan',
              "class": 'scan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newScanPath;
                newScanPath = Routes.new_scan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'service', newScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Import...',
              "class": 'import',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                }) + '#file';
              }
            }, {
              label: 'Nexpose Scan',
              "class": 'nexpose',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                });
              }
            }, {
              label: 'WebScan',
              "class": 'webscan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newWebScanPath;
                newWebScanPath = Routes.new_webscan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'service', newWebScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Modules',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var modulesPath;
                modulesPath = Routes.modules_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'service', modulesPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-separator'
            }, {
              label: 'Bruteforce',
              "class": 'brute',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newQuickBruteforcePath;
                newQuickBruteforcePath = Routes.workspace_brute_force_guess_index_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'service', newQuickBruteforcePath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Exploit',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newExploitPath;
                newExploitPath = Routes.new_exploit_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'service', newExploitPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }
          ];
          filterOpts = {
            searchType: 'pro',
            placeHolderText: 'Search Services'
          };
          emptyView = App.request('analysis_tab:empty_view', {
            emptyText: "No services are associated with this project"
          });
          _.extend(options, {
            collection: services,
            columns: columns,
            defaultSort: defaultSort,
            actionButtons: actionButtons,
            filterOpts: filterOpts,
            emptyView: emptyView
          });
          this.analysisTabController = App.request('analysis_tab:component', options);
          this.layout = this.analysisTabController.layout;
          this.setMainView(this.layout);
          if (show) {
            return this.show(this.layout, {
              region: this.region
            });
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_itemview'], function() {
    return this.Pro.module('ServicesApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      Index.InfoCellView = (function(_super) {

        __extends(InfoCellView, _super);

        function InfoCellView() {
          this.template = __bind(this.template, this);
          return InfoCellView.__super__.constructor.apply(this, arguments);
        }

        InfoCellView.prototype.initialize = function() {
          this.attribute = 'info';
          return this.idAttribute = 'id';
        };

        InfoCellView.prototype.template = function(data) {
          var id, maxLength, text, truncatedText;
          maxLength = 50;
          id = data[this.idAttribute];
          text = data[this.attribute] || '';
          truncatedText = text.length > maxLength ? text.substring(0, maxLength) + '…' : text;
          return _.escapeHTML(_.unescapeHTML(truncatedText));
        };

        return InfoCellView;

      })(Pro.Views.ItemView);
      return Index.StateCellView = (function(_super) {

        __extends(StateCellView, _super);

        function StateCellView() {
          this.template = __bind(this.template, this);
          return StateCellView.__super__.constructor.apply(this, arguments);
        }

        StateCellView.prototype.template = function(data) {
          return "<div class='pill'> <div class='" + data.state + "'> " + (data.state.toUpperCase()) + " </div></div>";
        };

        return StateCellView;

      })(Pro.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/services/index/index_controller', 'apps/services/delete/delete_controller', 'lib/utilities/navigation', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module('ServicesApp', function(ServicesApp, App) {
      var API,
        _this = this;
      ServicesApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index",
          "services": "index"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function() {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/services/index/index_controller'], function() {
            var indexController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return indexController = new ServicesApp.Index.Controller;
          });
        },
        "delete": function(options) {
          return new ServicesApp.Delete.Controller(options);
        }
      };
      App.addInitializer(function() {
        return new ServicesApp.Router({
          controller: API
        });
      });
      App.addRegions({
        mainRegion: "#services-main-region"
      });
      App.reqres.setHandler('services:delete', function(options) {
        if (options == null) {
          options = {};
        }
        return API["delete"](options);
      });
      return App.vent.on("host:tag:added", function() {
        return App.execute('flash:display', {
          title: 'Host(s) Tagged ',
          message: 'The host(s) were successfully tagged.'
        });
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/task_chains/index/index_view', 'lib/components/modal/modal_controller'], function() {
    return this.Pro.module('TaskChainsApp.Index', function(Index, App, Backbone, Marionette, jQuery, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var taskChains,
            _this = this;
          taskChains = options.taskChains, this.legacyChains = options.legacyChains;
          taskChains || (taskChains = App.request('task_chains:entities'));
          this.layout = this.getLayoutView();
          this.listenTo(this.layout, "show", function() {
            _this.listRegion(taskChains);
            return _this._showLegacyWarning();
          });
          return this.show(this.layout);
        };

        Controller.prototype._showLegacyWarning = function() {
          var view;
          if (this.legacyChains.length > 0) {
            view = new Index.LegacyWarningView({
              model: new Backbone.Model({
                legacyChains: this.legacyChains
              })
            });
            return App.execute('showModal', view, {
              modal: {
                title: 'Task Chain Warning',
                description: '',
                width: 600,
                height: 218 + 22 * this.legacyChains.length
              },
              buttons: [
                {
                  name: 'OK',
                  "class": 'btn primary'
                }
              ]
            });
          }
        };

        Controller.prototype.listRegion = function(taskChains) {
          var listView;
          listView = this.getListView(taskChains);
          return this.layout.listRegion.show(listView);
        };

        Controller.prototype.getLayoutView = function() {
          return new Index.Layout;
        };

        Controller.prototype.getListView = function(taskChains) {
          return new Index.List({
            collection: taskChains
          });
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'pie_chart', 'base_view', 'base_itemview', 'base_layout', 'base_compositeview', 'apps/task_chains/index/templates/index_layout', 'apps/task_chains/index/templates/index_list', 'apps/task_chains/index/templates/_task_chain', 'apps/task_chains/index/templates/legacy_warning'], function($, PieChart) {
    return this.Pro.module('TaskChainsApp.Index', function(Index, App) {
      Index.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('task_chains/index/index_layout');

        Layout.prototype.regions = {
          headerRegion: '#task-chain-header-region',
          listRegion: '#task-chain-list-region'
        };

        return Layout;

      })(App.Views.Layout);
      Index.LegacyWarningView = (function(_super) {

        __extends(LegacyWarningView, _super);

        function LegacyWarningView() {
          return LegacyWarningView.__super__.constructor.apply(this, arguments);
        }

        LegacyWarningView.prototype.template = LegacyWarningView.prototype.templatePath('task_chains/index/legacy_warning');

        LegacyWarningView.prototype.onFormSubmit = function() {
          var defer, formSubmit;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          defer.resolve();
          return formSubmit;
        };

        return LegacyWarningView;

      })(App.Views.ItemView);
      Index.TaskChain = (function(_super) {

        __extends(TaskChain, _super);

        function TaskChain() {
          return TaskChain.__super__.constructor.apply(this, arguments);
        }

        TaskChain.prototype.template = TaskChain.prototype.templatePath('task_chains/index/_task_chain');

        TaskChain.prototype.tagName = 'tr';

        TaskChain.prototype.className = 'task-chain';

        TaskChain.prototype.ui = {
          statusCanvas: 'td.status canvas',
          checkbox: 'td.checkbox input'
        };

        TaskChain.prototype.events = {
          'click @ui.checkbox': 'setSelected'
        };

        TaskChain.prototype.addPieChart = function() {
          this.chart = new PieChart({
            canvas: this.ui.statusCanvas[0],
            percentage: this.model.get('percent_tasks_started'),
            text: this.model.get('started_tasks'),
            percentFill: '#006699',
            textFill: '#006699',
            stroke: 6,
            fontSize: '20px'
          });
          return this.chart.update();
        };

        TaskChain.prototype.setSelected = function() {
          return this.model.set({
            selected: this.ui.checkbox.prop('checked')
          });
        };

        TaskChain.prototype.onRender = function() {
          if (this.model.get('state') === 'running') {
            return this.addPieChart();
          }
        };

        return TaskChain;

      })(App.Views.ItemView);
      return Index.List = (function(_super) {

        __extends(List, _super);

        function List() {
          return List.__super__.constructor.apply(this, arguments);
        }

        List.prototype.template = List.prototype.templatePath('task_chains/index/index_list');

        List.prototype.childView = Index.TaskChain;

        List.prototype.childViewContainer = 'tbody';

        List.prototype.pollingInterval = 12000;

        List.prototype.ui = {
          newTaskChainLink: '#new',
          numTotalIndicator: '#num-total',
          numSelectedIndicator: '#num-selected',
          selectAllToggle: 'th#select-all input',
          sortingArrows: 'th .arrow',
          buttons: '.toolbar a',
          deleteButton: 'a#delete',
          cloneButton: 'a#clone',
          stopButton: 'a#stop',
          suspendButton: 'a#suspend',
          resumeButton: 'a#unsuspend',
          runButton: 'a#run',
          newButton: 'a#new'
        };

        List.prototype.events = {
          'click @ui.deleteButton': 'deleteTaskChains',
          'click @ui.cloneButton': 'cloneTaskChain',
          'click @ui.stopButton': 'stopTaskChains',
          'click @ui.suspendButton': 'suspendTaskChains',
          'click @ui.resumeButton': 'resumeTaskChains',
          'click @ui.runButton': 'runTaskChains',
          'click @ui.selectAllToggle': 'toggleSelectAll',
          'click th.sortable': 'handleHeaderClick'
        };

        List.prototype.collectionEvents = {
          'change:selected': 'setNumSelected enableButtons',
          'sort': 'renderRows'
        };

        List.prototype.renderRows = function() {
          this._renderChildren();
          return this.onRender();
        };

        List.prototype.handleHeaderClick = function(e) {
          var $arrow, $el, sortAttribute, sortColumn;
          $el = $(e.currentTarget);
          $arrow = $el.find('div.arrow');
          sortColumn = $el.data('sort-column');
          sortAttribute = this.collection.sortAttribute;
          if (sortColumn === sortAttribute) {
            this.collection.sortDirection *= -1;
          } else {
            this.collection.sortDirection = 1;
          }
          this.ui.sortingArrows.removeClass('up').removeClass('down');
          if (this.collection.sortDirection === 1) {
            $arrow.addClass('up');
          } else {
            $arrow.addClass('down');
          }
          return this.collection.sortRows(sortColumn);
        };

        List.prototype.disableAllButtons = function() {
          this.ui.buttons.addClass('disabled');
          return this.ui.newButton.removeClass('disabled');
        };

        List.prototype.enableButtons = function() {
          var runningChains, scheduledChains, selectedChains, suspendedChains,
            _this = this;
          this.disableAllButtons();
          selectedChains = this.collection.where({
            selected: true
          });
          if (selectedChains.size() === 0) {
            return false;
          }
          runningChains = _.filter(selectedChains, (function(tc) {
            return tc.get('state') === 'running';
          }));
          if (runningChains.size() > 0) {
            this.ui.stopButton.removeClass('disabled');
          } else {
            this.ui.deleteButton.removeClass('disabled');
          }
          if (runningChains.size() !== selectedChains.size()) {
            this.ui.runButton.removeClass('disabled');
          }
          scheduledChains = _.filter(selectedChains, function(tc) {
            return tc.get('schedule_state') === 'scheduled' || tc.get('scheduled_state') === 'once';
          });
          if (scheduledChains.size() > 0 || runningChains.size() > 0) {
            this.ui.suspendButton.removeClass('disabled');
          }
          suspendedChains = _.filter(selectedChains, function(tc) {
            return tc.get('schedule_state') === 'suspended';
          });
          if (suspendedChains.size() > 0) {
            this.ui.resumeButton.removeClass('disabled');
          }
          if (selectedChains.size() === 1) {
            return this.ui.cloneButton.removeClass('disabled');
          }
        };

        List.prototype.cloneTaskChain = function() {
          if (this.ui.cloneButton.hasClass('disabled')) {
            return false;
          }
          if (this.collection.selected().size() !== 1) {
            alert("Please select one task chain to clone.");
            return false;
          }
          return window.location = this.collection.selected()[0].get('clone_workspace_task_chain_path');
        };

        List.prototype.deleteTaskChains = function() {
          var selectedTaskChainsIndicator, taskChainsToDelete;
          if (this.ui.deleteButton.hasClass('disabled')) {
            return false;
          }
          taskChainsToDelete = this.collection.selected();
          if (taskChainsToDelete.size() === 1) {
            selectedTaskChainsIndicator = 'task chain';
          } else if (taskChainsToDelete.size() > 1) {
            selectedTaskChainsIndicator = 'task chains';
          }
          if (confirm("Are you sure you want to delete the selected " + selectedTaskChainsIndicator + "?")) {
            return this.collection.destroySelected();
          }
        };

        List.prototype.stopTaskChains = function() {
          var selectedTaskChainsIndicator, taskChainsToStop;
          if (this.ui.stopButton.hasClass('disabled')) {
            return false;
          }
          taskChainsToStop = this.collection.selected();
          if (taskChainsToStop.size() === 1) {
            selectedTaskChainsIndicator = 'task chain';
          } else if (taskChainsToStop.size() > 1) {
            selectedTaskChainsIndicator = 'task chains';
          }
          if (confirm("Are you sure you want to stop the selected " + selectedTaskChainsIndicator + "?")) {
            return this.collection.stopSelected();
          }
        };

        List.prototype.suspendTaskChains = function() {
          if (this.ui.suspendButton.hasClass('disabled')) {
            return false;
          }
          return this.collection.suspendSelected();
        };

        List.prototype.resumeTaskChains = function() {
          if (this.ui.resumeButton.hasClass('disabled')) {
            return false;
          }
          return this.collection.resumeSelected();
        };

        List.prototype.runTaskChains = function() {
          var selectedSize;
          if (this.ui.runButton.hasClass('disabled')) {
            return false;
          }
          selectedSize = this.collection.where({
            selected: true
          }).size();
          if (!(selectedSize > 1 && !confirm("Are you sure you want to run " + selectedSize + " task chains at once?"))) {
            this.disableAllButtons();
            return this.collection.runSelected();
          }
        };

        List.prototype.toggleSelectAll = function() {
          var selectAllToggleState;
          selectAllToggleState = this.ui.selectAllToggle.prop('checked');
          this.collection.invoke('set', {
            selected: selectAllToggleState
          });
          return this.$el.find('input[type="checkbox"]').prop('checked', selectAllToggleState);
        };

        List.prototype.setNumSelected = function() {
          return this.ui.numSelectedIndicator.html(this.collection.selected().size());
        };

        List.prototype.setNumTotal = function() {
          return this.ui.numTotalIndicator.html(this.collection.size());
        };

        List.prototype.setNewLinkPath = function() {
          return this.ui.newTaskChainLink.attr('href', gon.new_workspace_task_chains_path);
        };

        List.prototype.queueNextPoll = function() {
          var _this = this;
          return this._timeout = setTimeout((function() {
            return _this.refreshList();
          }), this.pollingInterval);
        };

        List.prototype.refreshList = function() {
          var _this = this;
          clearTimeout(this._timeout);
          return this.collection.fetch({
            success: (function() {
              return _this.collection.sort();
            })
          });
        };

        List.prototype.onRender = function() {
          this.setNewLinkPath();
          this.setNumTotal();
          return this.queueNextPoll();
        };

        List.prototype.onCompositeCollectionRendered = function() {
          return this.enableButtons();
        };

        return List;

      })(App.Views.CompositeView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/task_chains/index/templates/_task_chain"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<td class="checkbox">\n  <input type="checkbox" ');
      
        if (this.selected) {
          __out.push('checked ');
        }
      
        __out.push(' >\n</td>\n<td class="schedule">\n  <div class="schedule-wrapper">\n    <div class="');
      
        if (this.schedule_state === 'unscheduled') {
          __out.push('no-schedule');
        } else {
          __out.push('schedule');
        }
      
        __out.push('"></div>\n    <div class="');
      
        __out.push(__sanitize(this.schedule_state));
      
        __out.push('"></div>\n  </div>\n</td>\n<td class="name">\n  <a href="');
      
        __out.push(__sanitize(this.edit_workspace_task_chain_path));
      
        __out.push('">');
      
        __out.push(__sanitize(this.name));
      
        __out.push('</a>\n</td>\n<td class="last-updated">\n  ');
      
        __out.push(__sanitize(this.last_updated));
      
        __out.push('\n</td>\n<td class="created-by">\n  ');
      
        __out.push(__sanitize(this.created_by));
      
        __out.push('\n</td>\n<td class="tasks">\n  ');
      
        __out.push(__sanitize(this.task_names));
      
        __out.push('\n</td>\n<td class="history">\n  ');
      
        if (this.last_run_url) {
          __out.push('\n    <a href="');
          __out.push(__sanitize(this.last_run_url));
          __out.push('" ');
          if (this.last_run_error) {
            __out.push(' class="error" ');
          }
          __out.push('>');
          __out.push(__sanitize(this.last_run));
          __out.push('</a>\n  ');
        } else {
          __out.push('\n    ');
          __out.push(__sanitize(this.last_run));
          __out.push('\n  ');
        }
      
        __out.push('\n  <br/>\n  ');
      
        __out.push(__sanitize(this.next_run));
      
        __out.push('\n</td>\n<td class="status">\n  ');
      
        if (this.last_run_task_state === "stopped") {
          __out.push('\n    <div class="stopped-state"></div>\n    <div class="task-info">\n      Task chain was stopped\n    </div>\n  ');
        }
      
        __out.push('\n\n  ');
      
        if (this.last_run_task_state === "interrupted") {
          __out.push('\n    <div class="failed-state"></div>\n    <div class="task-info">\n      Last task chain failed. See: <a href="');
          __out.push(__sanitize(this.last_run_url));
          __out.push('">Error log</a>\n    </div>\n  ');
        }
      
        __out.push('  \n\n  ');
      
        if (this.state !== 'running' && this.last_run_task_state === "completed") {
          __out.push(' \n    ');
          if (this.last_run_url) {
            __out.push('\n      ');
            if (this.last_run_error) {
              __out.push('\n        <div class="failed-state"></div>\n        <div class="task-info">\n          Last task chain failed. See: <a href="');
              __out.push(__sanitize(this.last_run_url));
              __out.push('">Error log</a>\n        </div>\n      ');
            } else {
              __out.push('\n        <div class="success-state"></div>\n        <div class="task-info">\n          ');
              __out.push(__sanitize(this.total_tasks));
              __out.push(' of ');
              __out.push(__sanitize(this.total_tasks));
              __out.push(' tasks completed successfully\n        </div>\n      ');
            }
            __out.push('\n    ');
          }
          __out.push('\n  ');
        }
      
        __out.push('\n\n  ');
      
        if (this.state === 'running') {
          __out.push('\n    <canvas height="35px" width="35px" />\n    <div class="task-info">\n      <a href="');
          __out.push(__sanitize(this.current_task_url));
          __out.push('">Task ');
          __out.push(__sanitize(this.started_tasks));
          __out.push(' of ');
          __out.push(__sanitize(this.total_tasks));
          __out.push('<br/>\n      ');
          __out.push(__sanitize(this.current_task_name));
          __out.push('</a>\n    </div>\n  ');
        }
      
        __out.push('\n</td>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/task_chains/index/templates/index_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="task-chain-header-region">\n  <h1>Task Chains</h1>\n</div>\n\n<div id="task-chain-list-region"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/task_chains/index/templates/index_list"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="toolbar">\n  <a class="disabled" href="javascript:void(0);" id="delete">Delete</a>\n  <a class="disabled" href="javascript:void(0);" id="clone">Clone</a>\n  <a class="disabled" href="javascript:void(0);" id="stop">Stop</a>\n  <a class="disabled" href="javascript:void(0);" id="suspend">Suspend</a>\n  <a class="disabled" href="javascript:void(0);" id="unsuspend">Unsuspend</a>\n  <a class="disabled" href="javascript:void(0);" id="run">Run Now ▶</a>\n  <a href="javascript:void(0);" id="new">+ New Task Chain</a>\n</div>\n\n<div id="selected-indicator">\n  <span id="num-selected">0</span> of <span id="num-total"></span> task chains selected\n</div>\n\n<table>\n  <thead>\n    <th id="select-all"><input type="checkbox"></th>\n    <th class="schedule">Schedule</th>\n    <th class="sortable" data-sort-column="name">Name <div class="arrow up"></div></th>\n    <th class="sortable" data-sort-column="sortable_last_updated">Last Updated <div class="arrow"></div></th>\n    <th class="sortable" data-sort-column="created_by">Created By <div class="arrow"></div></th>\n    <th>Tasks</th>\n    <th class="sortable" data-sort-column="sortable_next_run">History <div class="arrow"></div></th>\n    <th class="sortable" data-sort-column="percent_tasks_started">Status <div class="arrow"></div></th>\n  </thead>\n  <tbody></tbody>\n</table>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/task_chains/index/templates/legacy_warning"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var chain, _i, _len, _ref;
      
        __out.push('<div>\n  The following task chains need to be updated due to recent changes to the import and Nexpose configuration pages:\n\n  <br><br>\n\n  <h5>Affected Chains:</h5>\n\n  <ul>\n  ');
      
        _ref = this.legacyChains;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          chain = _ref[_i];
          __out.push('\n    <li>');
          __out.push(__sanitize(chain.name));
          __out.push('</li>\n  ');
        }
      
        __out.push('\n  </ul>\n\n\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/task_chains/index/index_controller', 'entities/task_chain'], function() {
    return this.Pro.module('TaskChainsApp', function(TaskChainsApp, App, Backbone, Marionette, $, _) {
      var API;
      TaskChainsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function(taskChains) {
          if (taskChains == null) {
            taskChains = App.request('new:task_chains:collection', gon.task_chains);
          }
          return new TaskChainsApp.Index.Controller({
            taskChains: taskChains,
            legacyChains: gon.legacy_chains
          });
        }
      };
      App.vent.on('index:task_chains', function(taskChains) {
        return API.show(taskChains);
      });
      App.addInitializer(function() {
        new TaskChainsApp.Router({
          controller: API
        });
        API.index();
        return this.module("TaskChainsApp").start();
      });
      return App.addRegions({
        mainRegion: "#task-chains-main-region"
      });
    });
  });

}).call(this);
(function() {

  define(['css!css/brute_force_guess_findings', 'lib/components/table/cell_views', 'lib/shared/attempt_session/attempt_session_controller', 'apps/creds/findings/findings_controller', 'lib/shared/creds/cell_views'], function() {
    return this.Pro.module('TasksApp.Findings', function(Findings, App) {
      var attemptLoginController, hostView, privateView, publicView, realmView;
      hostView = Backbone.Marionette.ItemView.extend({
        template: function(m) {
          return "<a href='/hosts/" + (_.escape(m.host_id)) + "' class='underline'>" + (_.escape(m.address)) + "</a>";
        }
      });
      publicView = Backbone.Marionette.ItemView.extend({
        template: function(m) {
          if (m.core_id) {
            return "<a href='/workspaces/" + WORKSPACE_ID + "/credentials#creds/" + (_.escape(m.core_id)) + "' class='underline'>" + (_.escape(m["public"])) + "</a>";
          } else {
            return "" + (_.escape(m["public"]));
          }
        }
      });
      privateView = App.CredsApp.Findings.PrivateController;
      realmView = App.CredsApp.Findings.RealmController;
      attemptLoginController = Pro.Shared.AttemptSession.Controller;
      return Findings.BruteForceGuessQuick = {
        stats: [
          {
            title: 'Login Attempts',
            type: 'percentage',
            num: 'logins_attempted',
            total: 'maximum_login_attempts'
          }, {
            title: 'Targets Compromised',
            type: 'percentage',
            num: 'targets_compromised',
            total: 'maximum_targets_compromised'
          }, {
            title: 'Successful Logins',
            type: 'percentage',
            num: 'successful_login_attempts',
            total: 'logins_attempted'
          }
        ],
        tables: {
          login_attempts: {
            defaultSort: 'attempted_at',
            columns: [
              {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name',
                "class": 'truncate'
              }, {
                label: 'Service',
                attribute: 'service_name'
              }, {
                label: 'Port',
                attribute: 'service_port'
              }, {
                label: 'Public',
                attribute: 'public',
                view: publicView
              }, {
                label: 'Private',
                attribute: 'private',
                view: privateView
              }, {
                label: 'Realm',
                attribute: 'realm',
                view: realmView,
                sortAttribute: 'realm_key'
              }, {
                label: 'Result',
                attribute: 'status'
              }
            ]
          },
          targets_compromised: {
            columns: [
              {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name'
              }, {
                label: "OS",
                attribute: "host_os_name"
              }, {
                label: 'Service',
                attribute: 'name'
              }, {
                label: 'Port',
                attribute: 'port'
              }, {
                label: 'Successful Logins',
                attribute: 'successful_logins',
                view: Pro.Creds.CellViews.Count,
                viewOpts: {
                  attribute: 'successful_logins',
                  subject: 'credential'
                },
                hoverView: Pro.Creds.CellViews.CollectionHover.extend({
                  url: function() {
                    return Routes.task_detail_path(WORKSPACE_ID, TASK_ID) + ("/stats/successful_logins_hover.json?service_id=" + (this.model.get('attempt_ids')));
                  },
                  title: function() {
                    return "";
                  },
                  columns: [
                    {
                      label: 'Public',
                      size: 4,
                      attribute: 'public_username'
                    }, {
                      label: 'Private',
                      size: 5,
                      attribute: 'private_data'
                    }, {
                      label: 'Private Type',
                      size: 3,
                      attribute: 'private_type'
                    }
                  ]
                })
              }
            ]
          },
          successful_logins: {
            columns: [
              {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name'
              }, {
                label: "OS",
                attribute: "host_os_name"
              }, {
                label: 'Service',
                attribute: 'service_name'
              }, {
                label: 'Port',
                attribute: 'port'
              }, {
                label: 'Public',
                attribute: 'public',
                view: publicView
              }, {
                label: 'Private',
                attribute: 'private',
                view: privateView
              }, {
                label: 'Realm',
                attribute: 'realm',
                view: realmView,
                sortAttribute: 'realm_key'
              }, {
                label: 'Attempt Session',
                attribute: 'id',
                "class": 'get_session attempt_session',
                view: attemptLoginController,
                sortable: false
              }
            ]
          }
        }
      };
    });
  });

}).call(this);
(function() {

  define(['css!css/brute_force_guess_findings', 'lib/components/table/cell_views', 'lib/shared/attempt_session/attempt_session_controller', 'apps/creds/findings/findings_controller', 'lib/shared/creds/cell_views'], function() {
    return this.Pro.module('TasksApp.Findings', function(Findings, App) {
      var goToSession, hostView, privateView, publicView, realmView, sessions, sessionsHover;
      hostView = Backbone.Marionette.ItemView.extend({
        template: function(m) {
          return "<a href='/hosts/" + (_.escape(m.host_id)) + "' class='underline'>" + (_.escape(m.address)) + "</a>";
        }
      });
      publicView = Backbone.Marionette.ItemView.extend({
        template: function(m) {
          if (m.core_id) {
            return "<a href='/workspaces/" + WORKSPACE_ID + "/credentials#creds/" + (_.escape(m.core_id)) + "' class='underline'>" + (_.escape(m["public"])) + "</a>";
          } else {
            return "" + (_.escape(m["public"]));
          }
        }
      });
      goToSession = Backbone.Marionette.ItemView.extend({
        template: function(m) {
          if (m.session_id) {
            return "<a href='" + (Routes.session_path(WORKSPACE_ID, m.session_id)) + "' class='underline'>Session " + m.session_id + "</a>";
          } else {
            return '';
          }
        }
      });
      privateView = App.CredsApp.Findings.PrivateController;
      realmView = App.CredsApp.Findings.RealmController;
      sessionsHover = App.CredsApp.Findings.SessionsHover;
      sessions = App.CredsApp.Findings.Sessions;
      return Findings.BruteForceGuessQuickSession = {
        stats: [
          {
            title: 'Login Attempts',
            type: 'percentage',
            num: 'logins_attempted',
            total: 'maximum_login_attempts'
          }, {
            title: 'Targets Compromised',
            type: 'percentage',
            num: 'targets_compromised',
            total: 'maximum_targets_compromised'
          }, {
            title: 'Successful Logins',
            type: 'percentage',
            num: 'successful_login_attempts',
            total: 'logins_attempted'
          }
        ],
        tables: {
          login_attempts: {
            defaultSort: 'attempted_at',
            columns: [
              {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name',
                "class": 'truncate'
              }, {
                label: 'Service',
                attribute: 'service_name'
              }, {
                label: 'Port',
                attribute: 'service_port'
              }, {
                label: 'Public',
                attribute: 'public',
                view: publicView
              }, {
                label: 'Private',
                attribute: 'private',
                view: privateView
              }, {
                label: 'Realm',
                attribute: 'realm',
                view: realmView,
                sortAttribute: 'realm_key'
              }, {
                label: 'Result',
                attribute: 'status'
              }
            ]
          },
          targets_compromised: {
            columns: [
              {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name'
              }, {
                label: "OS",
                attribute: "host_os_name"
              }, {
                label: 'Service',
                attribute: 'name'
              }, {
                label: 'Port',
                attribute: 'port'
              }, {
                label: 'Successful Logins',
                attribute: 'successful_logins',
                view: Pro.Creds.CellViews.Count,
                viewOpts: {
                  attribute: 'successful_logins',
                  subject: 'credential'
                },
                hoverView: Pro.Creds.CellViews.CollectionHover.extend({
                  url: function() {
                    return Routes.task_detail_path(WORKSPACE_ID, TASK_ID) + ("/stats/successful_logins_hover.json?service_id=" + (this.model.get('attempt_ids')));
                  },
                  title: function() {
                    return "";
                  },
                  columns: [
                    {
                      label: 'Public',
                      size: 4,
                      attribute: 'public_username'
                    }, {
                      label: 'Private',
                      size: 5,
                      attribute: 'private_data'
                    }, {
                      label: 'Private Type',
                      size: 3,
                      attribute: 'private_type'
                    }
                  ]
                })
              }, {
                label: "Sessions",
                attribute: 'session_count',
                view: sessions,
                hoverView: sessionsHover
              }
            ]
          },
          successful_logins: {
            columns: [
              {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name'
              }, {
                label: "OS",
                attribute: "host_os_name"
              }, {
                label: 'Service',
                attribute: 'service_name'
              }, {
                label: 'Port',
                attribute: 'port'
              }, {
                label: 'Public',
                attribute: 'public',
                view: publicView
              }, {
                label: 'Private',
                attribute: 'private',
                view: privateView
              }, {
                label: 'Realm',
                attribute: 'realm',
                view: realmView,
                sortAttribute: 'realm_key'
              }, {
                label: 'Go to Session',
                attribute: 'sessions_id',
                view: goToSession
              }
            ]
          }
        }
      };
    });
  });

}).call(this);
(function() {

  define(['lib/components/table/cell_views'], function() {
    return this.Pro.module('TasksApp.Findings', function(Findings, App) {
      var hostView, publicView;
      hostView = Backbone.Marionette.ItemView.extend({
        template: function(m) {
          return "<a href='/hosts/" + (_.escape(m.host_id)) + "'>" + (_.escape(m.address)) + "</a>";
        }
      });
      publicView = Backbone.Marionette.ItemView.extend({
        template: function(m) {
          if (m.core_id) {
            return "<a href='/workspaces/" + WORKSPACE_ID + "/credentials#creds/" + (_.escape(m.core_id)) + "' class='underline'>" + (_.escape(m["public"])) + "</a>";
          } else {
            return "" + (_.escape(m["public"]));
          }
        }
      });
      return Findings.BruteForceReuse = {
        stats: [
          {
            title: 'Login Attempts',
            type: 'percentage',
            num: 'logins_attempted',
            total: 'maximum_login_attempts'
          }, {
            title: 'Validated Credentials',
            type: 'percentage',
            num: 'credentials_validated',
            total: 'credentials_selected'
          }, {
            title: 'Validated Targets',
            type: 'percentage',
            num: 'services_validated',
            total: 'services_selected'
          }, {
            title: 'Successful Logins',
            type: 'stat',
            num: 'successful_login_attempts',
            percentage_stroke: '#888'
          }
        ],
        tables: {
          validated_credentials: {
            columns: [
              {
                label: 'Public/Username',
                attribute: 'public',
                view: publicView
              }, {
                label: 'Private/Password',
                attribute: 'private',
                "class": 'truncate'
              }, {
                label: 'Realm',
                attribute: 'realm'
              }
            ]
          },
          login_attempts: {
            defaultSort: 'attempted_at',
            columns: [
              {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name',
                "class": 'truncate'
              }, {
                label: 'Service',
                attribute: 'service_name'
              }, {
                label: 'Public/Username',
                attribute: 'public',
                view: publicView
              }, {
                label: 'Private/Password',
                attribute: 'private',
                "class": 'truncate'
              }, {
                label: 'Realm',
                attribute: 'realm'
              }, {
                label: 'Attempted at',
                attribute: 'attempted_at',
                defaultDirection: 'asc'
              }, {
                label: 'Result',
                attribute: 'status'
              }
            ]
          },
          validated_targets: {
            columns: [
              {
                label: 'Service',
                attribute: 'name'
              }, {
                label: 'Port',
                attribute: 'port'
              }, {
                label: 'Proto',
                attribute: 'proto'
              }, {
                label: 'State',
                attribute: 'state'
              }, {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name'
              }
            ]
          },
          successful_logins: {
            columns: [
              {
                label: 'Public/Username',
                attribute: 'public',
                view: publicView
              }, {
                label: 'Private/Password',
                attribute: 'private',
                "class": 'truncate'
              }, {
                label: 'Host IP',
                attribute: 'address',
                view: hostView
              }, {
                label: 'Host name',
                attribute: 'host_name'
              }, {
                label: 'Service',
                attribute: 'service_name'
              }, {
                label: 'Realm',
                attribute: 'realm'
              }, {
                label: 'Port',
                attribute: 'port'
              }, {
                label: 'Proto',
                attribute: 'proto'
              }
            ]
          }
        }
      };
    });
  });

}).call(this);
(function() {

  define(['jquery', 'lib/shared/creds/cell_views', 'apps/meta_modules/domino/visualization_controller', 'lib/components/table/table_controller'], function($) {
    return Pro.module('TasksApp.Findings').Domino = {
      stats: [
        {
          title: 'Iterations',
          type: 'stat',
          num: 'iterations'
        }, {
          title: 'Unique Credentials Captured',
          type: 'stat',
          num: 'creds_captured'
        }, {
          title: 'Hosts Compromised',
          type: 'stat',
          num: 'hosts_compromised',
          badge: function(task) {
            var count, plural;
            count = task.get('high_values');
            plural = count === 1 ? '' : 's';
            if (count > 0) {
              return "" + count + " Designated High Value Host" + plural;
            } else {
              return null;
            }
          }
        }
      ],
      controllers: {
        iterations: Pro.MetaModulesApp.Domino.Controller
      },
      tables: {
        unique_credentials_captured: {
          columns: [
            {
              label: 'Public',
              attribute: 'public',
              view: Pro.Creds.CellViews.Public
            }, {
              label: 'Private',
              attribute: 'private',
              "class": 'truncate',
              view: Pro.Creds.CellViews.Private
            }, {
              label: 'Realm',
              attribute: 'realm_key',
              view: Pro.Creds.CellViews.Realm,
              hoverView: Pro.Creds.CellViews.RealmHover,
              hoverOn: function() {
                return !_.isEmpty(this.model.get('realm'));
              }
            }, {
              label: 'Captured from',
              attribute: 'captured_from_address',
              view: Pro.Creds.CellViews.HostAddress,
              viewOpts: {
                attribute: 'captured_from_address'
              }
            }, {
              label: 'Host name',
              attribute: 'captured_from_name'
            }, {
              label: 'Compromised Hosts',
              attribute: 'compromised_hosts',
              view: Pro.Creds.CellViews.Count,
              viewOpts: {
                attribute: 'compromised_hosts',
                subject: 'host'
              },
              hoverView: Pro.Creds.CellViews.CollectionHover.extend({
                attributes: {
                  width: '300px'
                },
                url: function() {
                  return Routes.task_detail_path(this.model.get('workspace_id'), this.model.get('task_id')) + ("/stats/hosts_compromised_from.json?core_id=" + (this.model.get('core_id')));
                },
                title: function() {
                  return "Compromised Hosts (" + (this.model.get('compromised_hosts')) + "):";
                },
                columns: [
                  {
                    label: 'Host IP',
                    size: 6,
                    attribute: 'host_address'
                  }, {
                    label: 'Host Name',
                    size: 6,
                    attribute: 'host_name'
                  }
                ]
              }),
              hoverOn: function() {
                return parseInt(this.model.get('compromised_hosts'), 10) > 0;
              }
            }
          ]
        },
        hosts_compromised: {
          onShow: function(controller) {
            var $checkbox, collection, onlyHighValueTargets, updateRowHighlights;
            $checkbox = $("<label class='high-value-only'>\n  <input type='checkbox' /> Show High Value Hosts only\n</label>");
            controller.list.$el.parent().append($checkbox);
            $checkbox.on('change', function() {
              return onlyHighValueTargets($checkbox.find('input').is(':checked'));
            });
            collection = controller.collection;
            collection.on('reset sync', updateRowHighlights);
            updateRowHighlights = function() {
              var _this = this;
              return _.each(controller.list.table.find('tbody tr'), function(tr, idx) {
                var _ref;
                return $(tr).toggleClass('high-value', ((_ref = collection.models[idx]) != null ? typeof _ref.get === "function" ? _ref.get('high_value') : void 0 : void 0) === 'true');
              });
            };
            return onlyHighValueTargets = function(only) {
              var baseURL;
              baseURL = collection.url.replace(/[^\/]+$/, '');
              collection.url = only ? baseURL + 'high_value_hosts_compromised' : baseURL + 'hosts_compromised';
              return collection.goTo(1);
            };
          },
          columns: [
            {
              label: 'Host IP',
              attribute: 'address',
              view: Pro.Creds.CellViews.HostAddress
            }, {
              label: 'Host name',
              attribute: 'name'
            }, {
              label: 'OS',
              attribute: 'os_name'
            }, {
              label: 'Service',
              attribute: 'service_name'
            }, {
              label: 'Port',
              attribute: 'service_port'
            }, {
              label: 'Public',
              attribute: 'public',
              view: Pro.Creds.CellViews.Public
            }, {
              label: 'Private',
              attribute: 'private',
              view: Pro.Creds.CellViews.Private
            }, {
              label: 'Realm',
              attribute: 'realm_key',
              view: Pro.Creds.CellViews.Realm,
              hoverView: Pro.Creds.CellViews.RealmHover,
              hoverOn: function() {
                return !_.isEmpty(this.model.get('realm'));
              }
            }, {
              label: 'Credentials Looted',
              attribute: 'captured_creds_count',
              view: Pro.Creds.CellViews.Count,
              viewOpts: {
                attribute: 'captured_creds_count',
                subject: 'credential'
              },
              hoverView: Pro.Creds.CellViews.CollectionHover.extend({
                url: function() {
                  return Routes.task_detail_path(this.model.get('workspace_id'), this.model.get('task_id')) + ("/stats/creds_captured_from.json?node_id=" + (this.model.get('node_id')));
                },
                title: function() {
                  return "Credentials Looted (" + (this.model.get('captured_creds_count')) + "):";
                },
                columns: [
                  {
                    label: 'Public',
                    size: 4,
                    attribute: 'public'
                  }, {
                    label: 'Private',
                    size: 5,
                    attribute: 'private'
                  }, {
                    label: 'Private Type',
                    size: 3,
                    attribute: 'private_type'
                  }
                ]
              }),
              hoverOn: function() {
                return parseInt(this.model.get('captured_creds_count'), 10) > 0;
              }
            }, {
              label: 'Sessions',
              attribute: 'sessions_count',
              view: Pro.Creds.CellViews.Count,
              viewOpts: {
                attribute: 'sessions_count',
                subject: 'session',
                link: function(m) {
                  return Routes.host_path(m.host_id) + '#sessions';
                }
              }
            }
          ]
        }
      }
    };
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'task_console', 'base_controller', 'lib/components/modal/modal_controller', 'lib/components/table/table_controller', 'apps/tasks/show/show_view', 'entities/task', 'lib/concerns/pollable', 'jquery.ajax-retry'], function($, TaskConsole) {
    return this.Pro.module('TasksApp.Show', function(Show, App) {
      return Show.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.poll = __bind(this.poll, this);

          this.setTabIndex = __bind(this.setTabIndex, this);

          this.selectStat = __bind(this.selectStat, this);

          this._loadClientSideCode = __bind(this._loadClientSideCode, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include("Pollable");

        Controller.prototype.task = null;

        Controller.prototype.layout = null;

        Controller.prototype.headerView = null;

        Controller.prototype.consoleView = null;

        Controller.prototype.statsView = null;

        Controller.prototype.table = null;

        Controller.prototype.pollInterval = 3000;

        Controller.prototype.initialize = function(opts) {
          var debouncedRefresh,
            _this = this;
          if (opts == null) {
            opts = {};
          }
          _.defaults(opts, {
            fetch: true
          });
          this.task = opts.task;
          this.layout = new Show.Layout();
          this.headerView = new Show.Header({
            model: this.task
          });
          this.consoleView = new TaskConsole({
            task: this.task.id
          });
          this.drilldownView = new Show.Drilldown({
            task: this.task.id
          });
          this.listenTo(this.layout, 'show', function() {
            var grabFirst;
            _this.statsView = new Show.Stats({
              collection: _this.task.get('statDisplays')
            });
            _this.region.$el.removeClass('tab-loading');
            _this.layout.headerRegion.show(_this.headerView);
            _this.layout.consoleRegion.show(_this.consoleView);
            _this.layout.statsRegion.show(_this.statsView);
            _this.layout.drilldownRegion.show(_this.drilldownView);
            grabFirst = function() {
              var firstStat;
              firstStat = _this.task.get('statDisplays').findFirstClickable();
              if (firstStat != null) {
                return _this.selectStat(firstStat);
              }
            };
            _this.task.get('statDisplays').on('add', grabFirst);
            grabFirst();
            if (_this.task.isPaused()) {
              _this.consoleView.refreshLog();
            } else {
              _this.consoleView.startUpdating();
            }
            _this.startPolling();
            _this.listenTo(_this.statsView, 'childview:stat:clicked', function(statView) {
              if (statView.model.get('clickable') && !statView.model.get('selected')) {
                return _this.selectStat(statView.model);
              }
            });
            return _this.listenTo(_this.statsView, 'childview:stat:updated', function(statView) {
              if (statView.model.get('selected')) {
                return debouncedRefresh();
              }
            });
          });
          debouncedRefresh = _.debounce((function() {
            var _ref;
            return (_ref = _this.table) != null ? _ref.refresh() : void 0;
          }), 200);
          this.listenTo(this.layout, 'tasksApp:show:tabClicked', function(idx) {
            var _ref;
            if ((_ref = _this.controller) != null) {
              if (typeof _ref.tabClicked === "function") {
                _ref.tabClicked(idx);
              }
            }
            return _this.setTabIndex(idx);
          });
          this.listenTo(this.headerView, 'tasksApp:resume', function() {
            return _this.consoleView.resumeUpdating();
          });
          if (opts.fetch) {
            return this.task.fetch().retry({
              times: 9999,
              timeout: 4000
            }).done(this._loadClientSideCode);
          } else {
            return this._loadClientSideCode();
          }
        };

        Controller.prototype._loadClientSideCode = function() {
          var classLoaded, presenterCamel, presenterClass,
            _this = this;
          if (this.task.get('run_stats').length === 0) {
            this.region.show(new Backbone.Marionette.ItemView({
              template: function() {
                return '';
              }
            }));
            this.region.$el.addClass('tab-loading');
            return _.delay((function() {
              return _this.task.fetch().done(_this._loadClientSideCode);
            }), 1000);
          }
          presenterCamel = _.chain(this.task.get('presenter')).camelize().capitalize().value();
          presenterClass = function() {
            var _ref, _ref1;
            return (_ref = App.TasksApp) != null ? (_ref1 = _ref.Findings) != null ? _ref1[presenterCamel] : void 0 : void 0;
          };
          classLoaded = function() {
            _this.task.set('schema', presenterClass());
            return _this.show(_this.layout, {
              preventDestroy: true
            });
          };
          if (presenterClass() == null) {
            return initProRequire(["apps/tasks/findings/" + (this.task.get('presenter'))], classLoaded);
          } else {
            return classLoaded();
          }
        };

        Controller.prototype.selectStat = function(stat) {
          var collection, collectionURL, view,
            _this = this;
          _.each(this.statsView.collection.models, function(m) {
            if (m !== stat) {
              return m.set('selected', false);
            }
          });
          stat.set('selected', true);
          _.defer(function() {
            var _ref, _ref1, _ref2;
            return (_ref = _this.layout) != null ? (_ref1 = _ref.drilldownRegion) != null ? (_ref2 = _ref1.$el) != null ? typeof _ref2.removeClass === "function" ? _ref2.removeClass('tab-loading') : void 0 : void 0 : void 0 : void 0;
          });
          this.controller = this.table = null;
          if (stat.get('controller') != null) {
            return this.controller = new (stat.get('controller'))({
              task: this.task,
              region: this.drilldownView.tableRegion
            });
          } else if (stat.get('view') != null) {
            view = new stat.get('view')({
              task: this.task
            });
            return this.drilldownView.tableRegion.show(view);
          } else if (stat.get('table') != null) {
            collectionURL = stat.collectionURL(this.task);
            collection = new Backbone.Collection.extend({}, {
              url: collectionURL,
              model: Backbone.Model
            });
            return this.table = App.request("table:component", _.extend({
              actionButtons: [
                {
                  label: 'Export',
                  click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                    var $btn, $iframe, getParams, url;
                    url = _this.table.collection.url + '.csv';
                    getParams = _.map(_this.table.collection.server_api, function(v, k) {
                      v = _.isFunction(v) ? v.call(_this.table.collection) : v;
                      v = _.isObject(v) ? JSON.stringify(v) : v;
                      if (k === 'json') {
                        v = 'csv';
                      }
                      return "" + (encodeURIComponent(k)) + "=" + (encodeURIComponent(v));
                    }).join('&');
                    _.each(_this.table.columns, function(column) {
                      return getParams += "&columns[]=" + (encodeURIComponent(column.attribute));
                    });
                    url = "" + url + "?" + getParams;
                    $iframe = $('<iframe />', {
                      src: url,
                      style: 'display:none'
                    }).appendTo($('body'));
                    _.delay((function() {
                      return $iframe.remove();
                    }), 30000);
                    $btn = _this.layout.$el.find('.action-button');
                    $btn.addClass('disabled');
                    return _.delay((function() {
                      return $btn.removeClass('disabled');
                    }), 3000);
                  }
                }
              ],
              htmlID: "findings_table_" + (_.str.underscored(stat.get('title'))),
              title: stat.get('title'),
              region: this.drilldownView.tableRegion,
              taggable: false,
              selectable: false,
              "static": false,
              collection: collection,
              perPage: 10
            }, stat.get('table')));
          }
        };

        Controller.prototype.setTabIndex = function(idx) {
          return this.layout.setTabIndex(idx);
        };

        Controller.prototype.poll = function() {
          if (this.task.isCompleted()) {
            _.defer(this.stopPolling, this.pollInterval);
          }
          return this.task.fetch();
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'pie_chart', 'base_view', 'base_itemview', 'base_layout', 'base_collectionview', 'apps/tasks/show/templates/layout', 'apps/tasks/show/templates/header', 'apps/tasks/show/templates/stat', 'apps/tasks/show/templates/drilldown', 'lib/concerns/views/spinner'], function($, PieChart) {
    return this.Pro.module('TasksApp.Show', function(Show, App) {
      Show.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          this.setTabIndex = __bind(this.setTabIndex, this);

          this.tabClicked = __bind(this.tabClicked, this);
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('tasks/show/layout');

        Layout.prototype.attributes = {
          "class": 'stats'
        };

        Layout.prototype.regions = {
          headerRegion: '.rollup-header',
          consoleRegion: '.console-area',
          statsRegion: '.stats-region',
          drilldownRegion: '.drilldown-area'
        };

        Layout.prototype.ui = {
          tabContainer: 'ul.rollup-tabs',
          pageContainer: 'div.rollup-page'
        };

        Layout.prototype.events = {
          'click ul.rollup-tabs li': 'tabClicked'
        };

        Layout.prototype.tabClicked = function(e) {
          return this.trigger('tasksApp:show:tabClicked', $(e.currentTarget).index());
        };

        Layout.prototype.setTabIndex = function(idx) {
          this.ui.tabContainer.find('li').removeClass('selected').eq(idx).addClass('selected');
          return this.ui.pageContainer.find('div.rollup-tab').hide().eq(idx).show();
        };

        return Layout;

      })(App.Views.Layout);
      Show.Drilldown = (function(_super) {

        __extends(Drilldown, _super);

        function Drilldown() {
          return Drilldown.__super__.constructor.apply(this, arguments);
        }

        Drilldown.prototype.template = Drilldown.prototype.templatePath('tasks/show/drilldown');

        Drilldown.prototype.regions = {
          tableRegion: '.table-region'
        };

        return Drilldown;

      })(App.Views.Layout);
      Show.Header = (function(_super) {

        __extends(Header, _super);

        function Header() {
          this.disableControlButtons = __bind(this.disableControlButtons, this);

          this.stopTask = __bind(this.stopTask, this);

          this.resumeTask = __bind(this.resumeTask, this);

          this.pauseTask = __bind(this.pauseTask, this);
          return Header.__super__.constructor.apply(this, arguments);
        }

        Header.include("Spinner");

        Header.prototype.template = Header.prototype.templatePath('tasks/show/header');

        Header.prototype.ui = {
          pauseButton: '#pause',
          resumeButton: '#resume',
          stopButton: '#stop',
          controlButtons: '.control-button'
        };

        Header.prototype.events = {
          'click @ui.pauseButton': 'pauseTask',
          'click @ui.resumeButton': 'resumeTask',
          'click @ui.stopButton': 'stopTask'
        };

        Header.prototype.modelEvents = {
          'change:completed_at': 'render',
          'change:state': 'render'
        };

        Header.prototype.pauseTask = function() {
          if (this.ui.pauseButton.hasClass('disabled')) {
            return;
          }
          this.disableControlButtons();
          return this.model.pause();
        };

        Header.prototype.resumeTask = function() {
          if (this.ui.resumeButton.hasClass('disabled')) {
            return;
          }
          this.trigger('tasksApp:resume');
          this.disableControlButtons();
          return this.model.resume();
        };

        Header.prototype.stopTask = function() {
          if (this.ui.stopButton.hasClass('disabled')) {
            return;
          }
          this.disableControlButtons();
          return this.model.stop();
        };

        Header.prototype.disableControlButtons = function() {
          this.showSpinner();
          return this.ui.controlButtons.addClass('disabled');
        };

        return Header;

      })(App.Views.ItemView);
      Show.StatView = (function(_super) {

        __extends(StatView, _super);

        function StatView() {
          this._buildPie = __bind(this._buildPie, this);

          this._updateSelected = __bind(this._updateSelected, this);

          this._updateClickable = __bind(this._updateClickable, this);

          this._updatePie = __bind(this._updatePie, this);

          this._updateBadge = __bind(this._updateBadge, this);

          this.update = __bind(this.update, this);

          this.onShow = __bind(this.onShow, this);

          this.initialize = __bind(this.initialize, this);
          return StatView.__super__.constructor.apply(this, arguments);
        }

        StatView.prototype.template = StatView.prototype.templatePath('tasks/show/stat');

        StatView.prototype.attributes = {
          "class": 'generic-stat-wrapper'
        };

        StatView.prototype.ui = {
          canvas: 'canvas',
          numStat: 'span.numStat',
          totalStat: 'span.totalStat',
          badge: '.stat-badge span',
          label: 'label.desc'
        };

        StatView.prototype.triggers = {
          'click div': 'stat:clicked'
        };

        StatView.prototype.pie = null;

        StatView.prototype.initialize = function() {
          var numStat, totalStat;
          numStat = this.model.get('numStat');
          totalStat = this.model.get('totalStat');
          this.listenTo(this.model, "change:selected", this._updateSelected);
          this.listenTo(this.model.get('run_stats').task, "change", this._updateBadge);
          if (numStat != null) {
            this.listenTo(numStat, 'change', this.update);
          }
          if (totalStat != null) {
            return this.listenTo(totalStat, 'change', this.update);
          }
        };

        StatView.prototype.onShow = function() {
          this.update();
          return this._updateClickable();
        };

        StatView.prototype.update = function() {
          var _ref, _ref1;
          this._updatePie();
          this._updateBadge();
          this.ui.numStat.text((_ref = this.model.get('numStat')) != null ? _ref.get('data') : void 0);
          this.ui.totalStat.text((_ref1 = this.model.get('totalStat')) != null ? _ref1.get('data') : void 0);
          return this.trigger('stat:updated');
        };

        StatView.prototype._updateBadge = function() {
          var val, _ref;
          val = (_ref = this.model.get('schema')) != null ? typeof _ref.badge === "function" ? _ref.badge(this.model.get('run_stats').task) : void 0 : void 0;
          this.ui.badge.parent().toggle(!!val);
          if (val) {
            return this.ui.badge.html(val);
          }
        };

        StatView.prototype._updatePie = function() {
          var num, total, _ref, _ref1;
          if (this.model.isPercentage() && this.model.shouldShowPieChart()) {
            if (this.pie == null) {
              this._buildPie();
            }
            num = ((_ref = this.model.get('numStat')) != null ? _ref.get('data') : void 0) || 0;
            total = ((_ref1 = this.model.get('totalStat')) != null ? _ref1.get('data') : void 0) || num;
            this.ui.label.attr('data-count', num);
            this.pie.setText(num + '', {
              shouldUpdate: false
            });
            this.pie.setPercentage(num / total * 100.0, {
              shouldUpdate: false
            });
            return this.pie.update();
          }
        };

        StatView.prototype._updateClickable = function() {
          return this.$el.attr('clickable', this.model.get('clickable'));
        };

        StatView.prototype._updateSelected = function() {
          return this.$el.toggleClass('selected', this.model.get('selected'));
        };

        StatView.prototype._buildPie = function() {
          return this.pie || (this.pie = new PieChart({
            canvas: this.ui.canvas[0],
            innerFill: this.model.bgColor(),
            innerFillHover: this.model.bgColor(),
            textFill: this.model.color(),
            textFillHover: this.model.color(),
            fontSize: '20px',
            outerFill: this.model.stroke(),
            percentFill: this.model.percentageStroke(),
            outerFillHover: this.model.stroke(),
            percentFillHover: this.model.percentageStroke()
          }));
        };

        return StatView;

      })(App.Views.ItemView);
      return Show.Stats = (function(_super) {

        __extends(Stats, _super);

        function Stats() {
          this._fixWidths = __bind(this._fixWidths, this);

          this._deferFixWidths = __bind(this._deferFixWidths, this);

          this.onRender = __bind(this.onRender, this);
          return Stats.__super__.constructor.apply(this, arguments);
        }

        Stats.prototype.childView = Show.StatView;

        Stats.prototype.attributes = {
          "class": 'center'
        };

        Stats.prototype.collectionEvents = {
          'add': '_deferFixWidths'
        };

        Stats.prototype.onRender = function() {
          return this._fixWidths();
        };

        Stats.prototype._deferFixWidths = function() {
          return _.defer(this._fixWidths);
        };

        Stats.prototype._fixWidths = function() {
          return this.$el.find('>*').css({
            width: "" + (100 / this.collection.models.length) + "%"
          });
        };

        return Stats;

      })(App.Views.CollectionView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/tasks/show/templates/drilldown"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class=\'table-region\'>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/tasks/show/templates/header"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="max-width clear">\n  <div class="task-status">\n    <h3>');
      
        __out.push(__sanitize(this.description));
      
        __out.push('</h3>\n    ');
      
        if (this.app_run_status != null) {
          __out.push('\n      <label class="status ');
          __out.push(__sanitize(_.str.underscored(this.app_run_status)));
          __out.push('">\n        ');
          __out.push(__sanitize(_.str.humanize(this.app_run_status)));
          __out.push('\n      </label>\n    ');
        } else {
          __out.push('\n      <label class="status ');
          __out.push(__sanitize(this.state));
          __out.push('">\n        ');
          __out.push(__sanitize(this.state.capitalize()));
          __out.push('\n      </label>\n    ');
        }
      
        __out.push('\n</div>\n\n  <div class="control-buttons">\n    ');
      
        if (this.running) {
          __out.push('\n\n      ');
          if (this.pausable) {
            __out.push('\n        <div class="control-button" id="pause"><label>Pause</label></div>\n      ');
          }
          __out.push('\n\n      <div class="control-button" id="stop">Stop</div>\n\n    ');
        } else if (this.paused) {
          __out.push('\n\n      <div class="control-button" id="resume"><label>Resume</label></div>\n\n      <div class="control-button" id="stop">Stop</div>\n\n    ');
        }
      
        __out.push('\n\n    <div class="retina spinner"></div>\n  </div>\n\n  <div class="clearfix"></div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/tasks/show/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="rollup-header"></div>\n<div class="app-stats max-width" style="padding: 0px;">\n  <ul class="rollup-tabs">\n    <li class="selected">\n      <a href="javascript:void(0)">Statistics</a>\n    </li>\n    <li>\n      <a href="javascript:void(0)">Task Log</a>\n    </li>\n  </ul>\n  <div class="rollup-page">\n    <div class="rollup-tab">\n      <div class="stat-row stats-region">\n      </div>\n      <div class="drilldown-padding">\n        <div class="drilldown-area tab-loading">\n        </div>\n      </div>\n    </div>\n    <div class="rollup-tab" style="display: none">\n      <div class="console-area">\n      </div>\n    </div>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/tasks/show/templates/stat"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var _ref;
      
        if (this.schema.badge != null) {
          __out.push('\n  <div class=\'stat-badge\' style=\'display: none\'>\n    <span></span>\n  </div>\n');
        }
      
        __out.push('\n\n');
      
        if (((_ref = this.schema) != null ? _ref.type : void 0) === 'percentage') {
          __out.push('\n\n  <div class="pie-chart-wrapper load-table" clickable="false">\n    <div class="pie-chart">\n      <canvas width="70px" height="80px" style=\'margin-top: 8px;\'></canvas>\n    </div>\n    <label class="stat run-stat">\n      <span class=\'numStat\'></span>/<span class=\'totalStat\'></span>\n    </label>\n    <label class="desc">\n      ');
          __out.push(__sanitize(_.str.humanize(this.title)));
          __out.push('\n    </label>\n  </div>\n\n');
        } else {
          __out.push('\n\n  <div class="big-stat center load-table" clickable="false">\n    <span class="stat run-stat numStat"></span>\n    <label>\n      <span>');
          __out.push(__sanitize(_.str.humanize(this.title)));
          __out.push('</span>\n    </label>\n  </div>\n\n');
        }
      
        __out.push('\n\n<div class=\'lil-nubster\'></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['apps/tasks/show/show_controller', 'entities/task'], function() {
    return this.Pro.module('TasksApp', function(TasksApp, App) {
      var API;
      TasksApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function(opts) {
          var task;
          if (opts == null) {
            opts = {};
          }
          task = new App.Entities.Task({
            id: opts.task_id || window.TASK_ID,
            workspace_id: opts.workspace_id || window.WORKSPACE_ID
          });
          return new TasksApp.Show.Controller({
            task: task
          });
        }
      };
      App.addRegions({
        mainRegion: "#tasks-app"
      });
      return App.addInitializer(function() {
        new TasksApp.Router({
          controller: API
        });
        return API.index();
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/vulns/delete/delete_view', 'lib/concerns/controllers/table_selections', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module("VulnsApp.Delete", function(Delete, App, Backbone, Marionette, $, _) {
      return Delete.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.include('TableSelections');

        Controller.prototype.initialize = function(opts) {
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection;
          return this.setMainView(new Delete.Layout);
        };

        Controller.prototype.onFormSubmit = function() {
          var defer, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          jQuery.ajax({
            url: Routes.destroy_multiple_workspace_vulns_path({
              workspace_id: WORKSPACE_ID
            }),
            type: 'DELETE',
            data: {
              selections: {
                select_all_state: this.selectAllState || null,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              search: this.tableCollection.server_api.search,
              ignore_pagination: true
            },
            success: function() {
              _this.tableCollection.removeMultiple(_this.selectedVisibleCollection);
              defer.resolve();
              App.vent.trigger('vulns:deleted');
              return App.execute('flash:display', {
                title: "Vulnerabilit" + (_this.pluralizedMessage('y', 'ies')) + " deleted",
                message: "The vulnerabilit" + (_this.pluralizedMessage('y was', 'ies were ')) + " successfully deleted."
              });
            },
            error: function() {
              return App.execute('flash:display', {
                title: 'An error occurred',
                style: 'error',
                message: "There was a problem deleting the selected vulnerabilit" + (_this.multipleSelected() ? 'ies' : 'y')
              });
            }
          });
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'apps/vulns/delete/templates/delete_layout'], function() {
    return this.Pro.module('VulnsApp.Delete', function(Delete, App) {
      return Delete.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('vulns/delete/delete_layout');

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/delete/templates/delete_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="delete-text">\n  Deleting these vulnerabilities and related data will permanently remove them from this project.\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview', 'apps/vulns/show/components/comment/comment_view', 'entities/note'], function($) {
    return this.Pro.module("Components.CustomNoteCell", function(CustomNoteCell, App, Backbone, Marionette, $, _) {
      return CustomNoteCell.View = (function(_super) {

        __extends(View, _super);

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.initialize = function(opts) {
          var data;
          data = {
            workspace_id: WORKSPACE_ID,
            type: 'Mdm::Vuln',
            type_id: parseInt(this.model.id),
            data: {
              comment: this.model.get('comment.data.comment')
            }
          };
          return this.commentModel = App.request('new:note:entity', data);
        };

        View.prototype.template = function(data) {
          var comment;
          if (data['comment.data.comment']) {
            comment = data['comment.data.comment'];
          } else {
            comment = '';
          }
          return "<textarea rows=\"1\" id=\"comments\" type=\"text\" name=\"comment\">" + comment + "</textarea>\n<img class=\"btn more-text\" src=\"/assets/icons/buttom_more-7136ef601f6f896bafce9a49dd2841ecc0be81984871cf677951f03acebb21c9.svg\" />\n<div class=\"error\" style=\"display:none;\"></div>";
        };

        View.prototype.ui = {
          commentBtn: 'img.btn.more-text',
          commentInput: 'textarea#comments',
          error: '.error'
        };

        View.prototype.events = {
          'click @ui.commentBtn': '_commentModal',
          'focusout @ui.commentInput': '_saveComment'
        };

        View.prototype._commentModal = function() {
          var commentView,
            _this = this;
          commentView = new Pro.Components.Comment.View({
            model: this.commentModel
          });
          return App.execute('showModal', commentView, {
            modal: {
              title: 'Comment',
              description: '',
              width: 300
            },
            buttons: [
              {
                name: 'Cancel',
                "class": 'close'
              }, {
                name: 'OK',
                "class": 'btn primary'
              }
            ],
            doneCallback: function() {
              _this.commentModel.set('data', {
                comment: commentView.getComment()
              });
              return _this._setComment(commentView.getComment());
            }
          });
        };

        View.prototype._saveComment = function() {
          var commentModel, data,
            _this = this;
          data = _.extend(this.commentModel.attributes, {
            data: {
              comment: this.ui.commentInput.val()
            }
          });
          commentModel = App.request('new:note:entity', data);
          return commentModel.save({}, {
            success: function(model) {
              _this.commentModel.set('data', {
                comment: model.get('data').comment
              });
              _this.ui.error.html();
              return _this.ui.error.hide();
            },
            error: function(model, response) {
              _this.ui.error.html(response.responseJSON.error.data[0]);
              return _this.ui.error.show();
            }
          });
        };

        View.prototype._setComment = function(comment) {
          return this.ui.commentInput.val(comment);
        };

        return View;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/vulns/index/components/push_status_cell/push_status_cell_view'], function() {
    return this.Pro.module("Components.PushStatusCell", function(PushStatusCell, App) {
      return PushStatusCell.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {};

        Controller.prototype.initialize = function(options) {
          var view;
          if (options == null) {
            options = {};
          }
          if (options.model.get('vuln.latest_nexpose_result.sent_to_nexpose')) {
            switch (options.model.get('vuln.latest_nexpose_result.type')) {
              case 'Nexpose::Result::Exception':
                options.model.set('vuln.latest_nexpose_result.icon', '/assets/icons/nxStatus-push-exception-0d7076f6793c3d2cb75d26c6cc22fabd2b852094a3e4c5f924ebced6d919f8e4.svg');
                options.model.set('vuln.latest_nexpose_result.hover_text', 'Pushed as Exception');
                break;
              case 'Nexpose::Result::Validation':
                options.model.set('vuln.latest_nexpose_result.icon', '/assets/icons/nxStatus-push-validation-d1a83ea53b310e03f40c6750d963d196bd86b648eda69624ff9894ae51b07e8b.svg');
                options.model.set('vuln.latest_nexpose_result.hover_text', 'Pushed as Validation');
            }
          } else {
            options.model.set('vuln.latest_nexpose_result.icon', '/assets/icons/nxStatus-header-e4342bb4dad4e3191f516bb82d0f92d73ba70673f968b2067703da20d46bf3df.svg');
            options.model.set('vuln.latest_nexpose_result.hover_text', 'Not Pushed');
          }
          view = new PushStatusCell.View({
            model: options.model
          });
          return this.setMainView(view);
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview'], function($) {
    return this.Pro.module("Components.PushStatusCell", function(PushStatusCell, App, Backbone, Marionette, $, _) {
      return PushStatusCell.View = (function(_super) {

        __extends(View, _super);

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.template = function(data) {
          var hover_text, icon;
          if (!data.origin_type) {
            return "<div></div>";
          }
          icon = data['vuln.latest_nexpose_result.icon'];
          hover_text = data['vuln.latest_nexpose_result.hover_text'];
          return "<img class='nx-push-icon' src=\"" + icon + "\" title='" + hover_text + "' ></img>";
        };

        View.prototype.onRender = function() {
          return this.$el.tooltip();
        };

        return View;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/vulns/vulns_app', 'css!css/components/pill', 'apps/vulns/index/index_views', 'lib/components/analysis_tab/analysis_tab_controller', 'apps/vulns/index/components/custom_note_cell/custom_note_cell_view', 'apps/vulns/index/components/push_status_cell/push_status_cell_controller'], function() {
    return this.Pro.module("VulnsApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.getPushButtonViewStatus = __bind(this.getPushButtonViewStatus, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var actionButtons, buttonController, columns, defaultSort, emptyView, filterOpts, show, vulns,
            _this = this;
          _.defaults(options, {
            show: true
          });
          show = options.show;
          vulns = App.request('vulns:entities', {
            fetch: false
          });
          defaultSort = 'name';
          columns = [
            {
              attribute: 'name',
              label: 'Vulnerability',
              view: Index.NameCellView,
              "class": 'truncate'
            }, {
              attribute: 'host.address',
              label: 'Address',
              view: Index.AddressCellView,
              defaultDirection: 'asc'
            }, {
              attribute: 'host.name',
              label: 'Host Name',
              escape: false
            }, {
              attribute: 'service.name',
              label: 'Service'
            }, {
              attribute: 'service.port',
              label: 'Port'
            }, {
              attribute: 'references',
              view: Pro.Shared.CveCell.Controller,
              sortable: false
            }, {
              attribute: 'status_html',
              label: 'Status',
              escape: false,
              sortable: false,
              "class": 'status truncate'
            }, {
              attribute: 'vuln.latest_nexpose_result.type',
              label: '<img class="nx-push-icon" title="Not Pushed" src="/assets/icons/nxStatus-header-e4342bb4dad4e3191f516bb82d0f92d73ba70673f968b2067703da20d46bf3df.svg" />',
              escapeLabel: false,
              sortable: false,
              "class": 'nexpose-status',
              view: Pro.Components.PushStatusCell.Controller
            }, {
              attribute: 'comment.data.comment',
              label: 'Comments',
              "class": 'comment truncate',
              view: Pro.Components.CustomNoteCell.View,
              sortable: false
            }
          ];
          actionButtons = [
            {
              label: 'Delete Vulnerabilities',
              "class": 'delete',
              activateOn: 'any',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var controller;
                controller = App.request('vulns:delete', {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs,
                  selectedVisibleCollection: selectedVisibleCollection,
                  tableCollection: tableCollection
                });
                return App.execute("showModal", controller, {
                  modal: {
                    title: 'Are you sure?',
                    description: '',
                    height: 150,
                    width: 550,
                    hideBorder: true
                  },
                  buttons: [
                    {
                      name: 'Cancel',
                      "class": 'close'
                    }, {
                      name: 'OK',
                      "class": 'btn primary'
                    }
                  ]
                });
              },
              containerClass: 'action-button-right-separator'
            }, {
              label: 'Scan',
              "class": 'scan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newScanPath;
                newScanPath = Routes.new_scan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'vuln', newScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Import...',
              "class": 'import',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                }) + '#file';
              }
            }, {
              label: 'Nexpose Scan',
              "class": 'nexpose',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                });
              }
            }, {
              label: 'WebScan',
              "class": 'webscan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newWebScanPath;
                newWebScanPath = Routes.new_webscan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'vuln', newWebScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Modules',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var modulesPath;
                modulesPath = Routes.modules_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'vuln', modulesPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-separator'
            }, {
              label: 'Bruteforce',
              "class": 'brute',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newQuickBruteforcePath;
                newQuickBruteforcePath = Routes.workspace_brute_force_guess_index_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'vuln', newQuickBruteforcePath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Exploit',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newExploitPath;
                newExploitPath = Routes.new_exploit_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'vuln', newExploitPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-right-separator'
            }
          ];
          buttonController = new App.Shared.NexposePush.ButtonController;
          actionButtons.push(buttonController.getButton());
          filterOpts = {
            searchType: 'pro',
            placeHolderText: 'Search Vulns'
          };
          emptyView = App.request('analysis_tab:empty_view', {
            emptyText: "No vulnerabilities are associated with this project"
          });
          _.extend(options, {
            filterOpts: filterOpts,
            enableNexposePushButton: true,
            collection: vulns,
            columns: columns,
            defaultSort: defaultSort,
            actionButtons: actionButtons,
            emptyView: emptyView
          });
          this.analysisTabController = App.request('analysis_tab:component', options);
          this.layout = this.analysisTabController.layout;
          this.setMainView(this.layout);
          if (show) {
            return this.show(this.layout, {
              region: this.region
            });
          }
        };

        Controller.prototype.getPushButtonViewStatus = function() {
          if (this._mainView._currentPushButtonView) {
            return this._mainView._currentPushButtonView.getStatus();
          } else {
            return false;
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview'], function() {
    return this.Pro.module('VulnsApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      Index.NameCellView = (function(_super) {

        __extends(NameCellView, _super);

        function NameCellView() {
          this.template = __bind(this.template, this);
          return NameCellView.__super__.constructor.apply(this, arguments);
        }

        NameCellView.prototype.initialize = function(attribute, idAttribute) {
          var _ref, _ref1;
          this.attribute = attribute;
          this.idAttribute = idAttribute;
          if ((_ref = this.attribute) == null) {
            this.attribute = 'name';
          }
          return (_ref1 = this.idAttribute) != null ? _ref1 : this.idAttribute = 'id';
        };

        NameCellView.prototype.template = function(data) {
          var id, maxLength, text, truncatedText, workspaceVulnsPath;
          maxLength = 75;
          id = data[this.idAttribute];
          workspaceVulnsPath = _.escape(Routes.workspace_vulns_path(WORKSPACE_ID));
          text = _.escapeHTML(_.unescapeHTML(data.name)) || '';
          truncatedText = text.length > maxLength ? text.substring(0, maxLength) + '…' : text;
          return "<a href='" + workspaceVulnsPath + "#vulns/" + id + "'> " + truncatedText + " </a>";
        };

        return NameCellView;

      })(Pro.Views.ItemView);
      return Index.AddressCellView = (function(_super) {

        __extends(AddressCellView, _super);

        function AddressCellView() {
          return AddressCellView.__super__.constructor.apply(this, arguments);
        }

        AddressCellView.prototype.template = function(data) {
          return "<a href='" + (Routes.host_path(data.host_id)) + "'>" + data['host.address'] + "</a>";
        };

        return AddressCellView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview', 'apps/vulns/show/templates/comment_view', 'entities/note'], function($) {
    return this.Pro.module("Components.Comment", function(Comment, App, Backbone, Marionette, $, _) {
      return Comment.View = (function(_super) {

        __extends(View, _super);

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.template = View.prototype.templatePath('vulns/show/comment_view');

        View.prototype.className = 'comment-view';

        View.prototype.ui = {
          comment: 'textarea',
          error: '.error'
        };

        View.prototype.triggers = {
          'mouseout @ui.comment': 'center'
        };

        View.prototype.getComment = function() {
          return this.ui.comment.val();
        };

        View.prototype.onFormSubmit = function() {
          var commentModel, defer,
            _this = this;
          defer = $.Deferred();
          defer.promise();
          commentModel = App.request('new:note:entity', {
            data: {
              comment: this.ui.comment.val()
            },
            workspace_id: WORKSPACE_ID,
            type: this.model.get('type'),
            type_id: this.model.get('type_id')
          });
          commentModel.save({}, {
            success: function(model) {
              _this.model.set('data', {
                comment: model.get('data').comment
              });
              return defer.resolve();
            },
            error: function(model, response) {
              _this.ui.error.html(response.responseJSON.error.data[0]);
              return _this.ui.error.show();
            }
          });
          return defer;
        };

        return View;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/pill/pill_controller', 'lib/components/pill/pill_views', 'css!css/components/pill'], function() {
    return this.Pro.module("Components.VulnAttemptStatusPill", function(VulnAttemptStatusPill, App) {
      return VulnAttemptStatusPill.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          options.color = (function() {
            switch (false) {
              case !options.model.isExploited():
                return 'green';
              case !options.model.isNotExploitable():
                return 'blue';
            }
          })();
          return Controller.__super__.initialize.call(this, options);
        };

        return Controller;

      })(Pro.Components.Pill.Controller);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['/assets/hosts/backbone/views/item_views/vuln_form-1cc7b36421c773badb5827996b6c4a19d59df0e3943ca7e7df6ef280d88f7247.js', 'base_controller', 'apps/vulns/show/show_views', 'entities/vuln', 'lib/shared/cve_cell/cve_cell_controller'], function(VulnForm) {
    return this.Pro.module("VulnsApp.Show", function(Show, App) {
      return Show.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this._buildModel = __bind(this._buildModel, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(opts) {
          var _this = this;
          if (opts == null) {
            opts = {};
          }
          this.model = this._buildModel(opts);
          this.layout = new Show.Layout({
            model: this.model
          });
          this.setMainView(this.layout);
          this.headerView = new Show.Header({
            model: this.model
          });
          this.listenTo(this.headerView, 'vuln:edit', function() {
            return _this._show_vuln_edit_modal({
              hideRefs: true,
              height: 200
            });
          });
          this.listenTo(this.headerView, 'ref:edit', function() {
            return _this._show_vuln_edit_modal({
              hideVuln: true,
              height: 400
            });
          });
          this.listenTo(this.headerView, 'ref:more', function() {
            return _this._show_refs_modal();
          });
          this.listenTo(this.layout, 'show', function() {
            _this._show_tabs();
            return _this._bindPushButtonEvents();
          });
          if (opts.model != null) {
            return this.show(this.layout);
          } else {
            this.model.fetch();
            return this.show(this.layout, {
              loading: {
                loadingType: 'overlay'
              }
            });
          }
        };

        Controller.prototype._buildModel = function(opts) {
          return opts.model || new App.Entities.Vuln(opts);
        };

        Controller.prototype._show_tabs = function() {
          this.tabView = App.request("tabs:component", {
            tabs: [
              {
                name: 'Overview',
                view: Show.OverviewTab,
                model: this.model
              }, {
                name: 'Related Modules',
                view: Show.RelatedModulesTab,
                model: this.model
              }, {
                name: 'Related Hosts',
                view: Show.RelatedHostsTab,
                model: this.model
              }
            ],
            destroy: false
          });
          this.pushButtonsView = new Show.PushButtons({
            model: this.model
          });
          this.show(this.pushButtonsView, {
            region: this.layout.pushButtonsRegion
          });
          this.show(this.headerView, {
            region: this.layout.headerRegion
          });
          return this.show(this.tabView, {
            region: this.layout.contentRegion
          });
        };

        Controller.prototype._bindPushButtonEvents = function() {
          var _this = this;
          this.listenTo(this.pushButtonsView, 'nexpose:push', function() {
            var description, height, view, width;
            if (_this.model.get('markable')) {
              view = new Show.PushExceptionConfirmationView({
                model: _this.model
              });
              description = "You are about to push this vulnerability to Nexpose as an exception. Please select the following:";
              height = 170;
              width = 400;
            } else {
              view = new Show.PushValidationConfirmationView();
              height = 170;
              width = 400;
            }
            return App.execute('showModal', view, {
              modal: {
                title: 'Push To Nexpose',
                description: description,
                width: width
              },
              buttons: [
                {
                  name: 'No',
                  "class": 'close'
                }, {
                  name: 'Yes',
                  "class": 'btn primary'
                }
              ],
              doneCallback: function() {
                return _this.model.fetch();
              }
            });
          });
          return this.listenTo(this.pushButtonsView, 'vuln:not:exploitable', function(checked) {
            if (checked) {
              return _this.model.updateLastVulnStatus('Not Exploitable');
            } else {
              return _this.model.restoreLastVulnStatus();
            }
          });
        };

        Controller.prototype._show_refs_modal = function() {
          var dialogView, moduleDetail;
          moduleDetail = this.model;
          dialogView = new Pro.Shared.CveCell.ModalView({
            model: moduleDetail
          });
          moduleDetail.fetch();
          return App.execute('showModal', dialogView, {
            modal: {
              title: 'References',
              width: 260,
              height: 300
            },
            buttons: [
              {
                name: 'Close',
                "class": 'close'
              }
            ],
            loading: true
          });
        };

        Controller.prototype._show_vuln_edit_modal = function(opts) {
          var config, formView,
            _this = this;
          if (opts == null) {
            opts = {};
          }
          config = {
            action: 'edit',
            id: this.model.get('id'),
            host_id: this.model.get('host').id
          };
          _.extend(config, opts);
          formView = new VulnForm(config);
          return App.execute('showModal', formView, {
            modal: {
              title: 'Vulnerability',
              width: 600,
              height: config.height
            },
            buttons: [
              {
                name: 'Close',
                "class": 'close'
              }, {
                name: 'OK',
                "class": 'btn primary'
              }
            ],
            doneCallback: function() {
              return _this.model.fetch();
            }
          });
        };

        return Controller;

      })(App.Controllers.Application);
    }, VulnForm);
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['lib/utilities/dom/has_overflowed_height', 'base_layout', 'base_view', 'base_itemview', 'apps/vulns/show/templates/show_layout', 'apps/vulns/show/templates/header', 'apps/vulns/show/templates/exploit_button', 'apps/vulns/show/templates/overview_tab', 'apps/vulns/show/templates/description', 'apps/vulns/show/templates/related_modules_tab', 'apps/vulns/show/templates/related_hosts_tab', 'lib/components/filter/filter_controller', 'apps/vulns/show/templates/host', 'apps/vulns/show/templates/platform', 'apps/vulns/show/templates/push_validation_confirmation_view', 'apps/vulns/show/templates/push_exception_confirmation_view', 'apps/vulns/show/templates/push_buttons', 'apps/vulns/show/templates/comment_view', 'apps/vulns/show/components/vuln_attempt_status_pill/vuln_attempt_status_pill_controller', 'entities/vuln_history', 'entities/related_modules', 'entities/related_hosts', 'entities/vuln_history', 'entities/related_modules', 'entities/nexpose/validation', 'entities/nexpose/exception', 'entities/note', 'lib/components/table/table_controller', 'lib/components/pill/pill_controller', 'lib/components/stars/stars_controller', 'lib/components/os/os_controller', 'lib/components/tabs/tabs_controller', 'lib/shared/cve_cell/cve_cell_controller', 'lib/components/tags/index/index_controller', 'lib/concerns/pollable', 'entities/task'], function() {
    return this.Pro.module("VulnsApp.Show", function(Show, App) {
      Show.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('vulns/show/show_layout');

        Layout.prototype.className = 'vuln-show-container';

        Layout.prototype.regions = {
          headerRegion: '.header-region',
          contentRegion: '.tab-content-region',
          pushButtonsRegion: '.push-buttons-region'
        };

        return Layout;

      })(App.Views.Layout);
      Show.Header = (function(_super) {

        __extends(Header, _super);

        function Header() {
          this.onRender = __bind(this.onRender, this);
          return Header.__super__.constructor.apply(this, arguments);
        }

        Header.prototype.template = Header.prototype.templatePath('vulns/show/header');

        Header.prototype.ui = {
          refs: '.refs',
          more: 'a.more',
          vulnEdit: '.vuln-name a.pencil',
          refEdit: '.vuln-refs a.pencil'
        };

        Header.prototype.triggers = {
          'click @ui.vulnEdit': 'vuln:edit',
          'click @ui.refEdit': 'ref:edit',
          'click @ui.more': 'ref:more'
        };

        Header.prototype.modelEvents = {
          'change': 'render'
        };

        Header.prototype.onRender = function() {
          var _this = this;
          return _.defer(function() {
            if (_this.ui.refs.hasOverflowedHeight()) {
              return _this.ui.more.show();
            }
          });
        };

        return Header;

      })(App.Views.ItemView);
      Show.PushButtons = (function(_super) {

        __extends(PushButtons, _super);

        function PushButtons() {
          return PushButtons.__super__.constructor.apply(this, arguments);
        }

        PushButtons.prototype.template = PushButtons.prototype.templatePath('vulns/show/push_buttons');

        PushButtons.prototype.ui = {
          nexposeBtn: 'a.nexpose',
          notExploitable: '.not-exploitable',
          notExploitableCheckBox: '[name="not_exploitable"]'
        };

        PushButtons.prototype.triggers = {
          'click @ui.nexposeBtn': 'nexpose:push'
        };

        PushButtons.prototype.events = {
          'change @ui.notExploitable': '_toggleExploitable'
        };

        PushButtons.prototype.modelEvents = {
          'change:markable': 'render',
          'change:not_exploitable': 'render',
          'change:not_pushable_reason': 'render'
        };

        PushButtons.prototype._toggleExploitable = function() {
          return this.trigger('vuln:not:exploitable', this.ui.notExploitableCheckBox.prop('checked'));
        };

        return PushButtons;

      })(App.Views.ItemView);
      Show.Description = (function(_super) {

        __extends(Description, _super);

        function Description() {
          return Description.__super__.constructor.apply(this, arguments);
        }

        Description.prototype.template = Description.prototype.templatePath('vulns/show/description');

        Description.prototype.defaults = function() {
          return {
            runModuleText: false
          };
        };

        Description.prototype.initialize = function(opts) {
          var config, runModuleText, vuln;
          config = _.defaults(opts, this._getDefaults());
          runModuleText = config.runModuleText, vuln = config.vuln;
          this.model.set('runModuleText', runModuleText);
          return this.model.set('vuln', vuln);
        };

        return Description;

      })(App.Views.ItemView);
      Show.RelatedModulesTab = (function(_super) {

        __extends(RelatedModulesTab, _super);

        function RelatedModulesTab() {
          return RelatedModulesTab.__super__.constructor.apply(this, arguments);
        }

        RelatedModulesTab.prototype.template = RelatedModulesTab.prototype.templatePath('vulns/show/related_modules_tab');

        RelatedModulesTab.prototype.initialize = function(opts) {
          return this.model = opts.model, opts;
        };

        RelatedModulesTab.prototype.regions = {
          relatedModulesRegion: '.related-modules-region'
        };

        RelatedModulesTab.prototype.onShow = function() {
          return this.renderRelatedModulesTable();
        };

        RelatedModulesTab.prototype.renderRelatedModulesTable = function() {
          var collection, columns;
          collection = App.request('relatedModules:entities', {
            workspace_id: WORKSPACE_ID,
            vuln_id: VULN_ID
          });
          columns = [
            {
              label: 'Module Type',
              attribute: 'mtype',
              render: function() {
                return _.escape(_.str.capitalize(this.model.get('mtype')));
              }
            }, {
              label: 'Platform',
              attribute: 'module_icons',
              view: Pro.Components.Os.Controller,
              sortable: false
            }, {
              label: 'Module',
              attribute: 'description',
              view: Show.Description,
              viewOpts: {
                vuln: this.model
              }
            }, {
              label: 'Ranking',
              attribute: 'rating',
              sortAttribute: 'rank',
              view: Pro.Components.Stars.Controller
            }, {
              label: 'References',
              attribute: 'references',
              view: Pro.Shared.CveCell.Controller,
              sortAttribute: 'ref_count'
            }, {
              label: 'Action',
              sortable: false,
              attribute: 'action',
              view: Show.ExploitButton,
              viewOpts: {
                vuln: this.model
              }
            }
          ];
          return App.request("table:component", {
            region: this.relatedModulesRegion,
            "static": false,
            collection: collection,
            perPage: 20,
            columns: columns
          });
        };

        return RelatedModulesTab;

      })(App.Views.Layout);
      Show.ExploitButton = (function(_super) {

        __extends(ExploitButton, _super);

        function ExploitButton() {
          return ExploitButton.__super__.constructor.apply(this, arguments);
        }

        ExploitButton.prototype.template = ExploitButton.prototype.templatePath('vulns/show/exploit_button');

        ExploitButton.prototype.initialize = function(opts) {
          return this.vuln = opts.vuln, opts;
        };

        ExploitButton.prototype.events = {
          'click input': 'redirectToModule'
        };

        ExploitButton.prototype.redirectToModule = function() {
          var target_host, url;
          target_host = this.vuln.get('host').address;
          url = "" + (Routes.new_module_run_path(WORKSPACE_ID)) + "/" + (this.model.get('module')) + "?target_host=" + target_host;
          return window.location.href = url;
        };

        return ExploitButton;

      })(App.Views.ItemView);
      Show.CommentView = (function(_super) {

        __extends(CommentView, _super);

        function CommentView() {
          return CommentView.__super__.constructor.apply(this, arguments);
        }

        CommentView.prototype.template = CommentView.prototype.templatePath('vulns/show/comment_view');

        CommentView.prototype.className = 'comment-view';

        CommentView.prototype.ui = {
          comment: 'textarea',
          error: '.error'
        };

        CommentView.prototype.triggers = {
          'mouseout @ui.comment': 'center'
        };

        CommentView.prototype.getComment = function() {
          return this.ui.comment.val();
        };

        CommentView.prototype.onFormSubmit = function() {
          var commentModel, defer,
            _this = this;
          defer = $.Deferred();
          defer.promise();
          commentModel = App.request('new:note:entity', {
            data: {
              comment: this.ui.comment.val()
            },
            workspace_id: WORKSPACE_ID,
            type: 'Mdm::Vuln',
            type_id: VULN_ID
          });
          commentModel.save({}, {
            success: function(model) {
              return defer.resolve();
            },
            error: function(model, response) {
              _this.ui.error.html(response.responseJSON.error.data[0]);
              return _this.ui.error.show();
            }
          });
          return defer;
        };

        return CommentView;

      })(App.Views.Layout);
      Show.OverviewTab = (function(_super) {

        __extends(OverviewTab, _super);

        function OverviewTab() {
          return OverviewTab.__super__.constructor.apply(this, arguments);
        }

        OverviewTab.prototype.template = OverviewTab.prototype.templatePath('vulns/show/overview_tab');

        OverviewTab.prototype.className = 'foundation overview-tab';

        OverviewTab.prototype.regions = {
          overviewRegion: '.overview-region'
        };

        OverviewTab.prototype.modelEvents = {
          'change:new_vuln_attempt_status': 'refreshTable',
          'change:restore_vuln_attempt_status': 'refreshTable'
        };

        OverviewTab.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          return this.model.set('buttomMoreAssetTag', '<img class="btn more-text" src="/assets/icons/buttom_more-7136ef601f6f896bafce9a49dd2841ecc0be81984871cf677951f03acebb21c9.svg" />');
        };

        OverviewTab.prototype.refreshTable = function(model, value, options) {
          if (value == null) {
            return this.table.refresh();
          }
        };

        OverviewTab.prototype.ui = {
          commentBtn: 'img.btn.more-text',
          commentInput: 'textarea#comments',
          error: '.error'
        };

        OverviewTab.prototype.events = {
          'click @ui.commentBtn': '_commentModal',
          'focusout @ui.commentInput': '_saveComment'
        };

        OverviewTab.prototype._commentModal = function() {
          var commentView, data, model,
            _this = this;
          data = Backbone.Syphon.serialize(this);
          _.extend(data, {
            workspace_id: WORKSPACE_ID,
            type: 'Mdm::Vuln',
            type_id: VULN_ID
          });
          model = App.request('new:note:entity', data);
          commentView = new Show.CommentView({
            model: model
          });
          return App.execute('showModal', commentView, {
            modal: {
              title: 'Comment',
              description: '',
              width: 300
            },
            buttons: [
              {
                name: 'Cancel',
                "class": 'close'
              }, {
                name: 'OK',
                "class": 'btn primary'
              }
            ],
            doneCallback: function() {
              _this.model.set('notes', [
                {
                  comment: commentView.getComment()
                }
              ]);
              return _this._setComment(commentView.getComment());
            }
          });
        };

        OverviewTab.prototype._setComment = function(comment) {
          return this.ui.commentInput.val(comment);
        };

        OverviewTab.prototype._saveComment = function() {
          var commentModel,
            _this = this;
          commentModel = App.request('new:note:entity', {
            data: {
              comment: this.ui.commentInput.val()
            },
            workspace_id: WORKSPACE_ID,
            type: 'Mdm::Vuln',
            type_id: VULN_ID
          });
          return commentModel.save({}, {
            success: function(model) {
              _this.model.set('notes', [
                {
                  comment: model.get('data').comment
                }
              ]);
              _this.ui.error.html();
              return _this.ui.error.hide();
            },
            error: function(model, response) {
              _this.ui.error.html(response.responseJSON.error.data[0]);
              return _this.ui.error.show();
            }
          });
        };

        OverviewTab.prototype.onShow = function() {
          return this.renderOverviewTable();
        };

        OverviewTab.prototype.renderOverviewTable = function() {
          var collection, columns;
          collection = App.request('vulnHistory:entities', {
            workspace_id: WORKSPACE_ID,
            vuln_id: VULN_ID
          });
          columns = [
            {
              label: 'Action',
              attribute: 'action',
              sortable: false
            }, {
              label: 'Description',
              attribute: 'description',
              view: Show.Description,
              viewOpts: {
                runModuleText: true,
                vuln: this.model
              }
            }, {
              label: 'Status',
              attribute: 'status',
              sortable: false,
              view: Pro.Components.VulnAttemptStatusPill.Controller
            }, {
              label: 'User',
              attribute: 'username'
            }, {
              label: 'Time',
              attribute: 'attempted_at',
              sortAttribute: 'vuln_attempts.attempted_at'
            }
          ];
          return this.table = App.request("table:component", {
            region: this.overviewRegion,
            "static": false,
            collection: collection,
            perPage: 20,
            columns: columns,
            filterable: false
          });
        };

        return OverviewTab;

      })(App.Views.Layout);
      Show.Platform = (function(_super) {

        __extends(Platform, _super);

        function Platform() {
          return Platform.__super__.constructor.apply(this, arguments);
        }

        Platform.prototype.template = Platform.prototype.templatePath('vulns/show/platform');

        Platform.prototype.className = 'icon-logo';

        return Platform;

      })(App.Views.ItemView);
      Show.Host = (function(_super) {

        __extends(Host, _super);

        function Host() {
          return Host.__super__.constructor.apply(this, arguments);
        }

        Host.prototype.template = Host.prototype.templatePath('vulns/show/host');

        return Host;

      })(App.Views.ItemView);
      Show.RelatedHostsTab = (function(_super) {

        __extends(RelatedHostsTab, _super);

        function RelatedHostsTab() {
          return RelatedHostsTab.__super__.constructor.apply(this, arguments);
        }

        RelatedHostsTab.prototype.template = RelatedHostsTab.prototype.templatePath('vulns/show/related_hosts_tab');

        RelatedHostsTab.prototype.className = 'foundation related-hosts-tab';

        RelatedHostsTab.prototype.regions = {
          relatedHostsRegion: '.related-hosts-region'
        };

        RelatedHostsTab.prototype.onShow = function() {
          return this.renderRelatedHostsTable();
        };

        RelatedHostsTab.prototype.renderRelatedHostsTable = function() {
          var collection, columns;
          collection = App.request('relatedHosts:entities', {
            workspace_id: WORKSPACE_ID,
            vuln_id: VULN_ID
          });
          columns = [
            {
              label: 'Host IP',
              attribute: 'address',
              view: Show.Host
            }, {
              label: 'Host Name',
              attribute: 'name'
            }, {
              label: 'Platform',
              attribute: 'os_name',
              view: Show.Platform
            }, {
              label: 'Tags',
              attribute: 'tags',
              view: App.request('tags:index:component')
            }, {
              label: 'Vuln Status',
              attribute: 'vuln_attempt_status',
              sortable: false,
              view: Pro.Components.VulnAttemptStatusPill.Controller
            }, {
              label: "Host Status",
              attribute: 'status',
              view: Pro.Components.Pill.Controller
            }
          ];
          return this.table = App.request('table:component', {
            region: this.relatedHostsRegion,
            "static": false,
            collection: collection,
            columns: columns,
            filterOpts: {
              filterValuesEndpoint: Routes.related_hosts_filter_values_workspace_vuln_path(WORKSPACE_ID, VULN_ID),
              helpEndpoint: Routes.search_operators_workspace_vuln_path(WORKSPACE_ID, VULN_ID),
              keys: [
                {
                  label: 'host.address',
                  value: 'address'
                }, {
                  label: 'host.name',
                  value: 'name'
                }, {
                  label: 'host.os_name',
                  value: 'os_name'
                }
              ]
            }
          });
        };

        return RelatedHostsTab;

      })(App.Views.Layout);
      Show.PushExceptionConfirmationView = (function(_super) {

        __extends(PushExceptionConfirmationView, _super);

        function PushExceptionConfirmationView() {
          this.poll = __bind(this.poll, this);
          return PushExceptionConfirmationView.__super__.constructor.apply(this, arguments);
        }

        PushExceptionConfirmationView.include("Pollable");

        PushExceptionConfirmationView.prototype.template = PushExceptionConfirmationView.prototype.templatePath('vulns/show/push_exception_confirmation_view');

        PushExceptionConfirmationView.prototype.className = 'push-exception-confirmation-view';

        PushExceptionConfirmationView.prototype.ui = {
          processing: '.processing',
          errorState: '.error-state',
          message: '.msg',
          datetime: '.datetime',
          form: 'form'
        };

        PushExceptionConfirmationView.prototype.pollInterval = 3000;

        PushExceptionConfirmationView.prototype.initialize = function() {
          var comment, _ref, _ref1;
          comment = (_ref = this.model.get('notes')) != null ? (_ref1 = _ref[0]) != null ? _ref1.comment : void 0 : void 0;
          return this.model = App.request('new:nexpose:exception:entity', {
            vuln_id: VULN_ID,
            workspace_id: WORKSPACE_ID,
            comments: comment
          });
        };

        PushExceptionConfirmationView.prototype.poll = function() {
          var _this = this;
          if (this.task.isCompleted()) {
            this.model.fetch({
              success: function(model, response) {
                if (response[0].sent_to_nexpose) {
                  return _this.formDefer.resolve();
                } else {
                  return _this._setErrorState(response[0].nexpose_response);
                }
              }
            });
            _.defer(this.stopPolling, this.pollInterval);
          }
          return this.task.fetch();
        };

        PushExceptionConfirmationView.prototype._setErrorState = function(msg) {
          this.ui.form.removeClass('disabled');
          this.ui.processing.hide();
          this.ui.errorState.html(msg);
          this.ui.errorState.show();
          return this.trigger("btn:enable:modal", "Yes");
        };

        PushExceptionConfirmationView.prototype._hideErrorState = function() {
          this.ui.errorState.html();
          return this.ui.errorState.hide();
        };

        PushExceptionConfirmationView.prototype.onShow = function() {
          return this.ui.datetime.datepicker({
            minDate: 1
          });
        };

        PushExceptionConfirmationView.prototype.onBeforeDestroy = function() {
          return this.ui.datetime.datepicker('destroy');
        };

        PushExceptionConfirmationView.prototype.onFormSubmit = function() {
          var formData,
            _this = this;
          this.formDefer = $.Deferred();
          this.formDefer.promise();
          this._hideErrorState();
          this.trigger("btn:disable:modal", "Yes");
          this.ui.form.addClass('disabled');
          formData = Backbone.Syphon.serialize(this);
          this.model.save(formData, {
            success: function(model, response) {
              _this.ui.processing.show();
              _this.task = new App.Entities.Task({
                id: response.task_id,
                workspace_id: WORKSPACE_ID
              });
              return _this.startPolling();
            },
            error: function(model, response) {
              return _this._setErrorState();
            }
          });
          return this.formDefer;
        };

        return PushExceptionConfirmationView;

      })(App.Views.ItemView);
      return Show.PushValidationConfirmationView = (function(_super) {

        __extends(PushValidationConfirmationView, _super);

        function PushValidationConfirmationView() {
          this.poll = __bind(this.poll, this);
          return PushValidationConfirmationView.__super__.constructor.apply(this, arguments);
        }

        PushValidationConfirmationView.include("Pollable");

        PushValidationConfirmationView.prototype.template = PushValidationConfirmationView.prototype.templatePath('vulns/show/push_validation_confirmation_view');

        PushValidationConfirmationView.prototype.className = 'push-validation-confirmation-view';

        PushValidationConfirmationView.prototype.ui = {
          processing: '.processing',
          errorState: '.error-state',
          message: '.msg'
        };

        PushValidationConfirmationView.prototype.pollInterval = 3000;

        PushValidationConfirmationView.prototype.initialize = function() {
          return this.model = App.request('new:nexpose:validation:entity', {
            vuln_id: VULN_ID,
            workspace_id: WORKSPACE_ID
          });
        };

        PushValidationConfirmationView.prototype.poll = function() {
          var _this = this;
          if (this.task.isCompleted()) {
            this.model.fetch({
              success: function(model, response) {
                if (response[0].sent_to_nexpose) {
                  return _this.formDefer.resolve();
                } else {
                  return _this._setErrorState(response[0].nexpose_response);
                }
              }
            });
            _.defer(this.stopPolling, this.pollInterval);
          }
          return this.task.fetch();
        };

        PushValidationConfirmationView.prototype.onFormSubmit = function() {
          var _this = this;
          this.formDefer = $.Deferred();
          this.formDefer.promise();
          this.trigger("btn:disable:modal", "Yes");
          this.model.save({}, {
            success: function(model, response) {
              _this.ui.processing.show();
              _this._hideErrorState();
              _this.task = new App.Entities.Task({
                id: response.task_id,
                workspace_id: WORKSPACE_ID
              });
              return _this.startPolling();
            },
            error: function(model, response) {
              return _this._setErrorState();
            }
          });
          return this.formDefer;
        };

        PushValidationConfirmationView.prototype._setErrorState = function(msg) {
          this.ui.processing.hide();
          this.ui.errorState.html(msg);
          this.ui.errorState.show();
          return this.trigger("btn:enable:modal", "Yes");
        };

        PushValidationConfirmationView.prototype._hideErrorState = function() {
          this.ui.errorState.html();
          return this.ui.errorState.hide();
        };

        return PushValidationConfirmationView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/comment_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form>\n  <textarea>');
      
        __out.push(__sanitize(this.comment != null ? this.comment : this.data.comment));
      
        __out.push('</textarea>\n  <div class="error"></div>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/description"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var param;
      
        __out.push('<div class="module-description">\n  ');
      
        if (this.runModuleText) {
          __out.push('\n    Run Module\n  ');
        }
      
        __out.push('\n\n  ');
      
        param = "?target_host=" + (this.vuln.get('host').address);
      
        __out.push('\n\n  <a href=\'');
      
        __out.push(__sanitize("" + (Routes.new_module_run_path(WORKSPACE_ID)) + "/" + this.module + param));
      
        __out.push('\'>\n    ');
      
        __out.push(__sanitize(this.description));
      
        __out.push('\n  </a>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/exploit_button"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<span class="btn">\n   <input class="exploit" name="commit" onsubmit="javascript:void(0)" type="submit" value="Exploit">\n</span>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/header"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="banner-region" class="foundation">\n  <div id="single-vuln-header">\n    <div class="row">\n      <div class="columns small-6 vuln-name">\n        <h5>\n          Name\n          <a class="pencil" href="javascript:void(0)"></a>\n        </h5>\n        <div class=\'strong\'>\n          ');
      
        __out.push(__sanitize(this.name));
      
        __out.push('\n        </div>\n      </div>\n\n      <div class="columns small-3 host">\n        <h5>\n          Host\n        </h5>\n\n        <div>\n          <a href=\'/hosts/');
      
        __out.push(__sanitize(this.host.id));
      
        __out.push('\'>');
      
        __out.push(__sanitize(this.host.address));
      
        __out.push('</a>\n          ');
      
        if (this.service) {
          __out.push('\n            <span class=\'strong\'>(');
          __out.push(__sanitize(this.service.name));
          __out.push(')</span>\n          ');
        }
      
        __out.push('\n        </div>\n\n        <div>\n          <span class=\'light\'>');
      
        __out.push(__sanitize(this.host.name));
      
        __out.push('</span>\n        </div>\n\n        <ul class="os-icons">\n          ');
      
        if (this.host.is_vm_guest) {
          __out.push('\n            <li><span class="vm-badge">VM</span></li>\n          ');
        }
      
        __out.push('\n          <li>');
      
        __out.push(this.host.os_icon_html);
      
        __out.push('</li>\n        </ul>\n\n      </div>\n\n      <div class="columns small-3 vuln-refs">\n        <h5>\n          References\n          <a class="pencil" href="javascript:void(0)"></a>\n        </h5>\n\n        <div class=\'refs\'>\n          ');
      
        __out.push('\n          ');
      
        __out.push('\n          ');
      
        __out.push(this.refs.map(function(ref) {
          return ref.html_link;
        }).join(''));
      
        __out.push('\n          <a class=\'more\'>More…</a>\n        </div>\n\n      </div>\n\n     </div>\n  </div>\n\n</div>\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/host"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<a href="');
      
        __out.push(__sanitize(Routes.host_path(this.id)));
      
        __out.push('">');
      
        __out.push(__sanitize(this.address));
      
        __out.push('</a>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/overview_tab"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var _ref;
      
        __out.push('<form>\n  <div>\n    <label for="comments">Comments</label>\n  </div>\n  <div>\n\n    <textarea id="comments" type="text" name="comment">');
      
        __out.push(__sanitize((_ref = this.notes[0]) != null ? _ref.comment : void 0));
      
        __out.push('</textarea>\n    ');
      
        __out.push(this.buttomMoreAssetTag);
      
        __out.push('\n    <div class="error" style="display:none;"></div>\n  </div>\n  <h5>Attempts History</h5>\n  <div class="overview-region"></div>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/platform"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<span class="');
      
        __out.push(__sanitize(this.icon));
      
        __out.push('"></span>\n<span class="platform">');
      
        __out.push(__sanitize("" + (this.os_name || 'Unknown OS') + " " + (this.os_sp || '')));
      
        __out.push('</span>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/push_buttons"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="push-options">\n  <div class="not-exploitable" ');
      
        if (!this.markable) {
          __out.push(__sanitize("title='" + this.not_pushable_reason + "'"));
        }
      
        __out.push(' >\n    <input id ="not_exploitable" name="not_exploitable" class="');
      
        if (!this.markable) {
          __out.push(__sanitize('disabled'));
        }
      
        __out.push('" type="checkbox" ');
      
        if (this.not_exploitable) {
          __out.push(__sanitize("checked"));
        }
      
        __out.push('>\n    <label for="not_exploitable" class="');
      
        if (!this.markable) {
          __out.push(__sanitize('disabled'));
        }
      
        __out.push('">Mark as Not Exploitable</label>\n  </div>\n  <div class="create-exception" ');
      
        if (!this.pushable) {
          __out.push(__sanitize("title='" + this.not_pushable_reason + "'"));
        }
      
        __out.push('>\n    <span class="btn ');
      
        if (!this.pushable) {
          __out.push(__sanitize('disabled'));
        }
      
        __out.push('"><a href="javascript:void(0)" class="nexpose">Push to Nexpose</a></span>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/push_exception_confirmation_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var key, val, _ref;
      
        __out.push('<div class="msg">\n  <form>\n    <div class="foundation">\n      <div class="row">\n        <div class="columns large-6">\n          <label>Reason</label>\n        </div>\n\n        <div class="columns large-6">\n          <select name="reason">\n            ');
      
        _ref = this.reasons;
        for (key in _ref) {
          val = _ref[key];
          __out.push('\n            <option value="');
          __out.push(__sanitize(key));
          __out.push('">');
          __out.push(__sanitize(val));
          __out.push('</option>\n            ');
        }
      
        __out.push('\n          </select>\n        </div>\n      </div>\n\n      <div class="row">\n        <div class="columns large-6">\n          <label>Expiration Date</label>\n        </div>\n\n        <div class="columns large-6">\n          <input class=\'datetime\' type="text" name="expiration_date" readonly=""readonly" />\n        </div>\n      </div>\n\n      <div class="row">\n        <div class="columns large-12">\n          <div>\n            <label>\n              <input type="checkbox" name="approve" />\n              Automatically Approve\n            </label>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </form>\n</div>\n\n<div class="error-state"></div>\n\n<div class="processing ellipsis">\n  Processing\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/push_validation_confirmation_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="msg">\n  You are about to push this vulnerability to Nexpose as a validated vulnerability. Are you sure?\n</div>\n\n<div class="error-state">\n  Nexpose push failed. Please try again.\n</div>\n\n<div class="processing ellipsis">\n  Processing\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/related_hosts_tab"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('\n<div class="row">\n  <div class="large-9 columns">\n  </div>\n</div>\n\n<div class="related-hosts-region"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/related_modules_tab"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="related-modules-region"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/apps/vulns/show/templates/show_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="header-region">\n</div>\n\n<div class="content-region">\n  <div class="push-buttons-region"></div>\n\n  <div class="tab-content-region"></div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['css!css/vulns', 'apps/hosts/hosts_app', 'lib/utilities/navigation', 'apps/vulns/delete/delete_controller', 'lib/shared/nexpose_push/nexpose_push_controllers', 'lib/components/window_slider/window_slider_controller'], function() {
    return this.Pro.module('VulnsApp', function(VulnsApp, App) {
      var API,
        _this = this;
      VulnsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index",
          "vulns": "index",
          "vulns/:id": "show"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function() {
          var loading, _ref,
            _this = this;
          if (((_ref = window.gon) != null ? _ref.route : void 0) === 'show') {
            this.show(window.gon.id);
            return false;
          }
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/vulns/index/index_controller'], function() {
            var indexController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return indexController = new VulnsApp.Index.Controller;
          });
        },
        show: function(id) {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          window.VULN_ID = id;
          return initProRequire(['apps/vulns/show/show_controller'], function(ShowController) {
            var controller;
            loading = false;
            App.execute('loadingOverlay:hide');
            return controller = new VulnsApp.Show.Controller({
              id: id != null ? id : window.VULN_ID,
              workspace_id: window.WORKSPACE_ID
            });
          });
        },
        "delete": function(options) {
          return new VulnsApp.Delete.Controller(options);
        }
      };
      App.addInitializer(function() {
        return new VulnsApp.Router({
          controller: API
        });
      });
      App.addRegions({
        mainRegion: "#vulns-main-region"
      });
      return App.reqres.setHandler('vulns:delete', function(options) {
        if (options == null) {
          options = {};
        }
        return API["delete"](options);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/web_vulns/web_vulns_app', 'css!css/components/pill', 'apps/web_vulns/index/index_views', 'entities/web_vuln', 'lib/components/analysis_tab/analysis_tab_controller'], function() {
    return this.Pro.module("WebVulnsApp.Index", function(Index, App, Backbone, Marionette, $, _) {
      return Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.getPushButtonViewStatus = __bind(this.getPushButtonViewStatus, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var actionButtons, columns, defaultSort, emptyView, filterOpts, show, webvulns,
            _this = this;
          _.defaults(options, {
            show: true
          });
          show = options.show;
          webvulns = App.request('web_vulns:entities', {
            fetch: false
          });
          defaultSort = 'risk';
          columns = [
            {
              attribute: 'risk',
              label: 'Risk',
              "class": 'truncate'
            }, {
              attribute: 'category',
              label: 'Category',
              "class": 'truncate'
            }, {
              attribute: 'name',
              label: 'Name',
              "class": 'truncate'
            }, {
              attribute: 'blame',
              label: 'Blame',
              "class": 'truncate'
            }, {
              attribute: 'host.name',
              idattribute: 'host.id',
              label: 'Host Name',
              escape: false,
              sortable: false
            }, {
              attribute: 'url',
              label: 'URL',
              escape: false,
              sortable: false
            }, {
              attribute: 'pname',
              label: 'Parameter',
              defaultDirection: 'asc'
            }, {
              attribute: 'proof',
              label: 'Proof',
              sortable: false
            }
          ];
          actionButtons = [
            {
              label: 'Scan',
              "class": 'scan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newScanPath;
                newScanPath = Routes.new_scan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'web_vuln', newScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Import...',
              "class": 'import',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                }) + '#file';
              }
            }, {
              label: 'Nexpose Scan',
              "class": 'nexpose',
              click: function() {
                return window.location = Routes.new_workspace_import_path({
                  workspace_id: WORKSPACE_ID
                });
              }
            }, {
              label: 'WebScan',
              "class": 'webscan',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newWebScanPath;
                newWebScanPath = Routes.new_webscan_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'web_vuln', newWebScanPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Modules',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var modulesPath;
                modulesPath = Routes.modules_path({
                  workspace_id: WORKSPACE_ID
                });
                return App.execute('analysis_tab:post', 'web_vuln', modulesPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-separator'
            }, {
              label: 'Bruteforce',
              "class": 'brute',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newQuickBruteforcePath;
                newQuickBruteforcePath = Routes.workspace_brute_force_guess_index_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'web_vuln', newQuickBruteforcePath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              }
            }, {
              label: 'Exploit',
              "class": 'exploit',
              click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                var newExploitPath;
                newExploitPath = Routes.new_exploit_path({
                  workspace_id: WORKSPACE_ID
                }) + '#quick';
                return App.execute('analysis_tab:post', 'web_vuln', newExploitPath, {
                  selectAllState: selectAllState,
                  selectedIDs: selectedIDs,
                  deselectedIDs: deselectedIDs
                });
              },
              containerClass: 'action-button-right-separator'
            }
          ];
          filterOpts = {
            searchType: 'pro',
            placeHolderText: 'Search Web Vulns'
          };
          emptyView = App.request('analysis_tab:empty_view', {
            emptyText: "No vulnerabilities are associated with this project"
          });
          _.extend(options, {
            filterOpts: filterOpts,
            collection: webvulns,
            columns: columns,
            defaultSort: defaultSort,
            actionButtons: actionButtons,
            emptyView: emptyView
          });
          this.analysisTabController = App.request('analysis_tab:component', options);
          this.layout = this.analysisTabController.layout;
          this.setMainView(this.layout);
          if (show) {
            return this.show(this.layout, {
              region: this.region
            });
          }
        };

        Controller.prototype.getPushButtonViewStatus = function() {
          if (this._mainView._currentPushButtonView) {
            return this._mainView._currentPushButtonView.getStatus();
          } else {
            return false;
          }
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview'], function() {
    return this.Pro.module('WebVulnsApp.Index', function(Index, App, Backbone, Marionette, $, _) {
      return Index.AddressCellView = (function(_super) {

        __extends(AddressCellView, _super);

        function AddressCellView() {
          return AddressCellView.__super__.constructor.apply(this, arguments);
        }

        AddressCellView.prototype.template = function(data) {
          return "<a href='" + (Routes.host_path(data.host_id)) + "'>" + data['host.address'] + "</a>";
        };

        return AddressCellView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['css!css/vulns', 'apps/hosts/hosts_app', 'lib/utilities/navigation', 'lib/components/window_slider/window_slider_controller'], function() {
    return this.Pro.module('WebVulnsApp', function(WebVulnsApp, App) {
      var API,
        _this = this;
      WebVulnsApp.Router = (function(_super) {

        __extends(Router, _super);

        function Router() {
          return Router.__super__.constructor.apply(this, arguments);
        }

        Router.prototype.appRoutes = {
          "": "index",
          "webvulns": "index",
          "webvulns/:id": "show"
        };

        return Router;

      })(Marionette.AppRouter);
      API = {
        index: function() {
          var loading,
            _this = this;
          loading = true;
          _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
          return initProRequire(['apps/web_vulns/index/index_controller'], function() {
            var indexController;
            loading = false;
            App.execute('loadingOverlay:hide');
            return indexController = new WebVulnsApp.Index.Controller;
          });
        },
        show: function(id) {
          var loading,
            _this = this;
          loading = true;
          return _.delay((function() {
            if (loading) {
              return App.execute('loadingOverlay:show');
            }
          }), 50);
        }
      };
      App.addInitializer(function() {
        return new WebVulnsApp.Router({
          controller: API
        });
      });
      return App.addRegions({
        mainRegion: "#web-vulns-main-region"
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/input_generator'], function() {
    return this.Pro.module("Entities", function(Entities, App, Backbone, Marionette, jQuery, _) {
      var API;
      Entities.BruteForceGuessForm = (function(_super) {

        __extends(BruteForceGuessForm, _super);

        function BruteForceGuessForm() {
          return BruteForceGuessForm.__super__.constructor.apply(this, arguments);
        }

        BruteForceGuessForm.include("InputGenerator");

        BruteForceGuessForm.prototype.url = function() {
          return Routes.workspace_brute_force_guess_runs_path(WORKSPACE_ID);
        };

        BruteForceGuessForm.prototype.mutators = {
          overall_timeout: function() {
            var hash, hour, minutes, seconds, _ref, _ref1;
            hash = ((_ref = this.get('quick_bruteforce')) != null ? _ref.options : void 0) || ((_ref1 = this.get('bruteforce')) != null ? _ref1.quick_bruteforce.options : void 0);
            hour = Math.floor(hash.overall_timeout.hour);
            minutes = Math.floor(hash.overall_timeout.minutes);
            seconds = Math.floor(hash.overall_timeout.seconds);
            return hour * 60 * 60 + minutes * 60 + seconds;
          }
        };

        return BruteForceGuessForm;

      })(Entities.Model);
      API = {
        newBruteForceGuessForm: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.BruteForceGuessForm(attributes);
        }
      };
      return App.reqres.setHandler("new:brute_force_guess_form:entity", function(attributes) {
        if (attributes == null) {
          attributes = {};
        }
        return API.newBruteForceGuessForm(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.BruteForceReuseOptions = (function(_super) {

        __extends(BruteForceReuseOptions, _super);

        function BruteForceReuseOptions() {
          return BruteForceReuseOptions.__super__.constructor.apply(this, arguments);
        }

        BruteForceReuseOptions.prototype.defaults = {
          service_seconds: 60 * 15,
          overall_hours: 4,
          overall_minutes: 0,
          overall_seconds: 0,
          limit: false,
          run_type: 'reuse'
        };

        BruteForceReuseOptions.prototype.mutators = {
          overall_timeout: function() {
            return Math.floor(this.get('overall_hours')) * 60 * 60 + Math.floor(this.get('overall_minutes')) * 60 + Math.floor(this.get('overall_seconds'));
          },
          service_timeout: function() {
            return Math.floor(this.get('service_seconds'));
          },
          stop_on_success: function() {
            return !!this.get('limit');
          }
        };

        return BruteForceReuseOptions;

      })(App.Entities.Model);
      API = {
        newBruteForceReuseOptions: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.BruteForceReuseOptions(attributes);
        }
      };
      return App.reqres.setHandler('new:brute_force_reuse_options:entity', function(attributes) {
        if (attributes == null) {
          attributes = {};
        }
        return API.newBruteForceReuseOptions(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App, Backbone, Marionette, jQuery, _) {
      var API;
      Entities.Button = (function(_super) {

        __extends(Button, _super);

        function Button() {
          return Button.__super__.constructor.apply(this, arguments);
        }

        Button.prototype.defaults = {
          buttonType: "button"
        };

        return Button;

      })(Entities.Model);
      Entities.ButtonCollection = (function(_super) {

        __extends(ButtonCollection, _super);

        function ButtonCollection() {
          return ButtonCollection.__super__.constructor.apply(this, arguments);
        }

        ButtonCollection.prototype.model = Entities.Button;

        return ButtonCollection;

      })(Entities.Collection);
      API = {
        getFormButtons: function(buttons) {
          var buttonCollection;
          buttonCollection = new Entities.ButtonCollection([]);
          buttonCollection.reset(buttons);
          return buttonCollection;
        }
      };
      return App.reqres.setHandler("buttons:entities", function(buttons) {
        if (buttons == null) {
          buttons = {};
        }
        return API.getFormButtons(buttons);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model'], function() {
    return this.Pro.module("Entities", function(Entities, App, Backbone, Marionette, jQuery, _) {
      var API;
      Entities.Modal = (function(_super) {

        __extends(Modal, _super);

        function Modal() {
          return Modal.__super__.constructor.apply(this, arguments);
        }

        Modal.prototype.defaults = {
          title: "Default Title",
          description: ""
        };

        return Modal;

      })(Entities.Model);
      API = {
        getModal: function(options) {
          if (options == null) {
            options = {};
          }
          return new Entities.Modal(options);
        }
      };
      return App.reqres.setHandler("component:modal:entities", function(options) {
        if (options == null) {
          options = {};
        }
        return API.getModal(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.BruteForceGuess", function(BruteForceGuess, App) {
      var API;
      BruteForceGuess.MutationOptions = (function(_super) {

        __extends(MutationOptions, _super);

        function MutationOptions() {
          return MutationOptions.__super__.constructor.apply(this, arguments);
        }

        return MutationOptions;

      })(App.Entities.Model);
      API = {
        getMutationOptionsSettings: function(opts) {
          return new BruteForceGuess.MutationOptions(opts);
        }
      };
      return App.reqres.setHandler("mutationOptions:entities", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getMutationOptionsSettings(opts);
      });
    });
  });

}).call(this);
(function() {



}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.BruteForceGuess", function(BruteForceGuess, App) {
      var API;
      BruteForceGuess.Target = (function(_super) {

        __extends(Target, _super);

        function Target() {
          return Target.__super__.constructor.apply(this, arguments);
        }

        Target.prototype.defaults = {
          SERVICES: ["AFP", "DB2", "FTP", "HTTP", "HTTPS", "MSSQL", "MySQL", "POP3", "Postgres", "SMB", "SNMP", "SSH", "SSH_PUBKEY", "Telnet", "VNC", "WinRM"]
        };

        return Target;

      })(App.Entities.Model);
      API = {
        getTarget: function(opts) {
          return new BruteForceGuess.Target(opts);
        }
      };
      return App.reqres.setHandler("bruteForceGuess:target:entities", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getTarget(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.BruteForceRun = (function(_super) {

        __extends(BruteForceRun, _super);

        function BruteForceRun() {
          return BruteForceRun.__super__.constructor.apply(this, arguments);
        }

        BruteForceRun.prototype.defaults = {
          workspace_id: null,
          host_ids: [],
          credential_ids: [],
          config: {}
        };

        BruteForceRun.prototype.url = function() {
          return "/workspaces/" + (this.get('workspace_id')) + "/brute_force/runs.json";
        };

        return BruteForceRun;

      })(App.Entities.Model);
      API = {
        newBruteForceRun: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.BruteForceRun(attributes);
        }
      };
      return App.reqres.setHandler("new:brute_force_run:entity", function(attributes) {
        if (attributes == null) {
          attributes = {};
        }
        return API.newBruteForceRun(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/fetch_ids'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Cred = (function(_super) {

        __extends(Cred, _super);

        function Cred() {
          return Cred.__super__.constructor.apply(this, arguments);
        }

        Cred.Realms = {
          "ORACLE_SYSTEM_IDENTIFIER": "Oracle System Identifier",
          "WILDCARD": "*",
          "ALL": ["Active Directory Domain", "DB2 Database", "Oracle System Identifier", "PostgreSQL Database", "RSYNC Module", "*"],
          "DB2_DATABASE": "DB2 Database",
          "ACTIVE_DIRECTORY_DOMAIN": "Active Directory Domain",
          "POSTGRESQL_DATABASE": "PostgreSQL Database",
          "RSYNC_MODULE": "RSYNC Module",
          "SHORT_NAMES": {
            "domain": "Active Directory Domain",
            "db2db": "DB2 Database",
            "sid": "Oracle System Identifier",
            "pgdb": "PostgreSQL Database",
            "rsync": "RSYNC Module",
            "wildcard": "*"
          }
        };

        Cred.Origins = {
          ALL: ["Cracked password", "Import", "Manual", "Service", "Session"]
        };

        Cred.Types = {
          Nil: 'none',
          SSHKey: 'ssh',
          PasswordHash: 'hash',
          NTLMHash: 'ntlm',
          Password: 'plaintext'
        };

        Cred.prototype.defaults = {
          workspace_id: WORKSPACE_ID,
          realm: {
            key: "None"
          },
          "public": {
            username: ''
          },
          "private": {
            type: 'none'
          },
          "import": {
            password_type: "plaintext",
            type: 'csv'
          },
          tags: [],
          taggingModalHelpContent: "<p>\n  A tag is an identifier that you can use to group together credentials.\n  You apply tags so that you can easily search for credentials.\n  For example, when you search for a particular tag, any login that\n  is labelled with that tag will appear in your search results.\n</p>\n<p>\n  To apply a tag, start typing the name of the tag you want to use in the\n  Tag field. As you type in the search box, Metasploit automatically predicts\n  the tags that may be similar to the ones you are searching for. If the tag\n  does not exist, Metasploit creates and adds it to the project.\n</p>"
        };

        Cred.prototype.url = function() {
          if (this.id != null) {
            return "/workspaces/" + (this.get('workspace_id')) + "/metasploit/credential/cores/" + this.id + ".json";
          } else {
            return "/workspaces/" + (this.get('workspace_id')) + "/metasploit/credential/cores.json";
          }
        };

        Cred.prototype.tagUrl = function() {
          return "/workspaces/" + (this.get('workspace_id')) + "/metasploit/credential/cores/quick_multi_tag.json";
        };

        Cred.prototype.isTruncated = function() {
          var _ref, _ref1;
          return ((_ref = this.get('private.data')) != null ? _ref.length : void 0) > ((_ref1 = this.get('private.data_truncated')) != null ? _ref1.length : void 0);
        };

        Cred.prototype.isSSHKey = function() {
          return this.get('private.type') === this.constructor.Types.SSHKey;
        };

        Cred.prototype.clone = function() {
          return new Entities.Cred({
            "public": {
              username: this.get('public.username')
            },
            "private": {
              data: this.get('private.data'),
              type: this.get('private.type')
            },
            realm: {
              key: this.get('realm.key'),
              value: this.get('realm.value')
            }
          });
        };

        Cred.prototype.fetchTags = function(successCallback) {
          return this.fetch({
            success: successCallback,
            url: "/workspaces/" + (this.get('workspace_id')) + "/metasploit/credential/cores/" + this.id + "/tags.json"
          });
        };

        Cred.prototype.removeTag = function(opts) {
          var success, tagId;
          if (opts == null) {
            opts = {};
          }
          tagId = opts.tagId, success = opts.success;
          return this.save({
            tagId: tagId
          }, {
            success: success,
            url: "/workspaces/" + (this.get('workspace_id')) + "/metasploit/credential/cores/" + this.id + "/remove_tag.json"
          });
        };

        Cred.prototype.parse = function(response) {
          if (response["private"]) {
            response['private.data'] = response["private"].data;
            response['private.data_truncated'] = response["private"].data_truncated;
            response['private.type'] = response["private"].type;
            response['private.full_fingerprint'] = response["private"].full_fingerprint;
          }
          return response;
        };

        return Cred;

      })(App.Entities.Model);
      Entities.CredsCollection = (function(_super) {
        var ScopingError;

        __extends(CredsCollection, _super);

        function CredsCollection() {
          this.url = __bind(this.url, this);
          return CredsCollection.__super__.constructor.apply(this, arguments);
        }

        (ScopingError = (function() {

          function ScopingError() {}

          return ScopingError;

        })()) < Error;

        CredsCollection.include('FetchIDs');

        CredsCollection.prototype.model = Entities.Cred;

        CredsCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          return _.defaults(this, {
            workspace_id: WORKSPACE_ID
          });
        };

        CredsCollection.prototype.url = function() {
          return "/workspaces/" + this.workspace_id + "/metasploit/credential/cores.json";
        };

        return CredsCollection;

      })(App.Entities.Collection);
      Entities.CredsGroup = (function(_super) {

        __extends(CredsGroup, _super);

        function CredsGroup() {
          return CredsGroup.__super__.constructor.apply(this, arguments);
        }

        return CredsGroup;

      })(App.Entities.Model);
      Entities.HostOriginatingCredsCollection = (function(_super) {

        __extends(HostOriginatingCredsCollection, _super);

        function HostOriginatingCredsCollection() {
          this.url = __bind(this.url, this);
          return HostOriginatingCredsCollection.__super__.constructor.apply(this, arguments);
        }

        HostOriginatingCredsCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          return this.host_id = opts.host_id || HOST_ID;
        };

        HostOriginatingCredsCollection.prototype.url = function() {
          return "/hosts/" + this.host_id + "/metasploit/credential/cores/originating.json";
        };

        return HostOriginatingCredsCollection;

      })(Entities.CredsCollection);
      API = {
        getCreds: function(workspace_id) {
          var creds;
          creds = new Entities.CredsCollection([], {
            workspace_id: workspace_id
          });
          return creds;
        },
        getOriginatingCredsForHost: function(host_id) {
          var creds;
          creds = new Entities.HostOriginatingCredsCollection([], {
            host_id: host_id
          });
          return creds;
        },
        getCred: function(id) {
          var cred;
          cred = new Entities.Cred({
            id: id
          });
          cred.fetch();
          return cred;
        },
        newCred: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Cred(attributes);
        }
      };
      App.reqres.setHandler("creds:entities", function(opts) {
        var definedOpts, optionNames, wid;
        if (opts == null) {
          opts = {};
        }
        optionNames = ['provide_access_to_host', 'originating_from_host', 'workspace_id'];
        definedOpts = _.reject(optionNames, function(name) {
          return _.isUndefined(opts[name]);
        });
        if (definedOpts.length > 1) {
          throw new Entities.CredsCollection.ScopingError("Only one of the following arguments may be set: " + JSON.stringify(definedOpts));
        }
        if (opts.originating_from_host != null) {
          return API.getOriginatingCredsForHost(opts.originating_from_host);
        } else {
          wid = opts.workspace_id ? opts.workspace_id : WORKSPACE_ID;
          return API.getCreds(wid);
        }
      });
      App.reqres.setHandler("cred:entity", function(id) {
        return API.getCred(id);
      });
      return App.reqres.setHandler("new:cred:entity", function(attributes) {
        if (attributes == null) {
          attributes = {};
        }
        return API.newCred(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_model', 'base_collection'], function($) {
    return this.Pro.module('Entities', function(Entities, App) {
      Entities.CredGroup = (function(_super) {

        __extends(CredGroup, _super);

        function CredGroup() {
          this.groupURL = __bind(this.groupURL, this);

          this.coresURL = __bind(this.coresURL, this);

          this.url = __bind(this.url, this);

          this.loadCredIDs = __bind(this.loadCredIDs, this);

          this.initialize = __bind(this.initialize, this);
          return CredGroup.__super__.constructor.apply(this, arguments);
        }

        CredGroup.STATES = ['new', 'loading', 'loaded'];

        CredGroup.prototype.defaults = {
          name: '',
          id: null,
          creds: null,
          cred_ids: null,
          workspace_id: null,
          working: false,
          expanded: false,
          state: 'new'
        };

        CredGroup.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          return this.set('creds', new App.Entities.CredsCollection([]));
        };

        CredGroup.prototype.loadCredIDs = function() {
          var _this = this;
          this.set({
            state: 'loading'
          });
          return $.getJSON(this.coresURL()).done(function(ids) {
            _this.set({
              state: 'loaded',
              cred_ids: ids
            });
            return _this.trigger('creds:loaded', {
              ids: ids
            });
          }).error(function() {
            return _.delay(_this.loadCredIDs, 3000);
          });
        };

        CredGroup.prototype.url = function() {
          return "" + (this.groupURL()) + ".json";
        };

        CredGroup.prototype.coresURL = function() {
          return "/workspaces/" + (this.get('workspace_id')) + "/metasploit/credential/cores.json?ids_only=1&group_id=" + this.id;
        };

        CredGroup.prototype.groupURL = function() {
          return "/workspaces/" + (this.get('workspace_id')) + "/brute_force/reuse/groups/" + this.id;
        };

        return CredGroup;

      })(App.Entities.Model);
      return Entities.CredGroupsCollection = (function(_super) {

        __extends(CredGroupsCollection, _super);

        function CredGroupsCollection() {
          this.url = __bind(this.url, this);
          return CredGroupsCollection.__super__.constructor.apply(this, arguments);
        }

        CredGroupsCollection.prototype.model = Entities.CredGroup;

        CredGroupsCollection.prototype.workspace_id = null;

        CredGroupsCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          return this.workspace_id = opts.workspace_id;
        };

        CredGroupsCollection.prototype.add = function(model, opts) {
          if (opts == null) {
            opts = {};
          }
          if (!this.hasId(model.id)) {
            return CredGroupsCollection.__super__.add.apply(this, arguments);
          }
        };

        CredGroupsCollection.prototype.hasId = function(id) {
          id = Math.floor(id);
          return _.any(this.models, function(m) {
            return id === m.id;
          });
        };

        CredGroupsCollection.prototype.url = function() {
          return "/workspaces/" + this.workspace_id + "/brute_force/reuse/groups.json";
        };

        return CredGroupsCollection;

      })(App.Entities.Collection);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Host = (function(_super) {

        __extends(Host, _super);

        function Host() {
          return Host.__super__.constructor.apply(this, arguments);
        }

        Host.prototype.url = function() {
          return "/hosts/" + this.id + ".json";
        };

        return Host;

      })(App.Entities.Model);
      Entities.HostsCollection = (function(_super) {

        __extends(HostsCollection, _super);

        function HostsCollection() {
          return HostsCollection.__super__.constructor.apply(this, arguments);
        }

        HostsCollection.prototype.initialize = function(models, opts) {
          this.workspace_id = opts.workspace_id;
          return this.url = function() {
            var baseUrl;
            baseUrl = "/workspaces/" + this.workspace_id + "/hosts";
            if (opts.limited) {
              return "" + baseUrl + "/json_limited";
            } else {
              return "" + baseUrl + "/json";
            }
          };
        };

        HostsCollection.prototype.model = Entities.Host;

        return HostsCollection;

      })(App.Entities.Collection);
      API = {
        getHosts: function(model, opts) {
          var hosts;
          hosts = new Entities.HostsCollection(model, opts);
          return hosts;
        },
        getHostsLimited: function(model, opts) {
          opts.limited = true;
          return API.getHosts(model, opts);
        }
      };
      App.reqres.setHandler("hosts:entities", function(model, opts) {
        if (opts == null) {
          opts = {};
        }
        if (opts.workspace_id == null) {
          throw new Error("missing workspace_id");
        }
        return API.getHosts(model, opts);
      });
      return App.reqres.setHandler("hosts:entities:limited", function(model, opts) {
        if (opts == null) {
          opts = {};
        }
        if (opts.workspace_id == null) {
          throw new Error("missing workspace_id");
        }
        return API.getHostsLimited(model, opts);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_model', 'base_collection'], function($) {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Login = (function(_super) {

        __extends(Login, _super);

        function Login() {
          this._workspaceId = __bind(this._workspaceId, this);

          this._validateAuthenticationURL = __bind(this._validateAuthenticationURL, this);

          this._rootURL = __bind(this._rootURL, this);

          this.sessions = __bind(this.sessions, this);

          this.attemptSession = __bind(this.attemptSession, this);

          this.validateAuthentication = __bind(this.validateAuthentication, this);

          this.url = __bind(this.url, this);
          return Login.__super__.constructor.apply(this, arguments);
        }

        Login.Status = {
          "DENIED_ACCESS": "Denied Access",
          "DISABLED": "Disabled",
          "INCORRECT": "Incorrect",
          "ALL": ["Denied Access", "Disabled", "Incorrect", "Invalid Public Part", "Locked Out", "No Auth Required", "Successful", "Unable to Connect", "Untried"],
          "INVALID_PUBLIC_PART": "Invalid Public Part",
          "LOCKED_OUT": "Locked Out",
          "NO_AUTH_REQUIRED": "No Auth Required",
          "SUCCESSFUL": "Successful",
          "UNABLE_TO_CONNECT": "Unable to Connect",
          "UNTRIED": "Untried"
        };

        Login.Types = {
          Nil: 'none',
          SSHKey: 'ssh',
          PasswordHash: 'hash',
          NTLMHash: 'ntlm',
          Password: 'plaintext'
        };

        Login.prototype.defaults = {
          workspace_id: null,
          core_id: null,
          tags: [],
          attempting_login: false,
          authentication_task: null,
          taggingModalHelpContent: "<p>\n  A tag is an identifier that you can use to group together logins.\n  You apply tags so that you can easily search for logins.\n  For example, when you search for a particular tag, any login that\n  is labelled with that tag will appear in your search results.\n</p>\n<p>\n  To apply a tag, start typing the name of the tag you want to use in the\n  Tag field. As you type in the search box, Metasploit automatically predicts\n  the tags that may be similar to the ones you are searching for. If the tag\n  does not exist, Metasploit creates and adds it to the project.\n</p>"
        };

        Login.prototype.url = function(opts) {
          var _ref;
          if (opts == null) {
            opts = {};
          }
          if ((_ref = opts.extension) == null) {
            opts.extension = '.json';
          }
          if (this.id != null) {
            return "" + (this._rootURL()) + "/" + this.id + opts.extension;
          } else {
            return "" + (this._rootURL()) + opts.extension;
          }
        };

        Login.prototype.validateAuthentication = function() {
          var deferred,
            _this = this;
          deferred = $.Deferred();
          $.ajax({
            method: 'post',
            url: this._validateAuthenticationURL()
          }).done(function(response) {
            if (response.task_id != null) {
              return initProRequire(['entities/task'], function() {
                var task;
                task = new App.Entities.Task({
                  workspace_id: _this._workspaceId(),
                  id: response.task_id
                });
                return deferred.resolve(task);
              });
            }
          });
          return deferred;
        };

        Login.prototype.attemptSession = function(payloadModel) {
          var deferred,
            _this = this;
          deferred = $.Deferred();
          $.ajax({
            method: 'post',
            url: Routes.attempt_session_workspace_metasploit_credential_login_path(this._workspaceId(), this.get('id')) + ".json",
            data: payloadModel.toJSON()
          }).done(function(response) {
            if (response.task_id != null) {
              return initProRequire(['entities/task'], function() {
                var task;
                task = new App.Entities.Task({
                  workspace_id: _this._workspaceId(),
                  id: response.task_id
                });
                return deferred.resolve(task);
              });
            }
          });
          return deferred;
        };

        Login.prototype.sessions = function() {
          return $.ajax({
            method: 'get',
            url: Routes.get_session_workspace_metasploit_credential_login_path(WORKSPACE_ID, this.get('id')) + '.json'
          });
        };

        Login.prototype._rootURL = function() {
          return "/workspaces/" + (this._workspaceId()) + "/metasploit/credential/logins";
        };

        Login.prototype._validateAuthenticationURL = function() {
          return "" + (this._rootURL()) + "/" + this.id + "/validate_authentication.json";
        };

        Login.prototype._workspaceId = function() {
          return this.get('service.host.workspace_id') || window.WORKSPACE_ID;
        };

        Login.prototype.fetchTags = function(successCallback) {
          return this.fetch({
            success: successCallback,
            url: "/workspaces/" + (this.get('workspace_id')) + "/metasploit/credential/cores/" + (this.get('core_id')) + "/logins/" + this.id + "/tags.json"
          });
        };

        Login.prototype.removeTag = function(opts) {
          var success, tagId;
          if (opts == null) {
            opts = {};
          }
          tagId = opts.tagId, success = opts.success;
          return this.save({
            tagId: tagId
          }, {
            success: success,
            url: "/workspaces/" + (this.get('workspace_id')) + "/metasploit/credential/cores/" + (this.get('core_id')) + "/logins/" + this.id + "/remove_tag.json"
          });
        };

        Login.prototype.isTruncated = function() {
          var _ref, _ref1;
          return ((_ref = this.get('core.private.data')) != null ? _ref.length : void 0) > ((_ref1 = this.get('core.private.data_truncated')) != null ? _ref1.length : void 0);
        };

        Login.prototype.isSSHKey = function() {
          return this.get('core.private.type') === this.constructor.Types.SSHKey;
        };

        return Login;

      })(App.Entities.Model);
      Entities.LoginsCollection = (function(_super) {

        __extends(LoginsCollection, _super);

        function LoginsCollection() {
          return LoginsCollection.__super__.constructor.apply(this, arguments);
        }

        LoginsCollection.prototype.initialize = function(models, _arg) {
          this.core_id = _arg.core_id, this.workspace_id = _arg.workspace_id;
          return this.url = "/workspaces/" + this.workspace_id + "/metasploit/credential/cores/" + this.core_id + "/logins";
        };

        LoginsCollection.prototype.rebind = function() {
          return this.on('change:access_level', this.recalculateAccessLevels, this);
        };

        LoginsCollection.prototype.model = Entities.Login;

        LoginsCollection.prototype.recalculateAccessLevels = function() {
          var oldLevels;
          oldLevels = this.accessLevels;
          this.accessLevels = _(this.models).map(function(m) {
            return m.get('access_level');
          }).uniq().reject(function(m) {
            return _.contains(['admin', 'read only'], m != null ? typeof m.toLowerCase === "function" ? m.toLowerCase() : void 0 : void 0);
          }).sort();
          if (!_.isEmpty(_.difference(this.accessLevels, oldLevels))) {
            this.trigger('levelsChanged', this.accessLevels);
          }
          return this.accessLevels;
        };

        return LoginsCollection;

      })(App.Entities.Collection);
      Entities.HostAccessingLoginsCollection = (function(_super) {

        __extends(HostAccessingLoginsCollection, _super);

        function HostAccessingLoginsCollection() {
          this.url = __bind(this.url, this);
          return HostAccessingLoginsCollection.__super__.constructor.apply(this, arguments);
        }

        HostAccessingLoginsCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          return this.host_id = opts.host_id || HOST_ID;
        };

        HostAccessingLoginsCollection.prototype.url = function() {
          return "/hosts/" + this.host_id + "/metasploit/credential/logins/accessing.json";
        };

        return HostAccessingLoginsCollection;

      })(Entities.LoginsCollection);
      API = {
        getLogins: function(opts) {
          if (opts == null) {
            opts = {};
          }
          return new Entities.LoginsCollection([], opts);
        },
        getAccessingLoginsForHost: function(host_id) {
          return new Entities.HostAccessingLoginsCollection([], {
            host_id: host_id
          });
        },
        getLogin: function(id) {
          return new Entities.Login({
            id: id
          });
        },
        newLogin: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Login(attributes);
        }
      };
      App.reqres.setHandler("logins:entities", function(opts) {
        var definedOpts, optionNames;
        if (opts == null) {
          opts = {};
        }
        optionNames = ['provide_access_to_host', 'workspace_id'];
        definedOpts = _.reject(optionNames, function(name) {
          return _.isUndefined(opts[name]);
        });
        if (definedOpts.length > 1) {
          throw new Entities.EntityCollection.ScopingError("Only one of the following arguments may be set: " + JSON.stringify(definedOpts));
        }
        if (opts.provide_access_to_host != null) {
          return API.getAccessingLoginsForHost(opts.provide_access_to_host);
        } else {
          return API.getLogins(opts);
        }
      });
      App.reqres.setHandler("logins:entity", function(id) {
        return API.getLogin(id);
      });
      return App.reqres.setHandler("new:login:entity", function(attributes) {
        return API.newLogin(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Loot = (function(_super) {

        __extends(Loot, _super);

        function Loot() {
          return Loot.__super__.constructor.apply(this, arguments);
        }

        return Loot;

      })(App.Entities.Model);
      Entities.LootCollection = (function(_super) {

        __extends(LootCollection, _super);

        function LootCollection() {
          return LootCollection.__super__.constructor.apply(this, arguments);
        }

        LootCollection.prototype.initialize = function(models, _arg) {
          this.host_id = _arg.host_id, this.index = _arg.index;
          if (this.index) {
            return this.url = Routes.workspace_loots_path(WORKSPACE_ID);
          } else {
            return this.url = "/hosts/" + this.host_id + "/show_loots/json";
          }
        };

        LootCollection.prototype.model = Entities.Loot;

        return LootCollection;

      })(App.Entities.Collection);
      API = {
        getLoots: function(opts) {
          if (opts == null) {
            opts = {};
          }
          return new Entities.LootCollection([], opts);
        },
        getLoot: function(id) {
          return new Entities.Loot({
            id: id
          });
        },
        newLoot: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Loot(attributes);
        }
      };
      App.reqres.setHandler("loots:entities", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getLoots(opts);
      });
      App.reqres.setHandler("loots:entity", function(id) {
        return API.getLoot(id);
      });
      return App.reqres.setHandler("new:loot:entity", function(attributes) {
        return API.newLoot(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_model', 'base_collection'], function($) {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.ModuleDetail = (function(_super) {

        __extends(ModuleDetail, _super);

        function ModuleDetail() {
          this.url = __bind(this.url, this);
          return ModuleDetail.__super__.constructor.apply(this, arguments);
        }

        ModuleDetail.prototype.refsOnly = false;

        ModuleDetail.prototype.defaults = {
          workspace_id: WORKSPACE_ID,
          refsOnly: ModuleDetail.refsOnly
        };

        ModuleDetail.prototype.url = function() {
          return Routes.workspace_module_detail_path(this.get('workspace_id'), this.get('id'));
        };

        return ModuleDetail;

      })(App.Entities.Model);
      API = {
        getModuleDetail: function(opts) {
          var moduleDetail;
          moduleDetail = new Entities.ModuleDetail(opts);
          return moduleDetail;
        }
      };
      return App.reqres.setHandler("module:detail:entity", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getModuleDetail(opts);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.Nexpose", function(Nexpose, App) {
      var API;
      Nexpose.Console = (function(_super) {

        __extends(Console, _super);

        function Console() {
          this.destroy = __bind(this.destroy, this);
          return Console.__super__.constructor.apply(this, arguments);
        }

        Console.prototype.url = '/nexpose_consoles.json';

        Console.prototype.destroy = function(opts) {
          if (opts == null) {
            opts = {};
          }
          _.extend(opts, {
            url: '/nexpose_consoles/destroy.json',
            data: 'id=' + this.id
          });
          return Console.__super__.destroy.call(this, opts);
        };

        return Console;

      })(App.Entities.Model);
      API = {
        newConsole: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Nexpose.Console(attributes);
        }
      };
      return App.reqres.setHandler("new:nexpose:console:entity", function(attributes) {
        return API.newConsole(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.Nexpose", function(Nexpose, App) {
      var API;
      Nexpose.Exception = (function(_super) {

        __extends(Exception, _super);

        function Exception() {
          this.urlRoot = __bind(this.urlRoot, this);
          return Exception.__super__.constructor.apply(this, arguments);
        }

        Exception.REASON = {
          "false_positive": "False Positive",
          "compensating_control": "Compensating Control",
          "acceptable_risk": "Acceptable Risk",
          "acceptible_use": "Acceptable Use",
          "other": "Other"
        };

        Exception.prototype.defaults = {
          reasons: {
            "false_positive": "False Positive",
            "compensating_control": "Compensating Control",
            "acceptable_risk": "Acceptable Risk",
            "acceptible_use": "Acceptable Use",
            "other": "Other"
          },
          reasonsJSON: '{"false_positive":"False Positive","compensating_control":"Compensating Control","acceptable_risk":"Acceptable Risk","acceptible_use":"Acceptable Use","other":"Other"}'
        };

        Exception.prototype.mutators = {
          reasons: function() {
            return JSON.parse(this.get('reasonsJSON'));
          }
        };

        Exception.prototype.urlRoot = function() {
          return Routes.workspace_nexpose_result_exceptions_path(this.get('workspace_id'));
        };

        return Exception;

      })(App.Entities.Model);
      API = {
        getException: function(id) {
          return new Nexpose.Exception({
            id: id
          });
        },
        newException: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Nexpose.Exception(attributes);
        }
      };
      App.reqres.setHandler("nexpose:exception:entity", function(id) {
        return API.getException(id);
      });
      return App.reqres.setHandler("new:nexpose:exception:entity", function(attributes) {
        return API.newException(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/input_generator'], function() {
    return this.Pro.module("Entities.Nexpose", function(Nexpose, App) {
      var API;
      Nexpose.FileImport = (function(_super) {

        __extends(FileImport, _super);

        function FileImport() {
          return FileImport.__super__.constructor.apply(this, arguments);
        }

        FileImport.include("InputGenerator");

        FileImport.prototype.urlRoot = function() {
          return Routes.start_import_path(WORKSPACE_ID);
        };

        FileImport.prototype.validateModel = function(opts) {
          var config;
          if (opts == null) {
            opts = {};
          }
          config = _.defaults(opts, {
            no_files: false,
            validate_file_path: true
          });
          opts = _.extend(opts, {
            url: Routes.validate_import_path(WORKSPACE_ID)
          });
          return this.save({
            no_files: config.no_files,
            validate_file_path: config.validate_file_path
          }, opts);
        };

        return FileImport;

      })(App.Entities.Model);
      API = {
        getFileImport: function(opts) {
          if (opts == null) {
            opts = {};
          }
          return new Nexpose.FileImport(opts);
        }
      };
      return App.reqres.setHandler("nexpose:fileImport:entity", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getFileImport(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.Nexpose", function(Nexpose, App) {
      var API;
      Nexpose.Import = (function(_super) {

        __extends(Import, _super);

        function Import() {
          return Import.__super__.constructor.apply(this, arguments);
        }

        Import.prototype.url = '/nexpose_consoles.json';

        return Import;

      })(App.Entities.Model);
      API = {
        newImport: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Nexpose.Import(attributes);
        }
      };
      return App.reqres.setHandler("new:nexpose:import:entity", function(attributes) {
        return API.newImport(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.Nexpose", function(Nexpose, App) {
      var API;
      Nexpose.ImportRun = (function(_super) {

        __extends(ImportRun, _super);

        function ImportRun() {
          this.isFinished = __bind(this.isFinished, this);

          this.isReadyToImport = __bind(this.isReadyToImport, this);

          this.isNotYetStarted = __bind(this.isNotYetStarted, this);
          return ImportRun.__super__.constructor.apply(this, arguments);
        }

        ImportRun.prototype.urlRoot = function() {
          return Routes.workspace_nexpose_data_import_runs_path(WORKSPACE_ID);
        };

        ImportRun.prototype.isNotYetStarted = function() {
          return this.get('state') === 'not_yet_started';
        };

        ImportRun.prototype.isReadyToImport = function() {
          return this.get('state') === 'ready_to_import';
        };

        ImportRun.prototype.isFinished = function() {
          return this.get('state') === 'finished';
        };

        return ImportRun;

      })(App.Entities.Model);
      API = {
        getImportRun: function(opts) {
          var sites;
          if (opts == null) {
            opts = {};
          }
          sites = new Nexpose.ImportRun(opts);
          return sites;
        }
      };
      return App.reqres.setHandler("nexpose:importRun:entity", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getImportRun(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/input_generator'], function() {
    return this.Pro.module("Entities.Nexpose", function(Nexpose, App) {
      var API;
      Nexpose.ScanAndImport = (function(_super) {

        __extends(ScanAndImport, _super);

        function ScanAndImport() {
          return ScanAndImport.__super__.constructor.apply(this, arguments);
        }

        ScanAndImport.include("InputGenerator");

        ScanAndImport.prototype.urlRoot = function() {
          return Routes.start_scan_and_import_path(WORKSPACE_ID);
        };

        ScanAndImport.prototype.validateModel = function(opts) {
          opts = _.extend(opts, {
            url: Routes.validate_scan_and_import_path(WORKSPACE_ID)
          });
          return this.save({}, opts);
        };

        ScanAndImport.prototype.isScanAndImport = function() {
          return !(this.get('sites') != null);
        };

        ScanAndImport.prototype.isSiteImport = function() {
          return this.get('sites') != null;
        };

        return ScanAndImport;

      })(App.Entities.Model);
      API = {
        getScanAndImport: function(opts) {
          if (opts == null) {
            opts = {};
          }
          return new Nexpose.ScanAndImport(opts);
        }
      };
      return App.reqres.setHandler("nexpose:scanAndImport:entity", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getScanAndImport(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/fetch_ids'], function() {
    return this.Pro.module("Entities.Nexpose", function(Nexpose, App) {
      var API;
      Nexpose.Site = (function(_super) {

        __extends(Site, _super);

        function Site() {
          return Site.__super__.constructor.apply(this, arguments);
        }

        Site.prototype.url = function() {
          return Routes.workspace_nexpose_data_sites_path(WORKSPACE_ID);
        };

        return Site;

      })(App.Entities.Model);
      Nexpose.SiteCollection = (function(_super) {

        __extends(SiteCollection, _super);

        function SiteCollection() {
          return SiteCollection.__super__.constructor.apply(this, arguments);
        }

        SiteCollection.include('FetchIDs');

        SiteCollection.prototype.initialize = function(models, opts) {
          return _.extend(this, opts);
        };

        SiteCollection.prototype.model = Nexpose.Site;

        SiteCollection.prototype.url = function() {
          var root;
          root = Routes.workspace_nexpose_data_sites_path(WORKSPACE_ID);
          if (this.nexpose_import_run_id != null) {
            root = root + ("?nexpose_import_run_id=" + this.nexpose_import_run_id);
          }
          return root;
        };

        return SiteCollection;

      })(App.Entities.Collection);
      API = {
        getSites: function(models, opts) {
          var sites;
          if (opts == null) {
            opts = {};
          }
          sites = new Nexpose.SiteCollection(models, opts);
          return sites;
        }
      };
      return App.reqres.setHandler("nexpose:sites:entities", function(models, opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getSites(models, opts);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.Nexpose", function(Nexpose, App) {
      var API;
      Nexpose.Validation = (function(_super) {

        __extends(Validation, _super);

        function Validation() {
          this.urlRoot = __bind(this.urlRoot, this);
          return Validation.__super__.constructor.apply(this, arguments);
        }

        Validation.prototype.urlRoot = function() {
          return Routes.workspace_nexpose_result_validations_path(this.get('workspace_id'));
        };

        return Validation;

      })(App.Entities.Model);
      API = {
        getValidation: function(id) {
          return new Nexpose.Validation({
            id: id
          });
        },
        newValidation: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Nexpose.Validation(attributes);
        }
      };
      App.reqres.setHandler("nexpose:validation:entity", function(id) {
        return API.getValidation(id);
      });
      return App.reqres.setHandler("new:nexpose:validation:entity", function(attributes) {
        return API.newValidation(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Note = (function(_super) {

        __extends(Note, _super);

        function Note() {
          this.url = __bind(this.url, this);
          return Note.__super__.constructor.apply(this, arguments);
        }

        Note.prototype.url = function() {
          return Routes.workspace_notes_path(this.get('workspace_id'));
        };

        return Note;

      })(App.Entities.Model);
      Entities.NoteCollection = (function(_super) {

        __extends(NoteCollection, _super);

        function NoteCollection() {
          this.url = __bind(this.url, this);
          return NoteCollection.__super__.constructor.apply(this, arguments);
        }

        NoteCollection.prototype.url = function() {
          return Routes.workspace_notes_path(WORKSPACE_ID);
        };

        NoteCollection.prototype.model = Entities.Note;

        return NoteCollection;

      })(App.Entities.Collection);
      API = {
        getNotes: function(opts) {
          if (opts == null) {
            opts = {};
          }
          return new Entities.NoteCollection([], opts);
        },
        getNote: function(id) {
          return new Entities.Note({
            id: id
          });
        },
        newNote: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Note(attributes);
        }
      };
      App.reqres.setHandler("note:entity", function(id) {
        return API.getNote(id);
      });
      App.reqres.setHandler("notes:entities", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getNotes(opts);
      });
      return App.reqres.setHandler("new:note:entity", function(attributes) {
        return API.newNote(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Origin = (function(_super) {

        __extends(Origin, _super);

        function Origin() {
          return Origin.__super__.constructor.apply(this, arguments);
        }

        return Origin;

      })(App.Entities.Model);
      API = {
        getOrigin: function(id, url) {
          var origin;
          origin = new Entities.Origin({
            id: id
          });
          origin.url = url;
          return origin;
        },
        newOrigin: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Origin(attributes);
        }
      };
      App.reqres.setHandler("origin:entity", function(id, url) {
        return API.getOrigin(id, url);
      });
      return App.reqres.setHandler("new:origin:entity", function(attributes) {
        return API.newOrigin(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/fetch_ids', 'lib/concerns/entities/vuln_attempt_statuses'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.RelatedHosts = (function(_super) {

        __extends(RelatedHosts, _super);

        function RelatedHosts() {
          return RelatedHosts.__super__.constructor.apply(this, arguments);
        }

        RelatedHosts.include('VulnAttemptStatuses');

        RelatedHosts.prototype.defaults = {};

        RelatedHosts.prototype.fetchTags = function(successCallback) {
          return this.fetch({
            success: successCallback,
            url: Routes.host_tags_path(this.id)
          });
        };

        return RelatedHosts;

      })(App.Entities.Model);
      Entities.RelatedHostsCollection = (function(_super) {

        __extends(RelatedHostsCollection, _super);

        function RelatedHostsCollection() {
          this.url = __bind(this.url, this);
          return RelatedHostsCollection.__super__.constructor.apply(this, arguments);
        }

        RelatedHostsCollection.prototype.model = Entities.RelatedHosts;

        RelatedHostsCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          this.workspace_id = opts.workspace_id || WORKSPACE_ID;
          return this.vuln_id = opts.vuln_id || VULN_ID;
        };

        RelatedHostsCollection.prototype.url = function() {
          return Routes.related_hosts_workspace_vuln_path(this.workspace_id, this.vuln_id);
        };

        return RelatedHostsCollection;

      })(App.Entities.Collection);
      API = {
        getRelatedHosts: function(workspace_id, vuln_id) {
          return new Entities.RelatedHostsCollection([], {
            workspace_id: workspace_id,
            vuln_id: vuln_id
          });
        }
      };
      return App.reqres.setHandler("relatedHosts:entities", function(opts) {
        var vid, wid;
        if (opts == null) {
          opts = {};
        }
        wid = opts.workspace_id ? opts.workspace_id : WORKSPACE_ID;
        vid = opts.vuln_id ? opts.vuln_id : VULN_ID;
        return API.getRelatedHosts(wid);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/fetch_ids'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.RelatedModules = (function(_super) {

        __extends(RelatedModules, _super);

        function RelatedModules() {
          return RelatedModules.__super__.constructor.apply(this, arguments);
        }

        return RelatedModules;

      })(App.Entities.Model);
      Entities.WorkspaceRelatedModules = (function(_super) {

        __extends(WorkspaceRelatedModules, _super);

        function WorkspaceRelatedModules() {
          return WorkspaceRelatedModules.__super__.constructor.apply(this, arguments);
        }

        return WorkspaceRelatedModules;

      })(App.Entities.Model);
      ({
        defaults: {}
      });
      Entities.RelatedModulesCollection = (function(_super) {

        __extends(RelatedModulesCollection, _super);

        function RelatedModulesCollection() {
          this.url = __bind(this.url, this);
          return RelatedModulesCollection.__super__.constructor.apply(this, arguments);
        }

        RelatedModulesCollection.prototype.model = Entities.RelatedModules;

        RelatedModulesCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          this.workspace_id = opts.workspace_id || WORKSPACE_ID;
          return this.vuln_id = opts.vuln_id || VULN_ID;
        };

        RelatedModulesCollection.prototype.url = function() {
          return Routes.related_modules_workspace_vuln_path(this.workspace_id, this.vuln_id);
        };

        return RelatedModulesCollection;

      })(App.Entities.Collection);
      Entities.WorkspaceRelatedModulesCollection = (function(_super) {

        __extends(WorkspaceRelatedModulesCollection, _super);

        function WorkspaceRelatedModulesCollection() {
          this.url = __bind(this.url, this);
          return WorkspaceRelatedModulesCollection.__super__.constructor.apply(this, arguments);
        }

        WorkspaceRelatedModulesCollection.prototype.model = Entities.WorkspaceRelatedModules;

        WorkspaceRelatedModulesCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          return this.workspace_id = opts.workspace_id || WORKSPACE_ID;
        };

        WorkspaceRelatedModulesCollection.prototype.url = function() {
          return Routes.workspace_related_modules_path(this.workspace_id);
        };

        return WorkspaceRelatedModulesCollection;

      })(App.Entities.Collection);
      API = {
        getRelatedModules: function(workspace_id, vuln_id) {
          return new Entities.RelatedModulesCollection([], {
            workspace_id: workspace_id,
            vuln_id: vuln_id
          });
        },
        getWorkspaceRelatedModules: function(workspace_id) {
          return new Entities.WorkspaceRelatedModulesCollection([], {
            workspace_id: workspace_id
          });
        }
      };
      App.reqres.setHandler("relatedModules:entities", function(opts) {
        var vid, wid;
        if (opts == null) {
          opts = {};
        }
        wid = opts.workspace_id ? opts.workspace_id : WORKSPACE_ID;
        vid = opts.vuln_id ? opts.vuln_id : VULN_ID;
        return API.getRelatedModules(wid);
      });
      return App.reqres.setHandler("workspaceRelatedModules:entities", function(opts) {
        var wid;
        if (opts == null) {
          opts = {};
        }
        wid = opts.workspace_id ? opts.workspace_id : WORKSPACE_ID;
        return API.getWorkspaceRelatedModules(wid);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Report = (function(_super) {

        __extends(Report, _super);

        function Report() {
          return Report.__super__.constructor.apply(this, arguments);
        }

        return Report;

      })(App.Entities.Model);
      Entities.ReportCollection = (function(_super) {

        __extends(ReportCollection, _super);

        function ReportCollection() {
          return ReportCollection.__super__.constructor.apply(this, arguments);
        }

        ReportCollection.prototype.model = Entities.Report;

        return ReportCollection;

      })(App.Entities.Collection);
      API = {
        getReports: function() {
          var reports;
          reports = new Entities.ReportsCollection;
          reports.fetch({
            reset: true
          });
          return reports;
        },
        getReport: function(id) {
          var report;
          report = new Entities.Report({
            id: id
          });
          report.fetch();
          return report;
        },
        newReport: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Report(attributes);
        }
      };
      App.reqres.setHandler("reports:entities", function() {
        return API.getReports;
      });
      App.reqres.setHandler("reports:entity", function(id) {
        return API.getReport(id);
      });
      return App.reqres.setHandler("new:reports:entity", function(attributes) {
        return API.newReport(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.ReportArtifact = (function(_super) {

        __extends(ReportArtifact, _super);

        function ReportArtifact() {
          return ReportArtifact.__super__.constructor.apply(this, arguments);
        }

        ReportArtifact.prototype.regenerating = function() {
          return this.get('status') === 'regenerating';
        };

        return ReportArtifact;

      })(App.Entities.Model);
      Entities.ReportArtifactsCollection = (function(_super) {

        __extends(ReportArtifactsCollection, _super);

        function ReportArtifactsCollection() {
          return ReportArtifactsCollection.__super__.constructor.apply(this, arguments);
        }

        ReportArtifactsCollection.prototype.model = Entities.ReportArtifact;

        ReportArtifactsCollection.prototype.comparator = function(artifact) {
          return artifact.get('file_format');
        };

        ReportArtifactsCollection.prototype.formats = function() {
          return _.collect(this.models, function(artifact) {
            return artifact.get('file_format');
          });
        };

        ReportArtifactsCollection.prototype.url = gon.report_artifacts_path;

        return ReportArtifactsCollection;

      })(App.Entities.Collection);
      API = {
        getReportArtifacts: function() {
          var reportArtifacts;
          reportArtifacts = new Entities.ReportArtifactsCollection;
          reportArtifacts.fetch({
            reset: true
          });
          return reportArtifacts;
        },
        getReportArtifact: function(id) {
          var reportArtifact;
          reportArtifact = new Entities.ReportArtifact({
            id: id
          });
          reportArtifact.fetch();
          return reportArtifact;
        },
        newReportArtifact: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.ReportArtifact(attributes);
        },
        newReportArtifacts: function(entities) {
          if (entities == null) {
            entities = [];
          }
          return new Entities.ReportArtifactsCollection(entities);
        }
      };
      App.reqres.setHandler("report_artifacts:entities", function() {
        return API.getReportArtifacts;
      });
      App.reqres.setHandler("report_artifacts:entity", function(id) {
        return API.getReportArtifact(id);
      });
      App.reqres.setHandler("new:report_artifact:entity", function(attributes) {
        return API.newReportArtifact(attributes);
      });
      return App.reqres.setHandler("new:report_artifacts:entities", function(entities) {
        return API.newReportArtifacts(entities);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      Entities.RunStat = (function(_super) {

        __extends(RunStat, _super);

        function RunStat() {
          this.set = __bind(this.set, this);
          return RunStat.__super__.constructor.apply(this, arguments);
        }

        RunStat.prototype.defaults = {
          task_id: null,
          name: null,
          data: null,
          id: null
        };

        RunStat.prototype.set = function(key, val, opts) {
          if (key === 'name') {
            val = _.str.underscored(val);
          } else if (key instanceof Object && (key.name != null)) {
            this.set('name', key.name, opts);
            delete key.name;
          }
          return RunStat.__super__.set.apply(this, arguments);
        };

        return RunStat;

      })(App.Entities.Model);
      Entities.RunStatsCollection = (function(_super) {

        __extends(RunStatsCollection, _super);

        function RunStatsCollection() {
          this.findByName = __bind(this.findByName, this);

          this.initialize = __bind(this.initialize, this);
          return RunStatsCollection.__super__.constructor.apply(this, arguments);
        }

        RunStatsCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          return this.task = opts.task;
        };

        RunStatsCollection.prototype.findByName = function(name) {
          name = _.str.underscored(name.toString());
          return _.find(this.models, function(m) {
            return m.get('name') === name;
          });
        };

        return RunStatsCollection;

      })(App.Entities.Collection);
      Entities.StatDisplay = (function(_super) {

        __extends(StatDisplay, _super);

        function StatDisplay() {
          this.collectionURL = __bind(this.collectionURL, this);

          this.percentageStroke = __bind(this.percentageStroke, this);

          this.stroke = __bind(this.stroke, this);

          this.bgColor = __bind(this.bgColor, this);

          this.color = __bind(this.color, this);

          this.shouldShowPieChart = __bind(this.shouldShowPieChart, this);

          this.isPercentage = __bind(this.isPercentage, this);

          this.initialize = __bind(this.initialize, this);
          return StatDisplay.__super__.constructor.apply(this, arguments);
        }

        StatDisplay.prototype.defaults = function() {
          return {
            schema: {},
            run_stats: null,
            numStat: null,
            totalStat: null,
            clickable: true,
            selected: false,
            table: null,
            title: null,
            task: null
          };
        };

        StatDisplay.prototype.initialize = function() {
          this.set('numStat', this.get('run_stats').findByName(this.get('schema').num));
          if (this.isPercentage()) {
            this.set('totalStat', this.get('run_stats').findByName(this.get('schema').total));
          }
          if (this.get('schema').clickable != null) {
            this.set('clickable', this.get('schema').clickable);
          }
          return this.set('title', this.get('schema').title || _.str.humanize(this.get('numStat').get('name')));
        };

        StatDisplay.prototype.isPercentage = function() {
          return this.get('schema').type === 'percentage';
        };

        StatDisplay.prototype.shouldShowPieChart = function() {
          return !(this.get('schema').pie === false);
        };

        StatDisplay.prototype.color = function() {
          return this.get('schema').color || '#2b2b2b';
        };

        StatDisplay.prototype.bgColor = function() {
          return this.get('schema').bg_color || 'white';
        };

        StatDisplay.prototype.stroke = function() {
          return this.get('schema').stroke || '#c5c5c5';
        };

        StatDisplay.prototype.percentageStroke = function() {
          return this.get('schema').percentage_stroke || '#ea5709';
        };

        StatDisplay.prototype.collectionURL = function(task) {
          return ("/workspaces/" + (task.get('workspace_id')) + "/tasks/" + (task.get('id')) + "/") + ("stats/" + (_.str.underscored(this.get('title'))));
        };

        return StatDisplay;

      })(App.Entities.Model);
      return Entities.StatDisplaysCollection = (function(_super) {

        __extends(StatDisplaysCollection, _super);

        function StatDisplaysCollection() {
          this.updateSchema = __bind(this.updateSchema, this);

          this.findFirstClickable = __bind(this.findFirstClickable, this);

          this.initialize = __bind(this.initialize, this);
          return StatDisplaysCollection.__super__.constructor.apply(this, arguments);
        }

        StatDisplaysCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          this.schema = opts.schema, this.run_stats = opts.run_stats;
          if (this.schema == null) {
            throw new Error('schema attribute must be present in the options for a StatDisplaysCollection');
          }
          if (!((this.run_stats != null) && this.run_stats instanceof Entities.RunStatsCollection)) {
            throw new Error('run_stats attribute must be present in the options for a StatDisplaysCollection');
          }
          return this.updateSchema(this.schema);
        };

        StatDisplaysCollection.prototype.findFirstClickable = function() {
          return _.find(this.models, function(m) {
            return m.get('clickable');
          });
        };

        StatDisplaysCollection.prototype.updateSchema = function(schema) {
          var _this = this;
          this.schema = schema;
          return _.each(_.result(this.schema, 'stats'), function(statistic) {
            var _ref, _ref1, _ref2;
            return _this.add(new Entities.StatDisplay({
              run_stats: _this.run_stats,
              schema: statistic,
              table: (_ref = _.result(_this.schema, 'tables')) != null ? _ref[_.str.underscored(statistic.title)] : void 0,
              view: (_ref1 = _.result(_this.schema, 'views')) != null ? _ref1[_.str.underscored(statistic.title)] : void 0,
              controller: (_ref2 = _.result(_this.schema, 'controllers')) != null ? _ref2[_.str.underscored(statistic.title)] : void 0
            }));
          });
        };

        return StatDisplaysCollection;

      })(App.Entities.Collection);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Service = (function(_super) {

        __extends(Service, _super);

        function Service() {
          return Service.__super__.constructor.apply(this, arguments);
        }

        Service.PROTOS = ['tcp', 'udp'];

        Service.prototype.url = function() {};

        return Service;

      })(App.Entities.Model);
      Entities.ServiceCollection = (function(_super) {

        __extends(ServiceCollection, _super);

        function ServiceCollection() {
          return ServiceCollection.__super__.constructor.apply(this, arguments);
        }

        ServiceCollection.prototype.initialize = function(models, _arg) {
          this.host_id = _arg.host_id, this.index = _arg.index;
          if (this.index) {
            return this.url = Routes.workspace_services_path(WORKSPACE_ID);
          } else {
            return this.url = "/hosts/" + this.host_id + "/show_services/json";
          }
        };

        ServiceCollection.prototype.model = Entities.Service;

        return ServiceCollection;

      })(App.Entities.Collection);
      API = {
        getServices: function(opts) {
          if (opts == null) {
            opts = {};
          }
          return new Entities.ServiceCollection([], opts);
        },
        getService: function(id) {
          return new Entities.Service({
            id: id
          });
        },
        newService: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Service(attributes);
        }
      };
      App.reqres.setHandler("services:entities", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getServices(opts);
      });
      App.reqres.setHandler("services:entity", function(id) {
        return API.getService(id);
      });
      return App.reqres.setHandler("new:service:entity", function(attributes) {
        return API.newService(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.Shared", function(Shared, App) {
      var API;
      Shared.PayloadSettings = (function(_super) {

        __extends(PayloadSettings, _super);

        function PayloadSettings() {
          return PayloadSettings.__super__.constructor.apply(this, arguments);
        }

        PayloadSettings.prototype.defaults = {
          PAYLOAD_TYPE: ["Meterpreter", "Meterpreter 64-bit", "Command shell", "Powershell"],
          CONNECTION_TYPE: ["Auto", "Reverse", "Bind"],
          payload_settings: {
            payload_type: 'Meterpreter',
            connection_type: 'Auto',
            listener_ports: '1024-65535'
          }
        };

        PayloadSettings.prototype.url = function() {
          return Routes.workspace_shared_payload_settings_path(WORKSPACE_ID) + '.json';
        };

        return PayloadSettings;

      })(App.Entities.Model);
      API = {
        getPayloadSettings: function(opts) {
          return new Shared.PayloadSettings(opts);
        }
      };
      return App.reqres.setHandler("shared:payloadSettings:entities", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getPayloadSettings(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/fetch_ids'], function() {
    return this.Pro.module("Entities.SocialEngineering", function(SocialEngineering, App) {
      var API;
      SocialEngineering.HumanTarget = (function(_super) {

        __extends(HumanTarget, _super);

        function HumanTarget() {
          return HumanTarget.__super__.constructor.apply(this, arguments);
        }

        HumanTarget.prototype.url = function() {
          return Routes.workspace_social_engineering_target_list_human_targets_path(WORSKSPACE_ID, this.targetListIds) + '.json';
        };

        return HumanTarget;

      })(App.Entities.Model);
      SocialEngineering.HumanTargetCollection = (function(_super) {

        __extends(HumanTargetCollection, _super);

        function HumanTargetCollection() {
          this.url = __bind(this.url, this);
          return HumanTargetCollection.__super__.constructor.apply(this, arguments);
        }

        HumanTargetCollection.include('FetchIDs');

        HumanTargetCollection.prototype.model = SocialEngineering.HumanTarget;

        HumanTargetCollection.prototype.initialize = function(models, opts) {
          return this.targetListId = opts.targetListId;
        };

        HumanTargetCollection.prototype.url = function() {
          return Routes.workspace_social_engineering_target_list_human_targets_path(WORKSPACE_ID, this.targetListId) + '.json';
        };

        return HumanTargetCollection;

      })(App.Entities.Collection);
      API = {
        getHumanTargets: function(opts) {
          return new SocialEngineering.HumanTargetCollection([], opts);
        }
      };
      return App.reqres.setHandler("socialEngineering:humanTarget:entities", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getHumanTargets(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/fetch_ids'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Fdns = (function(_super) {

        __extends(Fdns, _super);

        function Fdns() {
          return Fdns.__super__.constructor.apply(this, arguments);
        }

        Fdns.prototype.url = function() {
          return Routes.workspace_sonar_fdnss_index_path(WORKSPACE_ID) + '.json';
        };

        return Fdns;

      })(App.Entities.Model);
      Entities.FdnsCollection = (function(_super) {

        __extends(FdnsCollection, _super);

        function FdnsCollection() {
          this.url = __bind(this.url, this);
          return FdnsCollection.__super__.constructor.apply(this, arguments);
        }

        FdnsCollection.include('FetchIDs');

        FdnsCollection.prototype.model = Entities.Fdns;

        FdnsCollection.prototype.initialize = function(models, opts) {
          return this.import_run_id = opts.import_run_id;
        };

        FdnsCollection.prototype.url = function() {
          return Routes.workspace_sonar_import_fdnss_index_path(WORKSPACE_ID, this.import_run_id) + '.json';
        };

        return FdnsCollection;

      })(App.Entities.Collection);
      API = {
        getFdnss: function(opts) {
          return new Entities.FdnsCollection([], opts);
        }
      };
      return App.reqres.setHandler("fdnss:entities", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getFdnss(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities.Sonar", function(Sonar, App) {
      var API;
      Sonar.ImportRun = (function(_super) {

        __extends(ImportRun, _super);

        function ImportRun() {
          return ImportRun.__super__.constructor.apply(this, arguments);
        }

        ImportRun.prototype.url = function() {
          return Routes.workspace_sonar_imports_path(WORKSPACE_ID) + '.json';
        };

        return ImportRun;

      })(App.Entities.Model);
      API = {
        getImportRun: function(opts) {
          if (opts == null) {
            opts = {};
          }
          return new Sonar.ImportRun(opts);
        }
      };
      return App.reqres.setHandler("sonar:importRun:entity", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return API.getImportRun(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/fetch_ids'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Target = (function(_super) {

        __extends(Target, _super);

        function Target() {
          return Target.__super__.constructor.apply(this, arguments);
        }

        Target.prototype.url = function() {
          if (this.id != null) {
            return "/workspaces/" + WORKSPACE_ID + "/metasploit/credential/logins/" + this.id + ".json";
          } else {
            return "/workspaces/" + WORKSPACE_ID + "/metasploit/credential/logins.json";
          }
        };

        return Target;

      })(App.Entities.Model);
      Entities.TargetCollection = (function(_super) {

        __extends(TargetCollection, _super);

        function TargetCollection() {
          this.url = __bind(this.url, this);
          return TargetCollection.__super__.constructor.apply(this, arguments);
        }

        TargetCollection.include('FetchIDs');

        TargetCollection.prototype.model = Entities.Target;

        TargetCollection.prototype.initialize = function(models, opts) {
          var wid;
          if (opts == null) {
            opts = {};
          }
          wid = opts.workspace_id ? opts.workspace_id : WORKSPACE_ID;
          return this.workspace_id = opts.workspace_id || WORKSPACE_ID;
        };

        TargetCollection.prototype.url = function() {
          return this.url = "/workspaces/" + this.workspace_id + "/brute_force/reuse/targets.json";
        };

        return TargetCollection;

      })(App.Entities.Collection);
      API = {
        getTargets: function(models, opts) {
          var targets;
          targets = new Entities.TargetCollection(models, opts);
          return targets;
        },
        getTarget: function(id) {
          var target;
          target = new Entities.Target({
            id: id
          });
          target.fetch();
          return target;
        },
        newTarget: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Target(attributes);
        }
      };
      App.reqres.setHandler("targets:entities", function(models, opts) {
        var wid;
        if (opts == null) {
          opts = {};
        }
        wid = opts.workspace_id ? opts.workspace_id : WORKSPACE_ID;
        opts.workspace_id = wid;
        return API.getTargets(models, opts);
      });
      App.reqres.setHandler("target:entity", function(id) {
        return API.getTarget(id);
      });
      return App.reqres.setHandler("new:target:entity", function(attributes) {
        if (attributes == null) {
          attributes = {};
        }
        return API.newTarget(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_model', 'base_collection', 'entities/run_stat'], function($) {
    return this.Pro.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
      return Entities.Task = (function(_super) {

        __extends(Task, _super);

        function Task() {
          this.fetch = __bind(this.fetch, this);

          this.fetch = __bind(this.fetch, this);

          this.stop = __bind(this.stop, this);

          this.resume = __bind(this.resume, this);

          this.pause = __bind(this.pause, this);

          this.isPaused = __bind(this.isPaused, this);

          this.isStopped = __bind(this.isStopped, this);

          this.isInterrupted = __bind(this.isInterrupted, this);

          this.isFailed = __bind(this.isFailed, this);

          this.isCompleted = __bind(this.isCompleted, this);

          this.url = __bind(this.url, this);

          this.initialize = __bind(this.initialize, this);
          return Task.__super__.constructor.apply(this, arguments);
        }

        Task.prototype.defaults = function() {
          return {
            workspace_id: null,
            schema: [],
            run_stats: new Entities.RunStatsCollection([], {
              task: this
            }),
            statDisplays: null
          };
        };

        Task.prototype.initialize = function(opts) {
          var _this = this;
          this.opts = opts != null ? opts : {};
          _.defaults(this.opts, {
            statDisplays: true
          });
          if (this.opts.statDisplays) {
            this.set('statDisplays', new Entities.StatDisplaysCollection([], {
              schema: this.get('schema'),
              run_stats: this.get('run_stats')
            }));
            return this.on('change:schema', function() {
              return _this.get('statDisplays').updateSchema(_this.get('schema'));
            });
          }
        };

        Task.prototype.url = function(ext) {
          if (ext == null) {
            ext = '.json';
          }
          return "/workspaces/" + (this.get('workspace_id')) + "/tasks/" + this.id + ext;
        };

        Task.prototype.isCompleted = function() {
          return this.get('state') === 'completed';
        };

        Task.prototype.isFailed = function() {
          return this.get('state') === 'failed';
        };

        Task.prototype.isInterrupted = function() {
          return this.get('state') === 'interrupted';
        };

        Task.prototype.isStopped = function() {
          return this.get('state') === 'stopped';
        };

        Task.prototype.isPaused = function() {
          return this.get('state') === 'paused';
        };

        Task.prototype.pause = function() {
          return $.post(Routes.pause_task_path(this.get('id')));
        };

        Task.prototype.resume = function() {
          return $.post(Routes.resume_task_path(this.get('id')));
        };

        Task.prototype.stop = function() {
          if (this.isPaused()) {
            return $.post(Routes.stop_paused_task_path(this.get('id')));
          } else {
            return $.post(Routes.stop_task_path({
              id: this.get('id')
            }));
          }
        };

        Task.prototype.fetch = function(opts) {
          if (opts == null) {
            opts = {};
          }
          if (this.get('now') != null) {
            opts.data || (opts.data = $.param({
              since: this.get('now')
            }));
          }
          return Task.__super__.fetch.call(this, opts);
        };

        Task.prototype.fetch = function(opts) {
          if (opts == null) {
            opts = {};
          }
          if (this.get('now') != null) {
            opts.data || (opts.data = $.param({
              since: this.get('now')
            }));
          }
          return Task.__super__.fetch.call(this, opts);
        };

        Task.prototype.set = function(key, val, options) {
          var stats,
            _this = this;
          if (key instanceof Object && (key.run_stats != null)) {
            this.set('run_stats', key.run_stats, options);
            delete key.run_stats;
          } else if (key === 'run_stats' && !(val instanceof Entities.RunStatsCollection)) {
            stats = this.get('run_stats') || new Entities.RunStatsCollection();
            _.each(val, function(stat) {
              var existingStat;
              existingStat = stats.findByName(stat.name);
              if (existingStat != null) {
                return existingStat.set('data', stat.data);
              } else {
                stat.task = _this;
                return stats.add(new Entities.RunStat(stat));
              }
            });
            val = stats;
          }
          return Task.__super__.set.apply(this, arguments);
        };

        return Task;

      })(App.Entities.Model);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_model', 'base_collection'], function($) {
    return this.Pro.module("Entities", function(Entities, App, Backbone, Marionette, jQuery, _) {
      var API;
      Entities.TaskChain = (function(_super) {

        __extends(TaskChain, _super);

        function TaskChain() {
          return TaskChain.__super__.constructor.apply(this, arguments);
        }

        TaskChain.prototype.urlRoot = gon.workspace_task_chains_path;

        return TaskChain;

      })(App.Entities.Model);
      Entities.TaskChainCollection = (function(_super) {

        __extends(TaskChainCollection, _super);

        function TaskChainCollection() {
          return TaskChainCollection.__super__.constructor.apply(this, arguments);
        }

        TaskChainCollection.prototype.model = Entities.TaskChain;

        TaskChainCollection.prototype.url = gon.workspace_task_chains_path;

        TaskChainCollection.prototype.sortAttribute = "name";

        TaskChainCollection.prototype.sortDirection = 1;

        TaskChainCollection.prototype.sortRows = function(attr) {
          this.sortAttribute = attr;
          return this.sort();
        };

        TaskChainCollection.prototype.comparator = function(a, b) {
          var _ref, _ref1;
          a = a.get(this.sortAttribute);
          b = b.get(this.sortAttribute);
          if (a === b) {
            return 0;
          }
          if (this.sortDirection === 1) {
            return (_ref = a > b) != null ? _ref : {
              1: -1
            };
          } else {
            return (_ref1 = a < b) != null ? _ref1 : {
              1: -1
            };
          }
        };

        TaskChainCollection.prototype.selected = function() {
          return this.where({
            selected: true
          });
        };

        TaskChainCollection.prototype.destroySelected = function() {
          var selectedTaskChainIDs,
            _this = this;
          selectedTaskChainIDs = this.selected().pluck('id');
          _.each(this.selected(), function(taskChain) {
            return _this.remove(taskChain);
          });
          return $.ajax({
            url: gon.destroy_multiple_workspace_task_chains_path,
            type: 'DELETE',
            data: {
              task_chain_ids: selectedTaskChainIDs
            }
          });
        };

        TaskChainCollection.prototype.stopSelected = function() {
          var selectedTaskChainIDs,
            _this = this;
          selectedTaskChainIDs = this.selected().pluck('id');
          return $.ajax({
            url: gon.stop_multiple_workspace_task_chains_path,
            type: 'POST',
            data: {
              task_chain_ids: selectedTaskChainIDs
            },
            success: function(data) {
              return _this.reset(data);
            }
          });
        };

        TaskChainCollection.prototype.suspendSelected = function() {
          var selectedTaskChainIDs,
            _this = this;
          selectedTaskChainIDs = this.selected().pluck('id');
          return $.ajax({
            url: gon.suspend_multiple_workspace_task_chains_path,
            type: 'POST',
            data: {
              task_chain_ids: selectedTaskChainIDs
            },
            success: function(data) {
              return _this.reset(data);
            }
          });
        };

        TaskChainCollection.prototype.resumeSelected = function() {
          var selectedTaskChainIDs,
            _this = this;
          selectedTaskChainIDs = this.selected().pluck('id');
          return $.ajax({
            url: gon.resume_multiple_workspace_task_chains_path,
            type: 'POST',
            data: {
              task_chain_ids: selectedTaskChainIDs
            },
            success: function(data) {
              return _this.reset(data);
            }
          });
        };

        TaskChainCollection.prototype.runSelected = function() {
          var selectedTaskChainIDs,
            _this = this;
          selectedTaskChainIDs = this.selected().pluck('id');
          return $.ajax({
            url: gon.start_multiple_workspace_task_chains_path,
            type: 'POST',
            data: {
              task_chain_ids: selectedTaskChainIDs
            },
            success: function(data) {
              return _this.reset(data);
            }
          });
        };

        return TaskChainCollection;

      })(App.Entities.Collection);
      API = {
        getTaskChains: function() {
          var task_chains;
          task_chains = new Entities.TaskChainsCollection;
          task_chains.fetch({
            reset: true
          });
          return task_chains;
        },
        getTaskChain: function(id) {
          var task_chains;
          task_chains = new Entities.TaskChain({
            id: id
          });
          task_chains.fetch();
          return task_chains;
        },
        newTaskChain: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.TaskChain(attributes);
        },
        newTaskChainCollection: function(taskChains) {
          var taskChainsArray;
          if (taskChains == null) {
            taskChains = [];
          }
          taskChainsArray = [];
          _.each(taskChains, function(taskChainAttributes) {
            return taskChainsArray.push(API.newTaskChain(taskChainAttributes));
          });
          return new Entities.TaskChainCollection(taskChainsArray);
        }
      };
      App.reqres.setHandler("task_chains:entities", function() {
        return API.getTaskChains;
      });
      App.reqres.setHandler("task_chains:entity", function(id) {
        return API.getTaskChain(id);
      });
      App.reqres.setHandler("new:task_chains:entity", function(attributes) {
        return API.newTaskChain(attributes);
      });
      return App.reqres.setHandler("new:task_chains:collection", function(taskChainArray) {
        return API.newTaskChainCollection(taskChainArray);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.Vuln = (function(_super) {

        __extends(Vuln, _super);

        function Vuln() {
          return Vuln.__super__.constructor.apply(this, arguments);
        }

        Vuln.prototype.url = function() {
          var _ref;
          if (this.get('new_vuln_attempt_status') != null) {
            return Routes.update_last_vuln_attempt_status_workspace_vuln_path(this.get('workspace_id'), this.get('id'));
          } else if (this.get('restore_vuln_attempt_status') != null) {
            return Routes.restore_last_vuln_attempt_status_workspace_vuln_path(this.get('workspace_id'), this.get('id'));
          } else {
            return Routes.workspace_vuln_path((_ref = this.get('workspace_id')) != null ? _ref : WORKSPACE_ID, this.id, {
              format: 'json'
            });
          }
        };

        Vuln.prototype.updateLastVulnStatus = function(status) {
          return this.save({
            'new_vuln_attempt_status': status
          }, {
            success: function(model) {
              return model.unset('new_vuln_attempt_status');
            }
          });
        };

        Vuln.prototype.restoreLastVulnStatus = function() {
          return this.save({
            'restore_vuln_attempt_status': true
          }, {
            success: function(model) {
              return model.unset('restore_vuln_attempt_status');
            }
          });
        };

        return Vuln;

      })(App.Entities.Model);
      Entities.VulnsCollection = (function(_super) {

        __extends(VulnsCollection, _super);

        function VulnsCollection() {
          return VulnsCollection.__super__.constructor.apply(this, arguments);
        }

        VulnsCollection.prototype.model = Entities.Vuln;

        VulnsCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          return _.defaults(this, {
            workspace_id: WORKSPACE_ID
          });
        };

        VulnsCollection.prototype.url = function() {
          return "" + (Routes.workspace_vulns_path({
            workspace_id: this.workspace_id
          })) + ".json";
        };

        return VulnsCollection;

      })(App.Entities.Collection);
      API = {
        getVulns: function(workspace_id) {
          var vulns;
          vulns = new Entities.VulnsCollection([], {
            workspace_id: workspace_id
          });
          return vulns;
        },
        getVuln: function(id) {
          return new Entities.Vuln({
            id: id
          });
        },
        newVuln: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.Vuln(attributes);
        }
      };
      App.reqres.setHandler("vulns:entities", function(opts) {
        var vulns;
        if (opts == null) {
          opts = {};
        }
        _.defaults(opts, {
          fetch: true
        });
        vulns = API.getVulns(opts);
        if (opts.fetch) {
          vulns.fetch();
        }
        return vulns;
      });
      App.reqres.setHandler("vuln:entity", function(id) {
        return API.getVuln(id);
      });
      return App.reqres.setHandler("new:vuln:entity", function(attributes) {
        return API.newVuln(attributes);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/fetch_ids', 'lib/concerns/entities/vuln_attempt_statuses'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.VulnHistory = (function(_super) {

        __extends(VulnHistory, _super);

        function VulnHistory() {
          return VulnHistory.__super__.constructor.apply(this, arguments);
        }

        VulnHistory.include('VulnAttemptStatuses');

        return VulnHistory;

      })(App.Entities.Model);
      Entities.VulnHistoryCollection = (function(_super) {

        __extends(VulnHistoryCollection, _super);

        function VulnHistoryCollection() {
          this.url = __bind(this.url, this);
          return VulnHistoryCollection.__super__.constructor.apply(this, arguments);
        }

        VulnHistoryCollection.prototype.model = Entities.VulnHistory;

        VulnHistoryCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          this.workspace_id = opts.workspace_id || WORKSPACE_ID;
          return this.vuln_id = opts.vuln_id || VULN_ID;
        };

        VulnHistoryCollection.prototype.url = function() {
          return Routes.history_workspace_vuln_path(this.workspace_id, this.vuln_id);
        };

        return VulnHistoryCollection;

      })(App.Entities.Collection);
      API = {
        getVulnHistory: function(workspace_id, vuln_id) {
          return new Entities.VulnHistoryCollection([], {
            workspace_id: workspace_id,
            vuln_id: vuln_id
          });
        }
      };
      return App.reqres.setHandler("vulnHistory:entities", function(opts) {
        var vid, wid;
        if (opts == null) {
          opts = {};
        }
        wid = opts.workspace_id ? opts.workspace_id : WORKSPACE_ID;
        vid = opts.vuln_id ? opts.vuln_id : VULN_ID;
        return API.getVulnHistory(wid);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection'], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      var API;
      Entities.WebVuln = (function(_super) {

        __extends(WebVuln, _super);

        function WebVuln() {
          return WebVuln.__super__.constructor.apply(this, arguments);
        }

        WebVuln.prototype.url = function() {
          var _ref;
          return Routes.workspace_web_vuln_path((_ref = this.get('workspace_id')) != null ? _ref : WORKSPACE_ID, this.id, {
            format: 'json'
          });
        };

        return WebVuln;

      })(App.Entities.Model);
      Entities.WebVulnsCollection = (function(_super) {

        __extends(WebVulnsCollection, _super);

        function WebVulnsCollection() {
          return WebVulnsCollection.__super__.constructor.apply(this, arguments);
        }

        WebVulnsCollection.prototype.model = Entities.WebVuln;

        WebVulnsCollection.prototype.initialize = function(models, opts) {
          if (opts == null) {
            opts = {};
          }
          return _.defaults(this, {
            workspace_id: WORKSPACE_ID
          });
        };

        WebVulnsCollection.prototype.url = function() {
          return "" + (Routes.workspace_web_vulns_path({
            workspace_id: this.workspace_id
          })) + ".json";
        };

        return WebVulnsCollection;

      })(App.Entities.Collection);
      API = {
        getWebVulns: function(workspace_id) {
          var vulns;
          vulns = new Entities.WebVulnsCollection([], {
            workspace_id: workspace_id
          });
          return vulns;
        },
        getWebVuln: function(id) {
          return new Entities.WebVuln({
            id: id
          });
        },
        newWebVuln: function(attributes) {
          if (attributes == null) {
            attributes = {};
          }
          return new Entities.WebVuln(attributes);
        }
      };
      App.reqres.setHandler("web_vulns:entities", function(opts) {
        var vulns;
        if (opts == null) {
          opts = {};
        }
        _.defaults(opts, {
          fetch: true
        });
        vulns = API.getWebVulns(opts);
        if (opts.fetch) {
          vulns.fetch();
        }
        return vulns;
      });
      return App.reqres.setHandler("web_vuln:entity", function(id) {
        return API.getWebVuln(id);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'apps/vulns/index/index_views', 'apps/web_vulns/index/index_views', 'lib/components/table/table_controller', 'lib/shared/cve_cell/cve_cell_controller', 'lib/shared/nexpose_push/nexpose_push_views', 'lib/components/analysis_tab/analysis_tab_view', 'lib/shared/nexpose_push/nexpose_push_controllers', 'lib/components/pro_search_filter/filter_controller'], function() {
    return this.Pro.module("Components.AnalysisTab", function(AnalysisTab, App, Backbone, Marionette, $, _) {
      AnalysisTab.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var _this = this;
          this.layout = this.getLayoutView();
          this.setMainView(this.layout);
          this.listenTo(this._mainView, 'show', function() {
            _this.table = _this._renderTable(options);
            if (options.enableNexposePushButton) {
              _this.table.collection.on('select_all_toggled', function() {
                return _this._triggerRowsSelected(_this.pushButtonRegion());
              });
              _this.table.carpenterRadio.on('table:row:selected', function() {
                return _this._triggerRowsSelected(_this.pushButtonRegion());
              });
              _this.table.carpenterRadio.on('table:row:deselected', function() {
                return _this._triggerRowsSelected(_this.pushButtonRegion());
              });
            }
            return _this.table.collection.on('reset', function() {
              return _this.table.collection.trigger('select_all_toggled');
            });
          });
          return this.layout;
        };

        Controller.prototype.onDestroy = function() {
          this.table.carpenterRadio.off('table:rows:selected');
          this.table.carpenterRadio.off('table:rows:deselected');
          this.table.carpenterRadio.off('table:row:selected');
          this.table.carpenterRadio.off('table:row:deselected');
          return this.table.collection.off('reset');
        };

        Controller.prototype.pushButtonRegion = function() {
          var pushButtonView;
          pushButtonView = this.getPushButtonView();
          this.layout.pushButtonRegion.show(pushButtonView);
          return pushButtonView;
        };

        Controller.prototype.getLayoutView = function() {
          return new AnalysisTab.Layout;
        };

        Controller.prototype.getPushButtonView = function() {
          return this.layout._currentPushButtonView = new Pro.Shared.NexposePush.ButtonView;
        };

        Controller.prototype._renderTable = function(options) {
          var tableController;
          return tableController = App.request("table:component", {
            region: this.layout.analysisTabsRegion,
            buttonsRegion: this.layout.buttonsRegion,
            selectable: true,
            taggable: true,
            "static": false,
            perPage: 20,
            columns: options.columns,
            defaultSort: options.defaultSort || null,
            actionButtons: options.actionButtons,
            collection: options.collection,
            filterOpts: options.filterOpts,
            emptyView: options.emptyView || AnalysisTab.TableEmptyView
          });
        };

        Controller.prototype._triggerRowsSelected = function(pushButtonView) {
          return pushButtonView.triggerMethod('rowsSelected', this.table.tableSelections);
        };

        Controller.prototype.postSelections = function(path, tableState) {
          var CSRF_TOKEN, field, finalParams, form, key, value;
          CSRF_TOKEN = $('meta[name=csrf-token]').attr('content');
          form = $('<form></form>');
          form.attr("method", "post");
          form.attr("action", path);
          finalParams = {
            "class": 'vuln',
            'selections[deselected_ids]': tableState.deselectedIDs,
            'selections[selected_ids]': tableState.selectedIDs,
            'selections[select_all_state]': tableState.selectAllState,
            authenticity_token: CSRF_TOKEN
          };
          for (key in finalParams) {
            value = finalParams[key];
            field = $('<input></input>');
            field.attr("type", "hidden");
            field.attr("name", key);
            field.attr("value", value);
            form.append(field);
          }
          $(document.body).append(form);
          return form.submit();
        };

        return Controller;

      })(App.Controllers.Application);
      App.reqres.setHandler('analysis_tab:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new AnalysisTab.Controller(options);
      });
      return App.commands.setHandler('analysis_tab:post', function(klass, path, tableState) {
        var CSRF_TOKEN, field, finalParams, form, key, value;
        CSRF_TOKEN = $('meta[name=csrf-token]').attr('content');
        form = $('<form></form>');
        form.attr("method", "post");
        form.attr("action", path);
        finalParams = {
          "class": klass,
          'selections[deselected_ids]': tableState.deselectedIDs,
          'selections[selected_ids]': tableState.selectedIDs,
          'selections[select_all_state]': tableState.selectAllState,
          authenticity_token: CSRF_TOKEN,
          ignore_pagination: true
        };
        for (key in finalParams) {
          value = finalParams[key];
          field = $('<input></input>');
          field.attr("type", "hidden");
          field.attr("name", key);
          field.attr("value", value);
          form.append(field);
        }
        $(document.body).append(form);
        return form.submit();
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'lib/components/analysis_tab/templates/layout', 'lib/components/analysis_tab/templates/empty', 'lib/components/table/table_view'], function() {
    return this.Pro.module('Components.AnalysisTab', function(AnalysisTab, App, Backbone, Marionette, $, _) {
      AnalysisTab.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('analysis_tab/layout');

        Layout.prototype.regions = {
          buttonsRegion: '#action-buttons-region',
          analysisTabsRegion: '#analysis-tabs-region',
          pushButtonRegion: 'a.nexpose-push'
        };

        Layout.prototype.onRender = function() {
          var has_workspace_web_vulns, path;
          path = window.location.pathname;
          if (path.indexOf('hosts') > 0) {
            this.$el.find('li.tab a.hosts').addClass('active');
          } else if (path.indexOf('notes') > 0) {
            this.$el.find('li.tab a.notes').addClass('active');
          } else if (path.indexOf('services') > 0) {
            this.$el.find('li.tab a.services').addClass('active');
          } else if (path.indexOf('vulns') > 0) {
            if (path.indexOf('web_vulns') > 0) {
              this.$el.find('li.tab a.web-vulnerabilities').addClass('active');
            } else {
              this.$el.find('li.tab a.vulnerabilities').addClass('active');
            }
          } else if (path.indexOf('loots') > 0) {
            this.$el.find('li.tab a.loots').addClass('active');
          } else if (path.indexOf('modules') > 0) {
            this.$el.find('li.tab a.modules').addClass('active');
          }
          has_workspace_web_vulns = $(document.body).find('ul.nav_tabs ul.sub-menu li a.web-vulnerabilities').length > 0;
          if (!has_workspace_web_vulns) {
            return this.$el.find('li.tab a.web-vulnerabilities').parent().remove();
          }
        };

        return Layout;

      })(App.Views.Layout);
      AnalysisTab.TableEmptyView = (function(_super) {

        __extends(TableEmptyView, _super);

        function TableEmptyView() {
          return TableEmptyView.__super__.constructor.apply(this, arguments);
        }

        TableEmptyView.prototype.tagName = 'tr';

        TableEmptyView.prototype.className = 'empty';

        TableEmptyView.prototype.template = TableEmptyView.prototype.templatePath('analysis_tab/empty');

        TableEmptyView.prototype.emptyText = 'No items were found.';

        TableEmptyView.prototype.serializeData = function() {
          return {
            emptyText: this.emptyText
          };
        };

        return TableEmptyView;

      })(App.Views.ItemView);
      return App.reqres.setHandler('analysis_tab:empty_view', function(opts) {
        if (opts == null) {
          opts = {};
        }
        if (opts.emptyText) {
          return (function(_super) {

            __extends(_Class, _super);

            function _Class() {
              return _Class.__super__.constructor.apply(this, arguments);
            }

            _Class.prototype.emptyText = opts.emptyText;

            return _Class;

          })(AnalysisTab.TableEmptyView);
        } else {
          return AnalysisTab.TableEmptyView;
        }
      });
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/analysis_tab/templates/empty"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<td colspan=\'100%\'>');
      
        __out.push(__sanitize(this.emptyText));
      
        __out.push('</td>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/analysis_tab/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="action-buttons-region" class="control-bar"></div>\n\n<ul class="tabs">\n  <li class="tab"><a class="hosts" href="');
      
        __out.push(__sanitize(Routes.hosts_path(WORKSPACE_ID)));
      
        __out.push('">Hosts</a></li>\n  <li class="tab"><a class="notes" href="');
      
        __out.push(__sanitize(Routes.workspace_notes_path(WORKSPACE_ID)));
      
        __out.push('">Notes</a></li>\n  <li class="tab"><a class="services" href="');
      
        __out.push(__sanitize(Routes.workspace_services_path(WORKSPACE_ID)));
      
        __out.push('">Services</a></li>\n  <li class="tab"><a class="vulnerabilities" href="');
      
        __out.push(__sanitize(Routes.workspace_vulns_path(WORKSPACE_ID)));
      
        __out.push('">Disclosed Vulnerabilities</a></li>\n  <li class="tab"><a class="web-vulnerabilities" href="');
      
        __out.push(__sanitize(Routes.workspace_web_vulns_path(WORKSPACE_ID)));
      
        __out.push('">Web Vulnerabilities</a></li>\n  <li class="tab"><a class="modules" href="');
      
        __out.push(__sanitize(Routes.workspace_related_modules_path(WORKSPACE_ID)));
      
        __out.push('">Applicable Modules</a></li>\n  <li class="tab"><a class="loots" href="');
      
        __out.push(__sanitize(Routes.workspace_loots_path(WORKSPACE_ID)));
      
        __out.push('">Captured Data</a></li>\n  <li class="tab"><a class="map" href="');
      
        __out.push(__sanitize(Routes.map_host_path(WORKSPACE_ID)));
      
        __out.push('">Network Topology</a></li>\n</ul>\n\n<div id="analysis-tabs-region" class="tab_panel"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/breadcrumbs/breadcrumbs_views', 'lib/entities/abstract/crumbs'], function() {
    return this.Pro.module("Components.Breadcrumbs", function(Breadcrumbs, App) {
      Breadcrumbs.BreadcrumbsController = (function(_super) {

        __extends(BreadcrumbsController, _super);

        function BreadcrumbsController() {
          return BreadcrumbsController.__super__.constructor.apply(this, arguments);
        }

        BreadcrumbsController.prototype.defaults = function() {
          return {
            crumbs: [
              {
                title: 'Crumb 1'
              }, {
                title: 'Crumb 2'
              }, {
                title: 'Crumb 3'
              }, {
                title: 'Crumb 4'
              }
            ]
          };
        };

        BreadcrumbsController.prototype.initialize = function(options) {
          var config;
          if (options == null) {
            options = {};
          }
          config = _.defaults(options, this._getDefaults());
          this.crumbsCollection = this.getCrumbs(config.crumbs);
          this.collectionView = this.getCollectionView(this.crumbsCollection);
          return this.setMainView(this.collectionView);
        };

        BreadcrumbsController.prototype.getCollectionView = function(crumbs) {
          return new Breadcrumbs.CrumbCollection({
            collection: crumbs
          });
        };

        BreadcrumbsController.prototype.getCrumbs = function(crumbs) {
          return App.request("crumbs:entities", crumbs);
        };

        return BreadcrumbsController;

      })(App.Controllers.Application);
      return App.reqres.setHandler("crumbs:component", function(options) {
        if (options == null) {
          options = {};
        }
        return new Breadcrumbs.BreadcrumbsController(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_collectionview', 'base_itemview', 'lib/components/breadcrumbs/templates/crumb', 'lib/concerns/views/chooseable'], function($) {
    return this.Pro.module("Components.Breadcrumbs", function(Breadcrumbs, App) {
      Breadcrumbs.Crumb = (function(_super) {

        __extends(Crumb, _super);

        function Crumb() {
          return Crumb.__super__.constructor.apply(this, arguments);
        }

        Crumb.prototype.template = Crumb.prototype.templatePath("breadcrumbs/crumb");

        Crumb.prototype.tagName = 'li';

        Crumb.prototype.ui = {
          crumb: 'a'
        };

        Crumb.prototype.events = {
          'click': 'choose'
        };

        Crumb.prototype.modelEvents = {
          'change:launchable': 'launchableChanged'
        };

        Crumb.prototype.launchableChanged = function(model, value) {
          if (value) {
            return this.ui.crumb.addClass('launchable');
          } else {
            return this.ui.crumb.removeClass('launchable');
          }
        };

        Crumb.include("Chooseable");

        return Crumb;

      })(App.Views.ItemView);
      return Breadcrumbs.CrumbCollection = (function(_super) {

        __extends(CrumbCollection, _super);

        function CrumbCollection() {
          return CrumbCollection.__super__.constructor.apply(this, arguments);
        }

        CrumbCollection.prototype.childView = Breadcrumbs.Crumb;

        CrumbCollection.prototype.tagName = 'ul';

        CrumbCollection.prototype.className = 'breadcrumbs';

        return CrumbCollection;

      })(App.Views.CollectionView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/breadcrumbs/templates/crumb"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<a href="javascript:void(0);" data-selectable="');
      
        __out.push(__sanitize(this.selectable));
      
        __out.push('">');
      
        __out.push(__sanitize(this.title));
      
        __out.push('</a>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/buttons/buttons_view', 'entities/abstract/buttons'], function() {
    return this.Pro.module("Components.Buttons", function(Buttons, App, Backbone, Marionette, $, _) {
      Buttons.ButtonsController = (function(_super) {

        __extends(ButtonsController, _super);

        function ButtonsController() {
          return ButtonsController.__super__.constructor.apply(this, arguments);
        }

        ButtonsController.prototype.defaults = function() {
          return {
            buttons: [
              {
                name: 'Cancel',
                "class": 'close'
              }, {
                name: 'Submit',
                "class": 'btn primary'
              }
            ]
          };
        };

        ButtonsController.prototype.initialize = function(options) {
          var buttons;
          if (options == null) {
            options = {};
          }
          this.config = _.defaults(options, this._getDefaults());
          buttons = this.getButtons(this.config.buttons);
          this.collectionView = this.getCollectionView(buttons);
          return this.setMainView(this.collectionView);
        };

        ButtonsController.prototype.getCollectionView = function(buttons) {
          return new Buttons.ButtonCollectionView({
            collection: buttons
          });
        };

        ButtonsController.prototype.getButtons = function(buttons) {
          return App.request("buttons:entities", buttons);
        };

        ButtonsController.prototype.disableBtn = function(btnName) {
          return this.findBtn(btnName).addClass('disabled');
        };

        ButtonsController.prototype.enableBtn = function(btnName) {
          return this.findBtn(btnName).removeClass('disabled');
        };

        ButtonsController.prototype.findBtn = function(btnName) {
          var btn, selector;
          btn = _.findWhere(this.config.buttons, {
            name: btnName
          });
          if (!btn) {
            throw "Button '" + btnName + "' not found in modal";
          }
          selector = "." + (btn["class"].replace(' ', '.'));
          return $(selector, this.el);
        };

        return ButtonsController;

      })(App.Controllers.Application);
      return App.reqres.setHandler("buttons:component", function(options) {
        if (options == null) {
          options = {};
        }
        return new Buttons.ButtonsController(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_collectionview', 'base_itemview', 'lib/components/buttons/templates/button'], function($) {
    return this.Pro.module("Components.Buttons", function(Buttons, App) {
      Buttons.ButtonView = (function(_super) {

        __extends(ButtonView, _super);

        function ButtonView() {
          return ButtonView.__super__.constructor.apply(this, arguments);
        }

        ButtonView.prototype.template = ButtonView.prototype.templatePath("buttons/button");

        ButtonView.prototype.className = 'inline-block';

        return ButtonView;

      })(App.Views.ItemView);
      return Buttons.ButtonCollectionView = (function(_super) {

        __extends(ButtonCollectionView, _super);

        function ButtonCollectionView() {
          return ButtonCollectionView.__super__.constructor.apply(this, arguments);
        }

        ButtonCollectionView.prototype.childView = Buttons.ButtonView;

        return ButtonCollectionView;

      })(App.Views.CollectionView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/buttons/templates/button"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<a href="javascript:void(0)" class="');
      
        __out.push(__sanitize(this["class"]));
      
        __out.push('">');
      
        __out.push(__sanitize(this.name));
      
        __out.push('</a>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/content_container/content_container_views'], function() {
    return this.Pro.module("Components.ContentContainer", function(ContentContainer, App, Backbone, Marionette, $, _) {
      ContentContainer.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          this.contentView = options.contentView, this.headerView = options.headerView;
          this.layout = new ContentContainer.Layout();
          this.listenTo(this.layout, 'show', function() {
            if (this.contentView != null) {
              this.show(this.contentView, {
                region: this.layout.content
              });
            }
            if (this.headerView != null) {
              return this.show(this.headerView, {
                region: this.layout.header
              });
            }
          });
          return this.setMainView(this.layout);
        };

        Controller.prototype.showContentRegion = function(contentView) {
          this.contentView = contentView;
          return this.show(this.contentView, {
            region: this.layout.content
          });
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('contentContainer:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new ContentContainer.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'lib/components/content_container/templates/layout'], function($) {
    return this.Pro.module("Components.ContentContainer", function(ContentContainer, App) {
      return ContentContainer.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath("content_container/layout");

        Layout.prototype.regions = {
          header: '.header-region',
          content: '.content-region'
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/content_container/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="header-region content-container"></div>\n\n<div class="content-region content-container"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/file_input/file_input_views'], function() {
    return this.Pro.module("Components.FileInput", function(FileInput, App, Backbone, Marionette, $, _) {
      FileInput.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {
          return {
            name: "file_input[data]"
          };
        };

        Controller.prototype.initialize = function(options) {
          var config;
          config = _.defaults(options, this._getDefaults());
          this.layout = new FileInput.Input({
            model: new Backbone.Model(config)
          });
          return this.setMainView(this.layout);
        };

        Controller.prototype.rebindFileInput = function() {
          this._mainView.bindUIElements();
          this._mainView.undelegateEvents();
          return this._mainView.delegateEvents();
        };

        Controller.prototype.resetLabel = function() {
          return this._mainView.resetLabel();
        };

        Controller.prototype.clear = function() {
          return this._mainView.clearInput();
        };

        Controller.prototype.isFileSet = function() {
          return this._mainView.isFileSet();
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('file_input:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new FileInput.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_itemview', 'base_layout', 'apps/creds/new/templates/new_layout', 'lib/components/file_input/templates/file_input'], function() {
    return this.Pro.module('Components.FileInput', function(FileInput, App, Backbone, Marionette, $, _) {
      return FileInput.Input = (function(_super) {

        __extends(Input, _super);

        function Input() {
          this.onRender = __bind(this.onRender, this);
          return Input.__super__.constructor.apply(this, arguments);
        }

        Input.prototype.template = Input.prototype.templatePath('file_input/file_input');

        Input.prototype.className = 'data file input';

        Input.prototype.tagName = 'li';

        Input.prototype.ui = {
          file_input: '[type="file"]',
          file_label: 'label p'
        };

        Input.prototype.events = {
          'change input:file': 'changed'
        };

        Input.prototype.triggers = {
          'change @ui.file_input': 'file:changed'
        };

        Input.prototype.resetLabel = function() {
          var path, _ref;
          this.bindUIElements();
          path = (_ref = this.ui.file_input.val()) != null ? _ref.replace(/.*(\\|\/)/g, '') : void 0;
          if (path === '') {
            path = "No file selected...";
          }
          this.fileSet = false;
          return this.ui.file_label.text(path);
        };

        Input.prototype.clearInput = function() {
          this.ui.file_input.wrap('<form>').parent('form').trigger('reset');
          this.ui.file_input.unwrap();
          return this.resetLabel();
        };

        Input.prototype.changed = function(e) {
          var $p, path;
          $p = $('label p', this.$el);
          path = $(e.target).val().replace(/.*(\\|\/)/g, '');
          if (path && path.length > 0) {
            this.fileSet = true;
            return $p.text(path);
          } else {
            this.fileSet = false;
            this.ui.file_input.wrap('<form>').parent('form').trigger('reset');
            this.ui.file_input.unwrap();
            return $p.html(this.setFileText($('input', this.$el).attr('id')));
          }
        };

        Input.prototype.onRender = function() {
          var that;
          that = this;
          return $('input:file', this.el).each(function() {
            var $label, $p, $span, origText;
            $label = $(this).prev();
            origText = $label.text() || 'file';
            $(this).attr('size', '50').css({
              overflow: 'hidden'
            });
            $p = $('<p>').text(that.setFileText($(this).attr('id')));
            $span = $('<span>').text("Choose " + origText + "...");
            $label.html('').append($p).append($span);
            return $(this).change(function() {
              var path;
              path = $(this).val().replace(/.*(\\|\/)/g, '');
              if (path && path.length > 0) {
                return $p.text(path);
              } else {
                return $p.html('&nbsp;');
              }
            });
          });
        };

        Input.prototype.isFileSet = function() {
          return this.fileSet;
        };

        Input.prototype.setFileText = function(attr) {
          var idSpecificText;
          idSpecificText = attr.split('_', 2)[0];
          if (idSpecificText !== "file") {
            idSpecificText = "" + idSpecificText + " file";
          }
          return "No " + idSpecificText + " selected...";
        };

        return Input;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/file_input/templates/file_input"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<label for="');
      
        __out.push(__sanitize(this.id ? "" + this.id + "_file_input" : "file_input"));
      
        __out.push('">\n</label>\n\n<input name="');
      
        __out.push(__sanitize(this.name));
      
        __out.push('" id="');
      
        __out.push(__sanitize(this.id ? "" + this.id + "_file_input" : "file_input"));
      
        __out.push('" type="file" size="50" style="overflow: hidden;" />\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/filter/filter_view', 'css!css/components/filter', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module("Components.Filter", function(Filter, App) {
      Filter.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {
          return {};
        };

        Controller.prototype.initialize = function(options) {
          if (options == null) {
            options = {};
          }
          this.filterView = this.getFilterView(options);
          this.setMainView(this.filterView);
          return this.listenTo(this.filterView, 'filter:query:new', function(query) {
            return this.trigger('filter:query:new', query);
          });
        };

        Controller.prototype.getFilterView = function(options) {
          return new Filter.FilterView(options);
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler("filter:component", function(options) {
        if (options == null) {
          options = {};
        }
        return new Filter.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['jquery', 'base_itemview', 'visualsearch', 'css!visualsearch-datauri', 'lib/components/filter/templates/filter', 'lib/components/filter/help_view', 'lib/components/modal/modal_controller'], function($) {
    return this.Pro.module("Components.Filter", function(Filter, App) {
      return Filter.FilterView = (function(_super) {

        __extends(FilterView, _super);

        function FilterView() {
          return FilterView.__super__.constructor.apply(this, arguments);
        }

        FilterView.prototype.template = FilterView.prototype.templatePath("filter/filter");

        FilterView.prototype.ui = {
          container: '.filter-component',
          helpLink: '.help-icon'
        };

        FilterView.prototype.events = {
          'click @ui.helpLink': 'displayHelpModal',
          'focusin .VS-search-inner': 'expandField',
          'focusout .VS-search-inner': 'contractField'
        };

        FilterView.prototype.SORT_BY = {
          asc: 'asc',
          desc: 'desc'
        };

        FilterView.prototype.defaults = function() {
          var _this = this;
          return {
            container: this.ui.container,
            query: '',
            sortBy: this.SORT_BY.asc,
            autoFocusFacet: true,
            autoFocusValue: false,
            matchStartOfFacet: false,
            matchStartOfValue: false,
            enableFreeText: false,
            supportDotInFacet: true,
            filterValuesEndpoint: '',
            callbacks: {
              search: function(query, searchCollection) {
                _this.triggerQuery(_this._rewriteQuery(query));
                return _this.$VSsearch.removeClass('animating');
              },
              facetMatches: function(callback) {
                if (_this.$VSsearch.hasClass('animating')) {
                  return _this.$VSsearch.one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", function() {
                    _this.$VSsearch.removeClass('animating');
                    return callback(_this.options.keys);
                  });
                } else {
                  return callback(_this.options.keys);
                }
              },
              valueMatches: function(facet, searchTerm, callback) {
                var statics;
                if (facet === 'address') {
                  searchTerm = _this.parseAddress(searchTerm);
                }
                statics = _this.staticFacets ? Object.keys(_this.staticFacets) : [];
                if (__indexOf.call(statics, facet) >= 0) {
                  return callback(_this.staticFacets[facet]);
                } else {
                  return _this._fetchValues(facet, searchTerm, callback);
                }
              }
            }
          };
        };

        FilterView.prototype.initialize = function(options) {
          this.staticFacets = this.options.staticFacets;
          return this.collection = this.options.collection;
        };

        FilterView.prototype.parseAddress = function(searchTerm) {
          var addrFragments;
          addrFragments = _.without(searchTerm.split('.'), "");
          switch (addrFragments.length) {
            case 1:
              searchTerm = "" + addrFragments[0] + ".0.0.0/8";
              break;
            case 2:
              searchTerm = "" + addrFragments[0] + "." + addrFragments[1] + ".0.0/16";
              break;
            case 3:
              searchTerm = "" + addrFragments[0] + "." + addrFragments[1] + "." + addrFragments[2] + ".0/24";
          }
          return searchTerm;
        };

        FilterView.prototype.expandField = function() {
          if (!this.$VSsearch.hasClass('expanded')) {
            return this.$VSsearch.addClass('expanded animating');
          }
        };

        FilterView.prototype.contractField = function() {
          if (this.currentQuery() === "") {
            return this.ui.container.find('.VS-search').removeClass('expanded');
          }
        };

        FilterView.prototype.setOptions = function(options) {
          var opts;
          opts = this.options.filterOpts || this.options;
          _.defaults(opts, this.defaults());
          this.options = opts;
          this.filterValuesEndpoint = this.options.filterValuesEndpoint;
          return this.helpEndpoint = this.options.helpEndpoint;
        };

        FilterView.prototype.helpUrl = function() {
          if (!(this.helpEndpoint || this.collection)) {
            throw "helpEndpoint or collection must be provided in options";
          }
          return this.helpEndpoint || this.collection.url.replace(/(\.json)|(\/)$/, '') + '/search_operators.json';
        };

        FilterView.prototype.displayHelpModal = function() {
          var HelpModel, help, keys,
            _this = this;
          HelpModel = Backbone.Model.extend({
            url: function() {
              return _this.helpUrl();
            }
          });
          help = new HelpModel();
          keys = this._keysToString(this.options.keys);
          return App.execute('showModal', new App.Filters.HelpView({
            model: help,
            whitelist: keys
          }), {
            modal: {
              title: 'Search Filters',
              description: '',
              width: 600,
              height: 600
            },
            buttons: [
              {
                name: 'Close',
                "class": 'close primary btn'
              }
            ]
          });
        };

        FilterView.prototype._keysToString = function(keys) {
          return _.map(keys, function(key) {
            return key.value || key;
          });
        };

        FilterView.prototype.currentQuery = function(lastKey) {
          var query;
          query = lastKey ? this._clearLastQuery(lastKey) : this.searchBox.currentQuery;
          return this._rewriteQuery(query);
        };

        FilterView.prototype._clearLastQuery = function(lastKey) {
          var matcher, re;
          re = "\\s" + lastKey + ".*$";
          matcher = new RegExp(re, 'i');
          return this.searchBox.currentQuery.replace(matcher, '');
        };

        FilterView.prototype._fetchValues = function(key, searchTerm, callback) {
          var data, enteredQuery, nextQuery, parts;
          if (_.isBlank(searchTerm)) {
            return;
          }
          searchTerm = '\"' + searchTerm + '\"';
          nextQuery = searchTerm === "" ? "" : " " + key + ":" + searchTerm;
          enteredQuery = this.currentQuery(key) + nextQuery;
          data = {
            search: {
              custom_query: enteredQuery
            }
          };
          parts = key.split('.');
          data.ignore_pagination = true;
          data.column = parts.pop();
          data.prefix = parts.pop();
          data.sort_by = "" + key + " " + this.options.sortBy;
          return $.getJSON(this.filterValuesEndpoint, data, function(data, status) {
            return callback(data);
          });
        };

        FilterView.prototype._rewriteQuery = function(query) {
          var parsedQuery;
          parsedQuery = this._rewriteAddrQuery(query);
          return parsedQuery.replace(/\:\s/g, ':');
        };

        FilterView.prototype._rewriteAddrQuery = function(query) {
          var _this = this;
          this.visualSearch.searchQuery.each(function(model) {
            if (model.get('category') === 'address') {
              return model.set('value', _this.parseAddress(model.get('value')));
            }
          });
          return this.visualSearch.searchBox.serialize();
        };

        FilterView.prototype.onRender = function() {
          this.setOptions();
          this.resetVisualSearchTemplates();
          this.visualSearch = VS.init(this.options);
          this.searchBox = this.visualSearch.searchBox;
          return this.$VSsearch = this.searchBox.$el.find('.VS-search');
        };

        FilterView.prototype.triggerQuery = function(query) {
          return this.trigger('filter:query:new', query);
        };

        FilterView.prototype.resetVisualSearchTemplates = function() {
          var originalTemplateSettings;
          originalTemplateSettings = _.templateSettings;
          _.templateSettings = {
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: /<%=([\s\S]+?)%>/g,
            escape: /<%-([\s\S]+?)%>/g
          };
          window.JST['search_box'] = this.searchBoxTemplate();
          window.JST['search_facet'] = this.searchFacetTemplate();
          window.JST['search_input'] = this.searchInputTemplate();
          return _.templateSettings = originalTemplateSettings;
        };

        FilterView.prototype.searchBoxTemplate = function() {
          return _.template("<div class=\"VS-search <% if (readOnly) { %>VS-readonly<% } %>\">\n  <div class=\"VS-search-box-wrapper VS-search-box\">\n    <div class=\"VS-icon VS-icon-search\"></div>\n    <div class=\"VS-placeholder\"></div>\n    <div class=\"VS-search-inner\"></div>\n    <div class=\"VS-icon VS-icon-cancel VS-cancel-search-box\" title=\"clear search\"></div>\n  </div>\n</div>");
        };

        FilterView.prototype.searchFacetTemplate = function() {
          return _.template("<% if (model.has(\'category\')) { %>\n  <div class=\"category\"><%= model.get(\'category\') %>:</div>\n<% } %>\n\n<div class=\"search_facet_input_container\">\n  <input type=\"text\" class=\"search_facet_input ui-menu VS-interface\" value=\"\" <% if (readOnly) { %>disabled=\"disabled\"<% } %> />\n</div>\n\n<div class=\"search_facet_remove VS-icon VS-icon-cancel\"></div>");
        };

        FilterView.prototype.searchInputTemplate = function() {
          return _.template("<input type=\"text\" class=\"ui-menu\" <% if (readOnly) { %>disabled=\"disabled\"<% } %> />");
        };

        return FilterView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['lib/components/filter/templates/help', 'base_itemview'], function() {
    return this.Pro.module("Filters", function(Filters, App) {
      return Filters.HelpView = (function(_super) {

        __extends(HelpView, _super);

        function HelpView() {
          return HelpView.__super__.constructor.apply(this, arguments);
        }

        HelpView.prototype.template = HelpView.prototype.templatePath('filter/help');

        HelpView.prototype.className = 'tab-loading filter-help';

        HelpView.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          this.whitelist = opts.whitelist || [];
          return this.model.fetch().done(this.render);
        };

        HelpView.prototype.onRender = function() {
          if (_.isEmpty(_.keys(this.model.attributes))) {
            return;
          }
          return this.$el.removeClass('tab-loading');
        };

        HelpView.prototype.serializeData = function() {
          return this;
        };

        return HelpView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/filter/templates/filter"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class=\'filter-component\'></div><div class="help-icon"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/filter/templates/help"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var k, _i, _len, _ref;
      
        __out.push('<p style=\'margin-bottom:12px\'>\nClick on the search field to view the search operators that are available. Select a search operator from the list and enter the keyword you want to use to filter the Sonar results. As you start typing, the search field displays the possible keywords that are available for the selected operator. You can use as many search operator and keyword combinations as you need.\nHere\'s a quick look at what each search operator does:\n</p>\n\n');
      
        _ref = _.keys(this.model.attributes).sort();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          __out.push('\n  ');
          if (_.contains(this.whitelist, _.str.trim(k))) {
            __out.push('\n    <div class=\'filter-row\'>\n      <h5>');
            __out.push(__sanitize(k));
            __out.push('</h5>\n      <p>');
            __out.push(__sanitize(this.model.get(k)));
            __out.push('</p>\n    </div>\n  ');
          }
          __out.push('\n');
        }
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_controller'], function() {
    return this.Pro.module("Components.Flash", function(Flash, App, Backbone, Marionette, $, _) {
      Flash.FlashController = (function(_super) {

        __extends(FlashController, _super);

        function FlashController() {
          return FlashController.__super__.constructor.apply(this, arguments);
        }

        FlashController.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          _.defaults(opts, {
            location: 'br',
            style: 'notice'
          });
          return $.growl(opts);
        };

        return FlashController;

      })(App.Controllers.Application);
      return App.commands.setHandler("flash:display", function(opts) {
        if (opts == null) {
          opts = {};
        }
        return new Flash.FlashController(opts);
      });
    });
  });

}).call(this);
(function() {

  define(['jquery'], function($) {
    return this.Pro.module("Concerns", function(Concerns, App) {
      return Concerns.LazyListCollection = {
        ids: null,
        perPage: 20,
        currPage: 0,
        modelsLoaded: 0,
        _idsHash: null,
        loadMore: function(opts) {
          var data,
            _this = this;
          if (opts == null) {
            opts = {};
          }
          if (this.modelsLoaded >= this.ids.length) {
            return;
          }
          _.defaults(opts, {
            attemptsLeft: 5
          });
          data = {
            with_ids: this.ids.slice(this.itemOffset(), this.itemOffset() + this.perPage).join(',')
          };
          this.trigger('loadingMore');
          return $.getJSON(_.result(this, 'url'), data).done(function(results) {
            _this.currPage++;
            _this.modelsLoaded += _this.perPage;
            _this._updateModelsLoaded();
            _.each(results, function(hash) {
              return _this.add(new _this.model(hash));
            });
            return _this.trigger('fetched');
          }).error(function() {
            if (!(opts.attemptsLeft < 1)) {
              return _.delay((function() {
                return _this.loadMore({
                  attemptsLeft: opts.attemptsLeft - 1
                });
              }), 3000);
            }
          });
        },
        initializeLaziness: function(opts) {
          this.perPage = opts.perPage || this.perPage;
          this.currPage = opts.currPage || this.currPage;
          this.ids = opts.ids || this.ids;
          if (!this.laziness) {
            this.ids || (this.ids = []);
            this._idsHash = {};
            this.modelsLoaded = 0;
            return this.laziness = true;
          }
        },
        addIDs: function(ids) {
          var _this = this;
          return _.each(ids, function(id) {
            id = Math.floor(id);
            if (_this._idsHash[id] == null) {
              _this.ids.push(id);
              return _this._idsHash[id] = true;
            }
          });
        },
        itemOffset: function() {
          return this.models.length;
        },
        remove: function(model) {
          var id, idIdx;
          id = Math.floor(model.id);
          delete this._idsHash[id];
          idIdx = _.indexOf(this.ids, id);
          if (idIdx > -1) {
            this.ids.splice(idIdx, 1);
          }
          return this._updateModelsLoaded();
        },
        reset: function() {
          this.ids = [];
          this._idsHash = {};
          return this._updateModelsLoaded();
        },
        _updateModelsLoaded: function() {
          return this.modelsLoaded = _.min([this.modelsLoaded, this.ids.length]);
        }
      };
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/lazy_list/lazy_list_view'], function() {
    return this.Pro.module('Components.LazyList', function(LazyList, App) {
      LazyList.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.addIDs = __bind(this.addIDs, this);

          this.resize = __bind(this.resize, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.collection = null;

        Controller.prototype.loadMoreView = null;

        Controller.prototype.listView = null;

        Controller.prototype.initialize = function(opts) {
          var _this = this;
          if (opts == null) {
            opts = {};
          }
          _.extend(this, _.pick(opts, 'collection'));
          _.defaults(opts, {
            show: true
          });
          this.layout = new LazyList.Layout;
          this.setMainView(this.layout);
          this.listView = new LazyList.List(opts);
          this.loadMoreView = new LazyList.LoadMore(opts);
          this.listenTo(this.layout, 'show', function() {
            _this.show(_this.listView, {
              region: _this.layout.list,
              preventDestroy: true
            });
            _this.show(_this.loadMoreView, {
              region: _this.layout.loadMore,
              preventDestroy: true
            });
            if (!(_this.collection.currPage > 0 || !(opts.ids != null) || opts.ids.length < 1)) {
              return _this.collection.loadMore();
            } else {
              return _this.collection.trigger('fetched');
            }
          });
          this.listenTo(this.loadMoreView, 'loadMoreClicked', function() {
            _this.collection.loadMore();
            return _this.listView.setLoading(true);
          });
          this.listenTo(this.collection, 'fetched reset', function() {
            return _.defer(_this.layout.resetScroller);
          });
          if (opts.show) {
            return this.show(this.layout, {
              region: opts.region
            });
          }
        };

        Controller.prototype.resize = function() {
          return this.layout.resetScroller();
        };

        Controller.prototype.addIDs = function(ids) {
          if ((ids != null ? ids.length : void 0) > 0) {
            this.collection.addIDs(ids);
            return this.collection.loadMore();
          }
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('lazy_list:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new LazyList.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_compositeview', 'base_itemview', 'base_layout', 'lib/components/lazy_list/lazy_list_collection', 'lib/components/lazy_list/templates/list', 'lib/components/lazy_list/templates/load_more', 'lib/components/lazy_list/templates/layout'], function($) {
    return this.Pro.module("Components.LazyList", function(LazyList, App) {
      LazyList.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          this.resetScroller = __bind(this.resetScroller, this);
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('lazy_list/layout');

        Layout.prototype.attributes = {
          "class": 'lazy-list-component nano'
        };

        Layout.prototype.regions = {
          list: '.list',
          loadMore: '.load-more'
        };

        Layout.prototype.onShow = function() {
          this.$el.css('height', this.$el.height());
          return this.$el.nanoScroller();
        };

        Layout.prototype.resetScroller = function() {
          return this.$el.nanoScroller();
        };

        Layout.prototype.onDestroy = function() {
          return this.$el.nanoScroller({
            destroy: true
          });
        };

        return Layout;

      })(App.Views.Layout);
      LazyList.LoadMore = (function(_super) {

        __extends(LoadMore, _super);

        function LoadMore() {
          this.initialize = __bind(this.initialize, this);
          return LoadMore.__super__.constructor.apply(this, arguments);
        }

        LoadMore.prototype.template = LoadMore.prototype.templatePath('lazy_list/load_more');

        LoadMore.prototype.triggers = {
          click: 'loadMoreClicked'
        };

        LoadMore.prototype.attributes = {
          "class": 'load-more'
        };

        LoadMore.prototype.loadMoreLabel = "Load More";

        LoadMore.prototype.initialize = function(_arg) {
          var loadMoreLabel, modelsLoaded,
            _this = this;
          this.collection = _arg.collection, loadMoreLabel = _arg.loadMoreLabel, modelsLoaded = _arg.modelsLoaded;
          this.collection.modelsLoaded = modelsLoaded || this.collection.modelsLoaded;
          this.loadMoreLabel = loadMoreLabel || this.loadMoreLabel;
          this.listenTo(this.collection, 'fetched', function() {
            return _.defer(_this.render);
          });
          return this.listenTo(this.collection, 'reset', function() {
            return _.defer(_this.render);
          });
        };

        LoadMore.prototype.serializeData = function() {
          return this;
        };

        return LoadMore;

      })(App.Views.ItemView);
      LazyList.EmptyView = (function(_super) {

        __extends(EmptyView, _super);

        function EmptyView() {
          return EmptyView.__super__.constructor.apply(this, arguments);
        }

        EmptyView.prototype.attributes = {
          "class": 'empty-view'
        };

        EmptyView.prototype.template = function() {
          return 'Nothing is selected.';
        };

        return EmptyView;

      })(App.Views.ItemView);
      return LazyList.List = (function(_super) {

        __extends(List, _super);

        function List() {
          this.setLoading = __bind(this.setLoading, this);

          this.loadingMore = __bind(this.loadingMore, this);

          this.fetched = __bind(this.fetched, this);

          this.buildChildView = __bind(this.buildChildView, this);
          return List.__super__.constructor.apply(this, arguments);
        }

        List.prototype.template = List.prototype.templatePath('lazy_list/list');

        List.prototype.childView = App.Views.ItemView;

        List.prototype.emptyView = LazyList.EmptyView;

        List.prototype.childViewContainer = '.stuff';

        List.prototype.attributes = {
          "class": 'lazy-list collection-loading'
        };

        List.prototype.collectionEvents = {
          fetched: 'fetched',
          loadingMore: 'loadingMore'
        };

        List.prototype.loading = true;

        List.prototype.buildChildView = function(item, ItemViewType, itemViewOptions) {
          var opts;
          opts = _.extend({
            model: item,
            collection: this.collection
          }, itemViewOptions);
          return new ItemViewType(opts);
        };

        List.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          _.extend(this, _.pick(opts, 'childView', 'loadMoreLabel', 'collection'));
          Cocktail.mixin(this.collection, App.Concerns.LazyListCollection);
          return this.collection.initializeLaziness(opts);
        };

        List.prototype.showEmptyView = function() {
          return List.__super__.showEmptyView.apply(this, arguments);
        };

        List.prototype.fetched = function() {
          return this.setLoading(false);
        };

        List.prototype.loadingMore = function() {
          return this.setLoading(true);
        };

        List.prototype.setLoading = function(loading) {
          this.loading = loading;
          this.$el.toggleClass('collection-loading', loading);
          return this.loading;
        };

        List.prototype.serializeData = function() {
          return this;
        };

        return List;

      })(App.Views.CompositeView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/lazy_list/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="content">\n  <div class=\'list\'>\n  </div>\n  <div class=\'load-more\'>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/lazy_list/templates/list"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="stuff">\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/lazy_list/templates/load_more"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        if (this.collection.modelsLoaded < this.collection.ids.length) {
          __out.push('\n  <a href=\'javascript:void(0)\'>');
          __out.push(__sanitize(this.loadMoreLabel));
          __out.push('</a>\n');
        }
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/loading/loading_view', 'lib/utilities/fetch'], function() {
    return function() {
      return this.Pro.module("Components.Loading", function(Loading, App) {
        Loading.LoadingController = (function(_super) {

          __extends(LoadingController, _super);

          function LoadingController() {
            return LoadingController.__super__.constructor.apply(this, arguments);
          }

          LoadingController.prototype.initialize = function(options) {
            var config, loadingView, view;
            view = options.view, config = options.config;
            config = _.isBoolean(config) ? {} : config;
            _.defaults(config, {
              loadingType: "spinner",
              entities: this.getEntities(view),
              debug: false
            });
            switch (config.loadingType) {
              case "opacity":
                this.region.currentView.$el.css("opacity", 0.5);
                break;
              case "spinner":
                loadingView = this.getLoadingView();
                this.show(loadingView);
                break;
              case "overlay":
                App.execute('loadingOverlay:show');
                break;
              default:
                throw new Error("Invalid loadingType");
            }
            return this.showRealView(view, loadingView, config);
          };

          LoadingController.prototype.showRealView = function(realView, loadingView, config) {
            var _this = this;
            return App.execute("when:fetched", config.entities, function() {
              switch (config.loadingType) {
                case "opacity":
                  _this.region.currentView.$el.removeAttr("style");
                  break;
                case "spinner":
                  if (_this.region.currentView !== loadingView) {
                    return realView.destroy();
                  }
                  break;
                case "overlay":
                  App.execute('loadingOverlay:hide');
              }
              if (!config.debug) {
                return _this.show(realView);
              }
            });
          };

          LoadingController.prototype.getEntities = function(view) {
            return _.chain(view).pick("model", "collection").toArray().compact().value();
          };

          LoadingController.prototype.getLoadingView = function() {
            return new Loading.LoadingView;
          };

          return LoadingController;

        })(App.Controllers.Application);
        return App.commands.setHandler("show:loading", function(view, options) {
          return new Loading.LoadingController({
            view: view,
            region: options.region,
            config: options.loading
          });
        });
      });
    };
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_itemview'], function() {
    return this.Pro.module("Components.Loading", function(Loading, App, Backbone, Marionette, $, _) {
      return Loading.LoadingView = (function(_super) {

        __extends(LoadingView, _super);

        function LoadingView() {
          return LoadingView.__super__.constructor.apply(this, arguments);
        }

        LoadingView.prototype.template = false;

        LoadingView.prototype.className = "loading-container";

        LoadingView.prototype.onShow = function() {
          return $(this.el).addClass('tab-loading');
        };

        return LoadingView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'base_model', 'lib/components/modal/modal_view', 'lib/components/buttons/buttons_controller', 'entities/abstract/modal', 'lib/regions/dialog_region'], function() {
    return this.Pro.module("Components.Modal", function(Modal, App) {
      Modal.ModalController = (function(_super) {

        __extends(ModalController, _super);

        function ModalController() {
          return ModalController.__super__.constructor.apply(this, arguments);
        }

        ModalController.prototype.defaults = function() {
          return {
            proxy: false,
            loading: false
          };
        };

        ModalController.prototype.initialize = function(options) {
          var config, modal,
            _this = this;
          if (options == null) {
            options = {};
          }
          this.contentView = options.contentView, this.modal = options.modal, this.buttons = options.buttons, this.doneCallback = options.doneCallback, this.closeCallback = options.closeCallback, this.loading = options.loading;
          config = this.getConfig(options);
          modal = App.request("component:modal:entities", this.modal);
          this.setMainView(new Modal.ModalLayout({
            model: modal
          }));
          if (config.proxy) {
            this.parseProxys(config.proxy);
          }
          this.listenTo(this._mainView, "show", function() {
            _this.modalRegion();
            _this._mainView.center();
            _this.buttons = App.request("buttons:component", {
              buttons: _this.buttons
            });
            return _this.show(_this.buttons, {
              region: _this._mainView.buttons
            });
          });
          this.listenTo(this._mainView, "primaryClicked", function(e) {
            var formSubmit;
            if (_this.contentView.onFormSubmit == null) {
              throw new Error("onFormSubmit method not defined on Content Region View/Controller");
            } else {
              formSubmit = _this.contentView.onFormSubmit(e);
              if (formSubmit != null) {
                formSubmit.done(function() {
                  if (typeof _this.doneCallback === "function") {
                    _this.doneCallback();
                  }
                  return _this.region.reset();
                });
              }
              return typeof formSubmit === "function" ? formSubmit() : void 0;
            }
          });
          this.listenTo(this._mainView, "closeClicked", function(e) {
            return typeof _this.closeCallback === "function" ? _this.closeCallback() : void 0;
          });
          this.listenTo(this.contentView, "btn:disable:modal", function(btnName) {
            return _this.buttons.disableBtn(btnName);
          });
          this.listenTo(this.contentView, "btn:enable:modal", function(btnName) {
            return _this.buttons.enableBtn(btnName);
          });
          return this.show(this._mainView);
        };

        ModalController.prototype.modalRegion = function() {
          var _this = this;
          this.listenTo(this.contentView, 'center', function() {
            return _this._mainView.center();
          });
          return this.show(this.contentView, {
            region: this.getMainView().content,
            loading: this.loading
          });
        };

        ModalController.prototype.getConfig = function(options) {
          var config, modalView;
          modalView = _.result(this.contentView, "_mainView");
          config = this.mergeDefaultsInto(modalView);
          return _.extend(config, _(options).omit("contentView", "model", "collection", "proxy"));
        };

        ModalController.prototype.parseProxys = function(proxys) {
          var proxy, _i, _len, _ref, _results;
          _ref = _([proxys]).flatten();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            proxy = _ref[_i];
            _results.push(this._mainView[proxy] = _.result(this.contentView, proxy));
          }
          return _results;
        };

        return ModalController;

      })(App.Controllers.Application);
      App.reqres.setHandler("modal:component", function(contentView, options) {
        if (options == null) {
          options = {};
        }
        if (!contentView) {
          throw new Error("Modal Component requires a contentView to be passed in");
        }
        options.contentView = contentView;
        return new Modal.ModalController(options);
      });
      App.commands.setHandler('showModal', function(contentView, options) {
        if (options == null) {
          options = {};
        }
        if (localStorage.getItem(options.modal.title) !== "false") {
          options = _.defaults(options, {
            region: App.dialogRegion
          });
          if (options.region == null) {
            App.addRegions({
              dialogRegion: {
                selector: "#dialog-region",
                regionType: App.Regions.Dialog
              }
            });
            options.region = App.dialogRegion;
          }
          return App.request("modal:component", contentView, options);
        }
      });
      App.commands.setHandler('closeModal', function() {
        var _ref;
        return (_ref = App.dialogRegion) != null ? _ref.reset() : void 0;
      });
      return App.on("initialize:after", function(options) {
        return this.addRegions({
          dialogRegion: {
            selector: "#dialog-region",
            regionType: App.Regions.Dialog
          }
        });
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_itemview', 'lib/components/modal/templates/modal'], function($) {
    return this.Pro.module("Components.Modal", function(Modal, App) {
      return Modal.ModalLayout = (function(_super) {

        __extends(ModalLayout, _super);

        function ModalLayout() {
          this._escKeyHandler = __bind(this._escKeyHandler, this);

          this._unbindWindow = __bind(this._unbindWindow, this);

          this._bindWindow = __bind(this._bindWindow, this);

          this.center = __bind(this.center, this);
          return ModalLayout.__super__.constructor.apply(this, arguments);
        }

        ModalLayout.MODAL_CONFIRM_MSG = 'Are you sure you want to close this panel? Any text input will be lost.';

        ModalLayout.prototype.template = ModalLayout.prototype.templatePath("modal/modal");

        ModalLayout.prototype.ui = {
          showAgainOption: '[name="showOnce"]'
        };

        ModalLayout.prototype.regions = {
          content: '.content',
          buttons: '.modal-actions'
        };

        ModalLayout.prototype.events = {
          'click .header a.close, .modal-actions a.close': '_manualClose'
        };

        ModalLayout.prototype.triggers = {
          'click a.btn.primary': 'primaryClicked'
        };

        ModalLayout.prototype.center = function() {
          var $modal, modalHeight, modalWidth, offset, screenWidth;
          offset = this.model.get('showAgainOption') != null ? 133 : 113;
          $modal = $('.modal', this.$el).first();
          modalWidth = this.model.get('width') || $modal.width();
          modalHeight = this.model.get('height') || $modal.height();
          screenWidth = $(window).width();
          if (this.model.get('width')) {
            $modal.width(this.model.get('width'));
          }
          if (this.model.get('height')) {
            $modal.height(this.model.get('height'));
            $modal.find('.content').height(this.model.get('height') - offset);
          }
          $modal.css('left', parseInt(($(window).width() - modalWidth) / 2) + 'px');
          $modal.css('top', parseInt(($(window).height() - modalHeight) / 2) + 'px');
          $('ul.tabs>li:first-child', this.el).addClass('first-child');
          if (this.model.get('hideBorder')) {
            $('.content', this.el).css('border', 'none');
          }
          if (this.model.get('hideContent')) {
            return $('.content', this.el).hide();
          }
        };

        ModalLayout.prototype.onShow = function() {
          this.origConfirm = window.confirm;
          this._unbindWindow();
          return this._bindWindow();
        };

        ModalLayout.prototype.onDestroy = function() {
          if ((this.model.get('showAgainOption') != null) && this.ui.showAgainOption.prop('checked')) {
            localStorage.setItem(this.model.get('title'), false);
          }
          return this._unbindWindow();
        };

        ModalLayout.prototype._bindWindow = function() {
          window.origConfirm || (window.origConfirm = window.confirm);
          $(window).bind('resize.tabbedModal', this.center);
          return $(window).bind('keyup.modal', this._escKeyHandler);
        };

        ModalLayout.prototype._unbindWindow = function() {
          window.confirm = this.origConfirm;
          $(window).unbind('resize.tabbedModal', this.center);
          return $(window).unbind('keyup.modal', this._escKeyHandler);
        };

        ModalLayout.prototype._escKeyHandler = function(e) {
          var _ref, _ref1;
          if (((_ref = String.fromCharCode(e.keyCode)) != null ? (_ref1 = _ref.match(/[\w]+/)) != null ? _ref1.length : void 0 : void 0) > 0) {
            this._edited = true;
          }
          if (e.keyCode === 27) {
            if (this._edited) {
              if (window.confirm(Modal.MODAL_CONFIRM_MSG)) {
                this.destroy();
              }
            } else {
              this.destroy();
            }
            e.preventDefault();
            return e.stopImmediatePropagation();
          }
        };

        ModalLayout.prototype._manualClose = function() {
          this.trigger('closeClicked');
          return this.destroy();
        };

        return ModalLayout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/modal/templates/modal"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('\n<div class="bg"></div>\n\n\n<div class="modal ');
      
        __out.push(__sanitize(this["class"]));
      
        __out.push('" id="modal">\n    <div class="header">\n        <a class="close small"  href="javascript:void 0"> &times; </a>\n        ');
      
        if (this.title) {
          __out.push('\n            <h1>');
          __out.push(__sanitize(this.title));
          __out.push('</h1>\n        ');
        }
      
        __out.push('\n\n        ');
      
        if (this.description) {
          __out.push('\n            <p>');
          __out.push(__sanitize(this.description));
          __out.push('</p>\n        ');
        }
      
        __out.push('\n    </div>\n\n    <div class="padding">\n        <div class="content"></div>\n\n        ');
      
        if (this.showAgainOption) {
          __out.push('\n          <div class="show-again-option">\n            <label>\n              <input type="checkbox" name="showOnce">\n              Do not show this again\n            </label>\n          </div>\n        ');
        }
      
        __out.push('\n\n        <div class="clearfix"></div>\n        <div class="modal-actions"></div>\n    </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/os/os_views', 'css!css/components/os'], function() {
    return this.Pro.module("Components.Os", function(Os, App) {
      Os.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {
          return {
            content: 'Default Content'
          };
        };

        Controller.prototype.initialize = function(options) {
          var config, model, view;
          if (options == null) {
            options = {};
          }
          config = _.defaults(options, this._getDefaults());
          model = new Backbone.Model(config);
          view = new Os.View();
          _.extend(model.get('model'), {
            mutators: {
              parsedIcons: {
                get: function() {
                  return JSON.parse(this.get('module_icons'));
                }
              }
            }
          });
          view.model = model;
          return this.setMainView(view);
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('os:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new Os.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview', 'lib/components/os/templates/view'], function($) {
    return this.Pro.module("Components.Os", function(Os, App, Backbone, Marionette, $, _) {
      return Os.View = (function(_super) {

        __extends(View, _super);

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.template = View.prototype.templatePath("os/view");

        View.prototype.className = 'icon-logo';

        return View;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/os/templates/view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var icon, _i, _len, _ref;
      
        _ref = this.model.get('parsedIcons');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          icon = _ref[_i];
          __out.push('\n  <span class="');
          __out.push(__sanitize(icon));
          __out.push('"></span>\n');
        }
      
        __out.push('\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/pill/pill_views', 'css!css/components/pill'], function() {
    return this.Pro.module("Components.Pill", function(Pill, App) {
      Pill.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.COLORS = {
          RED: 'red',
          GREEN: 'green',
          BLACK: 'black',
          BLUE: 'blue'
        };

        Controller.prototype.defaults = function() {
          return {
            color: this.COLORS.RED,
            content: 'Default Content'
          };
        };

        Controller.prototype.initialize = function(options) {
          var config, model, view;
          if (options == null) {
            options = {};
          }
          config = _.defaults(options, this._getDefaults());
          model = new Backbone.Model(config);
          view = new Pill.View();
          view.model = model;
          return this.setMainView(view);
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('pill:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new Pill.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview', 'lib/components/pill/templates/view'], function($) {
    return this.Pro.module("Components.Pill", function(Pill, App, Backbone, Marionette, $, _) {
      return Pill.View = (function(_super) {

        __extends(View, _super);

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.template = View.prototype.templatePath("pill/view");

        return View;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/pill/templates/view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="pill">\n  <a href="javascript:void(0)" class="');
      
        __out.push(__sanitize(this.color));
      
        __out.push(' ');
      
        __out.push(__sanitize(this.model.get(this.column.attribute)));
      
        __out.push('" title=\'');
      
        __out.push(__sanitize(this.model.get("" + this.column.attribute + "_title")));
      
        __out.push('\'>\n    ');
      
        __out.push(__sanitize(this.model.get(this.column.attribute)));
      
        __out.push('\n  </a>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/pro_search_filter/filter_view'], function() {
    return this.Pro.module("Components.ProSearchFilter", function(ProSearchFilter, App) {
      ProSearchFilter.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {
          return {
            placeHolderText: 'Search...'
          };
        };

        Controller.prototype.initialize = function(options) {
          if (options == null) {
            options = {};
          }
          this.filterView = this.getFilterView(options);
          this.setMainView(this.filterView);
          return this.listenTo(this.filterView, 'pro:search:filter:query:new', function(query) {
            return this.trigger('pro:search:filter:query:new', query);
          });
        };

        Controller.prototype.getFilterView = function(options) {
          return new ProSearchFilter.FilterView(options);
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler("pro:search:filter:component", function(options) {
        if (options == null) {
          options = {};
        }
        return new ProSearchFilter.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview', 'lib/components/pro_search_filter/templates/filter', 'css!css/components/pro_search_filter'], function($) {
    return this.Pro.module("Components.ProSearchFilter", function(ProSearchFilter, App) {
      return ProSearchFilter.FilterView = (function(_super) {

        __extends(FilterView, _super);

        function FilterView() {
          return FilterView.__super__.constructor.apply(this, arguments);
        }

        FilterView.prototype.template = FilterView.prototype.templatePath("pro_search_filter/filter");

        FilterView.prototype.ui = {
          container: '.filter-component',
          input: 'input',
          cancelButton: '.cancel-search'
        };

        FilterView.prototype.events = {
          'keyup @ui.input': 'inputChanged',
          'click @ui.cancelButton': 'cancelClicked'
        };

        FilterView.prototype.SORT_BY = {
          asc: 'asc',
          desc: 'desc'
        };

        FilterView.prototype.defaults = function() {
          return {
            container: this.ui.container,
            query: '',
            sortBy: this.SORT_BY.asc
          };
        };

        FilterView.prototype.initialize = function(options) {
          this.debouncedTriggerQuery = _.debounce(this._triggerQuery, 300);
          this.model = new Backbone.Model({
            placeHolderText: this.options.filterOpts.placeHolderText
          });
          return this.collection = this.options.collection;
        };

        FilterView.prototype.setOptions = function(options) {
          var opts;
          opts = this.options.filterOpts || this.options;
          _.defaults(opts, this.defaults());
          return this.options = opts;
        };

        FilterView.prototype.onRender = function() {
          return this.setOptions();
        };

        FilterView.prototype.inputChanged = function() {
          this._toggleCancelButton();
          return this.triggerQuery(this._inputText());
        };

        FilterView.prototype._inputText = function() {
          return this.ui.input.val();
        };

        FilterView.prototype._toggleCancelButton = function() {
          if (this._inputText() === '') {
            return this._hideCancelButton();
          } else {
            return this._showCancelButton();
          }
        };

        FilterView.prototype._hideCancelButton = function() {
          return this.ui.cancelButton.hide(200);
        };

        FilterView.prototype._showCancelButton = function() {
          return this.ui.cancelButton.show(200);
        };

        FilterView.prototype.cancelClicked = function() {
          this._clearInputText();
          return this.inputChanged();
        };

        FilterView.prototype._clearInputText = function() {
          return this.ui.input.val('');
        };

        FilterView.prototype.triggerQuery = function(query) {
          return this.debouncedTriggerQuery(query);
        };

        FilterView.prototype._triggerQuery = function(query) {
          return this.trigger('pro:search:filter:query:new', query);
        };

        return FilterView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/pro_search_filter/templates/filter"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class=\'filter-component pro-search\'>\n  <div id="hosts-table_filter" class="dataTables_filter">\n    <a class="cancel-search" href="javascript:void(0);" style="display: none;"></a>\n    <input type="text" id="search" placeholder="');
      
        __out.push(__sanitize(this.placeHolderText));
      
        __out.push('">\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/stars/stars_views', 'css!css/components/stars'], function() {
    return this.Pro.module("Components.Stars", function(Stars, App) {
      Stars.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.RATING = 5;

        Controller.prototype.defaults = function() {
          return {
            rating: this.RATING
          };
        };

        Controller.prototype.initialize = function(options) {
          var config, model, view;
          if (options == null) {
            options = {};
          }
          config = _.defaults(options, this._getDefaults());
          model = new Backbone.Model(config);
          view = new Stars.View();
          view.model = model;
          return this.setMainView(view);
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('stars:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new Stars.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview', 'lib/components/stars/templates/view'], function($) {
    return this.Pro.module("Components.Stars", function(Stars, App, Backbone, Marionette, $, _) {
      return Stars.View = (function(_super) {

        __extends(View, _super);

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.template = View.prototype.templatePath("stars/view");

        return View;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/stars/templates/view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<span class=\'rating-stars ');
      
        __out.push(__sanitize("star" + (this.model.get("rating"))));
      
        __out.push('\' title=\'');
      
        __out.push(__sanitize("" + (this.model.get("rating")) + "/5 stars"));
      
        __out.push('\'>\n  <span></span>\n</span>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {

  define(['jquery', 'base_view'], function($) {
    return this.Pro.module("Components.Table.CellViews", function(CellViews, App) {
      var _this = this;
      return CellViews.TruncateView = function(_arg) {
        var attribute, max;
        max = _arg.max, attribute = _arg.attribute;
        return Backbone.Marionette.ItemView.extend({
          template: function(model) {
            var text;
            max || (max = 16);
            text = model[attribute] || '';
            if (text.length > max) {
              text = text.substring(0, max) + '…';
              return "<span title='" + model[attribute] + "'>" + (_.escape(text)) + "</span>";
            } else {
              return _.escape(text);
            }
          },
          onRender: function() {
            return this.$el.tooltip();
          }
        });
      };
    });
  });

}).call(this);
(function() {

  define(['jquery', 'base_controller', 'lib/concerns/controllers/pro_carpenter', 'carpenter'], function($) {
    return this.Pro.module("Components.Table", function(Table, App) {
      Marionette.Carpenter.Controller.include('ProCarpenter');
      return App.reqres.setHandler('table:component', function(options) {
        if (options == null) {
          options = {};
        }
        if (options.search) {
          options.fetch = false;
        }
        _.defaults(options, {
          perPageOptions: [20, 50, 100, 500]
        });
        return new Marionette.Carpenter.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_itemview', 'base_collectionview', 'base_compositeview'], function($) {
    return this.Pro.module("Components.Table", function(Table, App, Backbone, Marionette, $, _) {
      Table.Empty = (function(_super) {

        __extends(Empty, _super);

        function Empty() {
          return Empty.__super__.constructor.apply(this, arguments);
        }

        Empty.prototype.tagName = 'tr';

        Empty.prototype.attributes = {
          "class": 'empty'
        };

        return Empty;

      })(App.Views.ItemView);
      return Table.Loading = (function(_super) {

        __extends(Loading, _super);

        function Loading() {
          return Loading.__super__.constructor.apply(this, arguments);
        }

        Loading.prototype.tagName = 'tr';

        return Loading;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'base_model', 'lib/entities/abstract/tab', 'lib/components/tabs/tabs_view'], function() {
    return this.Pro.module("Components.Tabs", function(Tabs, App, Backbone, Marionette, $, _) {
      Tabs.TabsController = (function(_super) {

        __extends(TabsController, _super);

        function TabsController() {
          return TabsController.__super__.constructor.apply(this, arguments);
        }

        TabsController.prototype.defaults = function() {
          return {
            tabs: [],
            destroy: true
          };
        };

        TabsController.prototype.initialize = function(opts) {
          var models,
            _this = this;
          if (opts == null) {
            opts = {};
          }
          this.config = _.defaults(opts, this._getDefaults());
          this.setMainView(new Tabs.Layout());
          models = _.map(this.config.tabs, function(tab) {
            return App.request('component:tab:entity', tab);
          });
          this.collection = App.request('component:tab:entities', models);
          this.listenTo(this._mainView, 'show', function() {
            var collectionView;
            collectionView = new Tabs.TabCollection({
              collection: _this.collection
            });
            _this.show(collectionView, {
              region: _this._mainView.tabs
            });
            return _this.collection.at(0).choose();
          });
          if (this.config.destroy) {
            return this.initTabSwap();
          } else {
            return this.initTabSwapSimple();
          }
        };

        TabsController.prototype.initTabSwap = function() {
          return this.listenTo(this.collection, "collection:chose:one", function(chosen) {
            var View, view;
            View = chosen.get('view');
            view = new View({
              model: chosen.get('model'),
              options: chosen.get('options')
            });
            return this.show(view, {
              region: this._mainView.tabContent
            });
          });
        };

        TabsController.prototype.initTabSwapSimple = function() {
          return this.listenTo(this.collection, "collection:chose:one", function(chosen) {
            var View, view;
            if (!chosen.get('cachedView')) {
              View = chosen.get('view');
              view = new View({
                model: chosen.get('model'),
                options: chosen.get('options')
              });
              chosen.set('cachedView', view);
              return this._showView(view);
            } else {
              view = chosen.get('cachedView');
              return this._showView(view);
            }
          });
        };

        TabsController.prototype._showView = function(view) {
          var id;
          id = view.cid;
          if (this._mainView.getRegion(id)) {
            $('>div', this._mainView.ui.tabContent).hide();
            return this._mainView.getRegion(id).$el.show();
          } else {
            this._mainView.ui.tabContent.append("<div class='" + id + "'></div>");
            this._mainView.addRegion(id, "." + id);
            this.show(view, {
              region: this._mainView.getRegion(id)
            });
            $('>div', this._mainView.ui.tabContent).hide();
            return this._mainView.getRegion(id).$el.show();
          }
        };

        TabsController.prototype.setInvalidTabs = function(tabIdx) {
          var tabId, _i, _len, _results;
          if (tabIdx == null) {
            tabIdx = [];
          }
          _results = [];
          for (_i = 0, _len = tabIdx.length; _i < _len; _i++) {
            tabId = tabIdx[_i];
            _results.push(this.collection.at(tabId).set('valid', false));
          }
          return _results;
        };

        TabsController.prototype.resetValidTabs = function() {
          return this.collection.each(function(tab) {
            return tab.set('valid', true);
          });
        };

        return TabsController;

      })(App.Controllers.Application);
      return App.reqres.setHandler('tabs:component', function(opts) {
        if (opts == null) {
          opts = {};
        }
        return new Tabs.TabsController(opts);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view', 'base_itemview', 'base_collectionview', 'base_layout', 'base_collectionview', 'base_compositeview', 'lib/components/tabs/templates/tabs_layout', 'lib/components/tabs/templates/tab', 'lib/concerns/views/chooseable'], function() {
    var _this = this;
    return this.Pro.module('Components.Tabs', function(Tabs, App, Backbone, Marionette, $, _) {
      Tabs.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('tabs/tabs_layout');

        Layout.prototype.className = "tab-component";

        Layout.prototype.regions = {
          tabs: '.tabs',
          tabContent: '.tab-content'
        };

        Layout.prototype.ui = {
          tabContent: '.tab-content'
        };

        return Layout;

      })(App.Views.Layout);
      Tabs.Tab = (function(_super) {

        __extends(Tab, _super);

        function Tab() {
          return Tab.__super__.constructor.apply(this, arguments);
        }

        Tab.prototype.template = Tab.prototype.templatePath('tabs/tab');

        Tab.prototype.className = 'tab';

        Tab.prototype.tagName = 'li';

        Tab.prototype.ui = {
          invalid: '.invalid'
        };

        Tab.prototype.events = {
          'click': 'choose'
        };

        Tab.prototype.modelEvents = {
          'change:valid': "validChanged"
        };

        Tab.include("Chooseable");

        Tab.prototype.validChanged = function(model, valid) {
          if (valid) {
            return this.setValid();
          } else {
            return this.setInvalid();
          }
        };

        Tab.prototype.setValid = function() {
          return this.ui.invalid.addClass('invisible');
        };

        Tab.prototype.setInvalid = function() {
          return this.ui.invalid.removeClass('invisible');
        };

        return Tab;

      })(App.Views.ItemView);
      return Tabs.TabCollection = (function(_super) {

        __extends(TabCollection, _super);

        function TabCollection() {
          return TabCollection.__super__.constructor.apply(this, arguments);
        }

        TabCollection.prototype.childView = Tabs.Tab;

        TabCollection.prototype.tagName = 'ul';

        return TabCollection;

      })(App.Views.CollectionView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/tabs/templates/tab"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="name">');
      
        __out.push(__sanitize(this.name));
      
        __out.push('<span class="invalid invisible"> *</span></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/tabs/templates/tabs_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="tabs"></div>\n\n<div class="tab-content"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_controller', 'lib/components/tags/index/index_view'], function($) {
    return this.Pro.module("Components.Tags.Index", function(Index, App, Backbone, Marionette, $, _) {
      Index.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var _this = this;
          this.model = options.model, this.serverAPI = options.serverAPI;
          this.setMainView(new Index.Layout({
            model: this.model
          }));
          this.listenTo(this._mainView, 'show', function() {
            _this.tagCompositeView = new Index.TagCompositeView({
              model: _this.model,
              serverAPI: _this.serverAPI
            });
            _this.listenTo(_this.tagCompositeView, 'tag:increment', function(count) {
              return this._mainView.increment(count);
            });
            _this.listenTo(_this.tagCompositeView, 'tag:decrement', function() {
              return this._mainView.decrement();
            });
            return _this.show(_this.tagCompositeView, {
              region: _this._mainView.tagHover
            });
          });
          this.listenTo(this._mainView, 'show:tag:hover', function() {
            this.tagCompositeView.clearTagHovers();
            return this.tagCompositeView.showTags();
          });
          return this.listenTo(this._mainView, 'hide:tag:hover', function() {
            return this.tagCompositeView.hideTags();
          });
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('tags:index:component', function(options) {
        if (options == null) {
          options = {};
        }
        if (options.instantiate != null) {
          return new Index.Controller(options);
        } else {
          return Index.Controller;
        }
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'lib/components/tags/index/templates/layout', 'lib/components/tags/index/templates/tag_composite', 'base_view', 'base_itemview', 'base_layout', 'base_compositeview'], function($, Template, TokenInput, ModalForm) {
    return this.Pro.module('Components.Tags.Index', function(Index, App, Backbone, Marionette, $, _) {
      var DELETE_CONFIRM_MESSAGE, NAME_SYMBOL;
      NAME_SYMBOL = "$NAME";
      DELETE_CONFIRM_MESSAGE = "Are you sure you want to remove the tag \"" + NAME_SYMBOL + "\?";
      Index.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          this.triggerHideHover = __bind(this.triggerHideHover, this);

          this.triggerHover = __bind(this.triggerHover, this);
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('tags/index/layout');

        Layout.prototype.ui = {
          tagCount: '.tag-count a',
          tags: '.tags>.row'
        };

        Layout.prototype.regions = {
          tagHover: '.tag-hover-region'
        };

        Layout.prototype.events = {
          'mouseenter @ui.tagCount': 'setHoverTimeout',
          'mouseleave @ui.tags': 'clearHoverTimeout',
          'mouseleave @ui.tagCount': 'clearHoverTimeout',
          'mouseleave @ui.tags': 'setHideHoverTimeout',
          'mouseenter @ui.tags': 'clearHideHoverTimeout',
          'mouseleave': 'setHideHoverTimeout'
        };

        Layout.prototype.setHoverTimeout = function() {
          var _ref, _ref1;
          if (!(!(((_ref = this.model) != null ? _ref.tagUrl : void 0) != null) && parseInt((_ref1 = this.model) != null ? _ref1.get('tag_count') : void 0) === 0)) {
            return this.hoverTimeout = setTimeout(this.triggerHover, 100);
          }
        };

        Layout.prototype.clearHoverTimeout = function() {
          return clearTimeout(this.hoverTimeout);
        };

        Layout.prototype.setHideHoverTimeout = function() {
          return this.hideHoverTimeout = setTimeout(this.triggerHideHover, 200);
        };

        Layout.prototype.clearHideHoverTimeout = function() {
          return clearTimeout(this.hideHoverTimeout);
        };

        Layout.prototype.triggerHover = function() {
          return this.trigger('show:tag:hover');
        };

        Layout.prototype.triggerHideHover = function() {
          return this.trigger('hide:tag:hover');
        };

        Layout.prototype.increment = function(increment) {
          var count;
          if (increment == null) {
            increment = 1;
          }
          count = parseInt(this.ui.tagCount.html()) + increment;
          return this.ui.tagCount.html(_.escape("" + count + " tags"));
        };

        Layout.prototype.decrement = function(decrement) {
          var count;
          if (decrement == null) {
            decrement = 1;
          }
          count = parseInt(this.ui.tagCount.html()) - decrement;
          return this.ui.tagCount.html(_.escape("" + count + " tags"));
        };

        return Layout;

      })(App.Views.Layout);
      return Index.TagCompositeView = (function(_super) {

        __extends(TagCompositeView, _super);

        function TagCompositeView() {
          this.deleteTagClicked = __bind(this.deleteTagClicked, this);
          return TagCompositeView.__super__.constructor.apply(this, arguments);
        }

        TagCompositeView.prototype.template = TagCompositeView.prototype.templatePath('tags/index/tag_composite');

        TagCompositeView.prototype.className = 'tags';

        TagCompositeView.prototype.events = {
          'click a.tag-close': 'deleteTagClicked',
          'click a.green-add': 'addTagClicked'
        };

        TagCompositeView.prototype.modelEvents = {
          'change': 'render'
        };

        TagCompositeView.prototype.ui = {
          tag: '.tag-count'
        };

        TagCompositeView.prototype.initialize = function(opts) {
          this.serverAPI = opts.serverAPI;
          this.model = opts.model;
          return TagCompositeView.__super__.initialize.call(this, opts);
        };

        TagCompositeView.prototype.serializeData = function() {
          var tags;
          tags = this.model.get('tags') || [];
          return {
            model: this.model,
            lastTags: tags,
            tagCount: tags.length,
            workspace_id: this.model.get('workspace_id')
          };
        };

        TagCompositeView.prototype.addTagClicked = function(e) {
          var collection, controller, id, ids, models, query, url,
            _this = this;
          e.preventDefault();
          id = this.model.get('id');
          if (!id || id < 1) {
            return;
          }
          ids = [id];
          models = _.map(ids, function(id) {
            return new Backbone.Model({
              id: id
            });
          });
          collection = new Backbone.Collection(models);
          query = "";
          url = this.model.tagUrl != null ? url = this.model.tagUrl() : url = this.model.get('tagUrl');
          controller = App.request('tags:new:component', collection, {
            q: query,
            url: url,
            content: this.model.get('taggingModalHelpContent'),
            serverAPI: this.serverAPI,
            tagSingle: true
          });
          return App.execute("showModal", controller, {
            modal: {
              title: 'Tags',
              description: '',
              height: 170,
              width: 400,
              hideBorder: true
            },
            buttons: [
              {
                name: 'Cancel',
                "class": 'close'
              }, {
                name: 'OK',
                "class": 'btn primary'
              }
            ],
            doneCallback: function() {
              _this.trigger("tag:increment", controller.tagCount);
              return App.vent.trigger('core:tag:added', _this.model.collection);
            }
          });
        };

        TagCompositeView.prototype.deleteTagClicked = function(e) {
          var $wrap, confirmMsg, id, tagName,
            _this = this;
          e.preventDefault();
          id = parseInt($(e.currentTarget).attr('data-id'));
          if (!id || id < 1) {
            return;
          }
          tagName = _.string.trim($(e.currentTarget).prev('a.tag').text());
          confirmMsg = DELETE_CONFIRM_MESSAGE.replace(NAME_SYMBOL, tagName);
          if (!confirm(confirmMsg)) {
            return;
          }
          $wrap = $(e.currentTarget).closest('div');
          $(e.currentTarget).prev('a.tag').first().remove();
          $(e.currentTarget).remove();
          $wrap.remove();
          return this.model.removeTag({
            tagId: id,
            success: function() {
              _this.trigger("tag:decrement");
              _this.render();
              return App.vent.trigger('core:tag:removed', _this.model.collection);
            }
          });
        };

        TagCompositeView.prototype.showTags = function() {
          var _this = this;
          return this.model.fetchTags(function(model) {
            return _this.$el.css('display', 'block');
          });
        };

        TagCompositeView.prototype.hideTags = function() {
          return this.$el.css('display', 'none');
        };

        TagCompositeView.prototype.clearTagHovers = function() {
          return $('.tag-hover-region>.tags').css('display', 'none');
        };

        return TagCompositeView;

      })(App.Views.CompositeView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/tags/index/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="tag-count">\n  <a href="javascript:void(0)">\n    ');
      
        __out.push(__sanitize(this.tag_count));
      
        __out.push('\n    ');
      
        if (this.tag_count != null) {
          __out.push('\n        tags\n    ');
        }
      
        __out.push('\n  </a>\n</div>\n<div class="tag-hover-region"></div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/tags/index/templates/tag_composite"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var tag, _i, _len, _ref, _ref1, _ref2;
      
        __out.push('<div class="nub-spacer"></div>\n\n<div class="row">\n    ');
      
        _ref = this.lastTags;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          __out.push('\n       <div class="no-whitespace">\n           <a class="tag" href="javacript:void(0)">\n               <span class="name">');
          __out.push(__sanitize(tag.name));
          __out.push('</span>\n           </a>\n\n          ');
          if (((_ref1 = this.model) != null ? _ref1.tagUrl : void 0) != null) {
            __out.push('\n            <a class="tag-close" href="javascript:void(0)" data-id="');
            __out.push(__sanitize(tag.id));
            __out.push('">&times;</a>\n          ');
          }
          __out.push('\n\n       </div>\n    ');
        }
      
        __out.push('\n</div>\n\n');
      
        if (((_ref2 = this.model) != null ? _ref2.tagUrl : void 0) != null) {
          __out.push('\n  <div class="row add-tags">\n      <label class="tags">Tags</label>\n      <a class="green-add" href="javascript:void(0)" title="Add tags">+</a>\n  </div>\n');
        }
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_controller', 'lib/components/tags/new/new_view'], function($) {
    return this.Pro.module("Components.Tags.New", function(New, App, Backbone, Marionette, $, _) {
      New.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.onFormSubmit = __bind(this.onFormSubmit, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var content,
            _this = this;
          _.defaults(options, {
            selectAllState: false,
            q: '',
            url: '',
            content: "Default Text"
          });
          this.q = options.q, this.url = options.url, this.entity = options.entity, this.selectAllState = options.selectAllState, this.selectedIDs = options.selectedIDs, this.deselectedIDs = options.deselectedIDs, content = options.content, this.serverAPI = options.serverAPI, this.ids_only = options.ids_only, this.tagSingle = options.tagSingle;
          this.tagForm = new New.TagForm({
            model: new Backbone.Model({
              content: content
            })
          });
          this.listenTo(this.tagForm, 'token:changed', function() {
            return _this.tagCount = _this.tagForm.tokenInput.tokenInput('get').length;
          });
          return this.setMainView(this.tagForm);
        };

        Controller.prototype.getDataOptions = function() {
          var selectionOpts, tokens, _ref;
          tokens = _.map(this.getTokens(), function(tok) {
            return tok.name;
          });
          if (this.selectAllState != null) {
            selectionOpts = {
              select_all_state: this.selectAllState,
              selected_ids: this.selectedIDs,
              deselected_ids: this.deselectedIDs
            };
          } else {
            selectionOpts = {
              ignore_if_no_selections: true
            };
          }
          return {
            entity_ids: this.entity.map(function(entity) {
              return entity.id;
            }),
            new_entity_tags: tokens.join(','),
            preserve_existing: true,
            q: this.q,
            search: (_ref = this.serverAPI) != null ? _ref.search : void 0,
            ids_only: this.ids_only,
            tag_single: this.tagSingle,
            selections: selectionOpts
          };
        };

        Controller.prototype.getTokens = function() {
          return this._mainView._nameField().data('tokenInputObject').getTokens();
        };

        Controller.prototype.clearTokens = function() {
          return this._mainView._nameField().data('tokenInputObject').clear();
        };

        Controller.prototype.restoreTokens = function(tokens) {
          var token, _i, _len, _results;
          if (tokens == null) {
            tokens = [];
          }
          _results = [];
          for (_i = 0, _len = tokens.length; _i < _len; _i++) {
            token = tokens[_i];
            _results.push(this.tagForm.tokenInput.tokenInput('add', {
              id: token.id,
              name: token.name
            }));
          }
          return _results;
        };

        Controller.prototype.addTokens = function(tokens) {
          var token, _i, _len, _results;
          if (tokens == null) {
            tokens = [];
          }
          _results = [];
          for (_i = 0, _len = tokens.length; _i < _len; _i++) {
            token = tokens[_i];
            _results.push(this.tagForm.tokenInput.tokenInput('add', {
              name: token
            }));
          }
          return _results;
        };

        Controller.prototype.onFormSubmit = function() {
          var defer, formSubmit,
            _this = this;
          this._mainView._removeError();
          defer = $.Deferred();
          formSubmit = function() {
            return $.ajax({
              url: _this.url,
              method: 'POST',
              data: _this.getDataOptions(),
              success: function(x) {
                if (x.error) {
                  return _this._mainView._showError(x.error);
                } else {
                  return defer.resolve("success");
                }
              },
              error: function(x) {
                var json;
                defer.reject("failure");
                json = $.parseJSON(x.responseText);
                return _this._mainView._showError(json.error);
              }
            });
          };
          defer.promise(formSubmit);
          return formSubmit;
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('tags:new:component', function(entity, options) {
        if (options == null) {
          options = {};
        }
        options.entity = entity;
        return new New.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'lib/components/tags/new/templates/tag_form_layout', 'base_view', 'base_itemview', 'base_layout', 'css!css/components/tags/new', '/assets/jquery.tokeninput-967a3a6cea335c7437dfcd702c96692ceca5ce17cb0c075fb10578f754fcb141.js'], function($, Template, TokenInput, ModalForm) {
    return this.Pro.module('Components.Tags.New', function(New, App, Backbone, Marionette, $, _) {
      return New.TagForm = (function(_super) {

        __extends(TagForm, _super);

        function TagForm() {
          this._showError = __bind(this._showError, this);

          this._removeError = __bind(this._removeError, this);

          this._nameField = __bind(this._nameField, this);

          this.onShow = __bind(this.onShow, this);

          this.focus = __bind(this.focus, this);

          this.serialize = __bind(this.serialize, this);
          return TagForm.__super__.constructor.apply(this, arguments);
        }

        TagForm.prototype.template = TagForm.prototype.templatePath('tags/new/tag_form_layout');

        TagForm.prototype.initialize = function(opts) {
          if (opts == null) {
            opts = {};
          }
          this.model.set('informationAssetTag', '<img src="/assets/icons/silky/information-c0210a97250ec34cc04d6c8ff768012bf9e054abe33c7fcc558f65bf57a1661a.png" />');
          $.extend(this, opts);
          return TagForm.__super__.initialize.apply(this, arguments);
        };

        TagForm.prototype.serialize = function() {
          return this;
        };

        TagForm.prototype.focus = function() {
          return this.$el.find('input:visible').focus();
        };

        TagForm.prototype.onShow = function() {
          var nameField, route, wid, _ref,
            _this = this;
          nameField = this._nameField();
          wid = this.workspace_id || window.WORKSPACE_ID;
          route = Routes.search_workspace_tags_path(wid, {
            format: 'json'
          });
          if (nameField.data('tokenInputObject') == null) {
            this.tokenInput = nameField.tokenInput(route, {
              theme: "metasploit",
              hintText: "Type in a tag name...",
              searchingText: "Searching tags...",
              allowCustomEntry: true,
              preventDuplicates: true,
              allowFreeTagging: true,
              resultsLimit: 3,
              tokenValue: (_ref = this.tokenValue) != null ? _ref : 'id',
              onAdd: function() {
                return _this.trigger('token:changed');
              },
              onRemove: function() {
                return _this.trigger('token:changed');
              }
            });
          }
          return window.Forms.renderHelpLinks(this.el);
        };

        TagForm.prototype._nameField = function() {
          return $('[name=name]', this.el);
        };

        TagForm.prototype._removeError = function() {
          return $('form .error-box', this.el).remove();
        };

        TagForm.prototype._showError = function(err) {
          var $errDiv;
          this._removeError();
          $errDiv = $('<div />', {
            "class": 'error-box'
          });
          err = err.substr(err.indexOf(" ") + 1);
          $errDiv.text(err);
          return $('form', this.el).prepend($errDiv);
        };

        return TagForm;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/tags/new/templates/tag_form_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<form id="add_tags" style="padding: 3px 0;" action="">\n    <ul>\n        <li class="name tags" style="margin-bottom: 20px; position:relative;">\n            <label id="tags-component" style="position: absolute; margin-left: 4px; margin-top: 2px; right: -25px;"></label>\n            <input name="name"/>\n        </li>\n    </ul>\n</form>\n\n\n<div class="inline-help" data-field="tags-component">\n    <a href class="help" data-field="tags-component" target="_blank">\n    ');
      
        __out.push(this.informationAssetTag);
      
        __out.push('\n    </a>\n    <h3>Tags</h3>\n    <div style="margin-top: 6px;">');
      
        __out.push(this.content);
      
        __out.push('</div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/tooltip/templates/view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="tooltip-button">\n  <label class="tooltip-component-');
      
        __out.push(__sanitize(this.cid));
      
        __out.push('" style="position: absolute; margin-left: 4px; margin-top: 2px"></label>\n</div>\n\n<div class="inline-help" data-field="tooltip-component-');
      
        __out.push(__sanitize(this.cid));
      
        __out.push('">\n  <a href class="help" data-field="tooltip-component-');
      
        __out.push(__sanitize(this.cid));
      
        __out.push('" target="_blank">\n    ');
      
        __out.push(this.informationAssetTag);
      
        __out.push('\n  </a>\n  <h3>');
      
        __out.push(__sanitize(this.title));
      
        __out.push('</h3>\n  <div class="content-region" style="margin-top: 6px;">\n    <pre>');
      
        __out.push(__sanitize(this.content));
      
        __out.push('</pre>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/tooltip/tooltip_views'], function() {
    return this.Pro.module("Components.Tooltip", function(Tooltip, App) {
      Tooltip.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {
          return {
            title: 'Title',
            content: 'Default Content'
          };
        };

        Controller.prototype.initialize = function(options) {
          var config, model, view;
          if (options == null) {
            options = {};
          }
          config = _.defaults(options, this._getDefaults());
          model = new Backbone.Model(config);
          view = new Tooltip.View();
          model.set('cid', view.cid);
          model.set('informationAssetTag', '<img src="/assets/icons/silky/information-c0210a97250ec34cc04d6c8ff768012bf9e054abe33c7fcc558f65bf57a1661a.png" />');
          view.model = model;
          if (config.view != null) {
            this.listenTo(this._mainView, 'show', function() {
              return this.show(config.view, {
                region: this._mainView.contentRegion
              });
            });
          }
          return this.setMainView(view);
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('tooltip:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new Tooltip.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview', 'lib/components/tooltip/templates/view'], function($) {
    return this.Pro.module("Components.Tooltip", function(Tooltip, App, Backbone, Marionette, $, _) {
      var ARROW_PAD_LEFT, WAIT_TO_CHANGE_DOM;
      WAIT_TO_CHANGE_DOM = 350;
      ARROW_PAD_LEFT = 103;
      return Tooltip.View = (function(_super) {

        __extends(View, _super);

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.template = View.prototype.templatePath("tooltip/view");

        View.prototype.events = {
          'click a.help': 'inlineClick',
          'mouseover a.help': '_mouseOver',
          'mouseout a.help': '_mouseOut'
        };

        View.prototype.ui = {
          inlineHelp: '.inline-help'
        };

        View.prototype.regions = {
          contentRegion: '.content-region'
        };

        View.prototype.onShow = function() {
          var $helpLink, $newHelpLink, $targetLi;
          $helpLink = this.ui.inlineHelp.children('a');
          $targetLi = $("." + ($helpLink.data('field')), this.$el);
          if ($targetLi.length < 1) {
            $targetLi = this.ui.inlineHelp.parents('li').first();
          }
          $targetLi.append($helpLink.clone());
          $newHelpLink = $targetLi.children('a');
          $helpLink.remove();
          if (this.ui.inlineHelp.find('div.wrap').length === 0) {
            this.ui.inlineHelp.wrapInner('<div class="wrap" />');
            this.ui.inlineHelp.find('h3').nextUntil('h3').wrapAll($('<div/>', {
              'class': 'content'
            }));
          }
          if (this.ui.inlineHelp.find('div.arrow').length === 0) {
            return this.ui.inlineHelp.prepend("<div class='arrow' />");
          }
        };

        View.prototype._mouseOver = function() {
          return $('a.help', this.$el).find('img').attr('src', '/assets/icons/silky/information_hover-14a9d682776bb882f5a94d77a6503aa1e2ad652adfe979d5790e09b4ba9930fe.png');
        };

        View.prototype._mouseOut = function() {
          return $('a.help', this.$el).find('img').attr('src', '/assets/icons/silky/information-c0210a97250ec34cc04d6c8ff768012bf9e054abe33c7fcc558f65bf57a1661a.png');
        };

        View.prototype._helpDivSelector = function(fieldKey) {
          return ".inline-help[data-field=\"" + fieldKey + "\"]";
        };

        View.prototype._hideAllHelp = function(notClause) {
          return $('.inline-help:visible').not(notClause).fadeOut().each(function() {
            var _this = this;
            return setTimeout((function() {
              return $(_this).appendTo($(_this).data('old_parent'));
            }), ARROW_PAD_LEFT);
          });
        };

        View.prototype.inlineClick = function(e) {
          var $helpDiv, $helpLink, arrowShift, left, pos, real_left, width,
            _this = this;
          if ($(e.currentTarget).data('showing')) {
            return;
          }
          $helpLink = $('a.help', this.$el);
          $(e.currentTarget).data('showing', true);
          _.defer((function() {
            return $(e.currentTarget).data('showing', false);
          }), 300);
          if (e) {
            e.preventDefault();
          }
          pos = $helpLink.offset();
          width = $helpLink.width();
          $helpDiv = $(this._helpDivSelector($helpLink.data('field')));
          this._hideAllHelp($helpDiv);
          $('body').unbind('click.reset-help');
          if ($helpDiv.is(':visible')) {
            $helpDiv.fadeOut();
            return setTimeout((function() {
              return $helpDiv.appendTo($helpDiv.data('old_parent'));
            }), ARROW_PAD_LEFT);
          } else {
            $helpDiv.data('old_parent', $helpDiv.parent().first());
            $helpDiv.appendTo($('body'));
            arrowShift = $helpDiv.width() - ARROW_PAD_LEFT;
            left = pos.left - arrowShift;
            real_left = left < 10 ? 10 : left;
            $('.arrow', $helpDiv).css({
              right: (78 + real_left - left) + 'px'
            });
            $helpDiv.css("left", "" + real_left + "px");
            $helpDiv.css("top", "" + (pos.top + 20) + "px");
            $helpDiv.fadeIn();
            return window.setTimeout(function() {
              return $('body').bind('click.reset-help', function(e) {
                if ($(e.target).parents('a.help').length || $(e.target).parents('inline-help').length) {
                  return;
                }
                $('body').unbind('click.reset-help');
                $helpDiv.fadeOut();
                setTimeout((function() {
                  return $helpDiv.appendTo($helpDiv.data('old_parent'));
                }), ARROW_PAD_LEFT);
                return e.preventDefault();
              });
            });
          }
        };

        return View;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/components/window_slider/templates/window_slider"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/components/window_slider/window_slider_view'], function() {
    return this.Pro.module("Components.WindowSlider", function(WindowSlider, App) {
      WindowSlider.WindowSliderController = (function(_super) {

        __extends(WindowSliderController, _super);

        function WindowSliderController() {
          return WindowSliderController.__super__.constructor.apply(this, arguments);
        }

        WindowSliderController.prototype.defaults = function() {
          return {
            proxy: false,
            onBeforeSlide: function() {},
            onAfterSlide: function() {},
            show: true
          };
        };

        WindowSliderController.prototype.initialize = function(options) {
          var config;
          if (options == null) {
            options = {};
          }
          this.contentView = options.contentView;
          config = this.getConfig(options);
          this.showView = config.show;
          this.windowSliderLayout = this.getWindowSliderLayout(config);
          this.setMainView(this.windowSliderLayout);
          if (config.proxy) {
            this.parseProxys(config.proxy);
          }
          this.createListeners(config);
          return this.show(this.windowSliderLayout);
        };

        WindowSliderController.prototype.getWindowSliderLayout = function(config) {
          return new WindowSlider.WindowSliderLayout(config);
        };

        WindowSliderController.prototype.createListeners = function(config) {};

        /*
                @listenTo @windowSliderLayout, "before:slide", => @beforeSlide(config)
                @listenTo @windowSliderLayout, "after:slide", => @afterSlide(config)
        
              beforeSlide: (config) ->
                config.onBeforeSlide()
                @trigger "before:slide"
        
              afterSlide: (config) ->
                config.onAfterSlide()
                @trigger "after:slide"
        */


        WindowSliderController.prototype.showWindowSliderContentRegion = function(options, showFunc, args) {
          var slideToRegion;
          if (options == null) {
            options = {};
          }
          if (showFunc == null) {
            showFunc = null;
          }
          _.defaults(options, {
            show: this.showView,
            contentView: this.contentView,
            loading: false
          });
          slideToRegion = this.windowSliderLayout.addSliderRegion();
          if (showFunc) {
            return showFunc.call({}, args, slideToRegion);
          } else {
            if (options.show) {
              return this.show(options.contentView, {
                region: slideToRegion,
                loading: options.loading
              });
            }
          }
        };

        /*
              #Good Canidates for Mixin
        */


        WindowSliderController.prototype.getConfig = function(options) {
          var config, windowSlider;
          windowSlider = _.result(this.contentView, "windowSlider");
          config = this.mergeDefaultsInto(windowSlider);
          return _.extend(config, _(options).omit("contentView", "model", "collection"));
        };

        WindowSliderController.prototype.parseProxys = function(proxys) {
          var proxy, _i, _len, _ref, _results;
          _ref = _([proxys]).flatten();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            proxy = _ref[_i];
            _results.push(this.windowSliderLayout[proxy] = _.result(this.contentView, proxy));
          }
          return _results;
        };

        return WindowSliderController;

      })(App.Controllers.Application);
      App.reqres.setHandler("window_slider:component", function(contentView, options) {
        if (options == null) {
          options = {};
        }
        if (contentView) {
          options.contentView = contentView;
          return new WindowSlider.WindowSliderController(options);
        } else {
          return WindowSlider.WindowSliderController;
        }
      });
      return App.commands.setHandler('sliderRegion:show', function(options, showFunc, args) {
        var contentView, loading, show, windowSliderController;
        if (options == null) {
          options = {};
        }
        if (showFunc == null) {
          showFunc = null;
        }
        contentView = options.contentView, show = options.show, loading = options.loading;
        if (this.windowSlider == null) {
          windowSliderController = App.request("window_slider:component");
          this.windowSlider = new windowSliderController({
            show: false
          });
        }
        return this.windowSlider.showWindowSliderContentRegion({
          contentView: contentView,
          show: show,
          loading: loading
        }, showFunc, args);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'lib/utilities/uuid', 'base_layout', 'base_itemview', 'lib/components/window_slider/templates/window_slider'], function($, UUID) {
    return this.Pro.module("Components.WindowSlider", function(WindowSlider, App) {
      return WindowSlider.WindowSliderLayout = (function(_super) {

        __extends(WindowSliderLayout, _super);

        function WindowSliderLayout() {
          this.showSlider = __bind(this.showSlider, this);

          this.animate = __bind(this.animate, this);

          this.removeNode = __bind(this.removeNode, this);
          return WindowSliderLayout.__super__.constructor.apply(this, arguments);
        }

        WindowSliderLayout.prototype.template = WindowSliderLayout.prototype.templatePath("window_slider/window_slider");

        WindowSliderLayout.prototype.className = 'window-slider-container';

        WindowSliderLayout.prototype.regions = {
          windowSliderRegion: '#window-slider-region'
        };

        WindowSliderLayout.prototype.initialize = function() {
          return this.shown = false;
        };

        WindowSliderLayout.prototype.addSliderRegion = function() {
          if ($('.window-slider-pane', this.el).length > 1) {
            $(".window-slider-pane:not(." + this.id + ")", this.el).remove();
          }
          this.addNode();
          this.addRegion(this.id, "." + this.id);
          this.listenTo(this[this.id], 'show', this.animateSlider);
          return this[this.id];
        };

        WindowSliderLayout.prototype.addNode = function() {
          var klass;
          this.id = Pro.Utilities.createGuid();
          klass = this.shown ? '' : 'show first';
          this.shown = true;
          return this.$el.append("<div class='" + this.id + " " + klass + " window-slider-pane'></div>");
        };

        WindowSliderLayout.prototype.removeNode = function(e) {
          var klass;
          klass = $(e.target).attr('class').split(" ")[0];
          if (this[klass] != null) {
            this.removeRegion(klass);
            return $("." + klass, this.el).remove();
          }
        };

        WindowSliderLayout.prototype.animateSlider = function() {
          return _.delay(this.animate, 1);
        };

        WindowSliderLayout.prototype.animate = function() {
          var $elem, klass;
          if ($('.window-slider-pane', this.el).first().attr('class').indexOf(this.id) === -1) {
            if ($('.window-slider-pane', this.el).length > 2) {
              $elem = $(".window-slider-pane:not(." + this.id + ")", this.el);
              klass = $(e.target).attr('class').split(" ")[0];
              this.removeRegion(klass);
              $elem.remove();
              $elem = $(".window-slider-pane:not(." + this.id + ")", this.el);
              klass = $(e.target).attr('class').split(" ")[0];
              this.removeRegion(klass);
              $elem.remove();
            } else {
              $('.window-slider-pane', this.el).css({
                position: 'absolute'
              });
              $('.window-slider-pane', this.el).first().addClass('slideOutLeft');
              $('.window-slider-pane', this.el).first().one('transitionEnd transitionend webkitTransitionEnd', this.removeNode);
            }
          }
          return _.defer(this.showSlider);
        };

        WindowSliderLayout.prototype.showSlider = function() {
          var $myEl;
          $myEl = this.$el;
          $("." + this.id, this.el).addClass('show').one('transitionEnd transitionend webkitTransitionEnd', function() {
            $(this).css({
              position: 'relative'
            });
            return $myEl.css('min-height', 0);
          });
          return $myEl.css('min-height', this.$el.children().last().height());
        };

        return WindowSliderLayout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() {

  define(['lib/components/table/table_view'], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.ProCarpenter = {
        initialize: function() {
          var _this = this;
          if (this.filterOpts) {
            this.initializeFilter();
          }
          if (this["static"]) {
            this.collection.bootstrap();
          }
          this.collection.carpenterRadio = this.carpenterRadio;
          this.carpenterRadio.off('error:search');
          return this.carpenterRadio.on('error:search', function(message) {
            _this.collection.reset();
            return App.execute('flash:display', {
              title: 'Error in search',
              style: 'error',
              message: message || 'There is an error in your search terms.'
            });
          });
        },
        initializeFilter: function() {
          switch (this.filterOpts.searchType) {
            case 'pro':
              this.initializeProSearchFilter();
              break;
            default:
              this.initializeVisualSearchFilter();
          }
          return this.show(this.filter, {
            region: this.filterOpts.filterRegion != null ? this.filterOpts.filterRegion : this.getMainView().filterRegion
          });
        },
        initializeVisualSearchFilter: function() {
          var _this = this;
          if (this.search) {
            this.fetch = false;
            this.filterOpts.query = this.addWhiteSpaceToQuery(this.search);
          }
          this.staticFacets = this.filterOpts.staticFacets;
          this.filter = App.request('filter:component', this);
          if (this.search) {
            this.applyCustomFilter(this.search);
          }
          return this.listenTo(this.filter, 'filter:query:new', function(query) {
            _this.toggleInteraction(false);
            return _this.applyCustomFilter(query);
          });
        },
        initializeProSearchFilter: function() {
          var _this = this;
          this.filter = App.request('pro:search:filter:component', this);
          return this.listenTo(this.filter, 'pro:search:filter:query:new', function(query) {
            _this.toggleInteraction(false);
            return _this.applyProSearchFilter(query);
          });
        },
        applyCustomFilter: function(query) {
          return this.list.setSearch({
            attributes: {
              custom_query: query
            }
          });
        },
        applyProSearchFilter: function(query) {
          return this.list.setSearch({
            attributes: {
              pro_search_query: query
            }
          });
        },
        addWhiteSpaceToQuery: function(query) {
          return query.replace(/([^:]):([^:\s])/g, "$1: $2");
        },
        postTableState: function(opts) {
          var data, defaultOpts;
          data = {
            ui: true,
            selections: {
              select_all_state: this.tableSelections.selectAllState || null,
              selected_ids: Object.keys(this.tableSelections.selectedIDs),
              deselected_ids: Object.keys(this.tableSelections.deselectedIDs)
            },
            search: this.collection.server_api.search,
            ignore_pagination: true
          };
          opts.data || (opts.data = {});
          _.extend(opts.data, data);
          defaultOpts = {
            method: 'POST',
            url: _.result(this.collection, 'url'),
            dataType: 'json'
          };
          _.defaults(opts, defaultOpts);
          return $.ajax(opts);
        }
      };
    });
  });

}).call(this);
(function() {

  define(['lib/components/table/table_controller', 'entities/cred', 'entities/origin', 'lib/components/modal/modal_controller', 'apps/creds/shared/cred_shared_views', 'lib/components/tags/index/index_controller', 'apps/creds/new/new_controller', 'lib/components/tags/new/new_controller'], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.RenderCoresTable = {
        renderCoresTable: function(collection, region, opts) {
          var columns, extraColumns, showClone, tableController;
          if (opts == null) {
            opts = {};
          }
          extraColumns = opts.extraColumns || [];
          showClone = opts.showClone != null ? opts.showClone : true;
          if (showClone) {
            extraColumns.unshift({
              "class": 'clone',
              sortable: false,
              attribute: 'clone',
              view: App.request('creds:shared:coresTableCloneCell')
            });
          }
          columns = _.union([
            {
              label: 'Logins',
              attribute: 'logins_count',
              sortable: false
            }, {
              attribute: 'public.username',
              label: 'Public',
              defaultDirection: 'asc',
              view: App.request('creds:shared:coresTablePublicCell'),
              viewOpts: {
                disableCredLinks: opts.disableCredLinks
              }
            }, {
              label: 'Private',
              "class": 'truncate',
              view: App.request('creds:shared:coresTablePrivateCell'),
              attribute: 'private.data'
            }, {
              label: 'Type',
              attribute: 'pretty_type',
              sortAttribute: 'private.type'
            }, {
              label: 'Realm',
              attribute: 'pretty_realm',
              "class": 'truncate',
              sortAttribute: 'realm.value'
            }, {
              label: "Origin",
              attribute: 'origin_type',
              view: App.request('creds:shared:coresTableOriginCell')
            }, {
              attribute: 'validation',
              sortable: false
            }, {
              attribute: 'tags',
              sortable: false,
              view: App.request('tags:index:component')
            }
          ], extraColumns);
          if (opts.withoutColumns != null) {
            columns = _.reject(columns, function(col) {
              return _.contains(opts.withoutColumns, col.attribute);
            });
          }
          return tableController = App.request("table:component", _.extend({
            region: region,
            taggable: true,
            selectable: true,
            "static": false,
            collection: collection,
            htmlID: opts.htmlID,
            perPage: 20,
            defaultSort: 'public.username',
            actionButtons: [
              {
                label: 'Export',
                click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                  var controller;
                  controller = App.request('creds:export', {
                    selectAllState: selectAllState,
                    selectedIDs: selectedIDs,
                    deselectedIDs: deselectedIDs,
                    selectedVisibleCollection: selectedVisibleCollection,
                    tableCollection: tableCollection
                  });
                  return App.execute("showModal", controller, {
                    modal: {
                      title: 'Export',
                      description: '',
                      height: 280,
                      width: 520
                    },
                    buttons: [
                      {
                        name: 'Cancel',
                        "class": 'close'
                      }, {
                        name: 'OK',
                        "class": 'btn primary'
                      }
                    ]
                  });
                }
              }, {
                label: 'Delete',
                activateOn: 'any',
                click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                  var controller;
                  controller = App.request('creds:delete', {
                    selectAllState: selectAllState,
                    selectedIDs: selectedIDs,
                    deselectedIDs: deselectedIDs,
                    selectedVisibleCollection: selectedVisibleCollection,
                    tableCollection: tableCollection
                  });
                  return App.execute("showModal", controller, {
                    modal: {
                      title: 'Are you sure?',
                      description: '',
                      height: 150,
                      width: 550,
                      hideBorder: true
                    },
                    buttons: [
                      {
                        name: 'Cancel',
                        "class": 'close'
                      }, {
                        name: 'OK',
                        "class": 'btn primary'
                      }
                    ]
                  });
                }
              }, {
                label: '+ Add',
                "class": 'add',
                click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                  var controller;
                  controller = App.request('creds:new', {
                    tableCollection: tableCollection
                  });
                  return App.execute("showModal", controller, {
                    modal: {
                      title: 'Add Credential(s)',
                      description: '',
                      height: 390,
                      width: 620
                    },
                    buttons: [
                      {
                        name: 'Cancel',
                        "class": 'close'
                      }, {
                        name: 'OK',
                        "class": 'btn primary'
                      }
                    ]
                  });
                }
              }, {
                label: 'Tag',
                "class": 'tag',
                containerClass: 'right',
                activateOn: 'any',
                click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                  var controller, ids, models, query, url;
                  ids = selectAllState ? deselectedIDs : selectedIDs;
                  models = _.map(ids, function(id) {
                    return new Backbone.Model({
                      id: id
                    });
                  });
                  collection = new Backbone.Collection(models);
                  query = "";
                  url = "/workspaces/" + WORKSPACE_ID + "/metasploit/credential/cores/quick_multi_tag.json";
                  controller = App.request('tags:new:component', collection, {
                    selectAllState: selectAllState,
                    selectedIDs: selectedIDs,
                    deselectedIDs: deselectedIDs,
                    q: query,
                    url: url,
                    serverAPI: tableCollection.server_api,
                    ids_only: true,
                    content: App.request('new:cred:entity').get('taggingModalHelpContent')
                  });
                  return App.execute("showModal", controller, {
                    modal: {
                      title: 'Tags',
                      description: '',
                      height: 170,
                      width: 400,
                      hideBorder: true
                    },
                    buttons: [
                      {
                        name: 'Cancel',
                        "class": 'close'
                      }, {
                        name: 'OK',
                        "class": 'btn primary'
                      }
                    ],
                    doneCallback: function() {
                      return App.vent.trigger('core:tag:added', tableCollection);
                    }
                  });
                }
              }
            ],
            columns: columns
          }, opts));
        }
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.TableSelections = {
        multipleSelected: function() {
          return this.selectAllState || this.selectedIDs.length > 1;
        },
        pluralizedMessage: function(singularVersion, pluralVersion) {
          if (this.multipleSelected()) {
            return pluralVersion;
          } else {
            return singularVersion;
          }
        }
      };
    });
  });

}).call(this);
(function() {

  define(['backbone_chooser'], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      Concerns.Chooser = {
        initialize: function() {
          return new Backbone.Chooser(this);
        }
      };
      Concerns.SingleChooser = {
        beforeIncluded: function(klass, concern) {
          return klass.prototype.model.include("Chooser");
        },
        initialize: function() {
          return new Backbone.SingleChooser(this);
        }
      };
      return Concerns.MultiChooser = {
        beforeIncluded: function(klass, concern) {
          return klass.prototype.model.include("Chooser");
        },
        initialize: function() {
          return new Backbone.MultiChooser(this);
        }
      };
    });
  });

}).call(this);
(function() {

  define(['jquery', 'backbone_chooser'], function($) {
    return this.Pro.module("Concerns", function(Concerns, App) {
      return Concerns.FetchIDs = {
        fetchIDs: function(tableSelections, opts) {
          if (opts == null) {
            opts = {
              ignore_if_no_selections: false
            };
          }
          return $.getJSON(_.result(this, 'url'), {
            ids_only: 1,
            selections: {
              select_all_state: tableSelections.selectAllState || null,
              selected_ids: Object.keys(tableSelections.selectedIDs),
              deselected_ids: Object.keys(tableSelections.deselectedIDs),
              ignore_if_no_selections: opts.ignore_if_no_selections
            },
            search: this.server_api.search
          });
        }
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.InputGenerator = {
        generateInputs: function() {
          var $inputs, obj, prefix;
          $inputs = $('<form></form>');
          obj = this.toJSON();
          prefix = "";
          this.recurseInputs($inputs, obj, prefix, true);
          return $inputs;
        },
        recurseInputs: function($inputs, obj, prefix, firstTime) {
          var _this = this;
          if (typeof obj !== 'object') {
            return $inputs.append("<input name='" + prefix + "' value='" + obj + "' type='hidden'>");
          } else {
            return _.each(obj, function(value, key, obj) {
              var arrayPrefix, elem, i, prefixedKey, _i, _len, _results;
              prefixedKey = firstTime ? "" + key : "" + prefix + "[" + key + "]";
              if (typeof value === 'object') {
                if (Array.isArray(value)) {
                  _results = [];
                  for (i = _i = 0, _len = value.length; _i < _len; i = ++_i) {
                    elem = value[i];
                    arrayPrefix = firstTime ? "" + key + "[]" : "[" + key + "][]";
                    _results.push(_this.recurseInputs($inputs, elem, arrayPrefix, false));
                  }
                  return _results;
                } else {
                  return _this.recurseInputs($inputs, value, prefixedKey, false);
                }
              } else {
                return $inputs.append("<input name='" + prefixedKey + "' value='" + value + "' type='hidden'>");
              }
            });
          }
        }
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.VulnAttemptStatuses = {
        STATUSES: {
          EXPLOITED: 'Exploited',
          NOT_EXPLOITABLE: 'Not Exploitable'
        },
        isExploited: function() {
          return this.get('status') === this.STATUSES.EXPLOITED || this.get('vuln_attempt_status') === this.STATUSES.EXPLOITED;
        },
        isNotExploitable: function() {
          return this.get('status') === this.STATUSES.NOT_EXPLOITABLE || this.get('vuln_attempt_status') === this.STATUSES.NOT_EXPLOITABLE;
        }
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns) {
      var DEFAULT_TIMEOUT;
      DEFAULT_TIMEOUT = 5000;
      return Concerns.Pollable = {
        polling: false,
        startPolling: function() {
          var clearId, errorMsg, pollForever,
            _this = this;
          if (this.polling) {
            return;
          }
          this.polling = true;
          errorMsg = 'Concerns.Pollable: Client class must have a poll() method that returns a $.Deferred object';
          if (this.poll == null) {
            throw new Error(errorMsg);
          }
          clearId = null;
          this.stopPolling = function() {
            _this.polling = false;
            clearTimeout(clearId);
            return _this.stopPolling = function() {};
          };
          pollForever = function() {
            var deferred;
            if (!_this.polling) {
              return;
            }
            deferred = _this.poll();
            if ((deferred != null ? deferred.then : void 0) == null) {
              return;
            }
            if (deferred.then == null) {
              throw new Error(errorMsg);
            }
            return deferred.then(function() {
              return clearId = setTimeout(pollForever, _this.pollInterval || DEFAULT_TIMEOUT);
            });
          };
          return pollForever();
        },
        stopPolling: function() {}
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.Chooseable = {
        modelEvents: {
          "change:chosen": "changeChosen"
        },
        changeChosen: function(model, value, options) {
          return this.$el.toggleClass("active", value);
        },
        onRender: function() {
          if (this.model.isChosen()) {
            return this.$el.addClass("active");
          }
        },
        choose: function(e) {
          if ($(e.target).data('selectable') !== false) {
            e.preventDefault();
            return this.model.choose();
          }
        },
        unchoose: function(e) {
          e.preventDefault();
          return this.model.unchoose();
        }
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.HoverTimeout = {
        ui: {
          hoverContainer: '.hover-container'
        },
        events: {
          'mouseenter @ui.hoverContainer': 'setHoverTimeout',
          'mouseleave @ui.hoverContainer': 'clearHoverTimeout',
          'mouseleave @ui.hoverContainer': 'setHideHoverTimeout',
          'mouseleave': 'setHideHoverTimeout'
        },
        setHoverTimeout: function() {
          var _this = this;
          return this.hoverTimeout = setTimeout((function() {
            return _this.triggerHover();
          }), 100);
        },
        clearHoverTimeout: function() {
          return clearTimeout(this.hoverTimeout);
        },
        setHideHoverTimeout: function() {
          var _this = this;
          return this.hideHoverTimeout = setTimeout((function() {
            return _this.triggerHideHover();
          }), 200);
        },
        clearHideHoverTimeout: function() {
          return clearTimeout(this.hideHoverTimeout);
        },
        triggerHover: function() {
          return this.trigger('show:hover');
        },
        triggerHideHover: function() {
          return this.trigger('hide:hover');
        }
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.RightSideScroll = {
        onShow: function() {
          var _this = this;
          return $(window).on(this._customEventName(), _.debounce(function(e) {
            var diff, myTop, top;
            _this.bindUIElements();
            top = $(window).scrollTop();
            myTop = Math.max(top - 120, 0);
            diff = (_this.ui.rightSide.height() + myTop + 20) - _this.ui.leftSide.height();
            if (diff < 0) {
              _this.ui.rightSide.css({
                top: myTop + "px"
              });
            } else {
              _this.ui.rightSide.css({
                top: _this.ui.leftSide.height() - _this.ui.rightSide.height() + 20
              });
            }
            return _this.adjustSize();
          }, 400));
        },
        adjustSize: function() {
          var h, h2, tableH;
          h = $(window).height() - this.$el.offset().top;
          h = Math.max(500, h);
          h2 = h - 150;
          tableH = this.ui.leftSide.height();
          if (tableH < h) {
            h = Math.max(500, tableH);
            h2 = h - 76;
          }
          this.ui.rightSide.height(h + 20);
          this.ui.rightSide.find('.border').height(h2);
          this.ui.rightSide.find('.nano').height(h2);
          return this.trigger('resized');
        },
        onDestroy: function() {
          return $(window).off(this._customEventName());
        },
        _customEventName: function() {
          var _ref, _ref1, _ref2;
          return "scroll.page-" + (((_ref = this.constructor) != null ? (_ref1 = _ref.prototype) != null ? (_ref2 = _ref1.attributes) != null ? _ref2["class"] : void 0 : void 0 : void 0) || '');
        }
      };
    });
  });

}).call(this);
(function() {

  define(['jquery'], function($) {
    return this.Pro.module("Concerns", function(Concerns, App) {
      var MAX_RECURSION, MIN_HEIGHT, RESIZE_EVENT;
      RESIZE_EVENT = 'resize.sizeToFit';
      MAX_RECURSION = 5;
      MIN_HEIGHT = 300;
      return Concerns.SizeToFit = {
        sizeToFit: true,
        resizeDisabled: false,
        _stopTheLoop: 0,
        initialize: function(opts) {
          if (opts == null) {
            opts = {};
          }
          opts = _.defaults(opts, {
            sizeToFit: true,
            resizeDisabled: false
          });
          this.sizeToFit = opts.sizeToFit;
          this.resizeDisabled = opts.resizeDisabled;
          this.onResize = _.bind(this.onResize, this);
          return this.inModal = false;
        },
        onShow: function() {
          this.inModal = this.$el.parents('#modals').length > 0;
          if (this.sizeToFit) {
            $(window).on(RESIZE_EVENT, this.onResize);
          }
          if (this.sizeToFit) {
            return this.onResize();
          }
        },
        onDestroy: function() {
          if (this.sizeToFit) {
            return $(window).off(RESIZE_EVENT, this.onResize);
          }
        },
        onResize: function() {
          var diff, resize, tryResize, _ref, _ref1,
            _this = this;
          if (this.inModal) {
            if ((_ref = this.ui.resizeEl) != null) {
              _ref.height(Math.max((_ref1 = this.ui.resizeEl) != null ? _ref1.height() : void 0, 600));
            }
            tryResize = function() {
              var height, _ref2;
              height = $(document.body).height() - 80 - _this.ui.resizeEl.offset().top;
              if (height < 100) {
                return _.delay(tryResize, 600);
              }
              if ((_ref2 = _this.ui.resizeEl) != null) {
                _ref2.height(height);
              }
              return _this.trigger('sizetofit:resized');
            };
            _.delay(tryResize, 600);
            return;
          }
          this._stopTheLoop++;
          if (this.resizeDisabled || !this.$el.is(':visible')) {
            this._stopTheLoop = 0;
            return;
          }
          if (this._stopTheLoop > MAX_RECURSION) {
            this._stopTheLoop = 0;
            this.trigger('sizetofit:resized');
            return;
          }
          resize = function() {
            var origHeight, _ref2, _ref3;
            origHeight = (_ref2 = _this.ui.resizeEl) != null ? _ref2.height() : void 0;
            if ((_ref3 = _this.ui.resizeEl) != null) {
              _ref3.height(Math.max(origHeight + diff, MIN_HEIGHT));
            }
            return _.defer(function() {
              return _this.onResize();
            });
          };
          diff = document.documentElement.scrollHeight - $(document.body).height();
          if (diff > 0) {
            return resize();
          }
          diff = $(window).height() - $(document.body).height();
          if (diff < 0) {
            return resize();
          }
          return this.trigger('sizetofit:resized');
        },
        setResizeDisabled: function(disabled) {
          var _ref;
          this.resizeDisabled = disabled;
          if (disabled) {
            return (_ref = this.ui.resizeEl) != null ? _ref.removeAttr('height').css({
              height: 'auto'
            }) : void 0;
          } else {
            return this.onResize();
          }
        }
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.Spinner = {
        showSpinner: function() {
          this.$el.find('.spinner-content').hide();
          return this.$el.find('.spinner').show();
        },
        hideSpinner: function() {
          this.$el.find('.spinner-content').show();
          return this.$el.find('.spinner').hide();
        }
      };
    });
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Concerns", function(Concerns, App, Backbone, Marionette, $, _) {
      return Concerns.TextAreaLimit = {
        _bindTextArea: function($elem, maxRows, modalView, model) {
          var _this = this;
          return $elem.on('input', function(e) {
            return _this._textEnteredHandler(e, maxRows, modalView, model);
          });
        },
        _unbindTextArea: function($elem) {
          return $elem.off('input');
        },
        _textEnteredHandler: function(e, maxRows, modalView, model) {
          var lines, text;
          text = $(e.target).val();
          lines = text.split('\n');
          if (lines.length > 100) {
            this._truncateTextArea($(e.target), maxRows, lines);
            if (modalView) {
              return this._showLimitModal(modalView, model);
            }
          }
        },
        _truncateTextArea: function($elem, maxRows, lines) {
          var buffer, index, _i;
          buffer = '';
          for (index = _i = 0; _i <= 98; index = ++_i) {
            buffer = buffer.concat("" + lines[index] + "\n");
          }
          buffer = buffer.concat("" + lines[index]);
          $elem.val(buffer);
          return $elem.trigger('keyup');
        },
        _showLimitModal: function(View, model) {
          var view;
          view = new View({
            model: model
          });
          return App.execute('showModal', view, {
            modal: {
              title: '',
              description: '',
              width: 200,
              height: 200
            },
            buttons: [
              {
                name: 'OK',
                "class": 'btn primary'
              }
            ],
            loading: false
          });
        }
      };
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['lib/components/loading/loading_controller'], function(StartLoadingModule) {
    return this.Pro.module("Controllers", function(Controllers, App) {
      Controllers.Application = (function(_super) {

        __extends(Application, _super);

        function Application(options) {
          if (options == null) {
            options = {};
          }
          this.region = options.region || App.request("default:region");
          Application.__super__.constructor.call(this, options);
          this._instance_id = _.uniqueId("controller");
          App.execute("register:instance", this, this._instance_id);
        }

        Application.prototype.destroy = function() {
          App.execute("unregister:instance", this, this._instance_id);
          return Application.__super__.destroy.apply(this, arguments);
        };

        Application.prototype.show = function(view, options) {
          var _ref;
          if (options == null) {
            options = {};
          }
          _.defaults(options, {
            loading: false,
            region: this.region
          });
          view = view.getMainView ? view.getMainView() : view;
          if (!view) {
            throw new Error("getMainView() did not return a view instance or " + (view != null ? (_ref = view.constructor) != null ? _ref.name : void 0 : void 0) + " is not a view instance");
          }
          this.setMainView(view);
          return this._manageView(view, options);
        };

        Application.prototype.getMainView = function() {
          return this._mainView;
        };

        Application.prototype.setMainView = function(view) {
          if (this._mainView) {
            return;
          }
          this._mainView = view;
          return this.listenTo(view, "destroy", this.destroy);
        };

        Application.prototype._manageView = function(view, options) {
          if (options.loading) {
            return App.execute("show:loading", view, options);
          } else {
            return options.region.show(view, options);
          }
        };

        Application.prototype.mergeDefaultsInto = function(obj) {
          obj = _.isObject(obj) ? obj : {};
          return _.defaults(obj, this._getDefaults());
        };

        Application.prototype._getDefaults = function() {
          return _.clone(_.result(this, "defaults"));
        };

        return Application;

      })(Marionette.Controller);
      return StartLoadingModule();
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/chooser'], function() {
    return this.Pro.module("Entities", function(Entities, App, Backbone, Marionette, jQuery, _) {
      var API;
      Entities.Crumb = (function(_super) {

        __extends(Crumb, _super);

        function Crumb() {
          return Crumb.__super__.constructor.apply(this, arguments);
        }

        Crumb.prototype.defaults = {};

        return Crumb;

      })(Entities.Model);
      Entities.CrumbCollection = (function(_super) {

        __extends(CrumbCollection, _super);

        function CrumbCollection() {
          return CrumbCollection.__super__.constructor.apply(this, arguments);
        }

        CrumbCollection.prototype.model = Entities.Crumb;

        CrumbCollection.include("SingleChooser");

        return CrumbCollection;

      })(Entities.Collection);
      API = {
        getCrumbs: function(crumbs) {
          var crumbCollection;
          if (crumbs == null) {
            crumbs = [];
          }
          crumbCollection = new Entities.CrumbCollection(crumbs);
          crumbCollection.reset(crumbs);
          return crumbCollection;
        }
      };
      return App.reqres.setHandler("crumbs:entities", function(crumbs) {
        if (crumbs == null) {
          crumbs = [];
        }
        return API.getCrumbs(crumbs);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_model', 'base_collection', 'lib/concerns/entities/chooser'], function() {
    return this.Pro.module("Entities", function(Entities, App, Backbone, Marionette, jQuery, _) {
      var API;
      Entities.Tab = (function(_super) {

        __extends(Tab, _super);

        function Tab() {
          return Tab.__super__.constructor.apply(this, arguments);
        }

        Tab.prototype.defaults = {
          title: "Tab"
        };

        return Tab;

      })(Entities.Model);
      Entities.TabCollection = (function(_super) {

        __extends(TabCollection, _super);

        function TabCollection() {
          return TabCollection.__super__.constructor.apply(this, arguments);
        }

        TabCollection.prototype.model = Entities.Tab;

        TabCollection.include("SingleChooser");

        return TabCollection;

      })(Entities.Collection);
      API = {
        getTab: function(options) {
          if (options == null) {
            options = {};
          }
          return new Entities.Tab(options);
        },
        getTabs: function(models) {
          if (models == null) {
            models = [];
          }
          return new Entities.TabCollection(models);
        }
      };
      App.reqres.setHandler("component:tab:entity", function(options) {
        if (options == null) {
          options = {};
        }
        return API.getTab(options);
      });
      return App.reqres.setHandler("component:tab:entities", function(models) {
        if (models == null) {
          models = [];
        }
        return API.getTabs(models);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    return this.Pro.module("Entities", function(Entities, App) {
      return Entities.Collection = (function(_super) {

        __extends(Collection, _super);

        function Collection() {
          return Collection.__super__.constructor.apply(this, arguments);
        }

        return Collection;

      })(Backbone.Collection);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    return this.Pro.module("Entities", function(Entities, App, Backbone, Marionette, jQuery, _) {
      return Entities.Model = (function(_super) {

        __extends(Model, _super);

        function Model() {
          return Model.__super__.constructor.apply(this, arguments);
        }

        return Model;

      })(Backbone.Model);
    });
  });

}).call(this);

/*
 This script defines the Pro global, which contains a top-level Marionette
 Application, on top of which we define different namespaced modules for
 controllers and views. The Pro App can be further "refined" by calling
 instance methods on it (e.g. in your page-specific app source).

 This script is included in application.js (and therefore is on every page).
 This ensures that Pro.module method (used to namespace all of our stuff)
 is always defined and accessible, regardless of load order (important for
 parallel require.js loads).
*/


(function() {

  this.Pro = (function() {
    var App;
    App = new Backbone.Marionette.Application;
    App.reqres.setHandler("default:region", function() {
      return App.mainRegion;
    });
    App.reqres.setHandler("default:region", function() {
      return App.mainRegion;
    });
    App.reqres.setHandler("concern", function(concern) {
      return App.Concerns[concern];
    });
    App.on("start", function(options) {
      if (this.startHistory != null) {
        this.startHistory();
        if (!this.getCurrentRoute()) {
          return this.navigate('', {
            trigger: true
          });
        }
      }
    });
    App.commands.setHandler("loadingOverlay:show", function(opts) {
      var _ref, _ref1;
      if (opts == null) {
        opts = {};
      }
      if (App.mainRegion != null) {
        if ((_ref = App.mainRegion.$el) != null) {
          _ref.addClass('blocking-loading');
        }
        if (opts.loadMsg) {
          return (_ref1 = App.mainRegion.$el) != null ? _ref1.prepend("<div class='tab-loading-text'>" + opts.loadMsg + "</div>") : void 0;
        }
      } else {
        jQuery('.mainContent').addClass('blocking-loading');
        if (opts.loadMsg) {
          return jQuery('mainContent').prepend("<div class='tab-loading-text'>" + opts.loadMsg + "</div>");
        }
      }
    });
    App.commands.setHandler("loadingOverlay:hide", function(opts) {
      var $mainContent, _ref, _ref1, _ref2;
      if (opts == null) {
        opts = {};
      }
      if (App.mainRegion != null) {
        if (((_ref = App.mainRegion) != null ? _ref.$el : void 0) != null) {
          if ((_ref1 = App.mainRegion) != null) {
            _ref1.$el.removeClass('blocking-loading');
          }
          return jQuery('.tab-loading-text', (_ref2 = App.mainRegion) != null ? _ref2.$el : void 0).remove();
        }
      } else {
        $mainContent = jQuery('.mainContent');
        $mainContent.removeClass('blocking-loading');
        return jQuery('.tab-loading-text', $mainContent).remove();
      }
    });
    return App;
  })();

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Pro.module("Regions", function(Regions, App, Backbone, Marionette, $, _) {
    return Regions.Dialog = (function(_super) {

      __extends(Dialog, _super);

      function Dialog() {
        return Dialog.__super__.constructor.apply(this, arguments);
      }

      Dialog.prototype.onShow = function(view) {
        var options;
        this.setupBindings(view);
        options = this.getDefaultOptions(_.result(view, "dialog"));
        return this.openDialog(options);
      };

      Dialog.prototype.openDialog = function(options) {
        return this.$el;
      };

      Dialog.prototype.setupBindings = function(view) {
        return this.listenTo(view, "dialog:close", this.close);
      };

      Dialog.prototype.getDefaultOptions = function(options) {
        if (options == null) {
          options = {};
        }
        return _.defaults(options, {
          title: "default title"
        });
      };

      Dialog.prototype.onClose = function() {
        this.$el.off("closed");
        return this.stopListening();
      };

      return Dialog;

    })(Marionette.Region);
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/shared/attempt_session/attempt_session_views', 'lib/shared/payload_settings/payload_settings_controller', 'entities/login'], function() {
    return this.Pro.module("Shared.AttemptSession", function(AttemptSession, App) {
      AttemptSession.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var model,
            _this = this;
          if (options == null) {
            options = {};
          }
          model = App.request("new:login:entity", options.model.toJSON());
          this.setMainView(new AttemptSession.ItemView({
            model: model
          }));
          return this.listenTo(this._mainView, 'btnClicked', function() {
            var _ref;
            if ((_ref = _this.payloadModel) == null) {
              _this.payloadModel = App.request('shared:payloadSettings:entities', {});
            }
            return App.execute('showModal', new Pro.Shared.PayloadSettings.Controller({
              model: _this.payloadModel
            }), {
              modal: {
                title: 'Payload Settings',
                description: '',
                width: 400,
                height: 330
              },
              buttons: [
                {
                  name: 'Close',
                  "class": 'close'
                }, {
                  name: 'OK',
                  "class": 'btn primary'
                }
              ],
              loading: true,
              doneCallback: function() {
                return _this._mainView.launchAttempt(_this.payloadModel);
              }
            });
          });
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler("attemptSession:shared", function(options) {
        if (options == null) {
          options = {};
        }
        return new AttemptSession.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_compositeview', 'base_itemview', 'lib/shared/attempt_session/templates/attempt_session', 'entities/shared/payload_settings', 'lib/concerns/pollable'], function($) {
    return this.Pro.module("Shared.AttemptSession", function(AttemptSession, App) {
      return AttemptSession.ItemView = (function(_super) {

        __extends(ItemView, _super);

        function ItemView() {
          this.serializeData = __bind(this.serializeData, this);

          this.setTask = __bind(this.setTask, this);

          this._attemptingSessionChanged = __bind(this._attemptingSessionChanged, this);

          this.launchAttempt = __bind(this.launchAttempt, this);
          return ItemView.__super__.constructor.apply(this, arguments);
        }

        ItemView.include('Pollable');

        ItemView.prototype.template = ItemView.prototype.templatePath("attempt_session/attempt_session");

        ItemView.prototype.className = 'attempt-session-container';

        ItemView.prototype.ui = {
          attemptBtn: '.btn.primary.narrow',
          reloadBtn: '.btn.primary.reload'
        };

        ItemView.prototype.triggers = {
          'click @ui.attemptBtn': 'btnClicked',
          'click @ui.reloadBtn': 'btnClicked'
        };

        ItemView.prototype.modelEvents = {
          'change:attempting_session': '_attemptingSessionChanged'
        };

        ItemView.prototype.pollInterval = 3000;

        ItemView.prototype.task = null;

        ItemView.prototype.launchAttempt = function(payloadModel) {
          this.payloadModel = payloadModel;
          this.model.set({
            attempting_session: true
          });
          return this.model.set({
            completed: false
          });
        };

        ItemView.prototype._attemptingSessionChanged = function() {
          var _this = this;
          this.render();
          if (this.model.get('attempting_session')) {
            return this.model.attemptSession(this.payloadModel).done(function(task) {
              _this.setTask(task);
              return _this.startPolling();
            });
          }
        };

        ItemView.prototype.poll = function() {
          var _this = this;
          if (this.task.isCompleted()) {
            this.stopPolling();
            return this.model.sessions().done(function(session) {
              _this.model.set({
                session: session
              });
              _this.model.set({
                completed: true
              });
              return _this.model.set({
                attempting_session: false
              });
            });
          } else {
            return this.task.fetch();
          }
        };

        ItemView.prototype.setTask = function(task) {
          this.task = task;
        };

        ItemView.prototype.serializeData = function() {
          return this;
        };

        return ItemView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/attempt_session/templates/attempt_session"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        if (this.model.get('attempt_session') === 'false') {
          __out.push('\n  <div>No Session Possible</div>\n');
        } else if (this.model.get('attempting_session')) {
          __out.push('\n  <a href="javascript:void(0)" class="btn primary narrow disabled">Attempt Session</a>\n  <div class=\'loading\'></div>\n');
        } else if (this.model.get('completed') && _.isEmpty(this.model.get('session'))) {
          __out.push('\n  <div>Attempt Failed <a href="javascript:void(0) " class="btn primary reload"></a></div>\n');
        } else if (this.model.get('completed') && !_.isEmpty(this.model.get('session'))) {
          __out.push('\n  <a href="');
          __out.push(__sanitize(Routes.session_path(WORKSPACE_ID, this.model.get('session').id)));
          __out.push('" class="">Session ');
          __out.push(__sanitize(this.model.get('session').id));
          __out.push('</a>\n');
        } else {
          __out.push('\n  <a href="javascript:void(0)" class="btn primary narrow">Attempt Session</a>\n');
        }
      
        __out.push('\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_view', 'base_itemview', 'lib/components/table/table_view', 'apps/creds/shared/cred_shared_views', 'lib/shared/creds/templates/collection_hover'], function($) {
    /*
      #
      # Table Cell Views for use with Credentials
      #
    */
    Pro.module("Creds.CellViews");
    Pro.Creds.CellViews.Public = (function(_super) {

      __extends(Public, _super);

      function Public() {
        this.template = __bind(this.template, this);
        return Public.__super__.constructor.apply(this, arguments);
      }

      Public.prototype.initialize = function(_arg) {
        var _ref, _ref1, _ref2;
        this.attribute = _arg.attribute, this.idAttribute = _arg.idAttribute, this.workspaceIdAttribute = _arg.workspaceIdAttribute;
        if ((_ref = this.attribute) == null) {
          this.attribute = 'public';
        }
        if ((_ref1 = this.idAttribute) == null) {
          this.idAttribute = 'core_id';
        }
        return (_ref2 = this.workspaceIdAttribute) != null ? _ref2 : this.workspaceIdAttribute = 'workspace_id';
      };

      Public.prototype.template = function(m) {
        var id, user, workspaceRoute;
        id = m[this.idAttribute];
        user = _.escape(_.str.truncate(m[this.attribute], 18));
        workspaceRoute = _.escape(Routes.workspace_credentials_path(m[this.workspaceIdAttribute]));
        return "<a href='" + workspaceRoute + "#creds/" + (_.escape(id)) + "'>" + user + "</a>";
      };

      return Public;

    })(Pro.Views.ItemView);
    Pro.Creds.CellViews.HostAddress = (function(_super) {

      __extends(HostAddress, _super);

      function HostAddress() {
        this.template = __bind(this.template, this);
        return HostAddress.__super__.constructor.apply(this, arguments);
      }

      HostAddress.prototype.initialize = function(_arg) {
        var _ref, _ref1;
        this.attribute = _arg.attribute, this.idAttribute = _arg.idAttribute;
        if ((_ref = this.attribute) == null) {
          this.attribute = 'address';
        }
        return (_ref1 = this.idAttribute) != null ? _ref1 : this.idAttribute = 'host_id';
      };

      HostAddress.prototype.template = function(m) {
        var route;
        route = _.escape(Routes.host_path(m[this.idAttribute]));
        return "<a class='underline' href='" + route + "'>" + (_.escape(m[this.attribute])) + "</a>";
      };

      return HostAddress;

    })(Pro.Views.ItemView);
    Pro.Creds.CellViews.Session = (function(_super) {

      __extends(Session, _super);

      function Session() {
        this.template = __bind(this.template, this);
        return Session.__super__.constructor.apply(this, arguments);
      }

      Session.prototype.initialize = function(_arg) {
        var _ref, _ref1;
        this.attribute = _arg.attribute, this.workspaceAttribute = _arg.workspaceAttribute;
        if ((_ref = this.attribute) == null) {
          this.attribute = 'session_id';
        }
        return (_ref1 = this.workspaceAttribute) != null ? _ref1 : this.workspaceAttribute = 'workspace_id';
      };

      Session.prototype.template = function(m) {
        var route;
        if (m[this.attribute] && m[this.workspaceAttribute]) {
          route = Routes.session_path(m[this.attribute], m[this.workspaceAttribute]);
          return "<a href='" + (_.escape(route)) + "'>Session " + (_.escape(m.session_id)) + "</a>";
        } else {
          return "";
        }
      };

      return Session;

    })(Pro.Views.ItemView);
    Pro.Creds.CellViews.Count = (function(_super) {

      __extends(Count, _super);

      function Count() {
        this.template = __bind(this.template, this);
        return Count.__super__.constructor.apply(this, arguments);
      }

      Count.prototype.initialize = function(_arg) {
        var _ref, _ref1;
        this.attribute = _arg.attribute, this.subject = _arg.subject, this.pluralSubject = _arg.pluralSubject, this.link = _arg.link;
        if (this.attribute == null) {
          throw new Error("missing :attribute option");
        }
        if (this.subject == null) {
          throw new Error("missing :subject option");
        }
        if ((_ref = this.link) == null) {
          this.link = true;
        }
        return (_ref1 = this.pluralSubject) != null ? _ref1 : this.pluralSubject = this.subject + 's';
      };

      Count.prototype.template = function(m) {
        var count, phrase, subject;
        count = parseInt(m[this.attribute], 10);
        subject = count === 1 ? this.subject : this.pluralSubject;
        phrase = "" + (_.escape(m[this.attribute])) + " " + subject;
        if (count > 0 && this.link === true) {
          return "<a href='javascript:void(0)'>" + phrase + "</a>";
        } else if (this.link && typeof this.link !== 'boolean') {
          return "<a href='" + (this.link(m)) + "'>" + phrase + "</a>";
        } else {
          return phrase;
        }
      };

      return Count;

    })(Pro.Views.ItemView);
    Pro.Creds.CellViews.Private = (function(_super) {

      __extends(Private, _super);

      function Private() {
        this.passClicked = __bind(this.passClicked, this);

        this.template = __bind(this.template, this);
        return Private.__super__.constructor.apply(this, arguments);
      }

      Private.prototype.events = {
        'click a': 'passClicked'
      };

      Private.prototype.initialize = function(_arg) {
        var _ref, _ref1;
        this.attribute = _arg.attribute, this.typeAttribute = _arg.typeAttribute;
        if ((_ref = this.attribute) == null) {
          this.attribute = 'private';
        }
        return (_ref1 = this.typeAttribute) != null ? _ref1 : this.typeAttribute = 'private_type';
      };

      Private.prototype.template = function(m) {
        var ptype, _ref;
        ptype = (_ref = m[this.typeAttribute]) != null ? _ref.split('::')[2] : void 0;
        if (ptype === 'Password') {
          return _.escape(_.str.truncate(m[this.attribute], 24));
        } else {
          return "<a href='javascript:void(0)'>" + (_.escape(ptype)) + "</a>";
        }
      };

      Private.prototype.passClicked = function() {
        var dialogView;
        dialogView = new Pro.CredsApp.Shared.CoresTablePrivateCellDisclosureDialog({
          model: new Backbone.Model({
            'private.data': this.model.get(this.attribute)
          })
        });
        return Pro.execute('showModal', dialogView, {
          modal: {
            title: 'Private Data',
            description: '',
            width: 600,
            height: 400
          },
          buttons: [
            {
              name: 'Close',
              "class": 'close'
            }
          ]
        });
      };

      return Private;

    })(Pro.Views.ItemView);
    Pro.Creds.CellViews.CollectionHover = (function(_super) {

      __extends(CollectionHover, _super);

      function CollectionHover() {
        this.serializeData = __bind(this.serializeData, this);

        this.sync = __bind(this.sync, this);
        return CollectionHover.__super__.constructor.apply(this, arguments);
      }

      CollectionHover.prototype.className = 'hover-square';

      CollectionHover.prototype.template = JST['backbone/lib/shared/creds/templates/collection_hover'];

      CollectionHover.prototype.initialize = function(opts) {
        var _ref, _ref1, _ref2;
        if (opts == null) {
          opts = {};
        }
        if ((_ref = this.url) == null) {
          this.url = opts.url;
        }
        if ((_ref1 = this.columns) == null) {
          this.columns = opts.columns;
        }
        return (_ref2 = this.title) != null ? _ref2 : this.title = opts.title;
      };

      CollectionHover.prototype.onShow = function() {
        return this.timeout = setTimeout(this.sync, 300);
      };

      CollectionHover.prototype.onDestroy = function() {
        return clearTimeout(this.timeout);
      };

      CollectionHover.prototype.sync = function() {
        var _this = this;
        return $.getJSON(_.result(this, 'url')).done(function(data) {
          var _ref;
          _this.data = data;
          if (((_ref = _this.el) != null ? _ref.parentNode : void 0) != null) {
            return _this.render();
          }
        });
      };

      CollectionHover.prototype.serializeData = function() {
        var _this = this;
        return _.reduce(['data', 'columns', 'title'], function(memo, propName) {
          if (memo == null) {
            memo = {};
          }
          memo[propName] = _.result(_this, propName);
          return memo;
        }, {});
      };

      return CollectionHover;

    })(Pro.Views.CompositeView);
    Pro.Creds.CellViews.Realm = (function(_super) {

      __extends(Realm, _super);

      function Realm() {
        this.template = __bind(this.template, this);
        return Realm.__super__.constructor.apply(this, arguments);
      }

      Realm.prototype.initialize = function(_arg) {
        var _ref;
        this.attribute = _arg.attribute;
        return (_ref = this.attribute) != null ? _ref : this.attribute = 'realm_key';
      };

      Realm.prototype.template = function(m) {
        var key;
        key = (m[this.attribute] || '').replace(/\sDomain$/, '');
        return "<a href='javascript:void(0)'>" + (_.escape(key)) + "</a>";
      };

      return Realm;

    })(Pro.Views.ItemView);
    return Pro.Creds.CellViews.RealmHover = (function(_super) {

      __extends(RealmHover, _super);

      function RealmHover() {
        return RealmHover.__super__.constructor.apply(this, arguments);
      }

      RealmHover.prototype.className = 'hover-square realm';

      RealmHover.prototype.initialize = function(_arg) {
        var _ref;
        this.attribute = _arg.attribute;
        return (_ref = this.attribute) != null ? _ref : this.attribute = 'realm';
      };

      RealmHover.prototype.template = function(m) {
        return "<div>Realm Name</div><div>" + (_.escape(m.realm)) + "</div>";
      };

      return RealmHover;

    })(Pro.Views.ItemView);
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/creds/templates/collection_hover"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var col, columns, row, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      
        if (this.title != null) {
          __out.push('\n  <h5>');
          __out.push(__sanitize(this.title));
          __out.push('</h5>\n');
        }
      
        __out.push('\n<div class="foundation">\n  <div class=\'row\'>\n    ');
      
        _ref = this.columns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          col = _ref[_i];
          __out.push('\n      <div class=\'large-');
          __out.push(__sanitize((_ref1 = col.size) != null ? _ref1 : parseInt(12 / this.columns.length)));
          __out.push(' columns\'>\n        ');
          __out.push(__sanitize(col.label));
          __out.push('\n      </div>\n    ');
        }
      
        __out.push('\n  </div>\n  <div class=\'scrollie\'>\n    ');
      
        if (this.data == null) {
          __out.push('\n      <div class=\'spinner\'></div>\n    ');
        } else {
          __out.push('\n      ');
          columns = this.columns;
          __out.push('\n      ');
          _ref2 = this.data;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            row = _ref2[_j];
            __out.push('\n        <div class=\'row\'>\n          ');
            for (_k = 0, _len2 = columns.length; _k < _len2; _k++) {
              col = columns[_k];
              __out.push('\n            <div class=\'large-');
              __out.push(__sanitize((_ref3 = col.size) != null ? _ref3 : parseInt(12 / this.columns.length)));
              __out.push(' columns\'>\n              <div class=\'truncate\'>');
              __out.push(__sanitize(row[col.attribute]));
              __out.push('</div>\n            </div>\n\n          ');
            }
            __out.push('\n        </div>\n      ');
          }
          __out.push('\n    ');
        }
      
        __out.push('\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'entities/module_detail', 'entities/related_modules', 'lib/components/modal/modal_controller', 'lib/shared/cve_cell/cve_cell_views', 'css!css/shared/cve_cell'], function() {
    return this.Pro.module("Shared.CveCell", function(CveCell, App) {
      CveCell.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {
          return {};
        };

        Controller.prototype.initialize = function(options) {
          var config, view,
            _this = this;
          if (options == null) {
            options = {};
          }
          config = _.defaults(options, this._getDefaults());
          this.model = new Backbone.Model(config).get('model');
          view = new CveCell.View({
            model: this.model
          });
          this.setMainView(view);
          return this.listenTo(this._mainView, 'refs:clicked', function() {
            var dialogView, refModel;
            if (_this.model.constructor === App.Entities.Vuln) {
              refModel = _this.model;
            } else if (_this.model.constructor === App.Entities.RelatedModules) {
              refModel = App.request('module:detail:entity', {
                id: _this.model.id,
                refsOnly: true
              });
            } else if (_this.model.constructor === App.Entities.WorkspaceRelatedModules) {
              refModel = App.request('module:detail:entity', {
                id: _this.model.id,
                refsOnly: true
              });
            } else {
              throw "Model for CveCell.Controller must be a Vuln or RelatedModules";
            }
            dialogView = new CveCell.ModalView({
              model: refModel
            });
            refModel.fetch({
              data: {
                refsOnly: true
              },
              processData: true
            });
            return App.execute('showModal', dialogView, {
              modal: {
                title: 'References',
                description: '',
                width: 260,
                height: 300
              },
              buttons: [
                {
                  name: 'Close',
                  "class": 'close'
                }
              ],
              loading: true
            });
          });
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler('cveCell:component', function(options) {
        if (options == null) {
          options = {};
        }
        return new CveCell.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_itemview', 'lib/shared/cve_cell/templates/view', 'lib/shared/cve_cell/templates/single_cve_cell_view', 'lib/shared/cve_cell/templates/empty_cve_cell_view', 'lib/shared/cve_cell/templates/modal_view'], function($) {
    return this.Pro.module("Shared.CveCell", function(CveCell, App, Backbone, Marionette, $, _) {
      CveCell.View = (function() {

        function View(opts) {
          var ViewClass, refCount;
          refCount = parseInt(opts.model.get('ref_count'));
          ViewClass = (function() {
            switch (refCount) {
              case 0:
                return CveCell.EmptyView;
              case 1:
                return CveCell.SingleView;
              default:
                return CveCell.MultiView;
            }
          })();
          return new ViewClass(opts);
        }

        return View;

      })();
      CveCell.BaseView = (function(_super) {

        __extends(BaseView, _super);

        function BaseView() {
          return BaseView.__super__.constructor.apply(this, arguments);
        }

        BaseView.prototype.className = 'shared cve-cell';

        BaseView.prototype.templateHelpers = {
          parsedRefs: function() {
            return this.ref_names;
          },
          refCount: function() {
            return this.ref_count;
          }
        };

        return BaseView;

      })(App.Views.Layout);
      CveCell.MultiView = (function(_super) {

        __extends(MultiView, _super);

        function MultiView() {
          return MultiView.__super__.constructor.apply(this, arguments);
        }

        MultiView.prototype.template = MultiView.prototype.templatePath("cve_cell/view");

        MultiView.prototype.triggers = {
          'click a': 'refs:clicked'
        };

        return MultiView;

      })(CveCell.BaseView);
      CveCell.SingleView = (function(_super) {

        __extends(SingleView, _super);

        function SingleView() {
          return SingleView.__super__.constructor.apply(this, arguments);
        }

        SingleView.prototype.template = SingleView.prototype.templatePath("cve_cell/single_cve_cell_view");

        return SingleView;

      })(CveCell.BaseView);
      CveCell.EmptyView = (function(_super) {

        __extends(EmptyView, _super);

        function EmptyView() {
          return EmptyView.__super__.constructor.apply(this, arguments);
        }

        EmptyView.prototype.template = EmptyView.prototype.templatePath("cve_cell/empty_cve_cell_view");

        return EmptyView;

      })(CveCell.BaseView);
      return CveCell.ModalView = (function(_super) {

        __extends(ModalView, _super);

        function ModalView() {
          return ModalView.__super__.constructor.apply(this, arguments);
        }

        ModalView.prototype.template = ModalView.prototype.templatePath("cve_cell/modal_view");

        ModalView.prototype.className = 'shared cve-cell modal-content';

        return ModalView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/cve_cell/templates/empty_cve_cell_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/cve_cell/templates/modal_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var ref, _i, _len, _ref;
      
        _ref = this.refs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ref = _ref[_i];
          __out.push('\n  ');
          __out.push('\n  ');
          __out.push('\n  <div class="row">\n    ');
          __out.push(ref.html_link);
          __out.push('\n  </div>\n\n');
        }
      
        __out.push('\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/cve_cell/templates/single_cve_cell_view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div>\n  <a href="');
      
        __out.push(__sanitize(this.ref_link));
      
        __out.push('" target="_blank" class="ref-name">');
      
        __out.push(__sanitize(this.parsedRefs()));
      
        __out.push('</span>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/cve_cell/templates/view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div>\n  <a href="javascript:void(0)">\n    <span class="ref-name">');
      
        __out.push(__sanitize(this.parsedRefs()));
      
        __out.push('</span>\n    <span>(');
      
        __out.push(__sanitize(this.refCount()));
      
        __out.push(' Total)</span>\n  </a>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/shared/human_targets/human_targets_views', 'entities/social_engineering/human_target', 'lib/components/table/table_controller', 'lib/components/flash/flash_controller'], function() {
    return this.Pro.module("Shared.HumanTargets", function(HumanTargets, App, Backbone, Marionette, $) {
      return HumanTargets.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var humanTargets, show, targetListId,
            _this = this;
          _.defaults(options, {
            show: true
          });
          show = options.show, targetListId = options.targetListId;
          this.layout = new HumanTargets.Layout;
          this.setMainView(this.layout);
          humanTargets = App.request('socialEngineering:humanTarget:entities', {
            targetListId: targetListId
          });
          this.listenTo(this._mainView, 'show', function() {
            return _this.table = _this.renderTargetsTable(humanTargets, _this.layout.targetsRegion, {
              htmlID: 'target-list'
            });
          });
          this.loadingModal = $('<div class="loading"></div>').dialog({
            modal: true,
            title: 'Submitting...',
            autoOpen: false,
            closeOnEscape: false
          });
          if (show) {
            return this.show(this.layout, {
              region: this.region,
              loading: {
                loadingType: 'overlay'
              }
            });
          }
        };

        Controller.prototype.renderTargetsTable = function(humanTargets, region) {
          var columns, tableController,
            _this = this;
          columns = [
            {
              label: 'Email Address',
              attribute: 'email_address',
              sortable: true,
              defaultDirection: 'asc'
            }, {
              label: 'First Name',
              attribute: 'first_name',
              sortable: true
            }, {
              label: 'Last Name',
              attribute: 'last_name',
              sortable: true
            }
          ];
          return tableController = App.request("table:component", {
            htmlID: 'human-targets',
            region: region,
            taggable: true,
            selectable: true,
            "static": false,
            collection: humanTargets,
            perPage: 20,
            columns: columns,
            actionButtons: [
              {
                label: 'Remove',
                activateOn: 'any',
                click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
                  _this.loadingModal.dialog('open');
                  return tableController.postTableState({
                    method: 'DELETE'
                  }).complete(function(r) {
                    _this.loadingModal.dialog('close');
                    if (r.responseJSON.success) {
                      tableCollection.removeMultiple(selectedVisibleCollection);
                      return App.execute('flash:display', {
                        title: 'Targets removed',
                        message: 'The targets have been successfully removed.'
                      });
                    } else {
                      return App.execute('flash:display', {
                        title: 'An error occurred',
                        style: 'error',
                        message: 'There was an error while removing targets from this list.'
                      });
                    }
                  });
                }
              }
            ]
          });
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'lib/shared/human_targets/templates/layout'], function() {
    return this.Pro.module('Shared.HumanTargets', function(HumanTargets, App, Backbone, Marionette, $, _) {
      return HumanTargets.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('human_targets/layout');

        Layout.prototype.regions = {
          targetsRegion: '#human-targets-region'
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/human_targets/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div id="human-targets-region"></div>\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/shared/nexpose_console/nexpose_console_views', 'entities/nexpose/console', 'css!css/shared/nexpose_console'], function() {
    return this.Pro.module("Shared.NexposeConsole", function(NexposeConsole, App, Backbone, Marionette, $, _) {
      var CONNECTION_CONFIRM_MSG;
      CONNECTION_CONFIRM_MSG = 'Unable to connect to the Nexpose instance. ' + 'Would you like to save the Nexpose Console anyways?';
      NexposeConsole.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          if (options == null) {
            options = {};
          }
          this.model = App.request('new:nexpose:console:entity');
          return this.setMainView(new NexposeConsole.Form());
        };

        Controller.prototype.onFormSubmit = function() {
          var callbacks, defer, formData,
            _this = this;
          defer = $.Deferred();
          defer.promise();
          callbacks = {
            success: function(model, response, options) {
              var json;
              json = response;
              if (!json.connection_success && json.message.match(/API error/)) {
                _this.trigger("btn:enable:modal", "Connect To Nexpose");
                _this._mainView.setLoading(false);
                _this._mainView.showErrors({
                  'password': ['is incorrect']
                });
                return new _this.model.constructor({
                  id: json.id
                }).destroy();
              } else {
                _this._mainView.setLoading(false);
                _this._mainView.toggleConnectionStatus(json.connection_success);
                if (json.connection_success) {
                  _this._mainView.clearErrors();
                  _this.trigger('consoleAdded:nexposeConsole', json);
                  return setTimeout((function() {
                    return defer.resolve();
                  }), 800);
                } else {
                  if (confirm(CONNECTION_CONFIRM_MSG)) {
                    return defer.resolve();
                  } else {
                    _this.trigger("btn:enable:modal", "Connect To Nexpose");
                    return new _this.model.constructor({
                      id: json.id
                    }).destroy();
                  }
                }
              }
            },
            error: function(model, response, options) {
              _this.trigger("btn:enable:modal", "Connect To Nexpose");
              _this._mainView.setLoading(false);
              return _this._mainView.showErrors(response.responseJSON.errors);
            }
          };
          this.model.clear();
          formData = Backbone.Syphon.serialize(this._mainView);
          this.model.set(formData.nexpose_console);
          this._mainView.setLoading(true);
          this.trigger("btn:disable:modal", "Connect To Nexpose");
          this.model.save({}, callbacks);
          return defer;
        };

        return Controller;

      })(App.Controllers.Application);
      App.reqres.setHandler("nexposeConsole:shared", function(options) {
        if (options == null) {
          options = {};
        }
        return new NexposeConsole.Controller(options);
      });
      return App.commands.setHandler('show:nexposeConsole', function(consoleController) {
        return App.execute('showModal', consoleController, {
          modal: {
            title: 'Configure Nexpose Console',
            description: '',
            width: 600,
            "class": 'no-border'
          },
          buttons: [
            {
              name: 'Cancel',
              "class": 'close'
            }, {
              name: 'Connect To Nexpose',
              "class": 'btn primary'
            }
          ]
        });
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_compositeview', 'base_itemview', 'lib/shared/nexpose_console/templates/form'], function($) {
    return this.Pro.module("Shared.NexposeConsole", function(NexposeConsole, App) {
      return NexposeConsole.Form = (function(_super) {

        __extends(Form, _super);

        function Form() {
          this.setLoading = __bind(this.setLoading, this);

          this._errorDiv = __bind(this._errorDiv, this);

          this.showErrors = __bind(this.showErrors, this);
          return Form.__super__.constructor.apply(this, arguments);
        }

        Form.prototype.template = Form.prototype.templatePath("nexpose_console/form");

        Form.prototype.toggleConnectionStatus = function(connection_success) {
          $('.connectivity .connection_success', this.el).toggle(connection_success);
          return $('.connectivity .connection_error', this.el).toggle(!connection_success);
        };

        Form.prototype.clearErrors = function() {
          $('.error', this.el).removeClass('error');
          return $('p.inline-error', this.el).remove();
        };

        Form.prototype.showErrors = function(errors) {
          var _this = this;
          this.clearErrors();
          return _.each(errors, function(v, k) {
            var $input;
            $input = $("[name*='[" + k + "]']", _this.el);
            $input.parents('li').first().addClass('error');
            return $input.parent().append(_this._errorDiv(v));
          });
        };

        Form.prototype._errorDiv = function(msg) {
          return $('<p />', {
            "class": 'inline-error'
          }).text(msg);
        };

        Form.prototype.setLoading = function(loading) {
          $(this.el).toggleClass('tab-loading', loading);
          if (loading) {
            return $('>*', this.el).css({
              opacity: 0.2,
              'pointer-events': 'none'
            });
          } else {
            return $('>*', this.el).css({
              opacity: 1,
              'pointer-events': 'auto'
            });
          }
        };

        return Form;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/nexpose_console/templates/form"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="nexpose_console_form">\n  <form action="/" method="POST" class="form formtastic nexpose_console">\n    <li class="console_name">\n      <label for="nexpose_console[name]">Name</label>\n      <input name="nexpose_console[name]" id="nexpose_console[name]" type="text">\n    </li>\n    <li class="console_address">\n      <label for="nexpose_console[address]">Address</label>\n      <input name="nexpose_console[address]" id="nexpose_console[address]" type="text">\n    </li>\n    <li class="console_port">\n      <label for="nexpose_console[port]">Port</label>\n      <input name="nexpose_console[port]" id="nexpose_console[port]" type="text">\n    </li>\n    <li class="console_username">\n      <label for="nexpose_console[username]">Username</label>\n      <input name="nexpose_console[username]" id="nexpose_console[username]" type="text">\n    </li>\n    <li class="console_password">\n      <label for="nexpose_console[password]">Password</label>\n      <input name="nexpose_console[password]" id="nexpose_console[password]" type="password">\n    </li>\n  </form>\n  <div class="connectivity">\n    <div class="connection_success">\n      Connected successfully.\n    </div>\n    <div class="connection_error">\n      Connection failed.\n    </div>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['entities/vuln', 'base_controller', 'apps/vulns/vulns_app', 'entities/nexpose/exception', 'apps/vulns/index/index_views', 'lib/components/modal/modal_controller', 'lib/concerns/controllers/table_selections', 'lib/components/analysis_tab/analysis_tab_controller', 'lib/shared/nexpose_push/nexpose_push_started_controller'], function() {
    return this.Pro.module("Shared.NexposePush", function(NexposePush, App, Backbone, Marionette, $, _) {
      NexposePush.ButtonController = (function(_super) {

        __extends(ButtonController, _super);

        function ButtonController() {
          return ButtonController.__super__.constructor.apply(this, arguments);
        }

        ButtonController.prototype.initialize = function(opts) {
          var vulns;
          _.defaults(opts, {
            redirectToTaskLog: false
          });
          this.redirectToTaskLog = opts.redirectToTaskLog;
          return vulns = App.request('vulns:entities', {
            fetch: false
          });
        };

        ButtonController.prototype.getButton = function() {
          var redirectToTaskLog,
            _this = this;
          redirectToTaskLog = this.redirectToTaskLog;
          return {
            label: 'Push to Nexpose',
            "class": 'nexpose nexpose-push disabled',
            click: function(selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) {
              var request_message;
              if (!(jQuery("a.nexpose-push").hasClass("disabled"))) {
                request_message = jQuery.ajax({
                  url: Routes.push_to_nexpose_message_workspace_vulns_path({
                    workspace_id: WORKSPACE_ID
                  }),
                  type: 'GET',
                  selections: {
                    selectAllState: selectAllState,
                    selectedIDs: selectedIDs,
                    deselectedIDs: deselectedIDs,
                    selectedVisibleCollection: selectedVisibleCollection,
                    tableCollection: tableCollection
                  },
                  data: {
                    selections: {
                      select_all_state: selectAllState || null,
                      selected_ids: selectedIDs,
                      deselected_ids: deselectedIDs
                    },
                    ignore_pagination: true
                  }
                });
                return request_message.then(function(data) {
                  var controller, opts;
                  opts = {
                    message: data.message,
                    has_console: data.has_console,
                    has_console_enabled: data.has_console_enabled,
                    has_validations: data.has_validations,
                    has_exceptions: data.has_exceptions,
                    selectAllState: this.selections.selectAllState,
                    selectedIDs: this.selections.selectedIDs,
                    deselectedIDs: this.selections.deselectedIDs,
                    tableCollection: this.selections.tableCollection,
                    selectedVisibleCollection: this.selections.selectedVisibleCollection,
                    redirectToTaskLog: redirectToTaskLog
                  };
                  controller = new App.Shared.NexposePush.ModalController(opts);
                  return controller.showModal();
                });
              }
            }
          };
        };

        return ButtonController;

      })(App.Controllers.Application);
      return NexposePush.ModalController = (function(_super) {

        __extends(ModalController, _super);

        function ModalController() {
          return ModalController.__super__.constructor.apply(this, arguments);
        }

        ModalController.include('TableSelections');

        ModalController.prototype.initialize = function(opts) {
          _.defaults(opts, {
            title: 'Push To Nexpose',
            pushButtonText: 'PUSH',
            redirectToTaskLog: false
          });
          this.selectAllState = opts.selectAllState, this.selectedIDs = opts.selectedIDs, this.deselectedIDs = opts.deselectedIDs, this.selectedVisibleCollection = opts.selectedVisibleCollection, this.tableCollection = opts.tableCollection, this.message = opts.message, this.has_console = opts.has_console, this.has_console_enabled = opts.has_console_enabled, this.has_validations = opts.has_validations, this.has_exceptions = opts.has_exceptions, this.title = opts.title, this.pushButtonText = opts.pushButtonText, this.redirectToTaskLog = opts.redirectToTaskLog;
          this._getButtons();
          return this.setMainView(this._getModalView());
        };

        ModalController.prototype._getButtons = function() {
          if (this.buttons) {
            return this.buttons;
          }
          this.buttons = [
            {
              name: 'Cancel',
              "class": 'close'
            }
          ];
          if (this.has_console_enabled) {
            return this.buttons.push({
              name: this.pushButtonText,
              "class": 'btn primary'
            });
          }
        };

        ModalController.prototype._getModalView = function() {
          this.options.reasons = App.Entities.Nexpose.Exception.REASON;
          return this.modalView = this.modalView || new NexposePush.ModalView({
            model: new Backbone.Model(this.options)
          });
        };

        ModalController.prototype.parseExceptionInfo = function() {
          var exception_info, param, _i, _len, _ref;
          exception_info = {};
          _ref = $("#exception-info").serializeArray();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            param = _ref[_i];
            exception_info[param.name] = param.value;
          }
          return exception_info;
        };

        ModalController.prototype._disablePushButton = function() {
          return this.trigger('btn:disable:modal', this.pushButtonText);
        };

        ModalController.prototype.onFormSubmit = function() {
          var defer, exceptionInfo, formSubmit,
            _this = this;
          defer = $.Deferred();
          formSubmit = function() {};
          defer.promise(formSubmit);
          exceptionInfo = this.parseExceptionInfo();
          this._disablePushButton();
          jQuery.ajax({
            url: Routes.workspace_nexpose_result_export_runs_path({
              workspace_id: WORKSPACE_ID
            }),
            type: 'POST',
            data: {
              selections: {
                select_all_state: this.selectAllState || null,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              reason: exceptionInfo.reason,
              expiration_date: exceptionInfo.expiration_date,
              approve: exceptionInfo.approve,
              comments: exceptionInfo.comments,
              ignore_pagination: true
            },
            success: function(data) {
              defer.resolve();
              App.vent.trigger('vulns:push:completed');
              if (_this.redirectToTaskLog) {
                return window.location.href = data.redirect_url;
              } else {
                return _this._showPushStartedModal(data.redirect_url);
              }
            },
            error: function() {
              return App.execute('flash:display', {
                title: 'An error occurred',
                style: 'error',
                message: "There was a problem pushing the results to Nexpose."
              });
            }
          });
          return formSubmit;
        };

        ModalController.prototype.showModal = function() {
          var _this = this;
          return App.execute("showModal", this, {
            modal: {
              title: this.title,
              description: this.message,
              hideBorder: true,
              width: 400
            },
            closeCallback: function() {
              return _this.trigger("modal:close");
            },
            buttons: this.buttons
          }, function(data) {
            throw "Error with push_to_nexpose_message endpoint";
          });
        };

        ModalController.prototype._showPushStartedModal = function(redirectUrl) {
          var controller;
          controller = new App.Shared.NexposePush.StartedController({
            redirectUrl: redirectUrl
          });
          return controller.showModal();
        };

        return ModalController;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/shared/nexpose_push/nexpose_push_started_view'], function() {
    return this.Pro.module("Shared.NexposePush", function(NexposePush, App, Backbone, Marionette, $, _) {
      return NexposePush.StartedController = (function(_super) {

        __extends(StartedController, _super);

        function StartedController() {
          return StartedController.__super__.constructor.apply(this, arguments);
        }

        StartedController.prototype.initialize = function(opts) {
          _.defaults(opts, {
            title: 'Push To Nexpose',
            buttons: [
              {
                name: 'OK',
                "class": 'btn primary close'
              }
            ]
          });
          this.buttons = opts.buttons, this.title = opts.title, this.redirectUrl = opts.redirectUrl;
          this.model = new Backbone.Model({
            redirectUrl: this.redirectUrl
          });
          return this.setMainView(this._getModalView());
        };

        StartedController.prototype._getModalView = function() {
          return this.modalView = this.modalView || new NexposePush.StartedView({
            model: this.model
          });
        };

        StartedController.prototype.showModal = function() {
          var errorCallback, modalOptions;
          modalOptions = {
            modal: {
              title: this.title,
              hideBorder: true,
              width: 400
            },
            buttons: this.buttons
          };
          errorCallback = function(data) {
            throw "Error with vulns:push:started";
          };
          jQuery("a.nexpose").removeClass('submitting');
          return App.execute("showModal", this, modalOptions, errorCallback);
        };

        return StartedController;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_itemview', 'lib/shared/nexpose_push/templates/push_started_modal'], function() {
    return this.Pro.module('Shared.NexposePush', function(NexposePush, App) {
      return NexposePush.StartedView = (function(_super) {

        __extends(StartedView, _super);

        function StartedView() {
          return StartedView.__super__.constructor.apply(this, arguments);
        }

        StartedView.prototype.template = StartedView.prototype.templatePath('nexpose_push/push_started_modal');

        StartedView.prototype.templateHelpers = {
          linkToTask: function() {
            return this.redirectUrl || "tasks";
          }
        };

        return StartedView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'lib/shared/nexpose_push/templates/push_modal_layout', 'lib/shared/nexpose_push/templates/push_modal_no_console'], function() {
    return this.Pro.module('Shared.NexposePush', function(NexposePush, App, Backbone, Marionette, $, _) {
      NexposePush.ButtonView = (function(_super) {

        __extends(ButtonView, _super);

        function ButtonView() {
          return ButtonView.__super__.constructor.apply(this, arguments);
        }

        ButtonView.prototype.template = function() {
          return "Push to Nexpose";
        };

        ButtonView.prototype.onRowsSelected = function(tableSelections) {
          var _this = this;
          this.selectAllState = tableSelections.selectAllState || null;
          this.selectedIDs = _.map(tableSelections.selectedIDs, function(val, id) {
            return parseInt(id);
          });
          this.deselectedIDs = _.map(tableSelections.deselectedIDs, function(val, id) {
            return parseInt(id);
          });
          return jQuery.ajax({
            url: Routes.push_to_nexpose_status_workspace_vulns_path({
              workspace_id: WORKSPACE_ID
            }),
            type: 'GET',
            data: {
              selections: {
                select_all_state: this.selectAllState,
                selected_ids: this.selectedIDs,
                deselected_ids: this.deselectedIDs
              },
              ignore_pagination: true
            },
            success: function(data) {
              _this._currentStatus = data.status;
              if (data.status) {
                _this.enableButton(data.reason);
              } else {
                _this.disableButton(data.reason);
              }
              return _this.setTooltip(data.reason);
            },
            error: function(data) {
              throw "Error with push_to_nexpose_status endpoint";
            }
          });
        };

        ButtonView.prototype.getStatus = function() {
          return this._currentStatus;
        };

        ButtonView.prototype.disableButton = function(reason) {
          return this.$el.parent().addClass('disabled');
        };

        ButtonView.prototype.enableButton = function(reason) {
          return this.$el.parent().removeClass('disabled');
        };

        ButtonView.prototype.setTooltip = function(reason) {
          this.$el.parent().attr('title', reason);
          return this.$el.parent().tooltip();
        };

        return ButtonView;

      })(App.Views.ItemView);
      return NexposePush.ModalView = (function(_super) {

        __extends(ModalView, _super);

        function ModalView() {
          return ModalView.__super__.constructor.apply(this, arguments);
        }

        ModalView.prototype.initialize = function() {
          return this.template = this.model.get('has_console_enabled') ? this.templatePath('nexpose_push/push_modal_layout') : this.templatePath('nexpose_push/push_modal_no_console');
        };

        ModalView.prototype.className = 'push-view';

        ModalView.prototype.ui = {
          datetime: '.datetime'
        };

        ModalView.prototype.onShow = function() {
          return this.ui.datetime.datepicker({
            minDate: 1
          });
        };

        ModalView.prototype.onBeforeDestroy = function() {
          return this.ui.datetime.datepicker('destroy');
        };

        return ModalView;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/nexpose_push/templates/push_modal_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var key, val, _ref;
      
        __out.push('<div class="push-text">\n  <p class="push-note">Vulnerabilities not sourced from Nexpose will not be pushed.</p>\n  ');
      
        if (this.has_exceptions) {
          __out.push('\n      <p>Please select following:</p>\n      <p>\n          <div class="msg">\n            <form id="exception-info">\n              <div class="foundation">\n                <div class="row push-row">\n                  <div class="columns large-4">\n                    <label>Reason</label>\n                  </div>\n\n                  <div class="columns large-8">\n                    <select name="reason">\n                      ');
          _ref = this.reasons;
          for (key in _ref) {
            val = _ref[key];
            __out.push('\n                      <option value="');
            __out.push(__sanitize(key));
            __out.push('">');
            __out.push(__sanitize(val));
            __out.push('</option>\n                      ');
          }
          __out.push('\n                    </select>\n                  </div>\n                </div>\n\n                <div class="row push-row">\n                  <div class="columns large-4">\n                    <label>Expiration Date</label>\n                  </div>\n\n                  <div class="columns large-8">\n                    <input class=\'datetime\' type="text" name="expiration_date" readonly=""readonly" />\n                  </div>\n                </div>\n\n                <div class="row push-row">\n                  <div class="columns large-4"></div>\n                  <div class="columns large-8">\n                    <div>\n                      <label>\n                        <input type="checkbox" name="approve" />\n                        Automatically Approve\n                      </label>\n                    </div>\n                  </div>\n                </div>\n\n                <hr>\n\n                <div class="row push-row">\n                  <div class="columns large-12">\n                    <div>\n                      <label>\n                        Append comment to vulnerabilities that will be pushed.\n                      </label>\n                    </div>\n                    <div><textarea type="text" name="comments" /></div>\n                  </div>\n                </div>\n\n              </div>\n            </form>\n          </div>\n      </p>\n  ');
        }
      
        __out.push('\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/nexpose_push/templates/push_modal_no_console"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="push-text">\n  <p><a href=\'/settings#nexpose_consoles\' >Manage Nexpose Consoles</a></p>\n  <p class="push-warning">(This page will refresh and you will lose all applied filters.)</p>\n  ');
      
        if (!this.has_console) {
          __out.push('\n    <hr>\n    <p>Don\'t have Nexpose? <a href=\'http://www.rapid7.com/products/nexpose/nexpose-enterprise-trial.jsp?CS=metasploitinp\'>Try It Now</a></p>\n  ');
        }
      
        __out.push('\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/nexpose_push/templates/push_started_modal"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<p>The selected vulnerabilities are being pushed to Nexpose.</p>\n\n<a href="');
      
        __out.push(__sanitize(this.linkToTask()));
      
        __out.push('">\n  See the task logs.\n</a>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/shared/nexpose_sites/nexpose_sites_views', 'css!css/shared/nexpose_sites'], function() {
    return this.Pro.module("Shared.NexposeSites", function(NexposeSites, App) {
      NexposeSites.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this._triggerRowsSelected = __bind(this._triggerRowsSelected, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var _this = this;
          this.layout = new NexposeSites.Layout({
            collection: options.collection
          });
          this.setMainView(this.layout);
          return this.listenTo(this.layout, 'table:initialized', function() {
            _this.layout.table.carpenterRadio.on('table:rows:selected', _this._triggerRowsSelected);
            _this.layout.table.carpenterRadio.on('table:rows:deselected', _this._triggerRowsSelected);
            _this.layout.table.carpenterRadio.on('table:row:selected', _this._triggerRowsSelected);
            return _this.layout.table.carpenterRadio.on('table:row:deselected', _this._triggerRowsSelected);
          });
        };

        Controller.prototype.onDestroy = function() {
          this.layout.table.carpenterRadio.off('table:rows:selected');
          this.layout.table.carpenterRadio.off('table:rows:deselected');
          this.layout.table.carpenterRadio.off('table:row:selected');
          return this.layout.table.carpenterRadio.off('table:row:deselected');
        };

        Controller.prototype._triggerRowsSelected = function() {
          return this.layout.$el.trigger('site:rows:changed', this.layout.table);
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler("nexposeSites:shared", function(options) {
        if (options == null) {
          options = {};
        }
        return new NexposeSites.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_layout', 'base_view', 'base_itemview', 'lib/shared/nexpose_sites/templates/view', 'lib/components/table/table_controller', 'lib/shared/nexpose_sites/templates/sites_filter', 'lib/components/filter/filter_controller'], function() {
    return this.Pro.module('Shared.NexposeSites', function(NexposeSites, App, Backbone, Marionette, $, _) {
      return NexposeSites.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath('nexpose_sites/view');

        Layout.prototype.regions = {
          siteRegion: '.site-region',
          filterRegion: '.filter-region'
        };

        Layout.prototype.initialize = function(opts) {
          _.defaults(opts, {
            htmlID: 'nexpose-sites'
          });
          return this.collection = opts.collection, this.htmlID = opts.htmlID, opts;
        };

        Layout.prototype.onShow = function() {
          this._renderSitesTable(this.collection, this.siteRegion, {
            filterOpts: {
              filterValuesEndpoint: Routes.filter_values_workspace_nexpose_data_sites_path(WORKSPACE_ID),
              helpEndpoint: Routes.search_operators_workspace_nexpose_data_sites_path(WORKSPACE_ID),
              keys: ['name'],
              filterRegion: this.getRegion('filterRegion')
            },
            htmlID: this.htmlID
          });
          return this.listenTo(this, 'filter:query:new', function(query) {
            return this.table.applyCustomFilter(query);
          });
        };

        Layout.prototype._renderSitesTable = function(collection, region, opts) {
          var columns, extraColumns;
          if (opts == null) {
            opts = {};
          }
          extraColumns = opts.extraColumns || [];
          columns = _.union([
            {
              label: 'Name',
              attribute: 'name'
            }, {
              label: 'Assets',
              attribute: 'summary.assets_count',
              sortable: false
            }, {
              label: 'Vulns',
              attribute: 'summary.critical_vulnerabilities_count',
              sortable: false
            }, {
              label: 'Last Scan',
              attribute: 'last_scan_date'
            }
          ], extraColumns);
          this.table = App.request("table:component", _.extend({
            region: region,
            taggable: true,
            selectable: true,
            "static": false,
            collection: collection,
            htmlID: opts.htmlID,
            perPage: 100,
            defaultSort: 'public.username',
            columns: columns
          }, opts));
          this.trigger('table:initialized');
          return this.table;
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/nexpose_sites/templates/sites_filter"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="foundation">\n  <div class="filter">\n    <form>\n      <div class="filter-column">\n        <div class="filter-header">Host Name</div>\n\n        <div class="filter-input">\n          <input type="text" name="attributes[name]" placeholder="Enter key word">\n        </div>\n\n      </div>\n    </form>\n  </div>\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/nexpose_sites/templates/view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div>\n  <div class="large-9 columns filter-spacer">\n\n  </div>\n\n\n  <div class="filter-controls large-3 columns">\n\n  </div>\n\n</div>\n\n\n<h1 data-table-id="nexpose-sites">Nexpose Sites</h1>\n\n<div class="columns small-12 site-region">\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/shared/payload_settings/payload_settings_views', 'entities/shared/payload_settings'], function() {
    return this.Pro.module("Shared.PayloadSettings", function(PayloadSettings, App, Backbone, Marionette, $, _) {
      return PayloadSettings.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {};

        Controller.prototype.initialize = function(options) {
          var layout;
          if (options == null) {
            options = {};
          }
          this.model = options.model;
          this.model = this.model || App.request('shared:payloadSettings:entities');
          layout = new PayloadSettings.View({
            model: this.model
          });
          this.setMainView(layout);
          this.model.fetch();
          return this.listenTo(this._mainView, 'show', function() {
            return Backbone.Syphon.deserialize(this._mainView, this.model.toJSON());
          });
        };

        Controller.prototype.onFormSubmit = function() {
          var defer,
            _this = this;
          defer = $.Deferred();
          defer.promise();
          this._serializeForm();
          this.model.save({}, {
            success: function() {
              _this.model.set({
                validated: true
              });
              return defer.resolve();
            },
            error: function(payloadSettings, response) {
              _this._mainView.updateErrors(response.responseJSON);
              return _this.model.unset('validated');
            }
          });
          return defer;
        };

        Controller.prototype._serializeForm = function() {
          return this.model.set(Backbone.Syphon.serialize(this._mainView));
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_compositeview', 'base_itemview', 'lib/shared/payload_settings/templates/view'], function($) {
    return this.Pro.module("Shared.PayloadSettings", function(PayloadSettings, App, Backbone, Marionette, $, _) {
      return PayloadSettings.View = (function(_super) {

        __extends(View, _super);

        function View() {
          return View.__super__.constructor.apply(this, arguments);
        }

        View.prototype.template = View.prototype.templatePath("payload_settings/view");

        View.prototype.className = 'payload-settings';

        View.prototype.updateErrors = function(response) {
          var _this = this;
          $('.error', this.el).remove();
          return _.each(response.errors, function(v, k) {
            var $msg;
            $msg = $('<div />', {
              "class": 'error'
            }).text(v);
            return $("[name='payload_settings[" + k + "]']", _this.el).addClass('invalid').after($msg);
          });
        };

        return View;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/payload_settings/templates/view"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
        var macro, type, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      
        __out.push('<form>\n  <div class="foundation">\n    <div class="row">\n      <div class="columns large-6">\n        <label> Payload Type</label>\n      </div>\n\n      <div class="columns large-6">\n        <select name="payload_settings[payload_type]">\n          ');
      
        _ref = this.PAYLOAD_TYPE;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          __out.push('\n            <option value="');
          __out.push(__sanitize(type));
          __out.push('">');
          __out.push(__sanitize(type));
          __out.push('</option>\n          ');
        }
      
        __out.push('\n        </select>\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-6">\n        <label>Connection Type</label>\n      </div>\n\n      <div class="columns large-6">\n        <select name="payload_settings[connection_type]">\n          ');
      
        _ref1 = this.CONNECTION_TYPE;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          type = _ref1[_j];
          __out.push('\n          <option value="');
          __out.push(__sanitize(type));
          __out.push('">');
          __out.push(__sanitize(type));
          __out.push('</option>\n          ');
        }
      
        __out.push('\n        </select>\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-6">\n        <label>Listener Ports</label>\n      </div>\n\n      <div class="columns large-6">\n        <input type="text" name="payload_settings[listener_ports]" />\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-6">\n        <label>Listener Host</label>\n      </div>\n\n      <div class="columns large-6">\n        <input type="text" name="payload_settings[listener_host]" />\n      </div>\n    </div>\n\n    <div class="row">\n      <div class="columns large-6">\n        <label>Auto Launch Macro</label>\n      </div>\n\n      <div class="columns large-6">\n        <select name="payload_settings[macro]">\n          <option value=""></option>\n          ');
      
        _ref2 = this.macros;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          macro = _ref2[_k];
          __out.push('\n          <option value="');
          __out.push(__sanitize(macro.id));
          __out.push('">');
          __out.push(__sanitize(macro.name));
          __out.push('</option>\n          ');
        }
      
        __out.push('\n        </select>\n      </div>\n    </div>\n\n    <div class="row">\n\n      <div class="columns large-12">\n        <div>\n          <label>\n            <input type="checkbox" name="payload_settings[session_per_host]" />\n            Obtain only one session per host\n          </label>\n        </div>\n      </div>\n\n    </div>\n\n    <div class="row">\n\n      <div class="columns large-12">\n        <div>\n          <label>\n            <input type="checkbox" name="payload_settings[dynamic_stagers]" />\n            Use Dynamic Stagers for EXE payloads (AV evasion)\n          </label>\n        </div>\n      </div>\n\n    </div>\n\n    <div class="row">\n\n      <div class="columns large-12">\n        <div>\n          <label>\n          <input type="checkbox" name="payload_settings[ips_evasion]" />\n          Enable Stage Encoding (IPS evasion)\n        </label>\n       </div>\n      </div>\n\n    </div>\n\n  </div>\n</form>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/shared/target_list/target_list_views', 'entities/target'], function() {
    return this.Pro.module("Shared.TargetList", function(TargetList, App) {
      return TargetList.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.selectionUpdated = __bind(this.selectionUpdated, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.defaults = function() {};

        Controller.prototype.initialize = function(options) {
          var layout;
          if (options == null) {
            options = {};
          }
          this.targetListCollection = options.targetListCollection;
          layout = new TargetList.Layout();
          this.setMainView(layout);
          this.listenTo(this._mainView, 'show', function() {
            var _ref, _ref1,
              _this = this;
            this.lazyList = new App.Components.LazyList.Controller({
              collection: this.targetListCollection,
              region: this._mainView.targetListRegion,
              childView: App.Shared.Targets.Target,
              ids: this.targetListCollection.ids || [],
              modelsLoaded: ((_ref = this.targetListCollection) != null ? (_ref1 = _ref.modelsLoaded) != null ? _ref1.length : void 0 : void 0) || 0
            });
            this.listenTo(this.targetListCollection, 'add', this.selectionUpdated);
            this.listenTo(this.targetListCollection, 'remove', this.selectionUpdated);
            this.listenTo(this.targetListCollection, 'reset', this.selectionUpdated);
            return _.defer(function() {
              return _this.selectionUpdated();
            });
          });
          return this.listenTo(this._mainView, 'removeTargets', function() {
            var result;
            result = confirm("Are you sure you want to remove all targets?");
            if (result) {
              return this.targetListCollection.reset();
            }
          });
        };

        Controller.prototype.selectionUpdated = function() {
          this._mainView.updateClearState(this.targetListCollection);
          return this._mainView.updateSelectionCount(this.targetListCollection);
        };

        return Controller;

      })(App.Controllers.Application);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_compositeview', 'base_itemview', 'lib/shared/target_list/templates/layout'], function($) {
    return this.Pro.module("Shared.TargetList", function(TargetList, App, Backbone, Marionette, $, _) {
      return TargetList.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          this._numSelectedCreds = __bind(this._numSelectedCreds, this);

          this.updateSelectionCount = __bind(this.updateSelectionCount, this);

          this.updateClearState = __bind(this.updateClearState, this);
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath("target_list/layout");

        Layout.prototype.ui = {
          clear: 'a.clear',
          badge: 'span.badge'
        };

        Layout.prototype.regions = {
          targetListRegion: '.target-list'
        };

        Layout.prototype.triggers = {
          'click a.clear': 'removeTargets'
        };

        Layout.prototype.updateClearState = function(collection) {
          var _this = this;
          return _.defer(function() {
            var _ref;
            return (_ref = _this.ui.clear) != null ? _ref.toggle(_this._numSelectedCreds(collection) > 0) : void 0;
          });
        };

        Layout.prototype.updateSelectionCount = function(collection) {
          var _this = this;
          return _.defer(function() {
            var _ref;
            return (_ref = _this.ui.badge) != null ? _ref.toggle(_this._numSelectedCreds(collection) > 0).text(_this._numSelectedCreds(collection)) : void 0;
          });
        };

        Layout.prototype._numSelectedCreds = function(collection) {
          var _ref;
          return ((_ref = collection.ids) != null ? _ref.length : void 0) || 0;
        };

        return Layout;

      })(App.Views.Layout);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/target_list/templates/layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="selected-targets">\n    <div class=\'header\'>\n        selected targets\n        <span class=\'badge\' style=\'display:none\'>0</span>\n        <a class=\'clear\' style=\'display:none\' title=\'Clear all selected items.\' href=\'javascript:void(0)\'>&times;</a>\n    </div>\n\n    <div class=\'border\'>\n        <div class=\'padder\'>\n\n            <div class=\'target-list\'></div>\n        </div>\n\n    </div>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_controller', 'lib/shared/targets/targets_views', 'lib/shared/target_list/target_list_controller', 'entities/target', 'lib/components/table/cell_views', 'lib/components/filter/filter_controller'], function() {
    return this.Pro.module("Shared.Targets", function(Targets, App) {
      Targets.Controller = (function(_super) {

        __extends(Controller, _super);

        function Controller() {
          this.refreshNextButton = __bind(this.refreshNextButton, this);
          return Controller.__super__.constructor.apply(this, arguments);
        }

        Controller.prototype.initialize = function(options) {
          var config, targets, targetsView,
            _this = this;
          if (options == null) {
            options = {};
          }
          this.workspace_id = options.workspace_id || WORKSPACE_ID;
          config = _.defaults(options, this._getDefaults());
          targets = App.request('targets:entities', [], {
            workspace_id: this.workspace_id
          });
          this.targetListCollection || (this.targetListCollection = options.collection);
          targetsView = new Targets.Layout();
          this.setMainView(targetsView);
          this.listenTo(this.getMainView(), 'show', function() {
            _this.targetList = new App.Shared.TargetList.Controller({
              targetListCollection: _this.targetListCollection
            });
            _this.show(_this.targetList, {
              region: _this._mainView.targetListRegion
            });
            _this.table = _this.renderTargetsTable(targets, _this._mainView.targetsRegion, {
              filterOpts: {
                filterValuesEndpoint: window.gon.filter_values_workspace_brute_force_reuse_targets_path,
                keys: [
                  'host.name', 'host.address', 'host.os_name', {
                    value: 'name',
                    label: 'service.name'
                  }, {
                    value: 'info',
                    label: 'service.info'
                  }, {
                    value: 'port',
                    label: 'service.port'
                  }, {
                    value: 'proto',
                    label: 'service.proto'
                  }
                ],
                staticFacets: {
                  'proto': Pro.Entities.Service.PROTOS.map(function(name) {
                    return {
                      value: name,
                      label: name
                    };
                  })
                }
              }
            });
            _this.listenTo(_this.table.collection, 'all', _.debounce((function() {
              _this._mainView.adjustSize();
              return _this.targetList.lazyList.resize();
            }), 50));
            return _this.listenTo(_this.targetList.lazyList.collection, 'all', _.debounce(_this.refreshNextButton, 50));
          });
          this.listenTo(this.getMainView(), 'resized', function() {
            return _this.targetList.lazyList.resize();
          });
          this.listenTo(this.getMainView(), 'targets:addToCart', function() {
            if (_this.table.tableSelections.selectAllState) {
              return _this.table.collection.fetchIDs(_this.table.tableSelections).done(function(ids) {
                ids = _.difference(ids, _.keys(_this.table.tableSelections.deselectedIds));
                return _this.targetList.lazyList.addIDs(ids);
              });
            } else {
              return _this.targetList.lazyList.addIDs(_.keys(_this.table.tableSelections.selectedIDs));
            }
          });
          this.listenTo(this.getMainView(), 'filter:query:new', function(query) {
            return this.table.applyCustomFilter(query);
          });
          return _.defer(function() {
            return _this.refreshNextButton();
          });
        };

        Controller.prototype.refreshNextButton = function() {
          return this._mainView.toggleNext(!_.isEmpty(this.targetList.lazyList.collection.ids));
        };

        Controller.prototype.renderTargetsTable = function(collection, region, opts) {
          var columns, extraColumns, tableController;
          if (opts == null) {
            opts = {};
          }
          extraColumns = opts.extraColumns || [];
          columns = _.union([
            {
              label: 'Host',
              attribute: 'host.name',
              sortable: true,
              view: Targets.HostnameCellView
            }, {
              label: 'IP',
              attribute: 'host.address',
              sortable: true
            }, {
              label: 'OS',
              attribute: 'host.os_name',
              view: Backbone.Marionette.ItemView.extend({
                template: function(model) {
                  return _.escape((model['host.os_name'] || '').replace('Microsoft ', ''));
                }
              }),
              sortable: true
            }, {
              label: 'Service',
              attribute: 'name',
              sortable: true
            }, {
              label: 'Port',
              attribute: 'port',
              sortable: true
            }, {
              label: 'Proto',
              attribute: 'proto',
              sortable: true
            }, {
              label: 'Info',
              attribute: 'info',
              sortable: true,
              view: Pro.Components.Table.CellViews.TruncateView({
                max: 14,
                attribute: 'info'
              })
            }
          ], extraColumns);
          if (opts.withoutColumns != null) {
            columns = _.reject(columns, function(col) {
              return _.contains(opts.withoutColumns, col.attribute);
            });
          }
          return tableController = App.request("table:component", _.extend({
            htmlID: 'targets',
            region: region,
            taggable: true,
            selectable: true,
            "static": false,
            collection: collection,
            perPage: 20,
            columns: columns
          }, opts));
        };

        return Controller;

      })(App.Controllers.Application);
      return App.reqres.setHandler("targets:shared", function(options) {
        if (options == null) {
          options = {};
        }
        return new Targets.Controller(options);
      });
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'base_layout', 'base_compositeview', 'base_itemview', 'lib/shared/targets/templates/targets_layout', 'lib/shared/targets/templates/target', 'lib/concerns/views/right_side_scroll'], function($) {
    return this.Pro.module("Shared.Targets", function(Targets, App) {
      Targets.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          this.toggleNext = __bind(this.toggleNext, this);
          return Layout.__super__.constructor.apply(this, arguments);
        }

        Layout.prototype.template = Layout.prototype.templatePath("targets/targets_layout");

        Layout.prototype.regions = {
          targetsRegion: '.targets-table',
          targetListRegion: '.target-list'
        };

        Layout.prototype.ui = {
          addSelectionButton: '.add-selection',
          rightSide: '.right-side',
          leftSide: '.left-side',
          next: 'a.btn.primary'
        };

        Layout.prototype.attributes = {
          "class": 'target-selection-view'
        };

        Layout.prototype.triggers = {
          'click @ui.addSelectionButton': 'targets:addToCart'
        };

        Layout.include("RightSideScroll");

        Layout.prototype.toggleNext = function(enabled) {
          return this.ui.next.toggleClass('disabled', !enabled);
        };

        return Layout;

      })(App.Views.Layout);
      Targets.Target = (function(_super) {

        __extends(Target, _super);

        function Target() {
          this.removeTarget = __bind(this.removeTarget, this);

          this.initialize = __bind(this.initialize, this);
          return Target.__super__.constructor.apply(this, arguments);
        }

        Target.prototype.template = Target.prototype.templatePath('targets/target');

        Target.prototype.attributes = {
          "class": 'target-row'
        };

        Target.prototype.events = {
          'click div:not(span)': 'toggleInfo',
          'click a.delete': 'removeTarget'
        };

        Target.prototype.ui = {
          toggleInfo: '.toggle-info',
          arrow: '.arrow-container a'
        };

        Target.prototype.initialize = function(_arg) {
          this.collection = _arg.collection, this.model = _arg.model;
        };

        Target.prototype.removeTarget = function() {
          return this.collection.remove(this.model);
        };

        Target.prototype.toggleInfo = function(e) {
          this.ui.arrow.toggleClass('expand');
          this.ui.arrow.toggleClass('contract');
          return this.ui.toggleInfo.toggleClass('display-none');
        };

        return Target;

      })(App.Views.ItemView);
      Targets.HostnameCellModalView = (function(_super) {

        __extends(HostnameCellModalView, _super);

        function HostnameCellModalView() {
          this.template = __bind(this.template, this);
          return HostnameCellModalView.__super__.constructor.apply(this, arguments);
        }

        HostnameCellModalView.prototype.ui = {
          content: '.truncated-data'
        };

        HostnameCellModalView.prototype.onShow = function() {
          return this.selectText(this.ui.content[0]);
        };

        HostnameCellModalView.prototype.template = function(model) {
          return "<div class='truncated-data'>" + (_.escape(model['host.name'])) + "</div>";
        };

        return HostnameCellModalView;

      })(App.Views.ItemView);
      return Targets.HostnameCellView = (function(_super) {

        __extends(HostnameCellView, _super);

        function HostnameCellView() {
          this.template = __bind(this.template, this);

          this.showDisclosureDialog = __bind(this.showDisclosureDialog, this);
          return HostnameCellView.__super__.constructor.apply(this, arguments);
        }

        HostnameCellView.prototype.ui = {
          disclosureLink: 'a.more'
        };

        HostnameCellView.prototype.events = {
          'click @ui.disclosureLink': 'showDisclosureDialog'
        };

        HostnameCellView.prototype.showDisclosureDialog = function() {
          var dialogView;
          dialogView = new Targets.HostnameCellModalView({
            model: this.model
          });
          return App.execute('showModal', dialogView, {
            modal: {
              title: 'Hostname',
              description: '',
              width: 600,
              height: 400
            },
            buttons: [
              {
                name: 'Close',
                "class": 'close'
              }
            ]
          });
        };

        HostnameCellView.prototype.template = function(model) {
          var max, text;
          max = 16;
          text = model['host.name'] || '';
          if (text.length > max) {
            this.truncatedText = text.substring(0, max) + '…';
            return "" + (_.escape(this.truncatedText)) + " <a class='more' href='javascript:void(0);'>more</a>";
          } else {
            return _.escape(text);
          }
        };

        return HostnameCellView;

      })(App.Views.ItemView);
    });
  });

}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/targets/templates/target"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="title">\n  <span class=\'username\'>');
      
        __out.push(__sanitize(this['host.address']));
      
        __out.push('</span>\n  <span class=\'private\'>');
      
        __out.push(__sanitize(this['name']));
      
        __out.push('</span>\n</div>\n\n<div class="subtitle">\n  ');
      
        __out.push(__sanitize(this['host.name']));
      
        __out.push('&nbsp;\n</div>\n\n<div class="arrow-container">\n  <a class="expand"></a>\n</div>\n\n<div class="toggle-info display-none"><!-- why do i\n  --><div>OS: ');
      
        __out.push(__sanitize(this['host.os_name']));
      
        __out.push('</div><!-- have\n  --><div>Port: ');
      
        __out.push(__sanitize(this['port']));
      
        __out.push('</div><!-- to do this?\n  --><div>Protocol: ');
      
        __out.push(__sanitize(this['proto']));
      
        __out.push('</div><!--\n  --><div>');
      
        __out.push(__sanitize(this['info']));
      
        __out.push('</div><!--\n--></div>\n\n<a class=\'right delete\' title=\'Remove this credential from the selection.\' href=\'javascript:void(0)\'>\n  <span>\n    &times;\n  </span>\n</a>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() { this.JST || (this.JST = {}); this.JST["backbone/lib/shared/targets/templates/targets_layout"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('<div class="foundation">\n  <div class="row">\n    <div class="large-9 columns">\n      <p>\n        Choose the targets you want to test with the selected credentials from the list below. To refine the list, use the filters to create a custom search query.\n      </p>\n    </div>\n\n    <div class="large-3 columns last"></div>\n  </div>\n\n  <div class="row">\n    <div class="large-9 columns left-side">\n      <h1 class="invisible" data-table-id="targets"></h1>\n      <div class="targets-table"></div>\n    </div>\n    <div class="large-3 columns last right-side">\n\n\n      <div class="btn-arrow add-selection">\n        <span class="icon icon-fb"><span>＋</span></span>\n        <span class="title">Add Target(s) to this list</span>\n      </div>\n\n\n      <div class="target-list"></div>\n\n      <a href="javascript:void(0)" class="btn primary launch disabled">Next</a>\n    </div>\n  </div>\n</div>\n\n\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
(function() {

  define(['jquery'], function($) {
    return $.fn.hasOverflowedHeight = function() {
      var el, ret, t, text;
      el = $(this[0]);
      if (el.css("overflow") === "hidden") {
        text = el.html();
        t = $(el[0].cloneNode(true)).hide().css("position", "absolute").css("overflow", "visible").height("auto").width(el.width());
        el.after(t);
        ret = t.height() > el.height();
        t.remove();
        return ret;
      } else {
        throw new Error("Element must have overflow:hidden to use isOverflowHeight");
      }
    };
  });

}).call(this);
(function() {

  define(['jquery', 'config/sync'], function($) {
    return this.Pro.module("Utilities", function(Utilities, App) {
      return App.commands.setHandler("when:fetched", function(entities, callback) {
        var xhrs;
        xhrs = _.chain([entities]).flatten().pluck("_fetch").value();
        return $.when.apply($, xhrs).done(function() {
          return callback();
        });
      });
    }, $);
  });

}).call(this);
(function() {
  var __slice = [].slice;

  this.Pro.module("Utilities", function(Utilities, App) {
    var include, key, klass, klasses, mixinKeywords, module, modules, obj, _i, _len, _results;
    mixinKeywords = ["beforeIncluded", "afterIncluded"];
    include = function() {
      var concern, klass, obj, objs, _i, _len, _ref, _ref1, _ref2;
      objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      klass = this;
      for (_i = 0, _len = objs.length; _i < _len; _i++) {
        obj = objs[_i];
        concern = App.request("concern", obj);
        if ((_ref = concern.beforeIncluded) != null) {
          _ref.call(klass.prototype, klass, concern);
        }
        Cocktail.mixin(klass, (_ref1 = _(concern)).omit.apply(_ref1, mixinKeywords));
        if ((_ref2 = concern.afterIncluded) != null) {
          _ref2.call(klass.prototype, klass, concern);
        }
      }
      return klass;
    };
    modules = [
      {
        Backbone: ["Collection", "Model", "View"]
      }, {
        Marionette: ["ItemView", "LayoutView", "CollectionView", "CompositeView", "Controller"]
      }
    ];
    _results = [];
    for (_i = 0, _len = modules.length; _i < _len; _i++) {
      module = modules[_i];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (key in module) {
          klasses = module[key];
          _results1.push((function() {
            var _j, _len1, _results2;
            _results2 = [];
            for (_j = 0, _len1 = klasses.length; _j < _len1; _j++) {
              klass = klasses[_j];
              obj = window[key] || App[key];
              _results2.push(obj[klass].include = include);
            }
            return _results2;
          })());
        }
        return _results1;
      })());
    }
    return _results;
  });

}).call(this);
(function() {

  this.Pro.module("Utilities", function(Utilities, App, Backbone, Marionette, $, _) {
    return _.extend(App, {
      navigate: function(route, options) {
        if (options == null) {
          options = {};
        }
        return Backbone.history.navigate(route, options);
      },
      getCurrentRoute: function() {
        var frag;
        frag = Backbone.history.fragment;
        if (_.isEmpty(frag)) {
          return null;
        } else {
          return frag;
        }
      },
      startHistory: function() {
        if (Backbone.history) {
          Backbone.history.start();
          return Backbone.history.on('route', function() {
            return App.execute('closeModal');
          });
        }
      }
    });
  });

}).call(this);
(function() {

  this.Pro.module("Utilities", function(Utilities, App, Backbone, Marionette, $, _) {
    return Utilities.createGuid = function createGuid()
{
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
  var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
  return v.toString(16);
});
};
  });

}).call(this);
(function() {

  define([], function() {
    return this.Pro.module("Views", function(Views, App, Backbone, Marionette, jQuery, _) {
      var TemplatePathHelpers;
      TemplatePathHelpers = {
        lookups: ["backbone/apps/", "backbone/lib/components/", "backbone/lib/shared/", "backbone/lib/concerns"],
        templatePath: function(template) {
          var lookup, path, _i, _j, _len, _len1, _ref, _ref1;
          if (template === false) {
            return;
          }
          _ref = [template, this.withTemplate(template)];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            path = _ref[_i];
            _ref1 = this.lookups;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              lookup = _ref1[_j];
              if (JST[lookup + path]) {
                return JST[lookup + path];
              }
            }
          }
        },
        withTemplate: function(path) {
          var array;
          array = path.split("/");
          array.splice(-1, 0, "templates");
          return array.join("/");
        },
        selectText: function(element) {
          var range, selection;
          if (document.body.createTextRange) {
            range = document.body.createTextRange();
            range.moveToElementText(element);
            return range.select();
          } else if (window.getSelection) {
            selection = window.getSelection();
            range = document.createRange();
            range.selectNodeContents(element);
            selection.removeAllRanges();
            return selection.addRange(range);
          }
        }
      };
      _.extend(Marionette.ItemView.prototype, TemplatePathHelpers);
      _.extend(Marionette.CollectionView.prototype, TemplatePathHelpers);
      _.extend(Marionette.View.prototype, {
        templateHelpers: function() {},
        _getDefaults: function() {
          return _.clone(_.result(this, "defaults"));
        }
      });
      return _.extend(Marionette.Renderer, {
        render: function(template, data) {
          var templateFunc;
          if (template === false) {
            return;
          }
          templateFunc;

          if (typeof template === "function") {
            templateFunc = template;
          } else {
            templateFunc = Marionette.TemplateCache.get(template);
          }
          return templateFunc(data);
        }
      });
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view'], function() {
    return this.Pro.module("Views", function(Views, App) {
      Views.CollectionView = (function(_super) {

        __extends(CollectionView, _super);

        function CollectionView() {
          return CollectionView.__super__.constructor.apply(this, arguments);
        }

        return CollectionView;

      })(Marionette.CollectionView);
      return Views.SortableCollectionView = (function(_super) {

        __extends(SortableCollectionView, _super);

        function SortableCollectionView() {
          return SortableCollectionView.__super__.constructor.apply(this, arguments);
        }

        return SortableCollectionView;

      })(Marionette.CollectionView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view'], function() {
    return this.Pro.module("Views", function(Views, App, Backbone, Marionette, jQuery, _) {
      return Views.CompositeView = (function(_super) {

        __extends(CompositeView, _super);

        function CompositeView() {
          return CompositeView.__super__.constructor.apply(this, arguments);
        }

        CompositeView.prototype.itemViewEventPrefix = "childview";

        return CompositeView;

      })(Marionette.CompositeView);
    });
  });

}).call(this);
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_itemview', 'lib/concerns/views/spinner'], function() {
    return this.Pro.module("Views", function(Views, App, Backbone, Marionette, $, _) {
      return Views.FormView = (function(_super) {

        __extends(FormView, _super);

        function FormView() {
          this._renderErrors = __bind(this._renderErrors, this);
          return FormView.__super__.constructor.apply(this, arguments);
        }

        FormView.include("Spinner");

        FormView.prototype.events = {
          'change form': 'updateModel',
          'input form': 'updateModel'
        };

        FormView.prototype.modelEvents = {
          'change:errors': 'updateErrors',
          'request': 'disableForm',
          'sync': 'enableForm'
        };

        FormView.prototype.ui = {
          'form': 'form',
          'inputs': 'input, textarea'
        };

        FormView.prototype.onShow = function() {
          Backbone.Syphon.deserialize(this, this.model.toJSON());
          return this.updateErrors(null, this.model.get('errors'));
        };

        FormView.prototype.onDestroy = function() {
          return this.updateModel();
        };

        FormView.prototype.updateModel = function() {
          var data;
          data = Backbone.Syphon.serialize(this);
          return this.model.set(data);
        };

        FormView.prototype.updateErrors = function(model, errors) {
          var _this = this;
          this.enableForm();
          if (this.nestedAttributeName != null) {
            errors = _.filter(errors, function(error) {
              return error[_this.nestedAttributeName] != null;
            });
            if (!_.isEmpty(errors) && (errors[0][this.nestedAttributeName] != null)) {
              errors = errors[0][this.nestedAttributeName];
            }
          }
          return this._renderErrors(errors);
        };

        FormView.prototype.disableForm = function() {
          this.ui.form.css('opacity', '0.5');
          if (this.ui.inputs.size > 0) {
            this.ui.inputs.disable();
          }
          return this.showSpinner();
        };

        FormView.prototype.enableForm = function() {
          this.ui.form.css('opacity', '1');
          if (this.ui.inputs.size > 0) {
            this.ui.inputs.enable();
          }
          return this.hideSpinner();
        };

        FormView.prototype._renderErrors = function(errors) {
          var _this = this;
          $('.error', this.el).remove();
          return _.each(errors, function(v, k) {
            var $msg, error, name, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = v.length; _i < _len; _i++) {
              error = v[_i];
              name = _this.nestedAttributeName != null ? "" + _this.nestedAttributeName + "[" + k + "]" : k;
              $msg = $('<div />', {
                "class": 'error'
              }).text(error);
              _results.push($("[name='" + name + "']", _this.el).addClass('invalid').after($msg));
            }
            return _results;
          });
        };

        return FormView;

      })(Views.ItemView);
    });
  });

}).call(this);

/*
From RequireJS Docs

The paths config was used to set two module IDs to the same file, and
that file only has one anonymous module in it. If module IDs "something"
and "lib/something" are both configured to point to the same "scripts/libs/something.js"
file, and something.js only has one anonymous module in it, this kind of timeout error
can occur. The fix is to make sure all module ID references use the same ID (either
choose "something" or "lib/something" for all references), or use map config.
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['/assets/shared/backbone/layouts/modal-57927538cf64c26b47a2f8f54fdef926ef3c906fba72986d69e71e13cfe4422f.js', 'base_view'], function(Modal) {
    return this.Pro.module("Views", function(Views, App, Backbone, Marionette, $, _) {
      return Views.ItemView = (function(_super) {

        __extends(ItemView, _super);

        function ItemView() {
          this.showDialog = __bind(this.showDialog, this);
          return ItemView.__super__.constructor.apply(this, arguments);
        }

        ItemView.prototype.showDialog = function(view, options) {
          var _this = this;
          if (this.modal) {
            this.modal.destroy();
          }
          this.modal = new Modal(options);
          this.modal.open();
          this.modal.content.show(view);
          this.modal._center();
          this.modal.content.$el.find('input, textarea').first().focus();
          return this.modal.content.$el.find('form').on('submit', function(e) {
            view.triggerMethod('dialog:button:primary:clicked');
            return _this.modal.destroy();
          });
        };

        return ItemView;

      })(Marionette.ItemView);
    });
  });

}).call(this);
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['base_view'], function() {
    return this.Pro.module("Views", function(Views, App) {
      return Views.Layout = (function(_super) {

        __extends(Layout, _super);

        function Layout() {
          return Layout.__super__.constructor.apply(this, arguments);
        }

        return Layout;

      })(Marionette.LayoutView);
    });
  });

}).call(this);
(function() {



}).call(this);
