// [ The Prototype Manifesto ]
//
// Prototype sucks.
// It overrides heaps of builtin functions with INCOMPATIBLE patches.
// It does not even check if the function already exists.
// Do yourself a favor and don't use it.
// Never use it.
//
// - joev

// hrm why in the world would we have to do this?
window.reduce = Array.prototype.reduce;

/*  Prototype JavaScript framework, version 1.6.0.3
 *  (c) 2005-2008 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/

var Prototype = {
  Version: '1.6.0.3',

  Browser: {
    IE:     !!(window.attachEvent &&
      navigator.userAgent.indexOf('Opera') === -1),
    Opera:  navigator.userAgent.indexOf('Opera') > -1,
    WebKit: navigator.userAgent.indexOf('AppleWebKit/') > -1,
    Gecko:  navigator.userAgent.indexOf('Gecko') > -1 &&
      navigator.userAgent.indexOf('KHTML') === -1,
    MobileSafari: !!navigator.userAgent.match(/Apple.*Mobile.*Safari/)
  },

  BrowserFeatures: {
    XPath: !!document.evaluate,
    SelectorsAPI: !!document.querySelector,
    ElementExtensions: !!window.HTMLElement,
    SpecificElementExtensions:
      document.createElement('div')['__proto__'] &&
      document.createElement('div')['__proto__'] !==
        document.createElement('form')['__proto__']
  },

  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script>',
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,

  emptyFunction: function() { },
  K: function(x) { return x }
};

if (Prototype.Browser.MobileSafari)
  Prototype.BrowserFeatures.SpecificElementExtensions = false;


/* Based on Alex Arnell's inheritance implementation. */
var Class = {
  create: function() {
    var parent = null, properties = $A(arguments);
    if (Object.isFunction(properties[0]))
      parent = properties.shift();

    function klass() {
      this.initialize.apply(this, arguments);
    }

    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];

    if (parent) {
      var subclass = function() { };
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }

    for (var i = 0; i < properties.length; i++)
      klass.addMethods(properties[i]);

    if (!klass.prototype.initialize)
      klass.prototype.initialize = Prototype.emptyFunction;

    klass.prototype.constructor = klass;

    return klass;
  }
};

Class.Methods = {
  addMethods: function(source) {
    var ancestor   = this.superclass && this.superclass.prototype;
    var properties = Object.keys(source);

    if (!Object.keys({ toString: true }).length)
      properties.push("toString", "valueOf");

    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && Object.isFunction(value) &&
          value.argumentNames().first() == "$super") {
        var method = value;
        value = (function(m) {
          return function() { return ancestor[m].apply(this, arguments) };
        })(property).wrap(method);

        value.valueOf = method.valueOf.bind(method);
        value.toString = method.toString.bind(method);
      }
      this.prototype[property] = value;
    }

    return this;
  }
};

var Abstract = { };

Object.extend = function(destination, source) {
  for (var property in source)
    destination[property] = source[property];
  return destination;
};

Object.extend(Object, {
  inspect: function(object) {
    try {
      if (Object.isUndefined(object)) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : String(object);
    } catch (e) {
      if (e instanceof RangeError) return '...';
      throw e;
    }
  },

  toJSON: function(object) {
    var type = typeof object;
    switch (type) {
      case 'undefined':
      case 'function':
      case 'unknown': return;
      case 'boolean': return object.toString();
    }

    if (object === null) return 'null';
    if (object.toJSON) return object.toJSON();
    if (Object.isElement(object)) return;

    var results = [];
    for (var property in object) {
      var value = Object.toJSON(object[property]);
      if (!Object.isUndefined(value))
        results.push(property.toJSON() + ': ' + value);
    }

    return '{' + results.join(', ') + '}';
  },

  toQueryString: function(object) {
    return $H(object).toQueryString();
  },

  toHTML: function(object) {
    return object && object.toHTML ? object.toHTML() : String.interpret(object);
  },

  keys: function(object) {
    var keys = [];
    for (var property in object)
      keys.push(property);
    return keys;
  },

  values: function(object) {
    var values = [];
    for (var property in object)
      values.push(object[property]);
    return values;
  },

  clone: function(object) {
    return Object.extend({ }, object);
  },

  isElement: function(object) {
    return !!(object && object.nodeType == 1);
  },

  isArray: function(object) {
    return object != null && typeof object == "object" &&
      'splice' in object && 'join' in object;
  },

  isHash: function(object) {
    return object instanceof Hash;
  },

  isFunction: function(object) {
    return typeof object == "function";
  },

  isString: function(object) {
    return typeof object == "string";
  },

  isNumber: function(object) {
    return typeof object == "number";
  },

  isUndefined: function(object) {
    return typeof object == "undefined";
  }
});

Object.extend(Function.prototype, {
  argumentNames: function() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^\)]*)\)/)[1]
      .replace(/\s+/g, '').split(',');
    return names.length == 1 && !names[0] ? [] : names;
  },

  bind: function() {
    if (arguments.length < 2 && Object.isUndefined(arguments[0])) return this;
    var __method = this, args = $A(arguments), object = args.shift();
    return function() {
      return __method.apply(object, args.concat($A(arguments)));
    }
  },

  bindAsEventListener: function() {
    var __method = this, args = $A(arguments), object = args.shift();
    return function(event) {
      return __method.apply(object, [event || window.event].concat(args));
    }
  },

  curry: function() {
    if (!arguments.length) return this;
    var __method = this, args = $A(arguments);
    return function() {
      return __method.apply(this, args.concat($A(arguments)));
    }
  },

  delay: function() {
    var __method = this, args = $A(arguments), timeout = args.shift() * 1000;
    return window.setTimeout(function() {
      return __method.apply(__method, args);
    }, timeout);
  },

  defer: function() {
    var args = [0.01].concat($A(arguments));
    return this.delay.apply(this, args);
  },

  wrap: function(wrapper) {
    var __method = this;
    return function() {
      return wrapper.apply(this, [__method.bind(this)].concat($A(arguments)));
    }
  },

  methodize: function() {
    if (this._methodized) return this._methodized;
    var __method = this;
    return this._methodized = function() {
      return __method.apply(null, [this].concat($A(arguments)));
    };
  }
});

Date.prototype.toJSON = function() {
  return '"' + this.getUTCFullYear() + '-' +
    (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
    this.getUTCDate().toPaddedString(2) + 'T' +
    this.getUTCHours().toPaddedString(2) + ':' +
    this.getUTCMinutes().toPaddedString(2) + ':' +
    this.getUTCSeconds().toPaddedString(2) + 'Z"';
};

var Try = {
  these: function() {
    var returnValue;

    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) { }
    }

    return returnValue;
  }
};

RegExp.prototype.match = RegExp.prototype.test;

RegExp.escape = function(str) {
  return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};

/*--------------------------------------------------------------------------*/

var PeriodicalExecuter = Class.create({
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;

    this.registerCallback();
  },

  registerCallback: function() {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  execute: function() {
    this.callback(this);
  },

  stop: function() {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },

  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      try {
        this.currentlyExecuting = true;
        this.execute();
      } finally {
        this.currentlyExecuting = false;
      }
    }
  }
});
Object.extend(String, {
  interpret: function(value) {
    return value == null ? '' : String(value);
  },
  specialChar: {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '\\': '\\\\'
  }
});

Object.extend(String.prototype, {
  gsub: function(pattern, replacement) {
    var result = '', source = this, match;
    replacement = arguments.callee.prepareReplacement(replacement);

    while (source.length > 0) {
      if (match = source.match(pattern)) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source  = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  },

  sub: function(pattern, replacement, count) {
    replacement = this.gsub.prepareReplacement(replacement);
    count = Object.isUndefined(count) ? 1 : count;

    return this.gsub(pattern, function(match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  },

  scan: function(pattern, iterator) {
    this.gsub(pattern, iterator);
    return String(this);
  },

  truncate: function(length, truncation) {
    length = length || 30;
    truncation = Object.isUndefined(truncation) ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : String(this);
  },

  strip: function() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  },

  stripTags: function() {
    return this.replace(/<\/?[^>]+>/gi, '');
  },

  stripScripts: function() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  },

  extractScripts: function() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img');
    var matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  },

  evalScripts: function() {
    return this.extractScripts().map(function(script) { return eval(script) });
  },

  escapeHTML: function() {
    var self = arguments.callee;
    self.text.data = this;
    return self.div.innerHTML;
  },

  unescapeHTML: function() {
    var div = new Element('div');
    div.innerHTML = this.stripTags();
    return div.childNodes[0] ? (div.childNodes.length > 1 ?
      $A(div.childNodes).inject('', function(memo, node) { return memo+node.nodeValue }) :
      div.childNodes[0].nodeValue) : '';
  },

  toQueryParams: function(separator) {
    var match = this.strip().match(/([^?#]*)(#.*)?$/);
    if (!match) return { };

    return match[1].split(separator || '&').inject({ }, function(hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var key = decodeURIComponent(pair.shift());
        var value = pair.length > 1 ? pair.join('=') : pair[0];
        if (value != undefined) value = decodeURIComponent(value);

        if (key in hash) {
          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];
          hash[key].push(value);
        }
        else hash[key] = value;
      }
      return hash;
    });
  },

  toArray: function() {
    return this.split('');
  },

  succ: function() {
    return this.slice(0, this.length - 1) +
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  },

  times: function(count) {
    return count < 1 ? '' : new Array(count + 1).join(this);
  },

  camelize: function() {
    var parts = this.split('-'), len = parts.length;
    if (len == 1) return parts[0];

    var camelized = this.charAt(0) == '-'
      ? parts[0].charAt(0).toUpperCase() + parts[0].substring(1)
      : parts[0];

    for (var i = 1; i < len; i++)
      camelized += parts[i].charAt(0).toUpperCase() + parts[i].substring(1);

    return camelized;
  },

  capitalize: function() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  },

  underscore: function() {
    return this.gsub(/::/, '/').gsub(/([A-Z]+)([A-Z][a-z])/,'#{1}_#{2}').gsub(/([a-z\d])([A-Z])/,'#{1}_#{2}').gsub(/-/,'_').toLowerCase();
  },

  dasherize: function() {
    return this.gsub(/_/,'-');
  },

  inspect: function(useDoubleQuotes) {
    var escapedString = this.gsub(/[\x00-\x1f\\]/, function(match) {
      var character = String.specialChar[match[0]];
      return character ? character : '\\u00' + match[0].charCodeAt().toPaddedString(2, 16);
    });
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";
  },

  toJSON: function() {
    return this.inspect(true);
  },

  unfilterJSON: function(filter) {
    return this.sub(filter || Prototype.JSONFilter, '#{1}');
  },

  isJSON: function() {
    var str = this;
    if (str.blank()) return false;
    str = this.replace(/\\./g, '@').replace(/"[^"\\\n\r]*"/g, '');
    return (/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(str);
  },

  evalJSON: function(sanitize) {
    var json = this.unfilterJSON();
    try {
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');
    } catch (e) { }
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
  },

  include: function(pattern) {
    return this.indexOf(pattern) > -1;
  },

  startsWith: function(pattern) {
    return this.indexOf(pattern) === 0;
  },

  endsWith: function(pattern) {
    var d = this.length - pattern.length;
    return d >= 0 && this.lastIndexOf(pattern) === d;
  },

  empty: function() {
    return this == '';
  },

  blank: function() {
    return /^\s*$/.test(this);
  },

  interpolate: function(object, pattern) {
    return new Template(this, pattern).evaluate(object);
  }
});

if (Prototype.Browser.WebKit || Prototype.Browser.IE) Object.extend(String.prototype, {
  escapeHTML: function() {
    return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  },
  unescapeHTML: function() {
    return this.stripTags().replace(/&amp;/g,'&').replace(/&lt;/g,'<').replace(/&gt;/g,'>');
  }
});

String.prototype.gsub.prepareReplacement = function(replacement) {
  if (Object.isFunction(replacement)) return replacement;
  var template = new Template(replacement);
  return function(match) { return template.evaluate(match) };
};

String.prototype.parseQuery = String.prototype.toQueryParams;

Object.extend(String.prototype.escapeHTML, {
  div:  document.createElement('div'),
  text: document.createTextNode('')
});

String.prototype.escapeHTML.div.appendChild(String.prototype.escapeHTML.text);

var Template = Class.create({
  initialize: function(template, pattern) {
    this.template = template.toString();
    this.pattern = pattern || Template.Pattern;
  },

  evaluate: function(object) {
    if (Object.isFunction(object.toTemplateReplacements))
      object = object.toTemplateReplacements();

    return this.template.gsub(this.pattern, function(match) {
      if (object == null) return '';

      var before = match[1] || '';
      if (before == '\\') return match[2];

      var ctx = object, expr = match[3];
      var pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;
      match = pattern.exec(expr);
      if (match == null) return before;

      while (match != null) {
        var comp = match[1].startsWith('[') ? match[2].gsub('\\\\]', ']') : match[1];
        ctx = ctx[comp];
        if (null == ctx || '' == match[3]) break;
        expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
        match = pattern.exec(expr);
      }

      return before + String.interpret(ctx);
    });
  }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;

var $break = { };

var Enumerable = {
  each: function(iterator, context) {
    var index = 0;
    try {
      this._each(function(value) {
        iterator.call(context, value, index++);
      });
    } catch (e) {
      if (e != $break) throw e;
    }
    return this;
  },

  eachSlice: function(number, iterator, context) {
    var index = -number, slices = [], array = this.toArray();
    if (number < 1) return array;
    while ((index += number) < array.length)
      slices.push(array.slice(index, index+number));
    return slices.collect(iterator, context);
  },

  all: function(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = true;
    this.each(function(value, index) {
      result = result && !!iterator.call(context, value, index);
      if (!result) throw $break;
    });
    return result;
  },

  any: function(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = false;
    this.each(function(value, index) {
      if (result = !!iterator.call(context, value, index))
        throw $break;
    });
    return result;
  },

  collect: function(iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    this.each(function(value, index) {
      results.push(iterator.call(context, value, index));
    });
    return results;
  },

  detect: function(iterator, context) {
    var result;
    this.each(function(value, index) {
      if (iterator.call(context, value, index)) {
        result = value;
        throw $break;
      }
    });
    return result;
  },

  findAll: function(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  },

  grep: function(filter, iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];

    if (Object.isString(filter))
      filter = new RegExp(filter);

    this.each(function(value, index) {
      if (filter.match(value))
        results.push(iterator.call(context, value, index));
    });
    return results;
  },

  include: function(object) {
    if (Object.isFunction(this.indexOf))
      if (this.indexOf(object) != -1) return true;

    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  },

  inGroupsOf: function(number, fillWith) {
    fillWith = Object.isUndefined(fillWith) ? null : fillWith;
    return this.eachSlice(number, function(slice) {
      while(slice.length < number) slice.push(fillWith);
      return slice;
    });
  },

  inject: function(memo, iterator, context) {
    this.each(function(value, index) {
      memo = iterator.call(context, memo, value, index);
    });
    return memo;
  },

  invoke: function(method) {
    var args = $A(arguments).slice(1);
    return this.map(function(value) {
      return value[method].apply(value, args);
    });
  },

  max: function(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value >= result)
        result = value;
    });
    return result;
  },

  min: function(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value < result)
        result = value;
    });
    return result;
  },

  partition: function(iterator, context) {
    iterator = iterator || Prototype.K;
    var trues = [], falses = [];
    this.each(function(value, index) {
      (iterator.call(context, value, index) ?
        trues : falses).push(value);
    });
    return [trues, falses];
  },

  pluck: function(property) {
    var results = [];
    this.each(function(value) {
      results.push(value[property]);
    });
    return results;
  },

  reject: function(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  },

  sortBy: function(iterator, context) {
    return this.map(function(value, index) {
      return {
        value: value,
        criteria: iterator.call(context, value, index)
      };
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  },

  toArray: function() {
    return this.map();
  },

  zip: function() {
    var iterator = Prototype.K, args = $A(arguments);
    if (Object.isFunction(args.last()))
      iterator = args.pop();

    var collections = [this].concat(args).map($A);
    return this.map(function(value, index) {
      return iterator(collections.pluck(index));
    });
  },

  size: function() {
    return this.toArray().length;
  },

  inspect: function() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }
};

Object.extend(Enumerable, {
  map:     Enumerable.collect,
  find:    Enumerable.detect,
  select:  Enumerable.findAll,
  filter:  Enumerable.findAll,
  member:  Enumerable.include,
  entries: Enumerable.toArray,
  every:   Enumerable.all,
  some:    Enumerable.any
});
function $A(iterable) {
  if (!iterable) return [];
  if (iterable.toArray) return iterable.toArray();
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}

if (Prototype.Browser.WebKit) {
  $A = function(iterable) {
    if (!iterable) return [];
    // In Safari, only use the `toArray` method if it's not a NodeList.
    // A NodeList is a function, has an function `item` property, and a numeric
    // `length` property. Adapted from Google Doctype.
    if (!(typeof iterable === 'function' && typeof iterable.length ===
        'number' && typeof iterable.item === 'function') && iterable.toArray)
      return iterable.toArray();
    var length = iterable.length || 0, results = new Array(length);
    while (length--) results[length] = iterable[length];
    return results;
  };
}

Array.from = $A;

Object.extend(Array.prototype, Enumerable);

if (!Array.prototype._reverse) Array.prototype._reverse = Array.prototype.reverse;

Object.extend(Array.prototype, {
  _each: function(iterator) {
    for (var i = 0, length = this.length; i < length; i++)
      iterator(this[i]);
  },

  clear: function() {
    this.length = 0;
    return this;
  },

  first: function() {
    return this[0];
  },

  last: function() {
    return this[this.length - 1];
  },

  compact: function() {
    return this.select(function(value) {
      return value != null;
    });
  },

  flatten: function() {
    return this.inject([], function(array, value) {
      return array.concat(Object.isArray(value) ?
        value.flatten() : [value]);
    });
  },

  without: function() {
    var values = $A(arguments);
    return this.select(function(value) {
      return !values.include(value);
    });
  },

  reverse: function(inline) {
    return (inline !== false ? this : this.toArray())._reverse();
  },

  reduce: function() {
    return this.length > 1 ? this : this[0];
  },

  uniq: function(sorted) {
    return this.inject([], function(array, value, index) {
      if (0 == index || (sorted ? array.last() != value : !array.include(value)))
        array.push(value);
      return array;
    });
  },

  intersect: function(array) {
    return this.uniq().findAll(function(item) {
      return array.detect(function(value) { return item === value });
    });
  },

  clone: function() {
    return [].concat(this);
  },

  size: function() {
    return this.length;
  },

  inspect: function() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  },

  toJSON: function() {
    var results = [];
    this.each(function(object) {
      var value = Object.toJSON(object);
      if (!Object.isUndefined(value)) results.push(value);
    });
    return '[' + results.join(', ') + ']';
  }
});

// use native browser JS 1.6 implementation if available
if (Object.isFunction(Array.prototype.forEach))
  Array.prototype._each = Array.prototype.forEach;

if (!Array.prototype.indexOf) Array.prototype.indexOf = function(item, i) {
  i || (i = 0);
  var length = this.length;
  if (i < 0) i = length + i;
  for (; i < length; i++)
    if (this[i] === item) return i;
  return -1;
};

if (!Array.prototype.lastIndexOf) Array.prototype.lastIndexOf = function(item, i) {
  i = isNaN(i) ? this.length : (i < 0 ? this.length + i : i) + 1;
  var n = this.slice(0, i).reverse().indexOf(item);
  return (n < 0) ? n : i - n - 1;
};

Array.prototype.toArray = Array.prototype.clone;

function $w(string) {
  if (!Object.isString(string)) return [];
  string = string.strip();
  return string ? string.split(/\s+/) : [];
}

if (Prototype.Browser.Opera){
  Array.prototype.concat = function() {
    var array = [];
    for (var i = 0, length = this.length; i < length; i++) array.push(this[i]);
    for (var i = 0, length = arguments.length; i < length; i++) {
      if (Object.isArray(arguments[i])) {
        for (var j = 0, arrayLength = arguments[i].length; j < arrayLength; j++)
          array.push(arguments[i][j]);
      } else {
        array.push(arguments[i]);
      }
    }
    return array;
  };
}
Object.extend(Number.prototype, {
  toColorPart: function() {
    return this.toPaddedString(2, 16);
  },

  succ: function() {
    return this + 1;
  },

  times: function(iterator, context) {
    $R(0, this, true).each(iterator, context);
    return this;
  },

  toPaddedString: function(length, radix) {
    var string = this.toString(radix || 10);
    return '0'.times(length - string.length) + string;
  },

  toJSON: function() {
    return isFinite(this) ? this.toString() : 'null';
  }
});

$w('abs round ceil floor').each(function(method){
  Number.prototype[method] = Math[method].methodize();
});
function $H(object) {
  return new Hash(object);
};

var Hash = Class.create(Enumerable, (function() {

  function toQueryPair(key, value) {
    if (Object.isUndefined(value)) return key;
    return key + '=' + encodeURIComponent(String.interpret(value));
  }

  return {
    initialize: function(object) {
      this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
    },

    _each: function(iterator) {
      for (var key in this._object) {
        var value = this._object[key], pair = [key, value];
        pair.key = key;
        pair.value = value;
        iterator(pair);
      }
    },

    set: function(key, value) {
      return this._object[key] = value;
    },

    get: function(key) {
      // simulating poorly supported hasOwnProperty
      if (this._object[key] !== Object.prototype[key])
        return this._object[key];
    },

    unset: function(key) {
      var value = this._object[key];
      delete this._object[key];
      return value;
    },

    toObject: function() {
      return Object.clone(this._object);
    },

    keys: function() {
      return this.pluck('key');
    },

    values: function() {
      return this.pluck('value');
    },

    index: function(value) {
      var match = this.detect(function(pair) {
        return pair.value === value;
      });
      return match && match.key;
    },

    merge: function(object) {
      return this.clone().update(object);
    },

    update: function(object) {
      return new Hash(object).inject(this, function(result, pair) {
        result.set(pair.key, pair.value);
        return result;
      });
    },

    toQueryString: function() {
      return this.inject([], function(results, pair) {
        var key = encodeURIComponent(pair.key), values = pair.value;

        if (values && typeof values == 'object') {
          if (Object.isArray(values))
            return results.concat(values.map(toQueryPair.curry(key)));
        } else results.push(toQueryPair(key, values));
        return results;
      }).join('&');
    },

    inspect: function() {
      return '#<Hash:{' + this.map(function(pair) {
        return pair.map(Object.inspect).join(': ');
      }).join(', ') + '}>';
    },

    toJSON: function() {
      return Object.toJSON(this.toObject());
    },

    clone: function() {
      return new Hash(this);
    }
  }
})());

Hash.prototype.toTemplateReplacements = Hash.prototype.toObject;
Hash.from = $H;
var ObjectRange = Class.create(Enumerable, {
  initialize: function(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  },

  _each: function(iterator) {
    var value = this.start;
    while (this.include(value)) {
      iterator(value);
      value = value.succ();
    }
  },

  include: function(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }
});

var $R = function(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
};

var Ajax = {
  getTransport: function() {
    return Try.these(
      function() {return new XMLHttpRequest()},
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')}
    ) || false;
  },

  activeRequestCount: 0
};

Ajax.Responders = {
  responders: [],

  _each: function(iterator) {
    this.responders._each(iterator);
  },

  register: function(responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  },

  unregister: function(responder) {
    this.responders = this.responders.without(responder);
  },

  dispatch: function(callback, request, transport, json) {
    this.each(function(responder) {
      if (Object.isFunction(responder[callback])) {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (e) { }
      }
    });
  }
};

Object.extend(Ajax.Responders, Enumerable);

Ajax.Responders.register({
  onCreate:   function() { Ajax.activeRequestCount++ },
  onComplete: function() { Ajax.activeRequestCount-- }
});

Ajax.Base = Class.create({
  initialize: function(options) {
    this.options = {
      method:       'post',
      asynchronous: true,
      contentType:  'application/x-www-form-urlencoded',
      encoding:     'UTF-8',
      parameters:   '',
      evalJSON:     true,
      evalJS:       true
    };
    Object.extend(this.options, options || { });

    this.options.method = this.options.method.toLowerCase();

    if (Object.isString(this.options.parameters))
      this.options.parameters = this.options.parameters.toQueryParams();
    else if (Object.isHash(this.options.parameters))
      this.options.parameters = this.options.parameters.toObject();
  }
});

Ajax.Request = Class.create(Ajax.Base, {
  _complete: false,

  initialize: function($super, url, options) {
    $super(options);
    this.transport = Ajax.getTransport();
    this.request(url);
  },

  request: function(url) {
    this.url = url;
    this.method = this.options.method;
    var params = Object.clone(this.options.parameters);

    if (!['get', 'post'].include(this.method)) {
      // simulate other verbs over post
      params['_method'] = this.method;
      this.method = 'post';
    }

    this.parameters = params;

    if (params = Object.toQueryString(params)) {
      // when GET, append parameters to URL
      if (this.method == 'get')
        this.url += (this.url.include('?') ? '&' : '?') + params;
      else if (/Konqueror|Safari|KHTML/.test(navigator.userAgent))
        params += '&_=';
    }

    try {
      var response = new Ajax.Response(this);
      if (this.options.onCreate) this.options.onCreate(response);
      Ajax.Responders.dispatch('onCreate', this, response);

      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);

      if (this.options.asynchronous) this.respondToReadyState.bind(this).defer(1);

      this.transport.onreadystatechange = this.onStateChange.bind(this);
      this.setRequestHeaders();

      this.body = this.method == 'post' ? (this.options.postBody || params) : null;
      this.transport.send(this.body);

      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous && this.transport.overrideMimeType)
        this.onStateChange();

    }
    catch (e) {
      this.dispatchException(e);
    }
  },

  onStateChange: function() {
    var readyState = this.transport.readyState;
    if (readyState > 1 && !((readyState == 4) && this._complete))
      this.respondToReadyState(this.transport.readyState);
  },

  setRequestHeaders: function() {
    var headers = {
      'X-Requested-With': 'XMLHttpRequest',
      'X-Prototype-Version': Prototype.Version,
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };

    if (this.method == 'post') {
      headers['Content-type'] = this.options.contentType +
        (this.options.encoding ? '; charset=' + this.options.encoding : '');

      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &&
          (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0,2005])[1] < 2005)
            headers['Connection'] = 'close';
    }

    // user-defined headers
    if (typeof this.options.requestHeaders == 'object') {
      var extras = this.options.requestHeaders;

      if (Object.isFunction(extras.push))
        for (var i = 0, length = extras.length; i < length; i += 2)
          headers[extras[i]] = extras[i+1];
      else
        $H(extras).each(function(pair) { headers[pair.key] = pair.value });
    }

    for (var name in headers)
      this.transport.setRequestHeader(name, headers[name]);
  },

  success: function() {
    var status = this.getStatus();
    return !status || (status >= 200 && status < 300);
  },

  getStatus: function() {
    try {
      return this.transport.status || 0;
    } catch (e) { return 0 }
  },

  respondToReadyState: function(readyState) {
    var state = Ajax.Request.Events[readyState], response = new Ajax.Response(this);

    if (state == 'Complete') {
      try {
        this._complete = true;
        (this.options['on' + response.status]
         || this.options['on' + (this.success() ? 'Success' : 'Failure')]
         || Prototype.emptyFunction)(response, response.headerJSON);
      } catch (e) {
        this.dispatchException(e);
      }

      var contentType = response.getHeader('Content-type');
      if (this.options.evalJS == 'force'
          || (this.options.evalJS && this.isSameOrigin() && contentType
          && contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i)))
        this.evalResponse();
    }

    try {
      (this.options['on' + state] || Prototype.emptyFunction)(response, response.headerJSON);
      Ajax.Responders.dispatch('on' + state, this, response, response.headerJSON);
    } catch (e) {
      this.dispatchException(e);
    }

    if (state == 'Complete') {
      // avoid memory leak in MSIE: clean up
      this.transport.onreadystatechange = Prototype.emptyFunction;
    }
  },

  isSameOrigin: function() {
    var m = this.url.match(/^\s*https?:\/\/[^\/]*/);
    return !m || (m[0] == '#{protocol}//#{domain}#{port}'.interpolate({
      protocol: location.protocol,
      domain: document.domain,
      port: location.port ? ':' + location.port : ''
    }));
  },

  getHeader: function(name) {
    try {
      return this.transport.getResponseHeader(name) || null;
    } catch (e) { return null }
  },

  evalResponse: function() {
    try {
      return eval((this.transport.responseText || '').unfilterJSON());
    } catch (e) {
      this.dispatchException(e);
    }
  },

  dispatchException: function(exception) {
    (this.options.onException || Prototype.emptyFunction)(this, exception);
    Ajax.Responders.dispatch('onException', this, exception);
  }
});

Ajax.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];

Ajax.Response = Class.create({
  initialize: function(request){
    this.request = request;
    var transport  = this.transport  = request.transport,
        readyState = this.readyState = transport.readyState;

    if((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) {
      this.status       = this.getStatus();
      this.statusText   = this.getStatusText();
      this.responseText = String.interpret(transport.responseText);
      this.headerJSON   = this._getHeaderJSON();
    }

    if(readyState == 4) {
      var xml = transport.responseXML;
      this.responseXML  = Object.isUndefined(xml) ? null : xml;
      this.responseJSON = this._getResponseJSON();
    }
  },

  status:      0,
  statusText: '',

  getStatus: Ajax.Request.prototype.getStatus,

  getStatusText: function() {
    try {
      return this.transport.statusText || '';
    } catch (e) { return '' }
  },

  getHeader: Ajax.Request.prototype.getHeader,

  getAllHeaders: function() {
    try {
      return this.getAllResponseHeaders();
    } catch (e) { return null }
  },

  getResponseHeader: function(name) {
    return this.transport.getResponseHeader(name);
  },

  getAllResponseHeaders: function() {
    return this.transport.getAllResponseHeaders();
  },

  _getHeaderJSON: function() {
    var json = this.getHeader('X-JSON');
    if (!json) return null;
    json = decodeURIComponent(escape(json));
    try {
      return json.evalJSON(this.request.options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  },

  _getResponseJSON: function() {
    var options = this.request.options;
    if (!options.evalJSON || (options.evalJSON != 'force' &&
      !(this.getHeader('Content-type') || '').include('application/json')) ||
        this.responseText.blank())
          return null;
    try {
      return this.responseText.evalJSON(options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  }
});

Ajax.Updater = Class.create(Ajax.Request, {
  initialize: function($super, container, url, options) {
    this.container = {
      success: (container.success || container),
      failure: (container.failure || (container.success ? null : container))
    };

    options = Object.clone(options);
    var onComplete = options.onComplete;
    options.onComplete = (function(response, json) {
      this.updateContent(response.responseText);
      if (Object.isFunction(onComplete)) onComplete(response, json);
    }).bind(this);

    $super(url, options);
  },

  updateContent: function(responseText) {
    var receiver = this.container[this.success() ? 'success' : 'failure'],
        options = this.options;

    if (!options.evalScripts) responseText = responseText.stripScripts();

    if (receiver = $(receiver)) {
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
      else receiver.update(responseText);
    }
  }
});

Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {
  initialize: function($super, container, url, options) {
    $super(options);
    this.onComplete = this.options.onComplete;

    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);

    this.updater = { };
    this.container = container;
    this.url = url;

    this.start();
  },

  start: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },

  stop: function() {
    this.updater.options.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
  },

  updateComplete: function(response) {
    if (this.options.decay) {
      this.decay = (response.responseText == this.lastText ?
        this.decay * this.options.decay : 1);

      this.lastText = response.responseText;
    }
    this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
  },

  onTimerEvent: function() {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});
function $(element) {
  if (arguments.length > 1) {
    for (var i = 0, elements = [], length = arguments.length; i < length; i++)
      elements.push($(arguments[i]));
    return elements;
  }
  if (Object.isString(element))
    element = document.getElementById(element);
  return Element.extend(element);
}

if (Prototype.BrowserFeatures.XPath) {
  document._getElementsByXPath = function(expression, parentElement) {
    var results = [];
    var query = document.evaluate(expression, $(parentElement) || document,
      null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = 0, length = query.snapshotLength; i < length; i++)
      results.push(Element.extend(query.snapshotItem(i)));
    return results;
  };
}

/*--------------------------------------------------------------------------*/

if (!window.Node) var Node = { };

if (!Node.ELEMENT_NODE) {
  // DOM level 2 ECMAScript Language Binding
  Object.extend(Node, {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    CDATA_SECTION_NODE: 4,
    ENTITY_REFERENCE_NODE: 5,
    ENTITY_NODE: 6,
    PROCESSING_INSTRUCTION_NODE: 7,
    COMMENT_NODE: 8,
    DOCUMENT_NODE: 9,
    DOCUMENT_TYPE_NODE: 10,
    DOCUMENT_FRAGMENT_NODE: 11,
    NOTATION_NODE: 12
  });
}

(function() {
  var element = this.Element;
  this.Element = function(tagName, attributes) {
    attributes = attributes || { };
    tagName = tagName.toLowerCase();
    var cache = Element.cache;
    if (Prototype.Browser.IE && attributes.name) {
      tagName = '<' + tagName + ' name="' + attributes.name + '">';
      delete attributes.name;
      return Element.writeAttribute(document.createElement(tagName), attributes);
    }
    if (!cache[tagName]) cache[tagName] = Element.extend(document.createElement(tagName));
    return Element.writeAttribute(cache[tagName].cloneNode(false), attributes);
  };
  Object.extend(this.Element, element || { });
  if (element) this.Element.prototype = element.prototype;
}).call(window);

Element.cache = { };

Element.Methods = {
  visible: function(element) {
    return $(element).style.display != 'none';
  },

  toggle: function(element) {
    element = $(element);
    Element[Element.visible(element) ? 'hide' : 'show'](element);
    return element;
  },

  hide: function(element) {
    element = $(element);
    element.style.display = 'none';
    return element;
  },

  show: function(element) {
    element = $(element);
    element.style.display = '';
    return element;
  },

  remove: function(element) {
    element = $(element);
    element.parentNode.removeChild(element);
    return element;
  },

  update: function(element, content) {
    element = $(element);
    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) return element.update().insert(content);
    content = Object.toHTML(content);
    element.innerHTML = content.stripScripts();
    content.evalScripts.bind(content).defer();
    return element;
  },

  replace: function(element, content) {
    element = $(element);
    if (content && content.toElement) content = content.toElement();
    else if (!Object.isElement(content)) {
      content = Object.toHTML(content);
      var range = element.ownerDocument.createRange();
      range.selectNode(element);
      content.evalScripts.bind(content).defer();
      content = range.createContextualFragment(content.stripScripts());
    }
    element.parentNode.replaceChild(content, element);
    return element;
  },

  insert: function(element, insertions) {
    element = $(element);

    if (Object.isString(insertions) || Object.isNumber(insertions) ||
        Object.isElement(insertions) || (insertions && (insertions.toElement || insertions.toHTML)))
          insertions = {bottom:insertions};

    var content, insert, tagName, childNodes;

    for (var position in insertions) {
      content  = insertions[position];
      position = position.toLowerCase();
      insert = Element._insertionTranslations[position];

      if (content && content.toElement) content = content.toElement();
      if (Object.isElement(content)) {
        insert(element, content);
        continue;
      }

      content = Object.toHTML(content);

      tagName = ((position == 'before' || position == 'after')
        ? element.parentNode : element).tagName.toUpperCase();

      childNodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts());

      if (position == 'top' || position == 'after') childNodes.reverse();
      childNodes.each(insert.curry(element));

      content.evalScripts.bind(content).defer();
    }

    return element;
  },

  wrap: function(element, wrapper, attributes) {
    element = $(element);
    if (Object.isElement(wrapper))
      $(wrapper).writeAttribute(attributes || { });
    else if (Object.isString(wrapper)) wrapper = new Element(wrapper, attributes);
    else wrapper = new Element('div', wrapper);
    if (element.parentNode)
      element.parentNode.replaceChild(wrapper, element);
    wrapper.appendChild(element);
    return wrapper;
  },

  inspect: function(element) {
    element = $(element);
    var result = '<' + element.tagName.toLowerCase();
    $H({'id': 'id', 'className': 'class'}).each(function(pair) {
      var property = pair.first(), attribute = pair.last();
      var value = (element[property] || '').toString();
      if (value) result += ' ' + attribute + '=' + value.inspect(true);
    });
    return result + '>';
  },

  recursivelyCollect: function(element, property) {
    element = $(element);
    var elements = [];
    while (element = element[property])
      if (element.nodeType == 1)
        elements.push(Element.extend(element));
    return elements;
  },

  ancestors: function(element) {
    return $(element).recursivelyCollect('parentNode');
  },

  descendants: function(element) {
    return $(element).select("*");
  },

  firstDescendant: function(element) {
    element = $(element).firstChild;
    while (element && element.nodeType != 1) element = element.nextSibling;
    return $(element);
  },

  immediateDescendants: function(element) {
    if (!(element = $(element).firstChild)) return [];
    while (element && element.nodeType != 1) element = element.nextSibling;
    if (element) return [element].concat($(element).nextSiblings());
    return [];
  },

  previousSiblings: function(element) {
    return $(element).recursivelyCollect('previousSibling');
  },

  nextSiblings: function(element) {
    return $(element).recursivelyCollect('nextSibling');
  },

  siblings: function(element) {
    element = $(element);
    return element.previousSiblings().reverse().concat(element.nextSiblings());
  },

  match: function(element, selector) {
    if (Object.isString(selector))
      selector = new Selector(selector);
    return selector.match($(element));
  },

  up: function(element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return $(element.parentNode);
    var ancestors = element.ancestors();
    return Object.isNumber(expression) ? ancestors[expression] :
      Selector.findElement(ancestors, expression, index);
  },

  down: function(element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return element.firstDescendant();
    return Object.isNumber(expression) ? element.descendants()[expression] :
      Element.select(element, expression)[index || 0];
  },

  previous: function(element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return $(Selector.handlers.previousElementSibling(element));
    var previousSiblings = element.previousSiblings();
    return Object.isNumber(expression) ? previousSiblings[expression] :
      Selector.findElement(previousSiblings, expression, index);
  },

  next: function(element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return $(Selector.handlers.nextElementSibling(element));
    var nextSiblings = element.nextSiblings();
    return Object.isNumber(expression) ? nextSiblings[expression] :
      Selector.findElement(nextSiblings, expression, index);
  },

  select: function() {
    var args = $A(arguments), element = $(args.shift());
    return Selector.findChildElements(element, args);
  },

  adjacent: function() {
    var args = $A(arguments), element = $(args.shift());
    return Selector.findChildElements(element.parentNode, args).without(element);
  },

  identify: function(element) {
    element = $(element);
    var id = element.readAttribute('id'), self = arguments.callee;
    if (id) return id;
    do { id = 'anonymous_element_' + self.counter++ } while ($(id));
    element.writeAttribute('id', id);
    return id;
  },

  readAttribute: function(element, name) {
    element = $(element);
    if (Prototype.Browser.IE) {
      var t = Element._attributeTranslations.read;
      if (t.values[name]) return t.values[name](element, name);
      if (t.names[name]) name = t.names[name];
      if (name.include(':')) {
        return (!element.attributes || !element.attributes[name]) ? null :
         element.attributes[name].value;
      }
    }
    return element.getAttribute(name);
  },

  writeAttribute: function(element, name, value) {
    element = $(element);
    var attributes = { }, t = Element._attributeTranslations.write;

    if (typeof name == 'object') attributes = name;
    else attributes[name] = Object.isUndefined(value) ? true : value;

    for (var attr in attributes) {
      name = t.names[attr] || attr;
      value = attributes[attr];
      if (t.values[attr]) name = t.values[attr](element, value);
      if (value === false || value === null)
        element.removeAttribute(name);
      else if (value === true)
        element.setAttribute(name, name);
      else element.setAttribute(name, value);
    }
    return element;
  },

  getHeight: function(element) {
    return $(element).getDimensions().height;
  },

  getWidth: function(element) {
    return $(element).getDimensions().width;
  },

  classNames: function(element) {
    return new Element.ClassNames(element);
  },

  hasClassName: function(element, className) {
    if (!(element = $(element))) return;
    var elementClassName = element.className;
    return (elementClassName.length > 0 && (elementClassName == className ||
      new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName)));
  },

  addClassName: function(element, className) {
    if (!(element = $(element))) return;
    if (!element.hasClassName(className))
      element.className += (element.className ? ' ' : '') + className;
    return element;
  },

  removeClassName: function(element, className) {
    if (!(element = $(element))) return;
    element.className = element.className.replace(
      new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
    return element;
  },

  toggleClassName: function(element, className) {
    if (!(element = $(element))) return;
    return element[element.hasClassName(className) ?
      'removeClassName' : 'addClassName'](className);
  },

  // removes whitespace-only text node children
  cleanWhitespace: function(element) {
    element = $(element);
    var node = element.firstChild;
    while (node) {
      var nextNode = node.nextSibling;
      if (node.nodeType == 3 && !/\S/.test(node.nodeValue))
        element.removeChild(node);
      node = nextNode;
    }
    return element;
  },

  empty: function(element) {
    return $(element).innerHTML.blank();
  },

  descendantOf: function(element, ancestor) {
    element = $(element), ancestor = $(ancestor);

    if (element.compareDocumentPosition)
      return (element.compareDocumentPosition(ancestor) & 8) === 8;

    if (ancestor.contains)
      return ancestor.contains(element) && ancestor !== element;

    while (element = element.parentNode)
      if (element == ancestor) return true;

    return false;
  },

  scrollTo: function(element) {
    element = $(element);
    var pos = element.cumulativeOffset();
    window.scrollTo(pos[0], pos[1]);
    return element;
  },

  getStyle: function(element, style) {
    element = $(element);
    style = style == 'float' ? 'cssFloat' : style.camelize();
    var value = element.style[style];
    if (!value || value == 'auto') {
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    if (style == 'opacity') return value ? parseFloat(value) : 1.0;
    return value == 'auto' ? null : value;
  },

  getOpacity: function(element) {
    return $(element).getStyle('opacity');
  },

  setStyle: function(element, styles) {
    element = $(element);
    var elementStyle = element.style, match;
    if (Object.isString(styles)) {
      element.style.cssText += ';' + styles;
      return styles.include('opacity') ?
        element.setOpacity(styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
    }
    for (var property in styles)
      if (property == 'opacity') element.setOpacity(styles[property]);
      else
        elementStyle[(property == 'float' || property == 'cssFloat') ?
          (Object.isUndefined(elementStyle.styleFloat) ? 'cssFloat' : 'styleFloat') :
            property] = styles[property];

    return element;
  },

  setOpacity: function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1 || value === '') ? '' :
      (value < 0.00001) ? 0 : value;
    return element;
  },

  getDimensions: function(element) {
    element = $(element);
    var display = element.getStyle('display');
    if (display != 'none' && display != null) // Safari bug
      return {width: element.offsetWidth, height: element.offsetHeight};

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    var els = element.style;
    var originalVisibility = els.visibility;
    var originalPosition = els.position;
    var originalDisplay = els.display;
    els.visibility = 'hidden';
    els.position = 'absolute';
    els.display = 'block';
    var originalWidth = element.clientWidth;
    var originalHeight = element.clientHeight;
    els.display = originalDisplay;
    els.position = originalPosition;
    els.visibility = originalVisibility;
    return {width: originalWidth, height: originalHeight};
  },

  makePositioned: function(element) {
    element = $(element);
    var pos = Element.getStyle(element, 'position');
    if (pos == 'static' || !pos) {
      element._madePositioned = true;
      element.style.position = 'relative';
      // Opera returns the offset relative to the positioning context, when an
      // element is position relative but top and left have not been defined
      if (Prototype.Browser.Opera) {
        element.style.top = 0;
        element.style.left = 0;
      }
    }
    return element;
  },

  undoPositioned: function(element) {
    element = $(element);
    if (element._madePositioned) {
      element._madePositioned = undefined;
      element.style.position =
        element.style.top =
        element.style.left =
        element.style.bottom =
        element.style.right = '';
    }
    return element;
  },

  makeClipping: function(element) {
    element = $(element);
    if (element._overflow) return element;
    element._overflow = Element.getStyle(element, 'overflow') || 'auto';
    if (element._overflow !== 'hidden')
      element.style.overflow = 'hidden';
    return element;
  },

  undoClipping: function(element) {
    element = $(element);
    if (!element._overflow) return element;
    element.style.overflow = element._overflow == 'auto' ? '' : element._overflow;
    element._overflow = null;
    return element;
  },

  cumulativeOffset: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
    } while (element);
    return Element._returnOffset(valueL, valueT);
  },

  positionedOffset: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        if (element.tagName.toUpperCase() == 'BODY') break;
        var p = Element.getStyle(element, 'position');
        if (p !== 'static') break;
      }
    } while (element);
    return Element._returnOffset(valueL, valueT);
  },

  absolutize: function(element) {
    element = $(element);
    if (element.getStyle('position') == 'absolute') return element;
    // Position.prepare(); // To be done manually by Scripty when it needs it.

    var offsets = element.positionedOffset();
    var top     = offsets[1];
    var left    = offsets[0];
    var width   = element.clientWidth;
    var height  = element.clientHeight;

    element._originalLeft   = left - parseFloat(element.style.left  || 0);
    element._originalTop    = top  - parseFloat(element.style.top || 0);
    element._originalWidth  = element.style.width;
    element._originalHeight = element.style.height;

    element.style.position = 'absolute';
    element.style.top    = top + 'px';
    element.style.left   = left + 'px';
    element.style.width  = width + 'px';
    element.style.height = height + 'px';
    return element;
  },

  relativize: function(element) {
    element = $(element);
    if (element.getStyle('position') == 'relative') return element;
    // Position.prepare(); // To be done manually by Scripty when it needs it.

    element.style.position = 'relative';
    var top  = parseFloat(element.style.top  || 0) - (element._originalTop || 0);
    var left = parseFloat(element.style.left || 0) - (element._originalLeft || 0);

    element.style.top    = top + 'px';
    element.style.left   = left + 'px';
    element.style.height = element._originalHeight;
    element.style.width  = element._originalWidth;
    return element;
  },

  cumulativeScrollOffset: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.scrollTop  || 0;
      valueL += element.scrollLeft || 0;
      element = element.parentNode;
    } while (element);
    return Element._returnOffset(valueL, valueT);
  },

  getOffsetParent: function(element) {
    if (element.offsetParent) return $(element.offsetParent);
    if (element == document.body) return $(element);

    while ((element = element.parentNode) && element != document.body)
      if (Element.getStyle(element, 'position') != 'static')
        return $(element);

    return $(document.body);
  },

  viewportOffset: function(forElement) {
    var valueT = 0, valueL = 0;

    var element = forElement;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;

      // Safari fix
      if (element.offsetParent == document.body &&
        Element.getStyle(element, 'position') == 'absolute') break;

    } while (element = element.offsetParent);

    element = forElement;
    do {
      if (!Prototype.Browser.Opera || (element.tagName && (element.tagName.toUpperCase() == 'BODY'))) {
        valueT -= element.scrollTop  || 0;
        valueL -= element.scrollLeft || 0;
      }
    } while (element = element.parentNode);

    return Element._returnOffset(valueL, valueT);
  },

  clonePosition: function(element, source) {
    var options = Object.extend({
      setLeft:    true,
      setTop:     true,
      setWidth:   true,
      setHeight:  true,
      offsetTop:  0,
      offsetLeft: 0
    }, arguments[2] || { });

    // find page position of source
    source = $(source);
    var p = source.viewportOffset();

    // find coordinate system to use
    element = $(element);
    var delta = [0, 0];
    var parent = null;
    // delta [0,0] will do fine with position: fixed elements,
    // position:absolute needs offsetParent deltas
    if (Element.getStyle(element, 'position') == 'absolute') {
      parent = element.getOffsetParent();
      delta = parent.viewportOffset();
    }

    // correct by body offsets (fixes Safari)
    if (parent == document.body) {
      delta[0] -= document.body.offsetLeft;
      delta[1] -= document.body.offsetTop;
    }

    // set position
    if (options.setLeft)   element.style.left  = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if (options.setTop)    element.style.top   = (p[1] - delta[1] + options.offsetTop) + 'px';
    if (options.setWidth)  element.style.width = source.offsetWidth + 'px';
    if (options.setHeight) element.style.height = source.offsetHeight + 'px';
    return element;
  }
};

Element.Methods.identify.counter = 1;

Object.extend(Element.Methods, {
  getElementsBySelector: Element.Methods.select,
  childElements: Element.Methods.immediateDescendants
});

Element._attributeTranslations = {
  write: {
    names: {
      className: 'class',
      htmlFor:   'for'
    },
    values: { }
  }
};

if (Prototype.Browser.Opera) {
  Element.Methods.getStyle = Element.Methods.getStyle.wrap(
    function(proceed, element, style) {
      switch (style) {
        case 'left': case 'top': case 'right': case 'bottom':
          if (proceed(element, 'position') === 'static') return null;
        case 'height': case 'width':
          // returns '0px' for hidden elements; we want it to return null
          if (!Element.visible(element)) return null;

          // returns the border-box dimensions rather than the content-box
          // dimensions, so we subtract padding and borders from the value
          var dim = parseInt(proceed(element, style), 10);

          if (dim !== element['offset' + style.capitalize()])
            return dim + 'px';

          var properties;
          if (style === 'height') {
            properties = ['border-top-width', 'padding-top',
             'padding-bottom', 'border-bottom-width'];
          }
          else {
            properties = ['border-left-width', 'padding-left',
             'padding-right', 'border-right-width'];
          }
          return properties.inject(dim, function(memo, property) {
            var val = proceed(element, property);
            return val === null ? memo : memo - parseInt(val, 10);
          }) + 'px';
        default: return proceed(element, style);
      }
    }
  );

  Element.Methods.readAttribute = Element.Methods.readAttribute.wrap(
    function(proceed, element, attribute) {
      if (attribute === 'title') return element.title;
      return proceed(element, attribute);
    }
  );
}

else if (Prototype.Browser.IE) {
  // IE doesn't report offsets correctly for static elements, so we change them
  // to "relative" to get the values, then change them back.
  Element.Methods.getOffsetParent = Element.Methods.getOffsetParent.wrap(
    function(proceed, element) {
      element = $(element);
      // IE throws an error if element is not in document
      try { element.offsetParent }
      catch(e) { return $(document.body) }
      var position = element.getStyle('position');
      if (position !== 'static') return proceed(element);
      element.setStyle({ position: 'relative' });
      var value = proceed(element);
      element.setStyle({ position: position });
      return value;
    }
  );

  $w('positionedOffset viewportOffset').each(function(method) {
    Element.Methods[method] = Element.Methods[method].wrap(
      function(proceed, element) {
        element = $(element);
        try { element.offsetParent }
        catch(e) { return Element._returnOffset(0,0) }
        var position = element.getStyle('position');
        if (position !== 'static') return proceed(element);
        // Trigger hasLayout on the offset parent so that IE6 reports
        // accurate offsetTop and offsetLeft values for position: fixed.
        var offsetParent = element.getOffsetParent();
        if (offsetParent && offsetParent.getStyle('position') === 'fixed')
          offsetParent.setStyle({ zoom: 1 });
        element.setStyle({ position: 'relative' });
        var value = proceed(element);
        element.setStyle({ position: position });
        return value;
      }
    );
  });

  Element.Methods.cumulativeOffset = Element.Methods.cumulativeOffset.wrap(
    function(proceed, element) {
      try { element.offsetParent }
      catch(e) { return Element._returnOffset(0,0) }
      return proceed(element);
    }
  );

  Element.Methods.getStyle = function(element, style) {
    element = $(element);
    style = (style == 'float' || style == 'cssFloat') ? 'styleFloat' : style.camelize();
    var value = element.style[style];
    if (!value && element.currentStyle) value = element.currentStyle[style];

    if (style == 'opacity') {
      if (value = (element.getStyle('filter') || '').match(/alpha\(opacity=(.*)\)/))
        if (value[1]) return parseFloat(value[1]) / 100;
      return 1.0;
    }

    if (value == 'auto') {
      if ((style == 'width' || style == 'height') && (element.getStyle('display') != 'none'))
        return element['offset' + style.capitalize()] + 'px';
      return null;
    }
    return value;
  };

  Element.Methods.setOpacity = function(element, value) {
    function stripAlpha(filter){
      return filter.replace(/alpha\([^\)]*\)/gi,'');
    }
    element = $(element);
    var currentStyle = element.currentStyle;
    if ((currentStyle && !currentStyle.hasLayout) ||
      (!currentStyle && element.style.zoom == 'normal'))
        element.style.zoom = 1;

    var filter = element.getStyle('filter'), style = element.style;
    if (value == 1 || value === '') {
      (filter = stripAlpha(filter)) ?
        style.filter = filter : style.removeAttribute('filter');
      return element;
    } else if (value < 0.00001) value = 0;
    style.filter = stripAlpha(filter) +
      'alpha(opacity=' + (value * 100) + ')';
    return element;
  };

  Element._attributeTranslations = {
    read: {
      names: {
        'class': 'className',
        'for':   'htmlFor'
      },
      values: {
        _getAttr: function(element, attribute) {
          return element.getAttribute(attribute, 2);
        },
        _getAttrNode: function(element, attribute) {
          var node = element.getAttributeNode(attribute);
          return node ? node.value : "";
        },
        _getEv: function(element, attribute) {
          attribute = element.getAttribute(attribute);
          return attribute ? attribute.toString().slice(23, -2) : null;
        },
        _flag: function(element, attribute) {
          return $(element).hasAttribute(attribute) ? attribute : null;
        },
        style: function(element) {
          return element.style.cssText.toLowerCase();
        },
        title: function(element) {
          return element.title;
        }
      }
    }
  };

  Element._attributeTranslations.write = {
    names: Object.extend({
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing'
    }, Element._attributeTranslations.read.names),
    values: {
      checked: function(element, value) {
        element.checked = !!value;
      },

      style: function(element, value) {
        element.style.cssText = value ? value : '';
      }
    }
  };

  Element._attributeTranslations.has = {};

  $w('colSpan rowSpan vAlign dateTime accessKey tabIndex ' +
      'encType maxLength readOnly longDesc frameBorder').each(function(attr) {
    Element._attributeTranslations.write.names[attr.toLowerCase()] = attr;
    Element._attributeTranslations.has[attr.toLowerCase()] = attr;
  });

  (function(v) {
    Object.extend(v, {
      href:        v._getAttr,
      src:         v._getAttr,
      type:        v._getAttr,
      action:      v._getAttrNode,
      disabled:    v._flag,
      checked:     v._flag,
      readonly:    v._flag,
      multiple:    v._flag,
      onload:      v._getEv,
      onunload:    v._getEv,
      onclick:     v._getEv,
      ondblclick:  v._getEv,
      onmousedown: v._getEv,
      onmouseup:   v._getEv,
      onmouseover: v._getEv,
      onmousemove: v._getEv,
      onmouseout:  v._getEv,
      onfocus:     v._getEv,
      onblur:      v._getEv,
      onkeypress:  v._getEv,
      onkeydown:   v._getEv,
      onkeyup:     v._getEv,
      onsubmit:    v._getEv,
      onreset:     v._getEv,
      onselect:    v._getEv,
      onchange:    v._getEv
    });
  })(Element._attributeTranslations.read.values);
}

else if (Prototype.Browser.Gecko && /rv:1\.8\.0/.test(navigator.userAgent)) {
  Element.Methods.setOpacity = function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1) ? 0.999999 :
      (value === '') ? '' : (value < 0.00001) ? 0 : value;
    return element;
  };
}

else if (Prototype.Browser.WebKit) {
  Element.Methods.setOpacity = function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1 || value === '') ? '' :
      (value < 0.00001) ? 0 : value;

    if (value == 1)
      if(element.tagName.toUpperCase() == 'IMG' && element.width) {
        element.width++; element.width--;
      } else try {
        var n = document.createTextNode(' ');
        element.appendChild(n);
        element.removeChild(n);
      } catch (e) { }

    return element;
  };

  // Safari returns margins on body which is incorrect if the child is absolutely
  // positioned.  For performance reasons, redefine Element#cumulativeOffset for
  // KHTML/WebKit only.
  Element.Methods.cumulativeOffset = function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      if (element.offsetParent == document.body)
        if (Element.getStyle(element, 'position') == 'absolute') break;

      element = element.offsetParent;
    } while (element);

    return Element._returnOffset(valueL, valueT);
  };
}

if (Prototype.Browser.IE || Prototype.Browser.Opera) {
  // IE and Opera are missing .innerHTML support for TABLE-related and SELECT elements
  Element.Methods.update = function(element, content) {
    element = $(element);

    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) return element.update().insert(content);

    content = Object.toHTML(content);
    var tagName = element.tagName.toUpperCase();

    if (tagName in Element._insertionTranslations.tags) {
      $A(element.childNodes).each(function(node) { element.removeChild(node) });
      Element._getContentFromAnonymousElement(tagName, content.stripScripts())
        .each(function(node) { element.appendChild(node) });
    }
    else element.innerHTML = content.stripScripts();

    content.evalScripts.bind(content).defer();
    return element;
  };
}

if ('outerHTML' in document.createElement('div')) {
  Element.Methods.replace = function(element, content) {
    element = $(element);

    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) {
      element.parentNode.replaceChild(content, element);
      return element;
    }

    content = Object.toHTML(content);
    var parent = element.parentNode, tagName = parent.tagName.toUpperCase();

    if (Element._insertionTranslations.tags[tagName]) {
      var nextSibling = element.next();
      var fragments = Element._getContentFromAnonymousElement(tagName, content.stripScripts());
      parent.removeChild(element);
      if (nextSibling)
        fragments.each(function(node) { parent.insertBefore(node, nextSibling) });
      else
        fragments.each(function(node) { parent.appendChild(node) });
    }
    else element.outerHTML = content.stripScripts();

    content.evalScripts.bind(content).defer();
    return element;
  };
}

Element._returnOffset = function(l, t) {
  var result = [l, t];
  result.left = l;
  result.top = t;
  return result;
};

Element._getContentFromAnonymousElement = function(tagName, html) {
  var div = new Element('div'), t = Element._insertionTranslations.tags[tagName];
  if (t) {
    div.innerHTML = t[0] + html + t[1];
    t[2].times(function() { div = div.firstChild });
  } else div.innerHTML = html;
  return $A(div.childNodes);
};

Element._insertionTranslations = {
  before: function(element, node) {
    element.parentNode.insertBefore(node, element);
  },
  top: function(element, node) {
    element.insertBefore(node, element.firstChild);
  },
  bottom: function(element, node) {
    element.appendChild(node);
  },
  after: function(element, node) {
    element.parentNode.insertBefore(node, element.nextSibling);
  },
  tags: {
    TABLE:  ['<table>',                '</table>',                   1],
    TBODY:  ['<table><tbody>',         '</tbody></table>',           2],
    TR:     ['<table><tbody><tr>',     '</tr></tbody></table>',      3],
    TD:     ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],
    SELECT: ['<select>',               '</select>',                  1]
  }
};

(function() {
  Object.extend(this.tags, {
    THEAD: this.tags.TBODY,
    TFOOT: this.tags.TBODY,
    TH:    this.tags.TD
  });
}).call(Element._insertionTranslations);

Element.Methods.Simulated = {
  hasAttribute: function(element, attribute) {
    attribute = Element._attributeTranslations.has[attribute] || attribute;
    var node = $(element).getAttributeNode(attribute);
    return !!(node && node.specified);
  }
};

Element.Methods.ByTag = { };

Object.extend(Element, Element.Methods);

if (!Prototype.BrowserFeatures.ElementExtensions &&
    document.createElement('div')['__proto__']) {
  window.HTMLElement = { };
  window.HTMLElement.prototype = document.createElement('div')['__proto__'];
  Prototype.BrowserFeatures.ElementExtensions = true;
}

Element.extend = (function() {
  if (Prototype.BrowserFeatures.SpecificElementExtensions)
    return Prototype.K;

  var Methods = { }, ByTag = Element.Methods.ByTag;

  var extend = Object.extend(function(element) {
    if (!element || element._extendedByPrototype ||
        element.nodeType != 1 || element == window) return element;

    var methods = Object.clone(Methods),
      tagName = element.tagName.toUpperCase(), property, value;

    // extend methods for specific tags
    if (ByTag[tagName]) Object.extend(methods, ByTag[tagName]);

    for (property in methods) {
      value = methods[property];
      if (Object.isFunction(value) && !(property in element))
        element[property] = value.methodize();
    }

    element._extendedByPrototype = Prototype.emptyFunction;
    return element;

  }, {
    refresh: function() {
      // extend methods for all tags (Safari doesn't need this)
      if (!Prototype.BrowserFeatures.ElementExtensions) {
        Object.extend(Methods, Element.Methods);
        Object.extend(Methods, Element.Methods.Simulated);
      }
    }
  });

  extend.refresh();
  return extend;
})();

Element.hasAttribute = function(element, attribute) {
  if (element.hasAttribute) return element.hasAttribute(attribute);
  return Element.Methods.Simulated.hasAttribute(element, attribute);
};

Element.addMethods = function(methods) {
  var F = Prototype.BrowserFeatures, T = Element.Methods.ByTag;

  if (!methods) {
    Object.extend(Form, Form.Methods);
    Object.extend(Form.Element, Form.Element.Methods);
    Object.extend(Element.Methods.ByTag, {
      "FORM":     Object.clone(Form.Methods),
      "INPUT":    Object.clone(Form.Element.Methods),
      "SELECT":   Object.clone(Form.Element.Methods),
      "TEXTAREA": Object.clone(Form.Element.Methods)
    });
  }

  if (arguments.length == 2) {
    var tagName = methods;
    methods = arguments[1];
  }

  if (!tagName) Object.extend(Element.Methods, methods || { });
  else {
    if (Object.isArray(tagName)) tagName.each(extend);
    else extend(tagName);
  }

  function extend(tagName) {
    tagName = tagName.toUpperCase();
    if (!Element.Methods.ByTag[tagName])
      Element.Methods.ByTag[tagName] = { };
    Object.extend(Element.Methods.ByTag[tagName], methods);
  }

  function copy(methods, destination, onlyIfAbsent) {
    onlyIfAbsent = onlyIfAbsent || false;
    for (var property in methods) {
      var value = methods[property];
      if (!Object.isFunction(value)) continue;
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = value.methodize();
    }
  }

  function findDOMClass(tagName) {
    var klass;
    var trans = {
      "OPTGROUP": "OptGroup", "TEXTAREA": "TextArea", "P": "Paragraph",
      "FIELDSET": "FieldSet", "UL": "UList", "OL": "OList", "DL": "DList",
      "DIR": "Directory", "H1": "Heading", "H2": "Heading", "H3": "Heading",
      "H4": "Heading", "H5": "Heading", "H6": "Heading", "Q": "Quote",
      "INS": "Mod", "DEL": "Mod", "A": "Anchor", "IMG": "Image", "CAPTION":
      "TableCaption", "COL": "TableCol", "COLGROUP": "TableCol", "THEAD":
      "TableSection", "TFOOT": "TableSection", "TBODY": "TableSection", "TR":
      "TableRow", "TH": "TableCell", "TD": "TableCell", "FRAMESET":
      "FrameSet", "IFRAME": "IFrame"
    };
    if (trans[tagName]) klass = 'HTML' + trans[tagName] + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName.capitalize() + 'Element';
    if (window[klass]) return window[klass];

    window[klass] = { };
    window[klass].prototype = document.createElement(tagName)['__proto__'];
    return window[klass];
  }

  if (F.ElementExtensions) {
    copy(Element.Methods, HTMLElement.prototype);
    copy(Element.Methods.Simulated, HTMLElement.prototype, true);
  }

  if (F.SpecificElementExtensions) {
    for (var tag in Element.Methods.ByTag) {
      var klass = findDOMClass(tag);
      if (Object.isUndefined(klass)) continue;
      copy(T[tag], klass.prototype);
    }
  }

  Object.extend(Element, Element.Methods);
  delete Element.ByTag;

  if (Element.extend.refresh) Element.extend.refresh();
  Element.cache = { };
};

document.viewport = {
  getDimensions: function() {
    var dimensions = { }, B = Prototype.Browser;
    $w('width height').each(function(d) {
      var D = d.capitalize();
      if (B.WebKit && !document.evaluate) {
        // Safari <3.0 needs self.innerWidth/Height
        dimensions[d] = self['inner' + D];
      } else if (B.Opera && parseFloat(window.opera.version()) < 9.5) {
        // Opera <9.5 needs document.body.clientWidth/Height
        dimensions[d] = document.body['client' + D]
      } else {
        dimensions[d] = document.documentElement['client' + D];
      }
    });
    return dimensions;
  },

  getWidth: function() {
    return this.getDimensions().width;
  },

  getHeight: function() {
    return this.getDimensions().height;
  },

  getScrollOffsets: function() {
    return Element._returnOffset(
      window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft,
      window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop);
  }
};
/* Portions of the Selector class are derived from Jack Slocum's DomQuery,
 * part of YUI-Ext version 0.40, distributed under the terms of an MIT-style
 * license.  Please see http://www.yui-ext.com/ for more information. */

var Selector = Class.create({
  initialize: function(expression) {
    this.expression = expression.strip();

    if (this.shouldUseSelectorsAPI()) {
      this.mode = 'selectorsAPI';
    } else if (this.shouldUseXPath()) {
      this.mode = 'xpath';
      this.compileXPathMatcher();
    } else {
      this.mode = "normal";
      this.compileMatcher();
    }

  },

  shouldUseXPath: function() {
    if (!Prototype.BrowserFeatures.XPath) return false;

    var e = this.expression;

    // Safari 3 chokes on :*-of-type and :empty
    if (Prototype.Browser.WebKit &&
     (e.include("-of-type") || e.include(":empty")))
      return false;

    // XPath can't do namespaced attributes, nor can it read
    // the "checked" property from DOM nodes
    if ((/(\[[\w-]*?:|:checked)/).test(e))
      return false;

    return true;
  },

  shouldUseSelectorsAPI: function() {
    if (!Prototype.BrowserFeatures.SelectorsAPI) return false;

    if (!Selector._div) Selector._div = new Element('div');

    // Make sure the browser treats the selector as valid. Test on an
    // isolated element to minimize cost of this check.
    try {
      Selector._div.querySelector(this.expression);
    } catch(e) {
      return false;
    }

    return true;
  },

  compileMatcher: function() {
    var e = this.expression, ps = Selector.patterns, h = Selector.handlers,
        c = Selector.criteria, le, p, m;

    if (Selector._cache[e]) {
      this.matcher = Selector._cache[e];
      return;
    }

    this.matcher = ["this.matcher = function(root) {",
                    "var r = root, h = Selector.handlers, c = false, n;"];

    while (e && le != e && (/\S/).test(e)) {
      le = e;
      for (var i in ps) {
        p = ps[i];
        if (m = e.match(p)) {
          this.matcher.push(Object.isFunction(c[i]) ? c[i](m) :
            new Template(c[i]).evaluate(m));
          e = e.replace(m[0], '');
          break;
        }
      }
    }

    this.matcher.push("return h.unique(n);\n}");
    eval(this.matcher.join('\n'));
    Selector._cache[this.expression] = this.matcher;
  },

  compileXPathMatcher: function() {
    var e = this.expression, ps = Selector.patterns,
        x = Selector.xpath, le, m;

    if (Selector._cache[e]) {
      this.xpath = Selector._cache[e]; return;
    }

    this.matcher = ['.//*'];
    while (e && le != e && (/\S/).test(e)) {
      le = e;
      for (var i in ps) {
        if (m = e.match(ps[i])) {
          this.matcher.push(Object.isFunction(x[i]) ? x[i](m) :
            new Template(x[i]).evaluate(m));
          e = e.replace(m[0], '');
          break;
        }
      }
    }

    this.xpath = this.matcher.join('');
    Selector._cache[this.expression] = this.xpath;
  },

  findElements: function(root) {
    root = root || document;
    var e = this.expression, results;

    switch (this.mode) {
      case 'selectorsAPI':
        // querySelectorAll queries document-wide, then filters to descendants
        // of the context element. That's not what we want.
        // Add an explicit context to the selector if necessary.
        if (root !== document) {
          var oldId = root.id, id = $(root).identify();
          e = "#" + id + " " + e;
        }

        results = $A(root.querySelectorAll(e)).map(Element.extend);
        root.id = oldId;

        return results;
      case 'xpath':
        return document._getElementsByXPath(this.xpath, root);
      default:
       return this.matcher(root);
    }
  },

  match: function(element) {
    this.tokens = [];

    var e = this.expression, ps = Selector.patterns, as = Selector.assertions;
    var le, p, m;

    while (e && le !== e && (/\S/).test(e)) {
      le = e;
      for (var i in ps) {
        p = ps[i];
        if (m = e.match(p)) {
          // use the Selector.assertions methods unless the selector
          // is too complex.
          if (as[i]) {
            this.tokens.push([i, Object.clone(m)]);
            e = e.replace(m[0], '');
          } else {
            // reluctantly do a document-wide search
            // and look for a match in the array
            return this.findElements(document).include(element);
          }
        }
      }
    }

    var match = true, name, matches;
    for (var i = 0, token; token = this.tokens[i]; i++) {
      name = token[0], matches = token[1];
      if (!Selector.assertions[name](element, matches)) {
        match = false; break;
      }
    }

    return match;
  },

  toString: function() {
    return this.expression;
  },

  inspect: function() {
    return "#<Selector:" + this.expression.inspect() + ">";
  }
});

Object.extend(Selector, {
  _cache: { },

  xpath: {
    descendant:   "//*",
    child:        "/*",
    adjacent:     "/following-sibling::*[1]",
    laterSibling: '/following-sibling::*',
    tagName:      function(m) {
      if (m[1] == '*') return '';
      return "[local-name()='" + m[1].toLowerCase() +
             "' or local-name()='" + m[1].toUpperCase() + "']";
    },
    className:    "[contains(concat(' ', @class, ' '), ' #{1} ')]",
    id:           "[@id='#{1}']",
    attrPresence: function(m) {
      m[1] = m[1].toLowerCase();
      return new Template("[@#{1}]").evaluate(m);
    },
    attr: function(m) {
      m[1] = m[1].toLowerCase();
      m[3] = m[5] || m[6];
      return new Template(Selector.xpath.operators[m[2]]).evaluate(m);
    },
    pseudo: function(m) {
      var h = Selector.xpath.pseudos[m[1]];
      if (!h) return '';
      if (Object.isFunction(h)) return h(m);
      return new Template(Selector.xpath.pseudos[m[1]]).evaluate(m);
    },
    operators: {
      '=':  "[@#{1}='#{3}']",
      '!=': "[@#{1}!='#{3}']",
      '^=': "[starts-with(@#{1}, '#{3}')]",
      '$=': "[substring(@#{1}, (string-length(@#{1}) - string-length('#{3}') + 1))='#{3}']",
      '*=': "[contains(@#{1}, '#{3}')]",
      '~=': "[contains(concat(' ', @#{1}, ' '), ' #{3} ')]",
      '|=': "[contains(concat('-', @#{1}, '-'), '-#{3}-')]"
    },
    pseudos: {
      'first-child': '[not(preceding-sibling::*)]',
      'last-child':  '[not(following-sibling::*)]',
      'only-child':  '[not(preceding-sibling::* or following-sibling::*)]',
      'empty':       "[count(*) = 0 and (count(text()) = 0)]",
      'checked':     "[@checked]",
      'disabled':    "[(@disabled) and (@type!='hidden')]",
      'enabled':     "[not(@disabled) and (@type!='hidden')]",
      'not': function(m) {
        var e = m[6], p = Selector.patterns,
            x = Selector.xpath, le, v;

        var exclusion = [];
        while (e && le != e && (/\S/).test(e)) {
          le = e;
          for (var i in p) {
            if (m = e.match(p[i])) {
              v = Object.isFunction(x[i]) ? x[i](m) : new Template(x[i]).evaluate(m);
              exclusion.push("(" + v.substring(1, v.length - 1) + ")");
              e = e.replace(m[0], '');
              break;
            }
          }
        }
        return "[not(" + exclusion.join(" and ") + ")]";
      },
      'nth-child':      function(m) {
        return Selector.xpath.pseudos.nth("(count(./preceding-sibling::*) + 1) ", m);
      },
      'nth-last-child': function(m) {
        return Selector.xpath.pseudos.nth("(count(./following-sibling::*) + 1) ", m);
      },
      'nth-of-type':    function(m) {
        return Selector.xpath.pseudos.nth("position() ", m);
      },
      'nth-last-of-type': function(m) {
        return Selector.xpath.pseudos.nth("(last() + 1 - position()) ", m);
      },
      'first-of-type':  function(m) {
        m[6] = "1"; return Selector.xpath.pseudos['nth-of-type'](m);
      },
      'last-of-type':   function(m) {
        m[6] = "1"; return Selector.xpath.pseudos['nth-last-of-type'](m);
      },
      'only-of-type':   function(m) {
        var p = Selector.xpath.pseudos; return p['first-of-type'](m) + p['last-of-type'](m);
      },
      nth: function(fragment, m) {
        var mm, formula = m[6], predicate;
        if (formula == 'even') formula = '2n+0';
        if (formula == 'odd')  formula = '2n+1';
        if (mm = formula.match(/^(\d+)$/)) // digit only
          return '[' + fragment + "= " + mm[1] + ']';
        if (mm = formula.match(/^(-?\d*)?n(([+-])(\d+))?/)) { // an+b
          if (mm[1] == "-") mm[1] = -1;
          var a = mm[1] ? Number(mm[1]) : 1;
          var b = mm[2] ? Number(mm[2]) : 0;
          predicate = "[((#{fragment} - #{b}) mod #{a} = 0) and " +
          "((#{fragment} - #{b}) div #{a} >= 0)]";
          return new Template(predicate).evaluate({
            fragment: fragment, a: a, b: b });
        }
      }
    }
  },

  criteria: {
    tagName:      'n = h.tagName(n, r, "#{1}", c);      c = false;',
    className:    'n = h.className(n, r, "#{1}", c);    c = false;',
    id:           'n = h.id(n, r, "#{1}", c);           c = false;',
    attrPresence: 'n = h.attrPresence(n, r, "#{1}", c); c = false;',
    attr: function(m) {
      m[3] = (m[5] || m[6]);
      return new Template('n = h.attr(n, r, "#{1}", "#{3}", "#{2}", c); c = false;').evaluate(m);
    },
    pseudo: function(m) {
      if (m[6]) m[6] = m[6].replace(/"/g, '\\"');
      return new Template('n = h.pseudo(n, "#{1}", "#{6}", r, c); c = false;').evaluate(m);
    },
    descendant:   'c = "descendant";',
    child:        'c = "child";',
    adjacent:     'c = "adjacent";',
    laterSibling: 'c = "laterSibling";'
  },

  patterns: {
    // combinators must be listed first
    // (and descendant needs to be last combinator)
    laterSibling: /^\s*~\s*/,
    child:        /^\s*>\s*/,
    adjacent:     /^\s*\+\s*/,
    descendant:   /^\s/,

    // selectors follow
    tagName:      /^\s*(\*|[\w\-]+)(\b|$)?/,
    id:           /^#([\w\-\*]+)(\b|$)/,
    className:    /^\.([\w\-\*]+)(\b|$)/,
    pseudo:
/^:((first|last|nth|nth-last|only)(-child|-of-type)|empty|checked|(en|dis)abled|not)(\((.*?)\))?(\b|$|(?=\s|[:+~>]))/,
    attrPresence: /^\[((?:[\w]+:)?[\w]+)\]/,
    attr:         /\[((?:[\w-]*:)?[\w-]+)\s*(?:([!^$*~|]?=)\s*((['"])([^\4]*?)\4|([^'"][^\]]*?)))?\]/
  },

  // for Selector.match and Element#match
  assertions: {
    tagName: function(element, matches) {
      return matches[1].toUpperCase() == element.tagName.toUpperCase();
    },

    className: function(element, matches) {
      return Element.hasClassName(element, matches[1]);
    },

    id: function(element, matches) {
      return element.id === matches[1];
    },

    attrPresence: function(element, matches) {
      return Element.hasAttribute(element, matches[1]);
    },

    attr: function(element, matches) {
      var nodeValue = Element.readAttribute(element, matches[1]);
      return nodeValue && Selector.operators[matches[2]](nodeValue, matches[5] || matches[6]);
    }
  },

  handlers: {
    // UTILITY FUNCTIONS
    // joins two collections
    concat: function(a, b) {
      for (var i = 0, node; node = b[i]; i++)
        a.push(node);
      return a;
    },

    // marks an array of nodes for counting
    mark: function(nodes) {
      var _true = Prototype.emptyFunction;
      for (var i = 0, node; node = nodes[i]; i++)
        node._countedByPrototype = _true;
      return nodes;
    },

    unmark: function(nodes) {
      for (var i = 0, node; node = nodes[i]; i++)
        node._countedByPrototype = undefined;
      return nodes;
    },

    // mark each child node with its position (for nth calls)
    // "ofType" flag indicates whether we're indexing for nth-of-type
    // rather than nth-child
    index: function(parentNode, reverse, ofType) {
      parentNode._countedByPrototype = Prototype.emptyFunction;
      if (reverse) {
        for (var nodes = parentNode.childNodes, i = nodes.length - 1, j = 1; i >= 0; i--) {
          var node = nodes[i];
          if (node.nodeType == 1 && (!ofType || node._countedByPrototype)) node.nodeIndex = j++;
        }
      } else {
        for (var i = 0, j = 1, nodes = parentNode.childNodes; node = nodes[i]; i++)
          if (node.nodeType == 1 && (!ofType || node._countedByPrototype)) node.nodeIndex = j++;
      }
    },

    // filters out duplicates and extends all nodes
    unique: function(nodes) {
      if (nodes.length == 0) return nodes;
      var results = [], n;
      for (var i = 0, l = nodes.length; i < l; i++)
        if (!(n = nodes[i])._countedByPrototype) {
          n._countedByPrototype = Prototype.emptyFunction;
          results.push(Element.extend(n));
        }
      return Selector.handlers.unmark(results);
    },

    // COMBINATOR FUNCTIONS
    descendant: function(nodes) {
      var h = Selector.handlers;
      for (var i = 0, results = [], node; node = nodes[i]; i++)
        h.concat(results, node.getElementsByTagName('*'));
      return results;
    },

    child: function(nodes) {
      var h = Selector.handlers;
      for (var i = 0, results = [], node; node = nodes[i]; i++) {
        for (var j = 0, child; child = node.childNodes[j]; j++)
          if (child.nodeType == 1 && child.tagName != '!') results.push(child);
      }
      return results;
    },

    adjacent: function(nodes) {
      for (var i = 0, results = [], node; node = nodes[i]; i++) {
        var next = this.nextElementSibling(node);
        if (next) results.push(next);
      }
      return results;
    },

    laterSibling: function(nodes) {
      var h = Selector.handlers;
      for (var i = 0, results = [], node; node = nodes[i]; i++)
        h.concat(results, Element.nextSiblings(node));
      return results;
    },

    nextElementSibling: function(node) {
      while (node = node.nextSibling)
        if (node.nodeType == 1) return node;
      return null;
    },

    previousElementSibling: function(node) {
      while (node = node.previousSibling)
        if (node.nodeType == 1) return node;
      return null;
    },

    // TOKEN FUNCTIONS
    tagName: function(nodes, root, tagName, combinator) {
      var uTagName = tagName.toUpperCase();
      var results = [], h = Selector.handlers;
      if (nodes) {
        if (combinator) {
          // fastlane for ordinary descendant combinators
          if (combinator == "descendant") {
            for (var i = 0, node; node = nodes[i]; i++)
              h.concat(results, node.getElementsByTagName(tagName));
            return results;
          } else nodes = this[combinator](nodes);
          if (tagName == "*") return nodes;
        }
        for (var i = 0, node; node = nodes[i]; i++)
          if (node.tagName.toUpperCase() === uTagName) results.push(node);
        return results;
      } else return root.getElementsByTagName(tagName);
    },

    id: function(nodes, root, id, combinator) {
      var targetNode = $(id), h = Selector.handlers;
      if (!targetNode) return [];
      if (!nodes && root == document) return [targetNode];
      if (nodes) {
        if (combinator) {
          if (combinator == 'child') {
            for (var i = 0, node; node = nodes[i]; i++)
              if (targetNode.parentNode == node) return [targetNode];
          } else if (combinator == 'descendant') {
            for (var i = 0, node; node = nodes[i]; i++)
              if (Element.descendantOf(targetNode, node)) return [targetNode];
          } else if (combinator == 'adjacent') {
            for (var i = 0, node; node = nodes[i]; i++)
              if (Selector.handlers.previousElementSibling(targetNode) == node)
                return [targetNode];
          } else nodes = h[combinator](nodes);
        }
        for (var i = 0, node; node = nodes[i]; i++)
          if (node == targetNode) return [targetNode];
        return [];
      }
      return (targetNode && Element.descendantOf(targetNode, root)) ? [targetNode] : [];
    },

    className: function(nodes, root, className, combinator) {
      if (nodes && combinator) nodes = this[combinator](nodes);
      return Selector.handlers.byClassName(nodes, root, className);
    },

    byClassName: function(nodes, root, className) {
      if (!nodes) nodes = Selector.handlers.descendant([root]);
      var needle = ' ' + className + ' ';
      for (var i = 0, results = [], node, nodeClassName; node = nodes[i]; i++) {
        nodeClassName = node.className;
        if (nodeClassName.length == 0) continue;
        if (nodeClassName == className || (' ' + nodeClassName + ' ').include(needle))
          results.push(node);
      }
      return results;
    },

    attrPresence: function(nodes, root, attr, combinator) {
      if (!nodes) nodes = root.getElementsByTagName("*");
      if (nodes && combinator) nodes = this[combinator](nodes);
      var results = [];
      for (var i = 0, node; node = nodes[i]; i++)
        if (Element.hasAttribute(node, attr)) results.push(node);
      return results;
    },

    attr: function(nodes, root, attr, value, operator, combinator) {
      if (!nodes) nodes = root.getElementsByTagName("*");
      if (nodes && combinator) nodes = this[combinator](nodes);
      var handler = Selector.operators[operator], results = [];
      for (var i = 0, node; node = nodes[i]; i++) {
        var nodeValue = Element.readAttribute(node, attr);
        if (nodeValue === null) continue;
        if (handler(nodeValue, value)) results.push(node);
      }
      return results;
    },

    pseudo: function(nodes, name, value, root, combinator) {
      if (nodes && combinator) nodes = this[combinator](nodes);
      if (!nodes) nodes = root.getElementsByTagName("*");
      return Selector.pseudos[name](nodes, value, root);
    }
  },

  pseudos: {
    'first-child': function(nodes, value, root) {
      for (var i = 0, results = [], node; node = nodes[i]; i++) {
        if (Selector.handlers.previousElementSibling(node)) continue;
          results.push(node);
      }
      return results;
    },
    'last-child': function(nodes, value, root) {
      for (var i = 0, results = [], node; node = nodes[i]; i++) {
        if (Selector.handlers.nextElementSibling(node)) continue;
          results.push(node);
      }
      return results;
    },
    'only-child': function(nodes, value, root) {
      var h = Selector.handlers;
      for (var i = 0, results = [], node; node = nodes[i]; i++)
        if (!h.previousElementSibling(node) && !h.nextElementSibling(node))
          results.push(node);
      return results;
    },
    'nth-child':        function(nodes, formula, root) {
      return Selector.pseudos.nth(nodes, formula, root);
    },
    'nth-last-child':   function(nodes, formula, root) {
      return Selector.pseudos.nth(nodes, formula, root, true);
    },
    'nth-of-type':      function(nodes, formula, root) {
      return Selector.pseudos.nth(nodes, formula, root, false, true);
    },
    'nth-last-of-type': function(nodes, formula, root) {
      return Selector.pseudos.nth(nodes, formula, root, true, true);
    },
    'first-of-type':    function(nodes, formula, root) {
      return Selector.pseudos.nth(nodes, "1", root, false, true);
    },
    'last-of-type':     function(nodes, formula, root) {
      return Selector.pseudos.nth(nodes, "1", root, true, true);
    },
    'only-of-type':     function(nodes, formula, root) {
      var p = Selector.pseudos;
      return p['last-of-type'](p['first-of-type'](nodes, formula, root), formula, root);
    },

    // handles the an+b logic
    getIndices: function(a, b, total) {
      if (a == 0) return b > 0 ? [b] : [];
      return $R(1, total).inject([], function(memo, i) {
        if (0 == (i - b) % a && (i - b) / a >= 0) memo.push(i);
        return memo;
      });
    },

    // handles nth(-last)-child, nth(-last)-of-type, and (first|last)-of-type
    nth: function(nodes, formula, root, reverse, ofType) {
      if (nodes.length == 0) return [];
      if (formula == 'even') formula = '2n+0';
      if (formula == 'odd')  formula = '2n+1';
      var h = Selector.handlers, results = [], indexed = [], m;
      h.mark(nodes);
      for (var i = 0, node; node = nodes[i]; i++) {
        if (!node.parentNode._countedByPrototype) {
          h.index(node.parentNode, reverse, ofType);
          indexed.push(node.parentNode);
        }
      }
      if (formula.match(/^\d+$/)) { // just a number
        formula = Number(formula);
        for (var i = 0, node; node = nodes[i]; i++)
          if (node.nodeIndex == formula) results.push(node);
      } else if (m = formula.match(/^(-?\d*)?n(([+-])(\d+))?/)) { // an+b
        if (m[1] == "-") m[1] = -1;
        var a = m[1] ? Number(m[1]) : 1;
        var b = m[2] ? Number(m[2]) : 0;
        var indices = Selector.pseudos.getIndices(a, b, nodes.length);
        for (var i = 0, node, l = indices.length; node = nodes[i]; i++) {
          for (var j = 0; j < l; j++)
            if (node.nodeIndex == indices[j]) results.push(node);
        }
      }
      h.unmark(nodes);
      h.unmark(indexed);
      return results;
    },

    'empty': function(nodes, value, root) {
      for (var i = 0, results = [], node; node = nodes[i]; i++) {
        // IE treats comments as element nodes
        if (node.tagName == '!' || node.firstChild) continue;
        results.push(node);
      }
      return results;
    },

    'not': function(nodes, selector, root) {
      var h = Selector.handlers, selectorType, m;
      var exclusions = new Selector(selector).findElements(root);
      h.mark(exclusions);
      for (var i = 0, results = [], node; node = nodes[i]; i++)
        if (!node._countedByPrototype) results.push(node);
      h.unmark(exclusions);
      return results;
    },

    'enabled': function(nodes, value, root) {
      for (var i = 0, results = [], node; node = nodes[i]; i++)
        if (!node.disabled && (!node.type || node.type !== 'hidden'))
          results.push(node);
      return results;
    },

    'disabled': function(nodes, value, root) {
      for (var i = 0, results = [], node; node = nodes[i]; i++)
        if (node.disabled) results.push(node);
      return results;
    },

    'checked': function(nodes, value, root) {
      for (var i = 0, results = [], node; node = nodes[i]; i++)
        if (node.checked) results.push(node);
      return results;
    }
  },

  operators: {
    '=':  function(nv, v) { return nv == v; },
    '!=': function(nv, v) { return nv != v; },
    '^=': function(nv, v) { return nv == v || nv && nv.startsWith(v); },
    '$=': function(nv, v) { return nv == v || nv && nv.endsWith(v); },
    '*=': function(nv, v) { return nv == v || nv && nv.include(v); },
    '$=': function(nv, v) { return nv.endsWith(v); },
    '*=': function(nv, v) { return nv.include(v); },
    '~=': function(nv, v) { return (' ' + nv + ' ').include(' ' + v + ' '); },
    '|=': function(nv, v) { return ('-' + (nv || "").toUpperCase() +
     '-').include('-' + (v || "").toUpperCase() + '-'); }
  },

  split: function(expression) {
    var expressions = [];
    expression.scan(/(([\w#:.~>+()\s-]+|\*|\[.*?\])+)\s*(,|$)/, function(m) {
      expressions.push(m[1].strip());
    });
    return expressions;
  },

  matchElements: function(elements, expression) {
    var matches = $$(expression), h = Selector.handlers;
    h.mark(matches);
    for (var i = 0, results = [], element; element = elements[i]; i++)
      if (element._countedByPrototype) results.push(element);
    h.unmark(matches);
    return results;
  },

  findElement: function(elements, expression, index) {
    if (Object.isNumber(expression)) {
      index = expression; expression = false;
    }
    return Selector.matchElements(elements, expression || '*')[index || 0];
  },

  findChildElements: function(element, expressions) {
    expressions = Selector.split(expressions.join(','));
    var results = [], h = Selector.handlers;
    for (var i = 0, l = expressions.length, selector; i < l; i++) {
      selector = new Selector(expressions[i].strip());
      h.concat(results, selector.findElements(element));
    }
    return (l > 1) ? h.unique(results) : results;
  }
});

if (Prototype.Browser.IE) {
  Object.extend(Selector.handlers, {
    // IE returns comment nodes on getElementsByTagName("*").
    // Filter them out.
    concat: function(a, b) {
      for (var i = 0, node; node = b[i]; i++)
        if (node.tagName !== "!") a.push(node);
      return a;
    },

    // IE improperly serializes _countedByPrototype in (inner|outer)HTML.
    unmark: function(nodes) {
      for (var i = 0, node; node = nodes[i]; i++)
        node.removeAttribute('_countedByPrototype');
      return nodes;
    }
  });
}

function $$() {
  return Selector.findChildElements(document, $A(arguments));
}
var Form = {
  reset: function(form) {
    $(form).reset();
    return form;
  },

  serializeElements: function(elements, options) {
    if (typeof options != 'object') options = { hash: !!options };
    else if (Object.isUndefined(options.hash)) options.hash = true;
    var key, value, submitted = false, submit = options.submit;

    var data = elements.inject({ }, function(result, element) {
      if (!element.disabled && element.name) {
        key = element.name; value = $(element).getValue();
        if (value != null && element.type != 'file' && (element.type != 'submit' || (!submitted &&
            submit !== false && (!submit || key == submit) && (submitted = true)))) {
          if (key in result) {
            // a key is already present; construct an array of values
            if (!Object.isArray(result[key])) result[key] = [result[key]];
            result[key].push(value);
          }
          else result[key] = value;
        }
      }
      return result;
    });

    return options.hash ? data : Object.toQueryString(data);
  }
};

Form.Methods = {
  serialize: function(form, options) {
    return Form.serializeElements(Form.getElements(form), options);
  },

  getElements: function(form) {
    return $A($(form).getElementsByTagName('*')).inject([],
      function(elements, child) {
        if (Form.Element.Serializers[child.tagName.toLowerCase()])
          elements.push(Element.extend(child));
        return elements;
      }
    );
  },

  getInputs: function(form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');

    if (!typeName && !name) return $A(inputs).map(Element.extend);

    for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) || (name && input.name != name))
        continue;
      matchingInputs.push(Element.extend(input));
    }

    return matchingInputs;
  },

  disable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('disable');
    return form;
  },

  enable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('enable');
    return form;
  },

  findFirstElement: function(form) {
    var elements = $(form).getElements().findAll(function(element) {
      return 'hidden' != element.type && !element.disabled;
    });
    var firstByIndex = elements.findAll(function(element) {
      return element.hasAttribute('tabIndex') && element.tabIndex >= 0;
    }).sortBy(function(element) { return element.tabIndex }).first();

    return firstByIndex ? firstByIndex : elements.find(function(element) {
      return ['input', 'select', 'textarea'].include(element.tagName.toLowerCase());
    });
  },

  focusFirstElement: function(form) {
    form = $(form);
    form.findFirstElement().activate();
    return form;
  },

  request: function(form, options) {
    form = $(form), options = Object.clone(options || { });

    var params = options.parameters, action = form.readAttribute('action') || '';
    if (action.blank()) action = window.location.href;
    options.parameters = form.serialize(true);

    if (params) {
      if (Object.isString(params)) params = params.toQueryParams();
      Object.extend(options.parameters, params);
    }

    if (form.hasAttribute('method') && !options.method)
      options.method = form.method;

    return new Ajax.Request(action, options);
  }
};

/*--------------------------------------------------------------------------*/

Form.Element = {
  focus: function(element) {
    $(element).focus();
    return element;
  },

  select: function(element) {
    $(element).select();
    return element;
  }
};

Form.Element.Methods = {
  serialize: function(element) {
    element = $(element);
    if (!element.disabled && element.name) {
      var value = element.getValue();
      if (value != undefined) {
        var pair = { };
        pair[element.name] = value;
        return Object.toQueryString(pair);
      }
    }
    return '';
  },

  getValue: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    return Form.Element.Serializers[method](element);
  },

  setValue: function(element, value) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    Form.Element.Serializers[method](element, value);
    return element;
  },

  clear: function(element) {
    $(element).value = '';
    return element;
  },

  present: function(element) {
    return $(element).value != '';
  },

  activate: function(element) {
    element = $(element);
    try {
      element.focus();
      if (element.select && (element.tagName.toLowerCase() != 'input' ||
          !['button', 'reset', 'submit'].include(element.type)))
        element.select();
    } catch (e) { }
    return element;
  },

  disable: function(element) {
    element = $(element);
    element.disabled = true;
    return element;
  },

  enable: function(element) {
    element = $(element);
    element.disabled = false;
    return element;
  }
};

/*--------------------------------------------------------------------------*/

var Field = Form.Element;
var $F = Form.Element.Methods.getValue;

/*--------------------------------------------------------------------------*/

Form.Element.Serializers = {
  input: function(element, value) {
    switch (element.type.toLowerCase()) {
      case 'checkbox':
      case 'radio':
        return Form.Element.Serializers.inputSelector(element, value);
      default:
        return Form.Element.Serializers.textarea(element, value);
    }
  },

  inputSelector: function(element, value) {
    if (Object.isUndefined(value)) return element.checked ? element.value : null;
    else element.checked = !!value;
  },

  textarea: function(element, value) {
    if (Object.isUndefined(value)) return element.value;
    else element.value = value;
  },

  select: function(element, value) {
    if (Object.isUndefined(value))
      return this[element.type == 'select-one' ?
        'selectOne' : 'selectMany'](element);
    else {
      var opt, currentValue, single = !Object.isArray(value);
      for (var i = 0, length = element.length; i < length; i++) {
        opt = element.options[i];
        currentValue = this.optionValue(opt);
        if (single) {
          if (currentValue == value) {
            opt.selected = true;
            return;
          }
        }
        else opt.selected = value.include(currentValue);
      }
    }
  },

  selectOne: function(element) {
    var index = element.selectedIndex;
    return index >= 0 ? this.optionValue(element.options[index]) : null;
  },

  selectMany: function(element) {
    var values, length = element.length;
    if (!length) return null;

    for (var i = 0, values = []; i < length; i++) {
      var opt = element.options[i];
      if (opt.selected) values.push(this.optionValue(opt));
    }
    return values;
  },

  optionValue: function(opt) {
    // extend element because hasAttribute may not be native
    return Element.extend(opt).hasAttribute('value') ? opt.value : opt.text;
  }
};

/*--------------------------------------------------------------------------*/

Abstract.TimedObserver = Class.create(PeriodicalExecuter, {
  initialize: function($super, element, frequency, callback) {
    $super(callback, frequency);
    this.element   = $(element);
    this.lastValue = this.getValue();
  },

  execute: function() {
    var value = this.getValue();
    if (Object.isString(this.lastValue) && Object.isString(value) ?
        this.lastValue != value : String(this.lastValue) != String(value)) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
});

Form.Element.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});

/*--------------------------------------------------------------------------*/

Abstract.EventObserver = Class.create({
  initialize: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;

    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },

  onElementEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },

  registerFormCallbacks: function() {
    Form.getElements(this.element).each(this.registerCallback, this);
  },

  registerCallback: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          Event.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        default:
          Event.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
});

Form.Element.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
if (!window.Event) var Event = { };

Object.extend(Event, {
  KEY_BACKSPACE: 8,
  KEY_TAB:       9,
  KEY_RETURN:   13,
  KEY_ESC:      27,
  KEY_LEFT:     37,
  KEY_UP:       38,
  KEY_RIGHT:    39,
  KEY_DOWN:     40,
  KEY_DELETE:   46,
  KEY_HOME:     36,
  KEY_END:      35,
  KEY_PAGEUP:   33,
  KEY_PAGEDOWN: 34,
  KEY_INSERT:   45,

  cache: { },

  relatedTarget: function(event) {
    var element;
    switch(event.type) {
      case 'mouseover': element = event.fromElement; break;
      case 'mouseout':  element = event.toElement;   break;
      default: return null;
    }
    return Element.extend(element);
  }
});

Event.Methods = (function() {
  var isButton;

  if (Prototype.Browser.IE) {
    var buttonMap = { 0: 1, 1: 4, 2: 2 };
    isButton = function(event, code) {
      return event.button == buttonMap[code];
    };

  } else if (Prototype.Browser.WebKit) {
    isButton = function(event, code) {
      switch (code) {
        case 0: return event.which == 1 && !event.metaKey;
        case 1: return event.which == 1 && event.metaKey;
        default: return false;
      }
    };

  } else {
    isButton = function(event, code) {
      return event.which ? (event.which === code + 1) : (event.button === code);
    };
  }

  return {
    isLeftClick:   function(event) { return isButton(event, 0) },
    isMiddleClick: function(event) { return isButton(event, 1) },
    isRightClick:  function(event) { return isButton(event, 2) },

    element: function(event) {
      event = Event.extend(event);

      var node          = event.target,
          type          = event.type,
          currentTarget = event.currentTarget;

      if (currentTarget && currentTarget.tagName) {
        // Firefox screws up the "click" event when moving between radio buttons
        // via arrow keys. It also screws up the "load" and "error" events on images,
        // reporting the document as the target instead of the original image.
        if (type === 'load' || type === 'error' ||
          (type === 'click' && currentTarget.tagName.toLowerCase() === 'input'
            && currentTarget.type === 'radio'))
              node = currentTarget;
      }
      if (node.nodeType == Node.TEXT_NODE) node = node.parentNode;
      return Element.extend(node);
    },

    findElement: function(event, expression) {
      var element = Event.element(event);
      if (!expression) return element;
      var elements = [element].concat(element.ancestors());
      return Selector.findElement(elements, expression, 0);
    },

    pointer: function(event) {
      var docElement = document.documentElement,
      body = document.body || { scrollLeft: 0, scrollTop: 0 };
      return {
        x: event.pageX || (event.clientX +
          (docElement.scrollLeft || body.scrollLeft) -
          (docElement.clientLeft || 0)),
        y: event.pageY || (event.clientY +
          (docElement.scrollTop || body.scrollTop) -
          (docElement.clientTop || 0))
      };
    },

    pointerX: function(event) { return Event.pointer(event).x },
    pointerY: function(event) { return Event.pointer(event).y },

    stop: function(event) {
      Event.extend(event);
      event.preventDefault();
      event.stopPropagation();
      event.stopped = true;
    }
  };
})();

Event.extend = (function() {
  var methods = Object.keys(Event.Methods).inject({ }, function(m, name) {
    m[name] = Event.Methods[name].methodize();
    return m;
  });

  if (Prototype.Browser.IE) {
    Object.extend(methods, {
      stopPropagation: function() { this.cancelBubble = true },
      preventDefault:  function() { this.returnValue = false },
      inspect: function() { return "[object Event]" }
    });

    return function(event) {
      if (!event) return false;
      if (event._extendedByPrototype) return event;

      event._extendedByPrototype = Prototype.emptyFunction;
      var pointer = Event.pointer(event);
      Object.extend(event, {
        target: event.srcElement,
        relatedTarget: Event.relatedTarget(event),
        pageX:  pointer.x,
        pageY:  pointer.y
      });
      return Object.extend(event, methods);
    };

  } else {
    Event.prototype = Event.prototype || document.createEvent("HTMLEvents")['__proto__'];
    Object.extend(Event.prototype, methods);
    return Prototype.K;
  }
})();

Object.extend(Event, (function() {
  var cache = Event.cache;

  function getEventID(element) {
    if (element._prototypeEventID) return element._prototypeEventID[0];
    arguments.callee.id = arguments.callee.id || 1;
    return element._prototypeEventID = [++arguments.callee.id];
  }

  function getDOMEventName(eventName) {
    if (eventName && eventName.include(':')) return "dataavailable";
    return eventName;
  }

  function getCacheForID(id) {
    return cache[id] = cache[id] || { };
  }

  function getWrappersForEventName(id, eventName) {
    var c = getCacheForID(id);
    return c[eventName] = c[eventName] || [];
  }

  function createWrapper(element, eventName, handler) {
    var id = getEventID(element);
    var c = getWrappersForEventName(id, eventName);
    if (c.pluck("handler").include(handler)) return false;

    var wrapper = function(event) {
      if (!Event || !Event.extend ||
        (event.eventName && event.eventName != eventName))
          return false;

      Event.extend(event);
      handler.call(element, event);
    };

    wrapper.handler = handler;
    c.push(wrapper);
    return wrapper;
  }

  function findWrapper(id, eventName, handler) {
    var c = getWrappersForEventName(id, eventName);
    return c.find(function(wrapper) { return wrapper.handler == handler });
  }

  function destroyWrapper(id, eventName, handler) {
    var c = getCacheForID(id);
    if (!c[eventName]) return false;
    c[eventName] = c[eventName].without(findWrapper(id, eventName, handler));
  }

  function destroyCache() {
    for (var id in cache)
      for (var eventName in cache[id])
        cache[id][eventName] = null;
  }


  // Internet Explorer needs to remove event handlers on page unload
  // in order to avoid memory leaks.
  if (window.attachEvent) {
    window.attachEvent("onunload", destroyCache);
  }

  // Safari has a dummy event handler on page unload so that it won't
  // use its bfcache. Safari <= 3.1 has an issue with restoring the "document"
  // object when page is returned to via the back button using its bfcache.
  if (Prototype.Browser.WebKit) {
    window.addEventListener('unload', Prototype.emptyFunction, false);
  }

  return {
    observe: function(element, eventName, handler) {
      element = $(element);
      var name = getDOMEventName(eventName);

      var wrapper = createWrapper(element, eventName, handler);
      if (!wrapper) return element;

      if (element.addEventListener) {
        element.addEventListener(name, wrapper, false);
      } else {
        element.attachEvent("on" + name, wrapper);
      }

      return element;
    },

    stopObserving: function(element, eventName, handler) {
      element = $(element);
      var id = getEventID(element), name = getDOMEventName(eventName);

      if (!handler && eventName) {
        getWrappersForEventName(id, eventName).each(function(wrapper) {
          element.stopObserving(eventName, wrapper.handler);
        });
        return element;

      } else if (!eventName) {
        Object.keys(getCacheForID(id)).each(function(eventName) {
          element.stopObserving(eventName);
        });
        return element;
      }

      var wrapper = findWrapper(id, eventName, handler);
      if (!wrapper) return element;

      if (element.removeEventListener) {
        element.removeEventListener(name, wrapper, false);
      } else {
        element.detachEvent("on" + name, wrapper);
      }

      destroyWrapper(id, eventName, handler);

      return element;
    },

    fire: function(element, eventName, memo) {
      element = $(element);
      if (element == document && document.createEvent && !element.dispatchEvent)
        element = document.documentElement;

      var event;
      if (document.createEvent) {
        event = document.createEvent("HTMLEvents");
        event.initEvent("dataavailable", true, true);
      } else {
        event = document.createEventObject();
        event.eventType = "ondataavailable";
      }

      event.eventName = eventName;
      event.memo = memo || { };

      if (document.createEvent) {
        element.dispatchEvent(event);
      } else {
        element.fireEvent(event.eventType, event);
      }

      return Event.extend(event);
    }
  };
})());

Object.extend(Event, Event.Methods);

Element.addMethods({
  fire:          Event.fire,
  observe:       Event.observe,
  stopObserving: Event.stopObserving
});

Object.extend(document, {
  fire:          Element.Methods.fire.methodize(),
  observe:       Element.Methods.observe.methodize(),
  stopObserving: Element.Methods.stopObserving.methodize(),
  loaded:        false
});

(function() {
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards and John Resig. */

  var timer;

  function fireContentLoadedEvent() {
    if (document.loaded) return;
    if (timer) window.clearInterval(timer);
    document.fire("dom:loaded");
    document.loaded = true;
  }

  if (document.addEventListener) {
    if (Prototype.Browser.WebKit) {
      timer = window.setInterval(function() {
        if (/loaded|complete/.test(document.readyState))
          fireContentLoadedEvent();
      }, 0);

      Event.observe(window, "load", fireContentLoadedEvent);

    } else {
      document.addEventListener("DOMContentLoaded",
        fireContentLoadedEvent, false);
    }

  } else {
    document.write("<script id=__onDOMContentLoaded defer src=//:><\/script>");
    $("__onDOMContentLoaded").onreadystatechange = function() {
      if (this.readyState == "complete") {
        this.onreadystatechange = null;
        fireContentLoadedEvent();
      }
    };
  }
})();
/*------------------------------- DEPRECATED -------------------------------*/

Hash.toQueryString = Object.toQueryString;

var Toggle = { display: Element.toggle };

Element.Methods.childOf = Element.Methods.descendantOf;

var Insertion = {
  Before: function(element, content) {
    return Element.insert(element, {before:content});
  },

  Top: function(element, content) {
    return Element.insert(element, {top:content});
  },

  Bottom: function(element, content) {
    return Element.insert(element, {bottom:content});
  },

  After: function(element, content) {
    return Element.insert(element, {after:content});
  }
};

var $continue = new Error('"throw $continue" is deprecated, use "return" instead');

// This should be moved to script.aculo.us; notice the deprecated methods
// further below, that map to the newer Element methods.
var Position = {
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  includeScrollOffsets: false,

  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  prepare: function() {
    this.deltaX =  window.pageXOffset
                || document.documentElement.scrollLeft
                || document.body.scrollLeft
                || 0;
    this.deltaY =  window.pageYOffset
                || document.documentElement.scrollTop
                || document.body.scrollTop
                || 0;
  },

  // caches x/y coordinate pair to use with overlap
  within: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = Element.cumulativeOffset(element);

    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] &&
            x <  this.offset[0] + element.offsetWidth);
  },

  withinIncludingScrolloffsets: function(element, x, y) {
    var offsetcache = Element.cumulativeScrollOffset(element);

    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = Element.cumulativeOffset(element);

    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] &&
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },

  // within must be called directly before
  overlap: function(mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },

  // Deprecation layer -- use newer Element methods now (1.5.2).

  cumulativeOffset: Element.Methods.cumulativeOffset,

  positionedOffset: Element.Methods.positionedOffset,

  absolutize: function(element) {
    Position.prepare();
    return Element.absolutize(element);
  },

  relativize: function(element) {
    Position.prepare();
    return Element.relativize(element);
  },

  realOffset: Element.Methods.cumulativeScrollOffset,

  offsetParent: Element.Methods.getOffsetParent,

  page: Element.Methods.viewportOffset,

  clone: function(source, target, options) {
    options = options || { };
    return Element.clonePosition(target, source, options);
  }
};

/*--------------------------------------------------------------------------*/

if (!document.getElementsByClassName) document.getElementsByClassName = function(instanceMethods){
  function iter(name) {
    return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
  }

  instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ?
  function(element, className) {
    className = className.toString().strip();
    var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
    return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
  } : function(element, className) {
    className = className.toString().strip();
    var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
    if (!classNames && !className) return elements;

    var nodes = $(element).getElementsByTagName('*');
    className = ' ' + className + ' ';

    for (var i = 0, child, cn; child = nodes[i]; i++) {
      if (child.className && (cn = ' ' + child.className + ' ') && (cn.include(className) ||
          (classNames && classNames.all(function(name) {
            return !name.toString().blank() && cn.include(' ' + name + ' ');
          }))))
        elements.push(Element.extend(child));
    }
    return elements;
  };

  return function(className, parentElement) {
    return $(parentElement || document.body).getElementsByClassName(className);
  };
}(Element.Methods);

/*--------------------------------------------------------------------------*/

Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
  initialize: function(element) {
    this.element = $(element);
  },

  _each: function(iterator) {
    this.element.className.split(/\s+/).select(function(name) {
      return name.length > 0;
    })._each(iterator);
  },

  set: function(className) {
    this.element.className = className;
  },

  add: function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set($A(this).concat(classNameToAdd).join(' '));
  },

  remove: function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set($A(this).without(classNameToRemove).join(' '));
  },

  toString: function() {
    return $A(this).join(' ');
  }
};

Object.extend(Element.ClassNames.prototype, Enumerable);

/*--------------------------------------------------------------------------*/

Element.addMethods();
(function() {
  var m, re, _ref, _ref1;

  window.jQueryInWindow = function(func) {
    return func.call(window, jQuery);
  };

  if (top.location !== self.location) {
    top.location = self.location.href;
  }

  re = /\/(\w+)\/(\d+)/g;

  while (m = re.exec(window.location.href)) {
    window[m[1].toUpperCase().replace(/s$/i, '') + '_ID'] = parseInt(m[2]);
  }

  if ((_ref = window.HOST_ID) == null) {
    window.HOST_ID = null;
  }

  if ((_ref1 = window.WORKSPACE_ID) == null) {
    window.WORKSPACE_ID = null;
  }

  jQuery(function($) {
    var _base, _ref2, _ref3;
    window.WORKSPACE_ID || (window.WORKSPACE_ID = $('meta[name=workspace_id]').attr('content'));
    $.fn.addDisableOverlay = function(supportedProducts) {
      var $disabledOverlay, $mainContent;
      $disabledOverlay = $('.body-disabled-overlay');
      $mainContent = $('.mainContent');
      if ($disabledOverlay.height() < $mainContent.height()) {
        $disabledOverlay.css({
          height: $mainContent.height() - 20
        });
      }
      $disabledOverlay.find('span.products').html("<a href='" + ($('span.registration-url').html()) + "'>register for the free " + supportedProducts + " trial</a>");
      return $disabledOverlay.removeClass('invisible');
    };
    $.fn.removeDisableOverlay = function(supportedProducts) {
      var $disabledOverlay;
      $disabledOverlay = $('.body-disabled-overlay');
      return $disabledOverlay.addClass('invisible');
    };
    $.fn.toggleVisibility = function($elem) {
      return $(this).on('click', null, function(e) {
        if ($(this).prop('checked')) {
          return $elem.show();
        } else {
          return $elem.hide();
        }
      });
    };
    $.fn.checkAll = function($elem) {
      var $checkboxes, setAllCheckboxState,
        _this = this;
      $checkboxes = $elem.find('input[type=checkbox]');
      setAllCheckboxState = function() {
        var $uncheckedCheckboxes;
        $uncheckedCheckboxes = $elem.find('input[type=checkbox]:not(:checked)');
        if ($uncheckedCheckboxes.length > 0) {
          return $(_this).prop('checked', false);
        } else {
          return $(_this).prop('checked', true);
        }
      };
      setAllCheckboxState();
      $(this).on('click', null, function(e) {
        if ($(this).prop('checked')) {
          return $checkboxes.prop('checked', true);
        } else {
          return $checkboxes.prop('checked', false);
        }
      });
      return $checkboxes.on('click', null, function(e) {
        return setAllCheckboxState();
      });
    };
    (_base = $.expr[':']).focus || (_base.focus = function(elem) {
      return elem === document.activeElement && (elem.type || elem.href);
    });
    if ((_ref2 = $.fn.dataTableExt) != null) {
      _ref2.oPagination.r7Style = {
        fnInit: function(oSettings, nPaging, fnCallbackDraw) {
          var $curr, $first, $last, $next, $p, $prev, btnEvent;
          $p = $(nPaging).html('');
          $first = $('<span />', {
            "class": 'btn first'
          }).attr('title', 'First').appendTo($p);
          $prev = $('<span />', {
            "class": 'btn prev'
          }).attr('title', 'Previous').appendTo($p);
          $curr = $('<input />', {
            "class": 'curr'
          }).attr('title', 'Current page').appendTo($p);
          $next = $('<span />', {
            "class": 'btn next'
          }).attr('title', 'Next').appendTo($p);
          $last = $('<span />', {
            "class": 'btn last'
          }).attr('title', 'Last').appendTo($p);
          btnEvent = function(evtName) {
            return function(e) {
              if ($(e.currentTarget).hasClass('disabled')) {
                return;
              }
              oSettings.oApi._fnPageChange(oSettings, evtName);
              return fnCallbackDraw(oSettings);
            };
          };
          $first.click(btnEvent('first'));
          $prev.click(btnEvent('previous'));
          $next.click(btnEvent('next'));
          $last.click(btnEvent('last'));
          $curr.change(function() {
            var page;
            page = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;
            if ($curr.val() !== page.toString() && ($curr.val() - 1) * oSettings._iDisplayLength < oSettings.fnRecordsTotal()) {
              oSettings._iDisplayStart = ($curr.val() - 1) * oSettings._iDisplayLength;
            }
            return oSettings.oInstance.fnDraw(false);
          });
          $curr.val(1);
          return $.extend(oSettings.oLanguage, {
            sLengthMenu: 'Show _MENU_',
            sInfo: "Showing _START_ - _END_ of _TOTAL_"
          });
        },
        fnUpdate: function(oSettings, fnCallbackDraw) {
          var $first, $last, $next, $prev, div, firstPage, lastPage, page;
          page = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;
          lastPage = oSettings.fnDisplayEnd() >= oSettings.fnRecordsTotal();
          firstPage = page === 1;
          div = oSettings.aanFeatures.p;
          $first = $('span.first', div).toggleClass('disabled', firstPage);
          $prev = $('span.prev', div).toggleClass('disabled', firstPage);
          $next = $('span.next', div).toggleClass('disabled', lastPage);
          $last = $('span.last', div).toggleClass('disabled', lastPage);
          return $('input.curr', oSettings.aanFeatures.p).val(page).toggleClass('disabled', firstPage && lastPage).prop('disabled', firstPage && lastPage);
        }
      };
    }
    $.extend((_ref3 = $.fn.dataTable) != null ? _ref3.defaults : void 0, {
      sPaginationType: 'r7Style'
    });
    $.extend($.ui.tooltip.prototype.options, {
      position: {
        using: function(position, feedback) {
          var left, right, winWidth;
          left = feedback.target.left;
          right = 'auto';
          winWidth = $(window).width();
          if (left > winWidth - 200) {
            right = winWidth - (left + feedback.target.width);
            left = 'auto';
          }
          return $(this).css({
            position: 'absolute',
            left: left,
            right: right,
            top: feedback.target.top + feedback.target.height + 5,
            'z-index': 2
          });
        }
      }
    });
    $(document).on('updateBadges', function(e, resp) {
      var $badge, $chainsMenu, $chainsNotification, $lis, $nav, $taskNotification, $tasksMenu, findOrCreateBadge, findOrCreateNotification;
      $nav = $('#workspace_nav ul.nav_tabs');
      $lis = $nav.children('li');
      if ($lis.length === 0) {
        return;
      }
      findOrCreateBadge = function($li) {
        var $badge;
        $badge = $li.find('>a>.badge').first();
        if ($badge.length > 0) {
          return $badge;
        } else {
          return $('<span />', {
            "class": 'badge'
          }).appendTo($li.find('>a'));
        }
      };
      findOrCreateNotification = function($li) {
        var $badge;
        $badge = $li.find('>a>.error_notification').first();
        if ($badge.length > 0) {
          return $badge;
        } else {
          return $('<span />', {
            "class": 'error_notification'
          }).appendTo($li.find('>a'));
        }
      };
      $badge = findOrCreateBadge($lis.filter('li.sessions'));
      if (resp.session_count === 0) {
        $badge.remove();
      } else {
        $badge.text(resp.session_count);
      }
      $badge = findOrCreateBadge($lis.filter('li.reports'));
      if (resp.report_count === 0) {
        $badge.remove();
      } else {
        $badge.text(resp.report_count);
      }
      $tasksMenu = $lis.filter('li.tasks');
      $chainsMenu = $tasksMenu.find('>ul>li>.chains').first().parent();
      $taskNotification = findOrCreateNotification($tasksMenu);
      $chainsNotification = findOrCreateNotification($chainsMenu);
      if (resp.task_chain_errors === 0) {
        $taskNotification.removeClass('notification-dot');
        $chainsNotification.removeClass('notification-dot');
      } else {
        $taskNotification.addClass('notification-dot');
        $chainsNotification.addClass('notification-dot');
      }
      $badge = findOrCreateBadge($tasksMenu);
      if (resp.task_count === 0) {
        $badge.remove();
      } else {
        $badge.text(resp.task_count);
      }
      $badge = findOrCreateBadge($lis.filter('li.campaigns'));
      if (resp.campaign_count === 0) {
        return $badge.remove();
      } else {
        return $badge.text(resp.campaign_count);
      }
    });
    $(document).on('click', '#flash_messages > a.close', function(e) {
      return $(e.target).closest("#flash_messages").empty();
    });
    return $(document).ready(function() {
      $(document).on('click', 'span.btn a', function(e) {
        if ($(this).attr('href') === '#') {
          return e.preventDefault();
        }
      });
      _.mixin(_.str.exports());
      $('#top-menu>ul.drop-menu>li.menu>a').each(function() {
        return $(this).click(function(e) {
          return e.preventDefault();
        });
      });
      $('#top-menu ul.drop-menu.menu-left li.menu ul.sub-menu').each(function(index, elem) {
        var parent_width;
        parent_width = Math.max($(elem).parent().outerWidth(), 160);
        if ($(elem).width() < parent_width) {
          return $(elem).width(parent_width - 2);
        }
      });
      $('#top-menu ul.drop-menu:not(.menu-left) li.menu ul.sub-menu').each(function(index, elem) {
        var parent_width;
        parent_width = $(elem).parent().outerWidth();
        if ($(elem).width() < parent_width) {
          return $(elem).width(parent_width - 2);
        }
      });
      if ($("meta[name='msp:unlicensed'][content='true']").length > 0) {
        $('.mainContent').addDisableOverlay('Metasploit Pro');
      }
      $(document).on('click', 'a.show_hide', function(e) {
        e.preventDefault();
        Effect.toggle($(this).data('show-hide-element'), 'blind', {
          duration: 0.3
        });
        return false;
      });
      $(document).on('click', 'input.delete.async', function(e) {
        e.preventDefault();
        $.ajax($(this).data('url'), {
          method: 'delete',
          data: $(this).closest('form').serialize()
        });
        return false;
      });
      return $(document).on('click', 'a.popup-cancel', function(e) {
        e.preventDefault();
        $('#popup').hide();
        return false;
      });
    });
  });

}).call(this);
(function() {
  var $,
    _this = this;

  $ = jQuery;

  window.helpers || (window.helpers = {
    cloneNodeAndForm: function(oldNode) {
      var clonedNode, clonedNodes, oldNodes;
      clonedNode = $(oldNode).clone(true, true)[0];
      oldNodes = $('textarea, select', oldNode);
      clonedNodes = $('textarea, select', clonedNode);
      _.each(clonedNodes, function(elem, index) {
        var newNode;
        oldNode = oldNodes[index];
        newNode = clonedNodes[index];
        return $(newNode).val($(oldNode).val());
      });
      return clonedNode;
    },
    urlParam: function(name) {
      var results;
      results = new RegExp('[\\?&amp;]' + name + '=([^&amp;#]*)').exec(window.location.href);
      return (results != null ? results[1] : void 0) || 0;
    },
    formatBytes: function(fs) {
      var fmtSize, i, size, units;
      if (!fs || fs === '') {
        return '';
      }
      size = parseInt(fs);
      units = ['B', 'KB', 'MB', 'GB', 'TB'];
      i = 0;
      while (size >= 1024) {
        size /= 1024;
        i++;
      }
      fmtSize = size.toFixed(1) + units[i].toLowerCase();
      return fmtSize;
    },
    parseBytes: function(fs) {
      var i, matches, parsed, units;
      matches = fs.match(/[^0-9.]+/g);
      parsed = parseFloat(fs.replace(/[^0-9.]+/g, ''));
      if ((matches != null) && matches.size() > 0) {
        units = ['B', 'KB', 'MB', 'GB', 'TB'];
        i = 0;
        while (matches[0] !== units[i]) {
          i++;
        }
        return parseInt(parsed * Math.pow(1024, i));
      } else {
        return parseInt(parseFloat(fs * 1024 * 1024));
      }
    },
    loadRemoteTable: function(opts) {
      var $area, cb, dtOpts, _ref,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      $area = opts.el;
      cb = opts.cb;
      dtOpts = opts.dataTable || {};
      dtOpts.sPaginationType = "r7Style";
      dtOpts.sDom = 'ft<"list-table-footer clearfix"ip <"sel" l>>r';
      return $.ajax({
        url: opts != null ? (_ref = opts.dataTable) != null ? _ref.sAjaxSource : void 0 : void 0,
        dataType: 'json',
        success: function(data) {
          var $dataTable, $table, $tr, additionalCols, colArr, colNames, colOverrides, defaultOpts, initCompleteCallback;
          $area.removeClass('tab-loading').html('');
          colNames = data['sColumns'].split(',');
          $area.append('<table><thead><tr /></thead><tbody /></table>');
          $table = $('table', $area).addClass('list');
          $tr = $('thead tr', $area);
          colOverrides = opts.columns || {};
          additionalCols = opts.additionalCols || [];
          colNames = _.union(additionalCols, colNames);
          colArr = _.map(colNames, function(name) {
            var col, _ref1, _ref2;
            $tr.append($('<th />', {
              html: (_ref1 = (_ref2 = colOverrides[name]) != null ? _ref2.name : void 0) != null ? _ref1 : _.str.humanize(name)
            }));
            col = {
              mDataProp: _.str.underscored(name)
            };
            if (colOverrides[name] != null) {
              $.extend(col, colOverrides[name]);
            }
            return col;
          });
          initCompleteCallback = dtOpts.fnInitComplete;
          delete dtOpts['fnInitComplete'];
          defaultOpts = {
            aoColumns: colArr,
            bProcessing: true,
            bServerSide: true,
            sPaginationType: "full_numbers",
            bFilter: false,
            bStateSave: true,
            fnDrawCallback: function() {
              return $table.css('width', '100%');
            },
            fnInitComplete: function() {
              if (initCompleteCallback != null) {
                initCompleteCallback.apply(this, arguments);
              }
              return $table.trigger('tableload');
            }
          };
          $dataTable = $table.dataTable($.extend({}, defaultOpts, dtOpts));
          $area.append($('<div />', {
            style: 'clear:both'
          }));
          if (opts.editableOpts != null) {
            $table.fnSettings().sAjaxDelete = opts.sAjaxDelete;
            $table.fnSettings().sAjaxDestination = opts.sAjaxDestination;
            $table.fnSettings().editableOpts = opts.editableOpts;
            $table.fnInitEditRow();
          }
          if (opts.success != null) {
            return opts.success($dataTable);
          }
        }
      });
    },
    showLoadingDialog: function(loadingMsg) {
      if (loadingMsg == null) {
        loadingMsg = 'Loading...';
      }
      this._loaderDialog = $('<div class="loading tab-loading" />').dialog({
        modal: true,
        closeOnEscape: false,
        title: loadingMsg,
        resizable: false
      });
      this._loaderDialog.parents('.ui-dialog').addClass('white');
      return this._loaderDialog.append($('<p class="dialog-msg center">').text(''));
    },
    hideLoadingDialog: function() {
      var _ref, _ref1, _ref2, _ref3;
      if ((_ref = this._loaderDialog) != null) {
        _ref.dialog();
      }
      if ((_ref1 = this._loaderDialog) != null ? _ref1.dialog('isOpen') : void 0) {
        return (_ref2 = this._loaderDialog) != null ? (_ref3 = _ref2.dialog('close')) != null ? _ref3.remove() : void 0 : void 0;
      }
    },
    setDialogTitle: function(title) {
      return $('.dialog-msg', _this._loaderDialog).text(title);
    }
  });

}).call(this);
// # Jquery and Rails powered default application.js
// # Easy Ajax replacement for remote_functions and ajax_form based on class name
// # All actions will reply to the .js format
// # Unostrusive, will only works if Javascript enabled, if not, respond to an HTML as a normal link
// # respond_to do |format|
// #   format.html
// #   format.js {render :layout => false}
// # end
jQuery(function($) {

  jQuery.ajaxSetup({ 'beforeSend': function(xhr) {xhr.setRequestHeader("Accept", "text/javascript")} })

  function _ajax_request(url, data, callback, type, method) {
      if (jQuery.isFunction(data)) {
          callback = data;
          data = {};
      }
      return jQuery.ajax({
          type: method,
          url: url,
          data: data,
          success: callback,
          dataType: type
          });
  }

  jQuery.extend({
      put: function(url, data, callback, type) {
          return _ajax_request(url, data, callback, type, 'PUT');
      },
      delete_: function(url, data, callback, type) {
          return _ajax_request(url, data, callback, type, 'DELETE');
      }
  });

  /*
  Submit a form with Ajax
  Use the class ajaxForm in your form declaration
  form_for @comment,:html => {:class => "ajaxForm"} do |f|
  */
  jQuery.fn.submitWithAjax = function() {
    this.unbind('submit', false);
    this.submit(function() {
      $.post(this.action, $(this).serialize(), null, "script");
      return false;
    })

    return this;
  };

  /*
  Retreive a page with get
  Use the class get in your link declaration
  link_to 'My link', my_path(),:class => "get"
  */
  jQuery.fn.getWithAjax = function() {
    this.unbind('click', false);
    this.click(function() {
      $.get($(this).attr("href"), $(this).serialize(), null, "script");
      return false;
    })
    return this;
  };

  /*
  Post data via html
  Use the class post in your link declaration
  link_to 'My link', my_new_path(),:class => "post"
  */
  jQuery.fn.postWithAjax = function() {
    this.unbind('click', false);
    this.click(function() {
      $.post($(this).attr("href"), $(this).serialize(), null, "script");
      return false;
    })
    return this;
  };

  /*
  Update/Put data via html
  Use the class put in your link declaration
  link_to 'My link', my_update_path(data),:class => "put",:method => :put
  */
  jQuery.fn.putWithAjax = function() {
    this.unbind('click', false);
    this.click(function() {
      $.put($(this).attr("href"), $(this).serialize(), null, "script");
      return false;
    })
    return this;
  };

  /*
  Delete data
  Use the class delete in your link declaration
  link_to 'My link', my_destroy_path(data),:class => "delete",:method => :delete
  */
  jQuery.fn.deleteWithAjax = function() {
    this.removeAttr('onclick');
    this.unbind('click', false);
    this.click(function() {
      if(confirm("Are you sure you want to delete this vuln?")) {
        $.delete_($(this).attr("href"), $(this).serialize(), null, "script");
      }
      return false;
    })
    return this;
  };

  (function($) {
    return jQuery.fn.insertAt = function(index, element) {
      var lastIndex;
      if (index <= 0) return this.prepend(element);
      lastIndex = this.children().size();
      if (index >= lastIndex) return this.append(element);
      return $(this.children()[index - 1]).after(element);
    };
  })(jQuery);

  /*
  Ajaxify all the links on the page.
  This function is called when the page is loaded. You'll probaly need to call it again when you write render new datas that need to be ajaxyfied.'
  */
  function ajaxLinks(){
      $('.ajax-form').submitWithAjax();
      $('a.ajax-get').getWithAjax();
      $('a.ajax-post').postWithAjax();
      $('a.ajax-put').putWithAjax();
      $('a.ajax-delete').deleteWithAjax();
  }

  $(document).ready(function() {
  // All non-GET requests will add the authenticity token
   $(document).ajaxSend(function(event, request, settings) {
         if (typeof(window.AUTH_TOKEN) == "undefined") return;
         // IE6 fix for http://dev.jquery.com/ticket/3155
         if (settings.type == 'GET' || settings.type == 'get') return;

         settings.data = settings.data || "";
         settings.data += (settings.data ? "&" : "") + "authenticity_token=" + encodeURIComponent(window.AUTH_TOKEN);
       });

    ajaxLinks();
  });

});
// moment.js
// version : 1.7.2
// author : Tim Wood
// license : MIT
// momentjs.com
(function(a){function E(a,b,c,d){var e=c.lang();return e[a].call?e[a](c,d):e[a][b]}function F(a,b){return function(c){return K(a.call(this,c),b)}}function G(a){return function(b){var c=a.call(this,b);return c+this.lang().ordinal(c)}}function H(a,b,c){this._d=a,this._isUTC=!!b,this._a=a._a||null,this._lang=c||!1}function I(a){var b=this._data={},c=a.years||a.y||0,d=a.months||a.M||0,e=a.weeks||a.w||0,f=a.days||a.d||0,g=a.hours||a.h||0,h=a.minutes||a.m||0,i=a.seconds||a.s||0,j=a.milliseconds||a.ms||0;this._milliseconds=j+i*1e3+h*6e4+g*36e5,this._days=f+e*7,this._months=d+c*12,b.milliseconds=j%1e3,i+=J(j/1e3),b.seconds=i%60,h+=J(i/60),b.minutes=h%60,g+=J(h/60),b.hours=g%24,f+=J(g/24),f+=e*7,b.days=f%30,d+=J(f/30),b.months=d%12,c+=J(d/12),b.years=c,this._lang=!1}function J(a){return a<0?Math.ceil(a):Math.floor(a)}function K(a,b){var c=a+"";while(c.length<b)c="0"+c;return c}function L(a,b,c){var d=b._milliseconds,e=b._days,f=b._months,g;d&&a._d.setTime(+a+d*c),e&&a.date(a.date()+e*c),f&&(g=a.date(),a.date(1).month(a.month()+f*c).date(Math.min(g,a.daysInMonth())))}function M(a){return Object.prototype.toString.call(a)==="[object Array]"}function N(a,b){var c=Math.min(a.length,b.length),d=Math.abs(a.length-b.length),e=0,f;for(f=0;f<c;f++)~~a[f]!==~~b[f]&&e++;return e+d}function O(a,b,c,d){var e,f,g=[];for(e=0;e<7;e++)g[e]=a[e]=a[e]==null?e===2?1:0:a[e];return a[7]=g[7]=b,a[8]!=null&&(g[8]=a[8]),a[3]+=c||0,a[4]+=d||0,f=new Date(0),b?(f.setUTCFullYear(a[0],a[1],a[2]),f.setUTCHours(a[3],a[4],a[5],a[6])):(f.setFullYear(a[0],a[1],a[2]),f.setHours(a[3],a[4],a[5],a[6])),f._a=g,f}function P(a,c){var d,e,g=[];!c&&h&&(c=require("./lang/"+a));for(d=0;d<i.length;d++)c[i[d]]=c[i[d]]||f.en[i[d]];for(d=0;d<12;d++)e=b([2e3,d]),g[d]=new RegExp("^"+(c.months[d]||c.months(e,""))+"|^"+(c.monthsShort[d]||c.monthsShort(e,"")).replace(".",""),"i");return c.monthsParse=c.monthsParse||g,f[a]=c,c}function Q(a){var c=typeof a=="string"&&a||a&&a._lang||null;return c?f[c]||P(c):b}function R(a){return a.match(/\[.*\]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function S(a){var b=a.match(k),c,d;for(c=0,d=b.length;c<d;c++)D[b[c]]?b[c]=D[b[c]]:b[c]=R(b[c]);return function(e){var f="";for(c=0;c<d;c++)f+=typeof b[c].call=="function"?b[c].call(e,a):b[c];return f}}function T(a,b){function d(b){return a.lang().longDateFormat[b]||b}var c=5;while(c--&&l.test(b))b=b.replace(l,d);return A[b]||(A[b]=S(b)),A[b](a)}function U(a){switch(a){case"DDDD":return p;case"YYYY":return q;case"S":case"SS":case"SSS":case"DDD":return o;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":case"a":case"A":return r;case"Z":case"ZZ":return s;case"T":return t;case"MM":case"DD":case"YY":case"HH":case"hh":case"mm":case"ss":case"M":case"D":case"d":case"H":case"h":case"m":case"s":return n;default:return new RegExp(a.replace("\\",""))}}function V(a,b,c,d){var e,f;switch(a){case"M":case"MM":c[1]=b==null?0:~~b-1;break;case"MMM":case"MMMM":for(e=0;e<12;e++)if(Q().monthsParse[e].test(b)){c[1]=e,f=!0;break}f||(c[8]=!1);break;case"D":case"DD":case"DDD":case"DDDD":b!=null&&(c[2]=~~b);break;case"YY":c[0]=~~b+(~~b>70?1900:2e3);break;case"YYYY":c[0]=~~Math.abs(b);break;case"a":case"A":d.isPm=(b+"").toLowerCase()==="pm";break;case"H":case"HH":case"h":case"hh":c[3]=~~b;break;case"m":case"mm":c[4]=~~b;break;case"s":case"ss":c[5]=~~b;break;case"S":case"SS":case"SSS":c[6]=~~(("0."+b)*1e3);break;case"Z":case"ZZ":d.isUTC=!0,e=(b+"").match(x),e&&e[1]&&(d.tzh=~~e[1]),e&&e[2]&&(d.tzm=~~e[2]),e&&e[0]==="+"&&(d.tzh=-d.tzh,d.tzm=-d.tzm)}b==null&&(c[8]=!1)}function W(a,b){var c=[0,0,1,0,0,0,0],d={tzh:0,tzm:0},e=b.match(k),f,g;for(f=0;f<e.length;f++)g=(U(e[f]).exec(a)||[])[0],g&&(a=a.slice(a.indexOf(g)+g.length)),D[e[f]]&&V(e[f],g,c,d);return d.isPm&&c[3]<12&&(c[3]+=12),d.isPm===!1&&c[3]===12&&(c[3]=0),O(c,d.isUTC,d.tzh,d.tzm)}function X(a,b){var c,d=a.match(m)||[],e,f=99,g,h,i;for(g=0;g<b.length;g++)h=W(a,b[g]),e=T(new H(h),b[g]).match(m)||[],i=N(d,e),i<f&&(f=i,c=h);return c}function Y(a){var b="YYYY-MM-DDT",c;if(u.exec(a)){for(c=0;c<4;c++)if(w[c][1].exec(a)){b+=w[c][0];break}return s.exec(a)?W(a,b+" Z"):W(a,b)}return new Date(a)}function Z(a,b,c,d,e){var f=e.relativeTime[a];return typeof f=="function"?f(b||1,!!c,a,d):f.replace(/%d/i,b||1)}function $(a,b,c){var e=d(Math.abs(a)/1e3),f=d(e/60),g=d(f/60),h=d(g/24),i=d(h/365),j=e<45&&["s",e]||f===1&&["m"]||f<45&&["mm",f]||g===1&&["h"]||g<22&&["hh",g]||h===1&&["d"]||h<=25&&["dd",h]||h<=45&&["M"]||h<345&&["MM",d(h/30)]||i===1&&["y"]||["yy",i];return j[2]=b,j[3]=a>0,j[4]=c,Z.apply({},j)}function _(a,c){b.fn[a]=function(a){var b=this._isUTC?"UTC":"";return a!=null?(this._d["set"+b+c](a),this):this._d["get"+b+c]()}}function ab(a){b.duration.fn[a]=function(){return this._data[a]}}function bb(a,c){b.duration.fn["as"+a]=function(){return+this/c}}var b,c="1.7.2",d=Math.round,e,f={},g="en",h=typeof module!="undefined"&&module.exports,i="months|monthsShort|weekdays|weekdaysShort|weekdaysMin|longDateFormat|calendar|relativeTime|ordinal|meridiem".split("|"),j=/^\/?Date\((\-?\d+)/i,k=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|.)/g,l=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?)/g,m=/([0-9a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)/gi,n=/\d\d?/,o=/\d{1,3}/,p=/\d{3}/,q=/\d{1,4}/,r=/[0-9a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+/i,s=/Z|[\+\-]\d\d:?\d\d/i,t=/T/i,u=/^\s*\d{4}-\d\d-\d\d(T(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,v="YYYY-MM-DDTHH:mm:ssZ",w=[["HH:mm:ss.S",/T\d\d:\d\d:\d\d\.\d{1,3}/],["HH:mm:ss",/T\d\d:\d\d:\d\d/],["HH:mm",/T\d\d:\d\d/],["HH",/T\d\d/]],x=/([\+\-]|\d\d)/gi,y="Month|Date|Hours|Minutes|Seconds|Milliseconds".split("|"),z={Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6},A={},B="DDD w M D d".split(" "),C="M D H h m s w".split(" "),D={M:function(){return this.month()+1},MMM:function(a){return E("monthsShort",this.month(),this,a)},MMMM:function(a){return E("months",this.month(),this,a)},D:function(){return this.date()},DDD:function(){var a=new Date(this.year(),this.month(),this.date()),b=new Date(this.year(),0,1);return~~((a-b)/864e5+1.5)},d:function(){return this.day()},dd:function(a){return E("weekdaysMin",this.day(),this,a)},ddd:function(a){return E("weekdaysShort",this.day(),this,a)},dddd:function(a){return E("weekdays",this.day(),this,a)},w:function(){var a=new Date(this.year(),this.month(),this.date()-this.day()+5),b=new Date(a.getFullYear(),0,4);return~~((a-b)/864e5/7+1.5)},YY:function(){return K(this.year()%100,2)},YYYY:function(){return K(this.year(),4)},a:function(){return this.lang().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.lang().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return~~(this.milliseconds()/100)},SS:function(){return K(~~(this.milliseconds()/10),2)},SSS:function(){return K(this.milliseconds(),3)},Z:function(){var a=-this.zone(),b="+";return a<0&&(a=-a,b="-"),b+K(~~(a/60),2)+":"+K(~~a%60,2)},ZZ:function(){var a=-this.zone(),b="+";return a<0&&(a=-a,b="-"),b+K(~~(10*a/6),4)}};while(B.length)e=B.pop(),D[e+"o"]=G(D[e]);while(C.length)e=C.pop(),D[e+e]=F(D[e],2);D.DDDD=F(D.DDD,3),b=function(c,d){if(c===null||c==="")return null;var e,f;return b.isMoment(c)?new H(new Date(+c._d),c._isUTC,c._lang):(d?M(d)?e=X(c,d):e=W(c,d):(f=j.exec(c),e=c===a?new Date:f?new Date(+f[1]):c instanceof Date?c:M(c)?O(c):typeof c=="string"?Y(c):new Date(c)),new H(e))},b.utc=function(a,c){return M(a)?new H(O(a,!0),!0):(typeof a=="string"&&!s.exec(a)&&(a+=" +0000",c&&(c+=" Z")),b(a,c).utc())},b.unix=function(a){return b(a*1e3)},b.duration=function(a,c){var d=b.isDuration(a),e=typeof a=="number",f=d?a._data:e?{}:a,g;return e&&(c?f[c]=a:f.milliseconds=a),g=new I(f),d&&(g._lang=a._lang),g},b.humanizeDuration=function(a,c,d){return b.duration(a,c===!0?null:c).humanize(c===!0?!0:d)},b.version=c,b.defaultFormat=v,b.lang=function(a,c){var d;if(!a)return g;(c||!f[a])&&P(a,c);if(f[a]){for(d=0;d<i.length;d++)b[i[d]]=f[a][i[d]];b.monthsParse=f[a].monthsParse,g=a}},b.langData=Q,b.isMoment=function(a){return a instanceof H},b.isDuration=function(a){return a instanceof I},b.lang("en",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D YYYY",LLL:"MMMM D YYYY LT",LLLL:"dddd, MMMM D YYYY LT"},meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinal:function(a){var b=a%10;return~~(a%100/10)===1?"th":b===1?"st":b===2?"nd":b===3?"rd":"th"}}),b.fn=H.prototype={clone:function(){return b(this)},valueOf:function(){return+this._d},unix:function(){return Math.floor(+this._d/1e3)},toString:function(){return this._d.toString()},toDate:function(){return this._d},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds(),!!this._isUTC]},isValid:function(){return this._a?this._a[8]!=null?!!this._a[8]:!N(this._a,(this._a[7]?b.utc(this._a):b(this._a)).toArray()):!isNaN(this._d.getTime())},utc:function(){return this._isUTC=!0,this},local:function(){return this._isUTC=!1,this},format:function(a){return T(this,a?a:b.defaultFormat)},add:function(a,c){var d=c?b.duration(+c,a):b.duration(a);return L(this,d,1),this},subtract:function(a,c){var d=c?b.duration(+c,a):b.duration(a);return L(this,d,-1),this},diff:function(a,c,e){var f=this._isUTC?b(a).utc():b(a).local(),g=(this.zone()-f.zone())*6e4,h=this._d-f._d-g,i=this.year()-f.year(),j=this.month()-f.month(),k=this.date()-f.date(),l;return c==="months"?l=i*12+j+k/30:c==="years"?l=i+(j+k/30)/12:l=c==="seconds"?h/1e3:c==="minutes"?h/6e4:c==="hours"?h/36e5:c==="days"?h/864e5:c==="weeks"?h/6048e5:h,e?l:d(l)},from:function(a,c){return b.duration(this.diff(a)).lang(this._lang).humanize(!c)},fromNow:function(a){return this.from(b(),a)},calendar:function(){var a=this.diff(b().sod(),"days",!0),c=this.lang().calendar,d=c.sameElse,e=a<-6?d:a<-1?c.lastWeek:a<0?c.lastDay:a<1?c.sameDay:a<2?c.nextDay:a<7?c.nextWeek:d;return this.format(typeof e=="function"?e.apply(this):e)},isLeapYear:function(){var a=this.year();return a%4===0&&a%100!==0||a%400===0},isDST:function(){return this.zone()<b([this.year()]).zone()||this.zone()<b([this.year(),5]).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return a==null?b:this.add({d:a-b})},startOf:function(a){switch(a.replace(/s$/,"")){case"year":this.month(0);case"month":this.date(1);case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return this},endOf:function(a){return this.startOf(a).add(a.replace(/s?$/,"s"),1).subtract("ms",1)},sod:function(){return this.clone().startOf("day")},eod:function(){return this.clone().endOf("day")},zone:function(){return this._isUTC?0:this._d.getTimezoneOffset()},daysInMonth:function(){return b.utc([this.year(),this.month()+1,0]).date()},lang:function(b){return b===a?Q(this):(this._lang=b,this)}};for(e=0;e<y.length;e++)_(y[e].toLowerCase(),y[e]);_("year","FullYear"),b.duration.fn=I.prototype={weeks:function(){return J(this.days()/7)},valueOf:function(){return this._milliseconds+this._days*864e5+this._months*2592e6},humanize:function(a){var b=+this,c=this.lang().relativeTime,d=$(b,!a,this.lang()),e=b<=0?c.past:c.future;return a&&(typeof e=="function"?d=e(d):d=e.replace(/%s/i,d)),d},lang:b.fn.lang};for(e in z)z.hasOwnProperty(e)&&(bb(e,z[e]),ab(e.toLowerCase()));bb("Weeks",6048e5),h&&(module.exports=b),typeof ender=="undefined"&&(this.moment=b),typeof define=="function"&&define.amd&&define("moment",[],function(){return b})}).call(this);
//     Underscore.js 1.9.2
//     https://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.2';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](https://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define == 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());
//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '2.3.0'

!function(root, String){
  'use strict';

  // Defining helper functions.

  var nativeTrim = String.prototype.trim;
  var nativeTrimRight = String.prototype.trimRight;
  var nativeTrimLeft = String.prototype.trimLeft;

  var parseNumber = function(source) { return source * 1 || 0; };

  var strRepeat = function(str, qty){
    if (qty < 1) return '';
    var result = '';
    while (qty > 0) {
      if (qty & 1) result += str;
      qty >>= 1, str += str;
    }
    return result;
  };

  var slice = [].slice;

  var defaultToWhiteSpace = function(characters) {
    if (characters == null)
      return '\\s';
    else if (characters.source)
      return characters.source;
    else
      return '[' + _s.escapeRegExp(characters) + ']';
  };

  var escapeChars = {
    lt: '<',
    gt: '>',
    quot: '"',
    apos: "'",
    amp: '&'
  };

  var reversedEscapeChars = {};
  for(var key in escapeChars){ reversedEscapeChars[escapeChars[key]] = key; }

  // sprintf() for JavaScript 0.7-beta1
  // http://www.diveintojavascript.com/projects/javascript-sprintf
  //
  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
  // All rights reserved.

  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }

    var str_repeat = strRepeat;

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          } else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
          }
          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw new Error('[_.sprintf] huh?');
                }
              }
            }
            else {
              throw new Error('[_.sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw new Error('[_.sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();



  // Defining underscore.string

  var _s = {

    VERSION: '2.3.0',

    isBlank: function(str){
      if (str == null) str = '';
      return (/^\s*$/).test(str);
    },

    stripTags: function(str){
      if (str == null) return '';
      return String(str).replace(/<\/?[^>]+>/g, '');
    },

    capitalize : function(str){
      str = str == null ? '' : String(str);
      return str.charAt(0).toUpperCase() + str.slice(1);
    },

    chop: function(str, step){
      if (str == null) return [];
      str = String(str);
      step = ~~step;
      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
    },

    clean: function(str){
      return _s.strip(str).replace(/\s+/g, ' ');
    },

    count: function(str, substr){
      if (str == null || substr == null) return 0;
      return String(str).split(substr).length - 1;
    },

    chars: function(str) {
      if (str == null) return [];
      return String(str).split('');
    },

    swapCase: function(str) {
      if (str == null) return '';
      return String(str).replace(/\S/g, function(c){
        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
      });
    },

    escapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/[&<>"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });
    },

    unescapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/\&([^;]+);/g, function(entity, entityCode){
        var match;

        if (entityCode in escapeChars) {
          return escapeChars[entityCode];
        } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
          return String.fromCharCode(parseInt(match[1], 16));
        } else if (match = entityCode.match(/^#(\d+)$/)) {
          return String.fromCharCode(~~match[1]);
        } else {
          return entity;
        }
      });
    },

    escapeRegExp: function(str){
      if (str == null) return '';
      return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    },

    splice: function(str, i, howmany, substr){
      var arr = _s.chars(str);
      arr.splice(~~i, ~~howmany, substr);
      return arr.join('');
    },

    insert: function(str, i, substr){
      return _s.splice(str, i, 0, substr);
    },

    include: function(str, needle){
      if (needle === '') return true;
      if (str == null) return false;
      return String(str).indexOf(needle) !== -1;
    },

    join: function() {
      var args = slice.call(arguments),
        separator = args.shift();

      if (separator == null) separator = '';

      return args.join(separator);
    },

    lines: function(str) {
      if (str == null) return [];
      return String(str).split("\n");
    },

    reverse: function(str){
      return _s.chars(str).reverse().join('');
    },

    startsWith: function(str, starts){
      if (starts === '') return true;
      if (str == null || starts == null) return false;
      str = String(str); starts = String(starts);
      return str.length >= starts.length && str.slice(0, starts.length) === starts;
    },

    endsWith: function(str, ends){
      if (ends === '') return true;
      if (str == null || ends == null) return false;
      str = String(str); ends = String(ends);
      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;
    },

    succ: function(str){
      if (str == null) return '';
      str = String(str);
      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);
    },

    titleize: function(str){
      if (str == null) return '';
      return String(str).replace(/(?:^|\s)\S/g, function(c){ return c.toUpperCase(); });
    },

    camelize: function(str){
      return _s.trim(str).replace(/[-_\s]+(.)?/g, function(match, c){ return c.toUpperCase(); });
    },

    underscored: function(str){
      return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },

    dasherize: function(str){
      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
    },

    classify: function(str){
      return _s.titleize(String(str).replace(/_/g, ' ')).replace(/\s/g, '');
    },

    humanize: function(str){
      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));
    },

    trim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrim) return nativeTrim.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('\^' + characters + '+|' + characters + '+$', 'g'), '');
    },

    ltrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('^' + characters + '+'), '');
    },

    rtrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp(characters + '+$'), '');
    },

    truncate: function(str, length, truncateStr){
      if (str == null) return '';
      str = String(str); truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    },

    /**
     * _s.prune: a more elegant version of truncate
     * prune extra chars, never leaving a half-chopped word.
     * @author github.com/rwz
     */
    prune: function(str, length, pruneStr){
      if (str == null) return '';

      str = String(str); length = ~~length;
      pruneStr = pruneStr != null ? String(pruneStr) : '...';

      if (str.length <= length) return str;

      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },
        template = str.slice(0, length+1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

      if (template.slice(template.length-2).match(/\w\w/))
        template = template.replace(/\s*\S+$/, '');
      else
        template = _s.rtrim(template.slice(0, template.length-1));

      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;
    },

    words: function(str, delimiter) {
      if (_s.isBlank(str)) return [];
      return _s.trim(str, delimiter).split(delimiter || /\s+/);
    },

    pad: function(str, length, padStr, type) {
      str = str == null ? '' : String(str);
      length = ~~length;

      var padlen  = 0;

      if (!padStr)
        padStr = ' ';
      else if (padStr.length > 1)
        padStr = padStr.charAt(0);

      switch(type) {
        case 'right':
          padlen = length - str.length;
          return str + strRepeat(padStr, padlen);
        case 'both':
          padlen = length - str.length;
          return strRepeat(padStr, Math.ceil(padlen/2)) + str
                  + strRepeat(padStr, Math.floor(padlen/2));
        default: // 'left'
          padlen = length - str.length;
          return strRepeat(padStr, padlen) + str;
        }
    },

    lpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr);
    },

    rpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'right');
    },

    lrpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'both');
    },

    sprintf: sprintf,

    vsprintf: function(fmt, argv){
      argv.unshift(fmt);
      return sprintf.apply(null, argv);
    },

    toNumber: function(str, decimals) {
      if (str == null || str == '') return 0;
      str = String(str);
      var num = parseNumber(parseNumber(str).toFixed(~~decimals));
      return num === 0 && !str.match(/^0+$/) ? Number.NaN : num;
    },

    numberFormat : function(number, dec, dsep, tsep) {
      if (isNaN(number) || number == null) return '';

      number = number.toFixed(~~dec);
      tsep = tsep || ',';

      var parts = number.split('.'), fnums = parts[0],
        decimals = parts[1] ? (dsep || '.') + parts[1] : '';

      return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
    },

    strRight: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strRightBack: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.lastIndexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strLeft: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    strLeftBack: function(str, sep){
      if (str == null) return '';
      str += ''; sep = sep != null ? ''+sep : sep;
      var pos = str.lastIndexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    toSentence: function(array, separator, lastSeparator, serial) {
      separator = separator || ', '
      lastSeparator = lastSeparator || ' and '
      var a = array.slice(), lastMember = a.pop();

      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;

      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
    },

    toSentenceSerial: function() {
      var args = slice.call(arguments);
      args[3] = true;
      return _s.toSentence.apply(_s, args);
    },

    slugify: function(str) {
      if (str == null) return '';

      var from  = "Ä…Ã Ã¡Ã¤Ã¢Ã£Ã¥Ã¦Ä‡Ä™Ã¨Ã©Ã«ÃªÃ¬Ã­Ã¯Ã®Å‚Å„Ã²Ã³Ã¶Ã´ÃµÃ¸Ã¹ÃºÃ¼Ã»Ã±Ã§Å¼Åº",
          to    = "aaaaaaaaceeeeeiiiilnoooooouuuunczz",
          regex = new RegExp(defaultToWhiteSpace(from), 'g');

      str = String(str).toLowerCase().replace(regex, function(c){
        var index = from.indexOf(c);
        return to.charAt(index) || '-';
      });

      return _s.dasherize(str.replace(/[^\w\s-]/g, ''));
    },

    surround: function(str, wrapper) {
      return [wrapper, str, wrapper].join('');
    },

    quote: function(str) {
      return _s.surround(str, '"');
    },

    exports: function() {
      var result = {};

      for (var prop in this) {
        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;
        result[prop] = this[prop];
      }

      return result;
    },

    repeat: function(str, qty, separator){
      if (str == null) return '';

      qty = ~~qty;

      // using faster implementation if separator is not needed;
      if (separator == null) return strRepeat(String(str), qty);

      // this one is about 300x slower in Google Chrome
      for (var repeat = []; qty > 0; repeat[--qty] = str) {}
      return repeat.join(separator);
    },

    levenshtein: function(str1, str2) {
      if (str1 == null && str2 == null) return 0;
      if (str1 == null) return String(str2).length;
      if (str2 == null) return String(str1).length;

      str1 = String(str1); str2 = String(str2);

      var current = [], prev, value;

      for (var i = 0; i <= str2.length; i++)
        for (var j = 0; j <= str1.length; j++) {
          if (i && j)
            if (str1.charAt(j - 1) === str2.charAt(i - 1))
              value = prev;
            else
              value = Math.min(current[j], current[j - 1], prev) + 1;
          else
            value = i + j;

          prev = current[j];
          current[j] = value;
        }

      return current.pop();
    }
  };

  // Aliases

  _s.strip    = _s.trim;
  _s.lstrip   = _s.ltrim;
  _s.rstrip   = _s.rtrim;
  _s.center   = _s.lrpad;
  _s.rjust    = _s.lpad;
  _s.ljust    = _s.rpad;
  _s.contains = _s.include;
  _s.q        = _s.quote;

  // CommonJS module is defined
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      // Export module
      module.exports = _s;
    }
    exports._s = _s;

  } else if (typeof define === 'function' && define.amd) {
    // Register as a named module with AMD.
    define('underscore.string', [], function() {
      return _s;
    });

  } else {
    // Integrate with Underscore.js if defined
    // or create our own underscore object.
    root._ = root._ || {};
    root._.string = root._.str = _s;
  }

}(this, String);
//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

    // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore');
    factory(root, exports, _);

    // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

          // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
    !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
        .replace(optionalParam, '(?:$1)?')
        .replace(namedParam, function(match, optional) {
          return optional ? match : '([^/?]+)';
        })
        .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

          // Or if we've started out with a hash-based route, but we're currently
          // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

        // If hash changes haven't been explicitly disabled, update the hash
        // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

        // If you've told us that you explicitly don't want fallback hashchange-
        // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));
(function() {

  _.templateSettings = {
    evaluate: /\{%([\s\S]+?)%\}/g,
    escape: /\{\{([\s\S]+?)\}\}/g
  };

}).call(this);
// MarionetteJS (Backbone.Marionette)
// ----------------------------------
// v2.4.1
//
// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://marionettejs.com


/*!
 * Includes BabySitter
 * https://github.com/marionettejs/backbone.babysitter/
 *
 * Includes Wreqr
 * https://github.com/marionettejs/backbone.wreqr/
 */



(function(root, factory) {

  /* istanbul ignore next */
  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore'], function(Backbone, _) {
      return (root.Marionette = root.Mn = factory(root, Backbone, _));
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(root, Backbone, _);
  } else {
    root.Marionette = root.Mn = factory(root, root.Backbone, root._);
  }

}(this, function(root, Backbone, _) {
  'use strict';

  /* istanbul ignore next */
  // Backbone.BabySitter
  // -------------------
  // v0.1.6
  //
  // Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.
  // Distributed under MIT license
  //
  // http://github.com/marionettejs/backbone.babysitter
  (function(Backbone, _) {
    "use strict";
    var previousChildViewContainer = Backbone.ChildViewContainer;
    // BabySitter.ChildViewContainer
    // -----------------------------
    //
    // Provide a container to store, retrieve and
    // shut down child views.
    Backbone.ChildViewContainer = function(Backbone, _) {
      // Container Constructor
      // ---------------------
      var Container = function(views) {
        this._views = {};
        this._indexByModel = {};
        this._indexByCustom = {};
        this._updateLength();
        _.each(views, this.add, this);
      };
      // Container Methods
      // -----------------
      _.extend(Container.prototype, {
        // Add a view to this container. Stores the view
        // by `cid` and makes it searchable by the model
        // cid (and model itself). Optionally specify
        // a custom key to store an retrieve the view.
        add: function(view, customIndex) {
          var viewCid = view.cid;
          // store the view
          this._views[viewCid] = view;
          // index it by model
          if (view.model) {
            this._indexByModel[view.model.cid] = viewCid;
          }
          // index by custom
          if (customIndex) {
            this._indexByCustom[customIndex] = viewCid;
          }
          this._updateLength();
          return this;
        },
        // Find a view by the model that was attached to
        // it. Uses the model's `cid` to find it.
        findByModel: function(model) {
          return this.findByModelCid(model.cid);
        },
        // Find a view by the `cid` of the model that was attached to
        // it. Uses the model's `cid` to find the view `cid` and
        // retrieve the view using it.
        findByModelCid: function(modelCid) {
          var viewCid = this._indexByModel[modelCid];
          return this.findByCid(viewCid);
        },
        // Find a view by a custom indexer.
        findByCustom: function(index) {
          var viewCid = this._indexByCustom[index];
          return this.findByCid(viewCid);
        },
        // Find by index. This is not guaranteed to be a
        // stable index.
        findByIndex: function(index) {
          return _.values(this._views)[index];
        },
        // retrieve a view by its `cid` directly
        findByCid: function(cid) {
          return this._views[cid];
        },
        // Remove a view
        remove: function(view) {
          var viewCid = view.cid;
          // delete model index
          if (view.model) {
            delete this._indexByModel[view.model.cid];
          }
          // delete custom index
          _.any(this._indexByCustom, function(cid, key) {
            if (cid === viewCid) {
              delete this._indexByCustom[key];
              return true;
            }
          }, this);
          // remove the view from the container
          delete this._views[viewCid];
          // update the length
          this._updateLength();
          return this;
        },
        // Call a method on every view in the container,
        // passing parameters to the call method one at a
        // time, like `function.call`.
        call: function(method) {
          this.apply(method, _.tail(arguments));
        },
        // Apply a method on every view in the container,
        // passing parameters to the call method one at a
        // time, like `function.apply`.
        apply: function(method, args) {
          _.each(this._views, function(view) {
            if (_.isFunction(view[method])) {
              view[method].apply(view, args || []);
            }
          });
        },
        // Update the `.length` attribute on this container
        _updateLength: function() {
          this.length = _.size(this._views);
        }
      });
      // Borrowing this code from Backbone.Collection:
      // http://backbonejs.org/docs/backbone.html#section-106
      //
      // Mix in methods from Underscore, for iteration, and other
      // collection related features.
      var methods = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck", "reduce" ];
      _.each(methods, function(method) {
        Container.prototype[method] = function() {
          var views = _.values(this._views);
          var args = [ views ].concat(_.toArray(arguments));
          return _[method].apply(_, args);
        };
      });
      // return the public API
      return Container;
    }(Backbone, _);
    Backbone.ChildViewContainer.VERSION = "0.1.6";
    Backbone.ChildViewContainer.noConflict = function() {
      Backbone.ChildViewContainer = previousChildViewContainer;
      return this;
    };
    return Backbone.ChildViewContainer;
  })(Backbone, _);

  /* istanbul ignore next */
  // Backbone.Wreqr (Backbone.Marionette)
  // ----------------------------------
  // v1.3.1
  //
  // Copyright (c)2014 Derick Bailey, Muted Solutions, LLC.
  // Distributed under MIT license
  //
  // http://github.com/marionettejs/backbone.wreqr
  (function(Backbone, _) {
    "use strict";
    var previousWreqr = Backbone.Wreqr;
    var Wreqr = Backbone.Wreqr = {};
    Backbone.Wreqr.VERSION = "1.3.1";
    Backbone.Wreqr.noConflict = function() {
      Backbone.Wreqr = previousWreqr;
      return this;
    };
    // Handlers
    // --------
    // A registry of functions to call, given a name
    Wreqr.Handlers = function(Backbone, _) {
      "use strict";
      // Constructor
      // -----------
      var Handlers = function(options) {
        this.options = options;
        this._wreqrHandlers = {};
        if (_.isFunction(this.initialize)) {
          this.initialize(options);
        }
      };
      Handlers.extend = Backbone.Model.extend;
      // Instance Members
      // ----------------
      _.extend(Handlers.prototype, Backbone.Events, {
        // Add multiple handlers using an object literal configuration
        setHandlers: function(handlers) {
          _.each(handlers, function(handler, name) {
            var context = null;
            if (_.isObject(handler) && !_.isFunction(handler)) {
              context = handler.context;
              handler = handler.callback;
            }
            this.setHandler(name, handler, context);
          }, this);
        },
        // Add a handler for the given name, with an
        // optional context to run the handler within
        setHandler: function(name, handler, context) {
          var config = {
            callback: handler,
            context: context
          };
          this._wreqrHandlers[name] = config;
          this.trigger("handler:add", name, handler, context);
        },
        // Determine whether or not a handler is registered
        hasHandler: function(name) {
          return !!this._wreqrHandlers[name];
        },
        // Get the currently registered handler for
        // the specified name. Throws an exception if
        // no handler is found.
        getHandler: function(name) {
          var config = this._wreqrHandlers[name];
          if (!config) {
            return;
          }
          return function() {
            var args = Array.prototype.slice.apply(arguments);
            return config.callback.apply(config.context, args);
          };
        },
        // Remove a handler for the specified name
        removeHandler: function(name) {
          delete this._wreqrHandlers[name];
        },
        // Remove all handlers from this registry
        removeAllHandlers: function() {
          this._wreqrHandlers = {};
        }
      });
      return Handlers;
    }(Backbone, _);
    // Wreqr.CommandStorage
    // --------------------
    //
    // Store and retrieve commands for execution.
    Wreqr.CommandStorage = function() {
      "use strict";
      // Constructor function
      var CommandStorage = function(options) {
        this.options = options;
        this._commands = {};
        if (_.isFunction(this.initialize)) {
          this.initialize(options);
        }
      };
      // Instance methods
      _.extend(CommandStorage.prototype, Backbone.Events, {
        // Get an object literal by command name, that contains
        // the `commandName` and the `instances` of all commands
        // represented as an array of arguments to process
        getCommands: function(commandName) {
          var commands = this._commands[commandName];
          // we don't have it, so add it
          if (!commands) {
            // build the configuration
            commands = {
              command: commandName,
              instances: []
            };
            // store it
            this._commands[commandName] = commands;
          }
          return commands;
        },
        // Add a command by name, to the storage and store the
        // args for the command
        addCommand: function(commandName, args) {
          var command = this.getCommands(commandName);
          command.instances.push(args);
        },
        // Clear all commands for the given `commandName`
        clearCommands: function(commandName) {
          var command = this.getCommands(commandName);
          command.instances = [];
        }
      });
      return CommandStorage;
    }();
    // Wreqr.Commands
    // --------------
    //
    // A simple command pattern implementation. Register a command
    // handler and execute it.
    Wreqr.Commands = function(Wreqr) {
      "use strict";
      return Wreqr.Handlers.extend({
        // default storage type
        storageType: Wreqr.CommandStorage,
        constructor: function(options) {
          this.options = options || {};
          this._initializeStorage(this.options);
          this.on("handler:add", this._executeCommands, this);
          var args = Array.prototype.slice.call(arguments);
          Wreqr.Handlers.prototype.constructor.apply(this, args);
        },
        // Execute a named command with the supplied args
        execute: function(name, args) {
          name = arguments[0];
          args = Array.prototype.slice.call(arguments, 1);
          if (this.hasHandler(name)) {
            this.getHandler(name).apply(this, args);
          } else {
            this.storage.addCommand(name, args);
          }
        },
        // Internal method to handle bulk execution of stored commands
        _executeCommands: function(name, handler, context) {
          var command = this.storage.getCommands(name);
          // loop through and execute all the stored command instances
          _.each(command.instances, function(args) {
            handler.apply(context, args);
          });
          this.storage.clearCommands(name);
        },
        // Internal method to initialize storage either from the type's
        // `storageType` or the instance `options.storageType`.
        _initializeStorage: function(options) {
          var storage;
          var StorageType = options.storageType || this.storageType;
          if (_.isFunction(StorageType)) {
            storage = new StorageType();
          } else {
            storage = StorageType;
          }
          this.storage = storage;
        }
      });
    }(Wreqr);
    // Wreqr.RequestResponse
    // ---------------------
    //
    // A simple request/response implementation. Register a
    // request handler, and return a response from it
    Wreqr.RequestResponse = function(Wreqr) {
      "use strict";
      return Wreqr.Handlers.extend({
        request: function() {
          var name = arguments[0];
          var args = Array.prototype.slice.call(arguments, 1);
          if (this.hasHandler(name)) {
            return this.getHandler(name).apply(this, args);
          }
        }
      });
    }(Wreqr);
    // Event Aggregator
    // ----------------
    // A pub-sub object that can be used to decouple various parts
    // of an application through event-driven architecture.
    Wreqr.EventAggregator = function(Backbone, _) {
      "use strict";
      var EA = function() {};
      // Copy the `extend` function used by Backbone's classes
      EA.extend = Backbone.Model.extend;
      // Copy the basic Backbone.Events on to the event aggregator
      _.extend(EA.prototype, Backbone.Events);
      return EA;
    }(Backbone, _);
    // Wreqr.Channel
    // --------------
    //
    // An object that wraps the three messaging systems:
    // EventAggregator, RequestResponse, Commands
    Wreqr.Channel = function(Wreqr) {
      "use strict";
      var Channel = function(channelName) {
        this.vent = new Backbone.Wreqr.EventAggregator();
        this.reqres = new Backbone.Wreqr.RequestResponse();
        this.commands = new Backbone.Wreqr.Commands();
        this.channelName = channelName;
      };
      _.extend(Channel.prototype, {
        // Remove all handlers from the messaging systems of this channel
        reset: function() {
          this.vent.off();
          this.vent.stopListening();
          this.reqres.removeAllHandlers();
          this.commands.removeAllHandlers();
          return this;
        },
        // Connect a hash of events; one for each messaging system
        connectEvents: function(hash, context) {
          this._connect("vent", hash, context);
          return this;
        },
        connectCommands: function(hash, context) {
          this._connect("commands", hash, context);
          return this;
        },
        connectRequests: function(hash, context) {
          this._connect("reqres", hash, context);
          return this;
        },
        // Attach the handlers to a given message system `type`
        _connect: function(type, hash, context) {
          if (!hash) {
            return;
          }
          context = context || this;
          var method = type === "vent" ? "on" : "setHandler";
          _.each(hash, function(fn, eventName) {
            this[type][method](eventName, _.bind(fn, context));
          }, this);
        }
      });
      return Channel;
    }(Wreqr);
    // Wreqr.Radio
    // --------------
    //
    // An object that lets you communicate with many channels.
    Wreqr.radio = function(Wreqr) {
      "use strict";
      var Radio = function() {
        this._channels = {};
        this.vent = {};
        this.commands = {};
        this.reqres = {};
        this._proxyMethods();
      };
      _.extend(Radio.prototype, {
        channel: function(channelName) {
          if (!channelName) {
            throw new Error("Channel must receive a name");
          }
          return this._getChannel(channelName);
        },
        _getChannel: function(channelName) {
          var channel = this._channels[channelName];
          if (!channel) {
            channel = new Wreqr.Channel(channelName);
            this._channels[channelName] = channel;
          }
          return channel;
        },
        _proxyMethods: function() {
          _.each([ "vent", "commands", "reqres" ], function(system) {
            _.each(messageSystems[system], function(method) {
              this[system][method] = proxyMethod(this, system, method);
            }, this);
          }, this);
        }
      });
      var messageSystems = {
        vent: [ "on", "off", "trigger", "once", "stopListening", "listenTo", "listenToOnce" ],
        commands: [ "execute", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers" ],
        reqres: [ "request", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers" ]
      };
      var proxyMethod = function(radio, system, method) {
        return function(channelName) {
          var messageSystem = radio._getChannel(channelName)[system];
          var args = Array.prototype.slice.call(arguments, 1);
          return messageSystem[method].apply(messageSystem, args);
        };
      };
      return new Radio();
    }(Wreqr);
    return Backbone.Wreqr;
  })(Backbone, _);

  var previousMarionette = root.Marionette;
  var previousMn = root.Mn;

  var Marionette = Backbone.Marionette = {};

  Marionette.VERSION = '2.4.1';

  Marionette.noConflict = function() {
    root.Marionette = previousMarionette;
    root.Mn = previousMn;
    return this;
  };

  Backbone.Marionette = Marionette;

  // Get the Deferred creator for later use
  Marionette.Deferred = Backbone.$.Deferred;

  /* jshint unused: false *//* global console */

  // Helpers
  // -------

  // Marionette.extend
  // -----------------

  // Borrow the Backbone `extend` method so we can use it as needed
  Marionette.extend = Backbone.Model.extend;

  // Marionette.isNodeAttached
  // -------------------------

  // Determine if `el` is a child of the document
  Marionette.isNodeAttached = function(el) {
    return Backbone.$.contains(document.documentElement, el);
  };

  // Merge `keys` from `options` onto `this`
  Marionette.mergeOptions = function(options, keys) {
    if (!options) { return; }
    _.extend(this, _.pick(options, keys));
  };

  // Marionette.getOption
  // --------------------

  // Retrieve an object, function or other value from a target
  // object or its `options`, with `options` taking precedence.
  Marionette.getOption = function(target, optionName) {
    if (!target || !optionName) { return; }
    if (target.options && (target.options[optionName] !== undefined)) {
      return target.options[optionName];
    } else {
      return target[optionName];
    }
  };

  // Proxy `Marionette.getOption`
  Marionette.proxyGetOption = function(optionName) {
    return Marionette.getOption(this, optionName);
  };

  // Similar to `_.result`, this is a simple helper
  // If a function is provided we call it with context
  // otherwise just return the value. If the value is
  // undefined return a default value
  Marionette._getValue = function(value, context, params) {
    if (_.isFunction(value)) {
      value = params ? value.apply(context, params) : value.call(context);
    }
    return value;
  };

  // Marionette.normalizeMethods
  // ----------------------

  // Pass in a mapping of events => functions or function names
  // and return a mapping of events => functions
  Marionette.normalizeMethods = function(hash) {
    return _.reduce(hash, function(normalizedHash, method, name) {
      if (!_.isFunction(method)) {
        method = this[method];
      }
      if (method) {
        normalizedHash[name] = method;
      }
      return normalizedHash;
    }, {}, this);
  };

  // utility method for parsing @ui. syntax strings
  // into associated selector
  Marionette.normalizeUIString = function(uiString, ui) {
    return uiString.replace(/@ui\.[a-zA-Z_$0-9]*/g, function(r) {
      return ui[r.slice(4)];
    });
  };

  // allows for the use of the @ui. syntax within
  // a given key for triggers and events
  // swaps the @ui with the associated selector.
  // Returns a new, non-mutated, parsed events hash.
  Marionette.normalizeUIKeys = function(hash, ui) {
    return _.reduce(hash, function(memo, val, key) {
      var normalizedKey = Marionette.normalizeUIString(key, ui);
      memo[normalizedKey] = val;
      return memo;
    }, {});
  };

  // allows for the use of the @ui. syntax within
  // a given value for regions
  // swaps the @ui with the associated selector
  Marionette.normalizeUIValues = function(hash, ui, properties) {
    _.each(hash, function(val, key) {
      if (_.isString(val)) {
        hash[key] = Marionette.normalizeUIString(val, ui);
      } else if (_.isObject(val) && _.isArray(properties)) {
        _.extend(val, Marionette.normalizeUIValues(_.pick(val, properties), ui));
        /* Value is an object, and we got an array of embedded property names to normalize. */
        _.each(properties, function(property) {
          var propertyVal = val[property];
          if (_.isString(propertyVal)) {
            val[property] = Marionette.normalizeUIString(propertyVal, ui);
          }
        });
      }
    });
    return hash;
  };

  // Mix in methods from Underscore, for iteration, and other
  // collection related features.
  // Borrowing this code from Backbone.Collection:
  // http://backbonejs.org/docs/backbone.html#section-121
  Marionette.actAsCollection = function(object, listProperty) {
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck'];

    _.each(methods, function(method) {
      object[method] = function() {
        var list = _.values(_.result(this, listProperty));
        var args = [list].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  };

  var deprecate = Marionette.deprecate = function(message, test) {
    if (_.isObject(message)) {
      message = (
      message.prev + ' is going to be removed in the future. ' +
      'Please use ' + message.next + ' instead.' +
      (message.url ? ' See: ' + message.url : '')
      );
    }

    if ((test === undefined || !test) && !deprecate._cache[message]) {
      deprecate._warn('Deprecation warning: ' + message);
      deprecate._cache[message] = true;
    }
  };

  deprecate._warn = typeof console !== 'undefined' && (console.warn || console.log) || function() {};
  deprecate._cache = {};

  /* jshint maxstatements: 14, maxcomplexity: 7 */

  // Trigger Method
  // --------------

  Marionette._triggerMethod = (function() {
    // split the event name on the ":"
    var splitter = /(^|:)(\w)/gi;

    // take the event section ("section1:section2:section3")
    // and turn it in to uppercase name
    function getEventName(match, prefix, eventName) {
      return eventName.toUpperCase();
    }

    return function(context, event, args) {
      var noEventArg = arguments.length < 3;
      if (noEventArg) {
        args = event;
        event = args[0];
      }

      // get the method name from the event name
      var methodName = 'on' + event.replace(splitter, getEventName);
      var method = context[methodName];
      var result;

      // call the onMethodName if it exists
      if (_.isFunction(method)) {
        // pass all args, except the event name
        result = method.apply(context, noEventArg ? _.rest(args) : args);
      }

      // trigger the event, if a trigger method exists
      if (_.isFunction(context.trigger)) {
        if (noEventArg + args.length > 1) {
          context.trigger.apply(context, noEventArg ? args : [event].concat(_.drop(args, 0)));
        } else {
          context.trigger(event);
        }
      }

      return result;
    };
  })();

  // Trigger an event and/or a corresponding method name. Examples:
  //
  // `this.triggerMethod("foo")` will trigger the "foo" event and
  // call the "onFoo" method.
  //
  // `this.triggerMethod("foo:bar")` will trigger the "foo:bar" event and
  // call the "onFooBar" method.
  Marionette.triggerMethod = function(event) {
    return Marionette._triggerMethod(this, arguments);
  };

  // triggerMethodOn invokes triggerMethod on a specific context
  //
  // e.g. `Marionette.triggerMethodOn(view, 'show')`
  // will trigger a "show" event or invoke onShow the view.
  Marionette.triggerMethodOn = function(context) {
    var fnc = _.isFunction(context.triggerMethod) ?
      context.triggerMethod :
      Marionette.triggerMethod;

    return fnc.apply(context, _.rest(arguments));
  };

  // DOM Refresh
  // -----------

  // Monitor a view's state, and after it has been rendered and shown
  // in the DOM, trigger a "dom:refresh" event every time it is
  // re-rendered.

  Marionette.MonitorDOMRefresh = function(view) {

    // track when the view has been shown in the DOM,
    // using a Marionette.Region (or by other means of triggering "show")
    function handleShow() {
      view._isShown = true;
      triggerDOMRefresh();
    }

    // track when the view has been rendered
    function handleRender() {
      view._isRendered = true;
      triggerDOMRefresh();
    }

    // Trigger the "dom:refresh" event and corresponding "onDomRefresh" method
    function triggerDOMRefresh() {
      if (view._isShown && view._isRendered && Marionette.isNodeAttached(view.el)) {
        if (_.isFunction(view.triggerMethod)) {
          view.triggerMethod('dom:refresh');
        }
      }
    }

    view.on({
      show: handleShow,
      render: handleRender
    });
  };

  /* jshint maxparams: 5 */

  // Bind Entity Events & Unbind Entity Events
  // -----------------------------------------
  //
  // These methods are used to bind/unbind a backbone "entity" (e.g. collection/model)
  // to methods on a target object.
  //
  // The first parameter, `target`, must have the Backbone.Events module mixed in.
  //
  // The second parameter is the `entity` (Backbone.Model, Backbone.Collection or
  // any object that has Backbone.Events mixed in) to bind the events from.
  //
  // The third parameter is a hash of { "event:name": "eventHandler" }
  // configuration. Multiple handlers can be separated by a space. A
  // function can be supplied instead of a string handler name.

  (function(Marionette) {
    'use strict';

    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function bindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);

      _.each(methodNames, function(methodName) {

        var method = target[methodName];
        if (!method) {
          throw new Marionette.Error('Method "' + methodName +
          '" was configured as an event handler, but does not exist.');
        }

        target.listenTo(entity, evt, method);
      });
    }

    // Bind the event to a supplied callback function
    function bindToFunction(target, entity, evt, method) {
      target.listenTo(entity, evt, method);
    }

    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function unbindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);

      _.each(methodNames, function(methodName) {
        var method = target[methodName];
        target.stopListening(entity, evt, method);
      });
    }

    // Bind the event to a supplied callback function
    function unbindToFunction(target, entity, evt, method) {
      target.stopListening(entity, evt, method);
    }

    // generic looping function
    function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
      if (!entity || !bindings) { return; }

      // type-check bindings
      if (!_.isObject(bindings)) {
        throw new Marionette.Error({
          message: 'Bindings must be an object or function.',
          url: 'marionette.functions.html#marionettebindentityevents'
        });
      }

      // allow the bindings to be a function
      bindings = Marionette._getValue(bindings, target);

      // iterate the bindings and bind them
      _.each(bindings, function(methods, evt) {

        // allow for a function as the handler,
        // or a list of event names as a string
        if (_.isFunction(methods)) {
          functionCallback(target, entity, evt, methods);
        } else {
          stringCallback(target, entity, evt, methods);
        }

      });
    }

    // Export Public API
    Marionette.bindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
    };

    Marionette.unbindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
    };

    // Proxy `bindEntityEvents`
    Marionette.proxyBindEntityEvents = function(entity, bindings) {
      return Marionette.bindEntityEvents(this, entity, bindings);
    };

    // Proxy `unbindEntityEvents`
    Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
      return Marionette.unbindEntityEvents(this, entity, bindings);
    };
  })(Marionette);


  // Error
  // -----

  var errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];

  Marionette.Error = Marionette.extend.call(Error, {
    urlRoot: 'http://marionettejs.com/docs/v' + Marionette.VERSION + '/',

    constructor: function(message, options) {
      if (_.isObject(message)) {
        options = message;
        message = options.message;
      } else if (!options) {
        options = {};
      }

      var error = Error.call(this, message);
      _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));

      this.captureStackTrace();

      if (options.url) {
        this.url = this.urlRoot + options.url;
      }
    },

    captureStackTrace: function() {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, Marionette.Error);
      }
    },

    toString: function() {
      return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');
    }
  });

  Marionette.Error.extend = Marionette.extend;

  // Callbacks
  // ---------

  // A simple way of managing a collection of callbacks
  // and executing them at a later point in time, using jQuery's
  // `Deferred` object.
  Marionette.Callbacks = function() {
    this._deferred = Marionette.Deferred();
    this._callbacks = [];
  };

  _.extend(Marionette.Callbacks.prototype, {

    // Add a callback to be executed. Callbacks added here are
    // guaranteed to execute, even if they are added after the
    // `run` method is called.
    add: function(callback, contextOverride) {
      var promise = _.result(this._deferred, 'promise');

      this._callbacks.push({cb: callback, ctx: contextOverride});

      promise.then(function(args) {
        if (contextOverride) { args.context = contextOverride; }
        callback.call(args.context, args.options);
      });
    },

    // Run all registered callbacks with the context specified.
    // Additional callbacks can be added after this has been run
    // and they will still be executed.
    run: function(options, context) {
      this._deferred.resolve({
        options: options,
        context: context
      });
    },

    // Resets the list of callbacks to be run, allowing the same list
    // to be run multiple times - whenever the `run` method is called.
    reset: function() {
      var callbacks = this._callbacks;
      this._deferred = Marionette.Deferred();
      this._callbacks = [];

      _.each(callbacks, function(cb) {
        this.add(cb.cb, cb.ctx);
      }, this);
    }
  });

  // Controller
  // ----------

  // A multi-purpose object to use as a controller for
  // modules and routers, and as a mediator for workflow
  // and coordination of other objects, views, and more.
  Marionette.Controller = function(options) {
    this.options = options || {};

    if (_.isFunction(this.initialize)) {
      this.initialize(this.options);
    }
  };

  Marionette.Controller.extend = Marionette.extend;

  // Controller Methods
  // --------------

  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Controller.prototype, Backbone.Events, {
    destroy: function() {
      Marionette._triggerMethod(this, 'before:destroy', arguments);
      Marionette._triggerMethod(this, 'destroy', arguments);

      this.stopListening();
      this.off();
      return this;
    },

    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,

    // A handy way to merge options onto the instance
    mergeOptions: Marionette.mergeOptions,

    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption

  });

  // Object
  // ------

  // A Base Class that other Classes should descend from.
  // Object borrows many conventions and utilities from Backbone.
  Marionette.Object = function(options) {
    this.options = _.extend({}, _.result(this, 'options'), options);

    this.initialize.apply(this, arguments);
  };

  Marionette.Object.extend = Marionette.extend;

  // Object Methods
  // --------------

  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Object.prototype, Backbone.Events, {

    //this is a noop method intended to be overridden by classes that extend from this base
    initialize: function() {},

    destroy: function() {
      this.triggerMethod('before:destroy');
      this.triggerMethod('destroy');
      this.stopListening();

      return this;
    },

    // Import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,

    // A handy way to merge options onto the instance
    mergeOptions: Marionette.mergeOptions,

    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,

    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,

    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });

  /* jshint maxcomplexity: 16, maxstatements: 45, maxlen: 120 */

  // Region
  // ------

  // Manage the visual regions of your composite application. See
  // http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/

  Marionette.Region = Marionette.Object.extend({
      constructor: function(options) {

        // set options temporarily so that we can get `el`.
        // options will be overriden by Object.constructor
        this.options = options || {};
        this.el = this.getOption('el');

        // Handle when this.el is passed in as a $ wrapped element.
        this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;

        if (!this.el) {
          throw new Marionette.Error({
            name: 'NoElError',
            message: 'An "el" must be specified for a region.'
          });
        }

        this.$el = this.getEl(this.el);
        Marionette.Object.call(this, options);
      },

      // Displays a backbone view instance inside of the region.
      // Handles calling the `render` method for you. Reads content
      // directly from the `el` attribute. Also calls an optional
      // `onShow` and `onDestroy` method on your view, just after showing
      // or just before destroying the view, respectively.
      // The `preventDestroy` option can be used to prevent a view from
      // the old view being destroyed on show.
      // The `forceShow` option can be used to force a view to be
      // re-rendered if it's already shown in the region.
      show: function(view, options) {
        if (!this._ensureElement()) {
          return;
        }

        this._ensureViewIsIntact(view);

        var showOptions     = options || {};
        var isDifferentView = view !== this.currentView;
        var preventDestroy  = !!showOptions.preventDestroy;
        var forceShow       = !!showOptions.forceShow;

        // We are only changing the view if there is a current view to change to begin with
        var isChangingView = !!this.currentView;

        // Only destroy the current view if we don't want to `preventDestroy` and if
        // the view given in the first argument is different than `currentView`
        var _shouldDestroyView = isDifferentView && !preventDestroy;

        // Only show the view given in the first argument if it is different than
        // the current view or if we want to re-show the view. Note that if
        // `_shouldDestroyView` is true, then `_shouldShowView` is also necessarily true.
        var _shouldShowView = isDifferentView || forceShow;

        if (isChangingView) {
          this.triggerMethod('before:swapOut', this.currentView, this, options);
        }

        if (this.currentView) {
          delete this.currentView._parent;
        }

        if (_shouldDestroyView) {
          this.empty();

          // A `destroy` event is attached to the clean up manually removed views.
          // We need to detach this event when a new view is going to be shown as it
          // is no longer relevant.
        } else if (isChangingView && _shouldShowView) {
          this.currentView.off('destroy', this.empty, this);
        }

        if (_shouldShowView) {

          // We need to listen for if a view is destroyed
          // in a way other than through the region.
          // If this happens we need to remove the reference
          // to the currentView since once a view has been destroyed
          // we can not reuse it.
          view.once('destroy', this.empty, this);
          view.render();

          view._parent = this;

          if (isChangingView) {
            this.triggerMethod('before:swap', view, this, options);
          }

          this.triggerMethod('before:show', view, this, options);
          Marionette.triggerMethodOn(view, 'before:show', view, this, options);

          if (isChangingView) {
            this.triggerMethod('swapOut', this.currentView, this, options);
          }

          // An array of views that we're about to display
          var attachedRegion = Marionette.isNodeAttached(this.el);

          // The views that we're about to attach to the document
          // It's important that we prevent _getNestedViews from being executed unnecessarily
          // as it's a potentially-slow method
          var displayedViews = [];

          var triggerBeforeAttach = showOptions.triggerBeforeAttach || this.triggerBeforeAttach;
          var triggerAttach = showOptions.triggerAttach || this.triggerAttach;

          if (attachedRegion && triggerBeforeAttach) {
            displayedViews = this._displayedViews(view);
            this._triggerAttach(displayedViews, 'before:');
          }

          this.attachHtml(view);
          this.currentView = view;

          if (attachedRegion && triggerAttach) {
            displayedViews = this._displayedViews(view);
            this._triggerAttach(displayedViews);
          }

          if (isChangingView) {
            this.triggerMethod('swap', view, this, options);
          }

          this.triggerMethod('show', view, this, options);
          Marionette.triggerMethodOn(view, 'show', view, this, options);

          return this;
        }

        return this;
      },

      triggerBeforeAttach: true,
      triggerAttach: true,

      _triggerAttach: function(views, prefix) {
        var eventName = (prefix || '') + 'attach';
        _.each(views, function(view) {
          Marionette.triggerMethodOn(view, eventName, view, this);
        }, this);
      },

      _displayedViews: function(view) {
        return _.union([view], _.result(view, '_getNestedViews') || []);
      },

      _ensureElement: function() {
        if (!_.isObject(this.el)) {
          this.$el = this.getEl(this.el);
          this.el = this.$el[0];
        }

        if (!this.$el || this.$el.length === 0) {
          if (this.getOption('allowMissingEl')) {
            return false;
          } else {
            throw new Marionette.Error('An "el" ' + this.$el.selector + ' must exist in DOM');
          }
        }
        return true;
      },

      _ensureViewIsIntact: function(view) {
        if (!view) {
          throw new Marionette.Error({
            name: 'ViewNotValid',
            message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'
          });
        }

        if (view.isDestroyed) {
          throw new Marionette.Error({
            name: 'ViewDestroyedError',
            message: 'View (cid: "' + view.cid + '") has already been destroyed and cannot be used.'
          });
        }
      },

      // Override this method to change how the region finds the DOM
      // element that it manages. Return a jQuery selector object scoped
      // to a provided parent el or the document if none exists.
      getEl: function(el) {
        return Backbone.$(el, Marionette._getValue(this.options.parentEl, this));
      },

      // Override this method to change how the new view is
      // appended to the `$el` that the region is managing
      attachHtml: function(view) {
        this.$el.contents().detach();

        this.el.appendChild(view.el);
      },

      // Destroy the current view, if there is one. If there is no
      // current view, it does nothing and returns immediately.
      empty: function(options) {
        var view = this.currentView;

        var preventDestroy = Marionette._getValue(options, 'preventDestroy', this);
        // If there is no view in the region
        // we should not remove anything
        if (!view) { return; }

        view.off('destroy', this.empty, this);
        this.triggerMethod('before:empty', view);
        if (!preventDestroy) {
          this._destroyView();
        }
        this.triggerMethod('empty', view);

        // Remove region pointer to the currentView
        delete this.currentView;

        if (preventDestroy) {
          this.$el.contents().detach();
        }

        return this;
      },

      // call 'destroy' or 'remove', depending on which is found
      // on the view (if showing a raw Backbone view or a Marionette View)
      _destroyView: function() {
        var view = this.currentView;

        if (view.destroy && !view.isDestroyed) {
          view.destroy();
        } else if (view.remove) {
          view.remove();

          // appending isDestroyed to raw Backbone View allows regions
          // to throw a ViewDestroyedError for this view
          view.isDestroyed = true;
        }
      },

      // Attach an existing view to the region. This
      // will not call `render` or `onShow` for the new view,
      // and will not replace the current HTML for the `el`
      // of the region.
      attachView: function(view) {
        this.currentView = view;
        return this;
      },

      // Checks whether a view is currently present within
      // the region. Returns `true` if there is and `false` if
      // no view is present.
      hasView: function() {
        return !!this.currentView;
      },

      // Reset the region by destroying any existing view and
      // clearing out the cached `$el`. The next time a view
      // is shown via this region, the region will re-query the
      // DOM for the region's `el`.
      reset: function() {
        this.empty();

        if (this.$el) {
          this.el = this.$el.selector;
        }

        delete this.$el;
        return this;
      }

    },

    // Static Methods
    {

      // Build an instance of a region by passing in a configuration object
      // and a default region class to use if none is specified in the config.
      //
      // The config object should either be a string as a jQuery DOM selector,
      // a Region class directly, or an object literal that specifies a selector,
      // a custom regionClass, and any options to be supplied to the region:
      //
      // ```js
      // {
      //   selector: "#foo",
      //   regionClass: MyCustomRegion,
      //   allowMissingEl: false
      // }
      // ```
      //
      buildRegion: function(regionConfig, DefaultRegionClass) {
        if (_.isString(regionConfig)) {
          return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);
        }

        if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {
          return this._buildRegionFromObject(regionConfig, DefaultRegionClass);
        }

        if (_.isFunction(regionConfig)) {
          return this._buildRegionFromRegionClass(regionConfig);
        }

        throw new Marionette.Error({
          message: 'Improper region configuration type.',
          url: 'marionette.region.html#region-configuration-types'
        });
      },

      // Build the region from a string selector like '#foo-region'
      _buildRegionFromSelector: function(selector, DefaultRegionClass) {
        return new DefaultRegionClass({el: selector});
      },

      // Build the region from a configuration object
      // ```js
      // { selector: '#foo', regionClass: FooRegion, allowMissingEl: false }
      // ```
      _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {
        var RegionClass = regionConfig.regionClass || DefaultRegionClass;
        var options = _.omit(regionConfig, 'selector', 'regionClass');

        if (regionConfig.selector && !options.el) {
          options.el = regionConfig.selector;
        }

        return new RegionClass(options);
      },

      // Build the region directly from a given `RegionClass`
      _buildRegionFromRegionClass: function(RegionClass) {
        return new RegionClass();
      }
    });

  // Region Manager
  // --------------

  // Manage one or more related `Marionette.Region` objects.
  Marionette.RegionManager = Marionette.Controller.extend({
    constructor: function(options) {
      this._regions = {};
      this.length = 0;

      Marionette.Controller.call(this, options);

      this.addRegions(this.getOption('regions'));
    },

    // Add multiple regions using an object literal or a
    // function that returns an object literal, where
    // each key becomes the region name, and each value is
    // the region definition.
    addRegions: function(regionDefinitions, defaults) {
      regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);

      return _.reduce(regionDefinitions, function(regions, definition, name) {
        if (_.isString(definition)) {
          definition = {selector: definition};
        }
        if (definition.selector) {
          definition = _.defaults({}, definition, defaults);
        }

        regions[name] = this.addRegion(name, definition);
        return regions;
      }, {}, this);
    },

    // Add an individual region to the region manager,
    // and return the region instance
    addRegion: function(name, definition) {
      var region;

      if (definition instanceof Marionette.Region) {
        region = definition;
      } else {
        region = Marionette.Region.buildRegion(definition, Marionette.Region);
      }

      this.triggerMethod('before:add:region', name, region);

      region._parent = this;
      this._store(name, region);

      this.triggerMethod('add:region', name, region);
      return region;
    },

    // Get a region by name
    get: function(name) {
      return this._regions[name];
    },

    // Gets all the regions contained within
    // the `regionManager` instance.
    getRegions: function() {
      return _.clone(this._regions);
    },

    // Remove a region by name
    removeRegion: function(name) {
      var region = this._regions[name];
      this._remove(name, region);

      return region;
    },

    // Empty all regions in the region manager, and
    // remove them
    removeRegions: function() {
      var regions = this.getRegions();
      _.each(this._regions, function(region, name) {
        this._remove(name, region);
      }, this);

      return regions;
    },

    // Empty all regions in the region manager, but
    // leave them attached
    emptyRegions: function() {
      var regions = this.getRegions();
      _.invoke(regions, 'empty');
      return regions;
    },

    // Destroy all regions and shut down the region
    // manager entirely
    destroy: function() {
      this.removeRegions();
      return Marionette.Controller.prototype.destroy.apply(this, arguments);
    },

    // internal method to store regions
    _store: function(name, region) {
      if (!this._regions[name]) {
        this.length++;
      }

      this._regions[name] = region;
    },

    // internal method to remove a region
    _remove: function(name, region) {
      this.triggerMethod('before:remove:region', name, region);
      region.empty();
      region.stopListening();

      delete region._parent;
      delete this._regions[name];
      this.length--;
      this.triggerMethod('remove:region', name, region);
    }
  });

  Marionette.actAsCollection(Marionette.RegionManager.prototype, '_regions');


  // Template Cache
  // --------------

  // Manage templates stored in `<script>` blocks,
  // caching them for faster access.
  Marionette.TemplateCache = function(templateId) {
    this.templateId = templateId;
  };

  // TemplateCache object-level methods. Manage the template
  // caches from these method calls instead of creating
  // your own TemplateCache instances
  _.extend(Marionette.TemplateCache, {
    templateCaches: {},

    // Get the specified template by id. Either
    // retrieves the cached version, or loads it
    // from the DOM.
    get: function(templateId, options) {
      var cachedTemplate = this.templateCaches[templateId];

      if (!cachedTemplate) {
        cachedTemplate = new Marionette.TemplateCache(templateId);
        this.templateCaches[templateId] = cachedTemplate;
      }

      return cachedTemplate.load(options);
    },

    // Clear templates from the cache. If no arguments
    // are specified, clears all templates:
    // `clear()`
    //
    // If arguments are specified, clears each of the
    // specified templates from the cache:
    // `clear("#t1", "#t2", "...")`
    clear: function() {
      var i;
      var args = _.toArray(arguments);
      var length = args.length;

      if (length > 0) {
        for (i = 0; i < length; i++) {
          delete this.templateCaches[args[i]];
        }
      } else {
        this.templateCaches = {};
      }
    }
  });

  // TemplateCache instance methods, allowing each
  // template cache object to manage its own state
  // and know whether or not it has been loaded
  _.extend(Marionette.TemplateCache.prototype, {

    // Internal method to load the template
    load: function(options) {
      // Guard clause to prevent loading this template more than once
      if (this.compiledTemplate) {
        return this.compiledTemplate;
      }

      // Load the template and compile it
      var template = this.loadTemplate(this.templateId, options);
      this.compiledTemplate = this.compileTemplate(template, options);

      return this.compiledTemplate;
    },

    // Load a template from the DOM, by default. Override
    // this method to provide your own template retrieval
    // For asynchronous loading with AMD/RequireJS, consider
    // using a template-loader plugin as described here:
    // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs
    loadTemplate: function(templateId, options) {
      var template = Backbone.$(templateId).html();

      if (!template || template.length === 0) {
        throw new Marionette.Error({
          name: 'NoTemplateError',
          message: 'Could not find template: "' + templateId + '"'
        });
      }

      return template;
    },

    // Pre-compile the template before caching it. Override
    // this method if you do not need to pre-compile a template
    // (JST / RequireJS for example) or if you want to change
    // the template engine used (Handebars, etc).
    compileTemplate: function(rawTemplate, options) {
      return _.template(rawTemplate, options);
    }
  });

  // Renderer
  // --------

  // Render a template with data by passing in the template
  // selector and the data to render.
  Marionette.Renderer = {

    // Render a template with data. The `template` parameter is
    // passed to the `TemplateCache` object to retrieve the
    // template function. Override this method to provide your own
    // custom rendering and template handling for all of Marionette.
    render: function(template, data) {
      if (!template) {
        throw new Marionette.Error({
          name: 'TemplateNotFoundError',
          message: 'Cannot render the template since its false, null or undefined.'
        });
      }

      var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);

      return templateFunc(data);
    }
  };


  /* jshint maxlen: 114, nonew: false */
  // View
  // ----

  // The core view class that other Marionette views extend from.
  Marionette.View = Backbone.View.extend({
    isDestroyed: false,

    constructor: function(options) {
      _.bindAll(this, 'render');

      options = Marionette._getValue(options, this);

      // this exposes view options to the view initializer
      // this is a backfill since backbone removed the assignment
      // of this.options
      // at some point however this may be removed
      this.options = _.extend({}, _.result(this, 'options'), options);

      this._behaviors = Marionette.Behaviors(this);

      Backbone.View.call(this, this.options);

      Marionette.MonitorDOMRefresh(this);
    },

    // Get the template for this view
    // instance. You can set a `template` attribute in the view
    // definition or pass a `template: "whatever"` parameter in
    // to the constructor options.
    getTemplate: function() {
      return this.getOption('template');
    },

    // Serialize a model by returning its attributes. Clones
    // the attributes to allow modification.
    serializeModel: function(model) {
      return model.toJSON.apply(model, _.rest(arguments));
    },

    // Mix in template helper methods. Looks for a
    // `templateHelpers` attribute, which can either be an
    // object literal, or a function that returns an object
    // literal. All methods and attributes from this object
    // are copies to the object passed in.
    mixinTemplateHelpers: function(target) {
      target = target || {};
      var templateHelpers = this.getOption('templateHelpers');
      templateHelpers = Marionette._getValue(templateHelpers, this);
      return _.extend(target, templateHelpers);
    },

    // normalize the keys of passed hash with the views `ui` selectors.
    // `{"@ui.foo": "bar"}`
    normalizeUIKeys: function(hash) {
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, 'ui'));
    },

    // normalize the values of passed hash with the views `ui` selectors.
    // `{foo: "@ui.bar"}`
    normalizeUIValues: function(hash, properties) {
      var ui = _.result(this, 'ui');
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIValues(hash, uiBindings || ui, properties);
    },

    // Configure `triggers` to forward DOM events to view
    // events. `triggers: {"click .foo": "do:foo"}`
    configureTriggers: function() {
      if (!this.triggers) { return; }

      // Allow `triggers` to be configured as a function
      var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));

      // Configure the triggers, prevent default
      // action and stop propagation of DOM events
      return _.reduce(triggers, function(events, value, key) {
        events[key] = this._buildViewTrigger(value);
        return events;
      }, {}, this);
    },

    // Overriding Backbone.View's delegateEvents to handle
    // the `triggers`, `modelEvents`, and `collectionEvents` configuration
    delegateEvents: function(events) {
      this._delegateDOMEvents(events);
      this.bindEntityEvents(this.model, this.getOption('modelEvents'));
      this.bindEntityEvents(this.collection, this.getOption('collectionEvents'));

      _.each(this._behaviors, function(behavior) {
        behavior.bindEntityEvents(this.model, behavior.getOption('modelEvents'));
        behavior.bindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
      }, this);

      return this;
    },

    // internal method to delegate DOM events and triggers
    _delegateDOMEvents: function(eventsArg) {
      var events = Marionette._getValue(eventsArg || this.events, this);

      // normalize ui keys
      events = this.normalizeUIKeys(events);
      if (_.isUndefined(eventsArg)) {this.events = events;}

      var combinedEvents = {};

      // look up if this view has behavior events
      var behaviorEvents = _.result(this, 'behaviorEvents') || {};
      var triggers = this.configureTriggers();
      var behaviorTriggers = _.result(this, 'behaviorTriggers') || {};

      // behavior events will be overriden by view events and or triggers
      _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);

      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
    },

    // Overriding Backbone.View's undelegateEvents to handle unbinding
    // the `triggers`, `modelEvents`, and `collectionEvents` config
    undelegateEvents: function() {
      Backbone.View.prototype.undelegateEvents.apply(this, arguments);

      this.unbindEntityEvents(this.model, this.getOption('modelEvents'));
      this.unbindEntityEvents(this.collection, this.getOption('collectionEvents'));

      _.each(this._behaviors, function(behavior) {
        behavior.unbindEntityEvents(this.model, behavior.getOption('modelEvents'));
        behavior.unbindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
      }, this);

      return this;
    },

    // Internal helper method to verify whether the view hasn't been destroyed
    _ensureViewIsIntact: function() {
      if (this.isDestroyed) {
        throw new Marionette.Error({
          name: 'ViewDestroyedError',
          message: 'View (cid: "' + this.cid + '") has already been destroyed and cannot be used.'
        });
      }
    },

    // Default `destroy` implementation, for removing a view from the
    // DOM and unbinding it. Regions will call this method
    // for you. You can specify an `onDestroy` method in your view to
    // add custom code that is called after the view is destroyed.
    destroy: function() {
      if (this.isDestroyed) { return this; }

      var args = _.toArray(arguments);

      this.triggerMethod.apply(this, ['before:destroy'].concat(args));

      // mark as destroyed before doing the actual destroy, to
      // prevent infinite loops within "destroy" event handlers
      // that are trying to destroy other views
      this.isDestroyed = true;
      this.triggerMethod.apply(this, ['destroy'].concat(args));

      // unbind UI elements
      this.unbindUIElements();

      this.isRendered = false;

      // remove the view from the DOM
      this.remove();

      // Call destroy on each behavior after
      // destroying the view.
      // This unbinds event listeners
      // that behaviors have registered for.
      _.invoke(this._behaviors, 'destroy', args);

      return this;
    },

    bindUIElements: function() {
      this._bindUIElements();
      _.invoke(this._behaviors, this._bindUIElements);
    },

    // This method binds the elements specified in the "ui" hash inside the view's code with
    // the associated jQuery selectors.
    _bindUIElements: function() {
      if (!this.ui) { return; }

      // store the ui hash in _uiBindings so they can be reset later
      // and so re-rendering the view will be able to find the bindings
      if (!this._uiBindings) {
        this._uiBindings = this.ui;
      }

      // get the bindings result, as a function or otherwise
      var bindings = _.result(this, '_uiBindings');

      // empty the ui so we don't have anything to start with
      this.ui = {};

      // bind each of the selectors
      _.each(bindings, function(selector, key) {
        this.ui[key] = this.$(selector);
      }, this);
    },

    // This method unbinds the elements specified in the "ui" hash
    unbindUIElements: function() {
      this._unbindUIElements();
      _.invoke(this._behaviors, this._unbindUIElements);
    },

    _unbindUIElements: function() {
      if (!this.ui || !this._uiBindings) { return; }

      // delete all of the existing ui bindings
      _.each(this.ui, function($el, name) {
        delete this.ui[name];
      }, this);

      // reset the ui element to the original bindings configuration
      this.ui = this._uiBindings;
      delete this._uiBindings;
    },

    // Internal method to create an event handler for a given `triggerDef` like
    // 'click:foo'
    _buildViewTrigger: function(triggerDef) {
      var hasOptions = _.isObject(triggerDef);

      var options = _.defaults({}, (hasOptions ? triggerDef : {}), {
        preventDefault: true,
        stopPropagation: true
      });

      var eventName = hasOptions ? options.event : triggerDef;

      return function(e) {
        if (e) {
          if (e.preventDefault && options.preventDefault) {
            e.preventDefault();
          }

          if (e.stopPropagation && options.stopPropagation) {
            e.stopPropagation();
          }
        }

        var args = {
          view: this,
          model: this.model,
          collection: this.collection
        };

        this.triggerMethod(eventName, args);
      };
    },

    setElement: function() {
      var ret = Backbone.View.prototype.setElement.apply(this, arguments);

      // proxy behavior $el to the view's $el.
      // This is needed because a view's $el proxy
      // is not set until after setElement is called.
      _.invoke(this._behaviors, 'proxyViewProperties', this);

      return ret;
    },

    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: function() {
      var ret = Marionette._triggerMethod(this, arguments);

      this._triggerEventOnBehaviors(arguments);
      this._triggerEventOnParentLayout(arguments[0], _.rest(arguments));

      return ret;
    },

    _triggerEventOnBehaviors: function(args) {
      var triggerMethod = Marionette._triggerMethod;
      var behaviors = this._behaviors;
      // Use good ol' for as this is a very hot function
      for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {
        triggerMethod(behaviors[i], args);
      }
    },

    _triggerEventOnParentLayout: function(eventName, args) {
      var layoutView = this._parentLayoutView();
      if (!layoutView) {
        return;
      }

      // invoke triggerMethod on parent view
      var eventPrefix = Marionette.getOption(layoutView, 'childViewEventPrefix');
      var prefixedEventName = eventPrefix + ':' + eventName;

      Marionette._triggerMethod(layoutView, [prefixedEventName, this].concat(args));

      // call the parent view's childEvents handler
      var childEvents = Marionette.getOption(layoutView, 'childEvents');
      var normalizedChildEvents = layoutView.normalizeMethods(childEvents);

      if (!!normalizedChildEvents && _.isFunction(normalizedChildEvents[eventName])) {
        normalizedChildEvents[eventName].apply(layoutView, [this].concat(args));
      }
    },

    // This method returns any views that are immediate
    // children of this view
    _getImmediateChildren: function() {
      return [];
    },

    // Returns an array of every nested view within this view
    _getNestedViews: function() {
      var children = this._getImmediateChildren();

      if (!children.length) { return children; }

      return _.reduce(children, function(memo, view) {
        if (!view._getNestedViews) { return memo; }
        return memo.concat(view._getNestedViews());
      }, children);
    },

    // Internal utility for building an ancestor
    // view tree list.
    _getAncestors: function() {
      var ancestors = [];
      var parent  = this._parent;

      while (parent) {
        ancestors.push(parent);
        parent = parent._parent;
      }

      return ancestors;
    },

    // Returns the containing parent view.
    _parentLayoutView: function() {
      var ancestors = this._getAncestors();
      return _.find(ancestors, function(parent) {
        return parent instanceof Marionette.LayoutView;
      });
    },

    // Imports the "normalizeMethods" to transform hashes of
    // events=>function references/names to a hash of events=>function references
    normalizeMethods: Marionette.normalizeMethods,

    // A handy way to merge passed-in options onto the instance
    mergeOptions: Marionette.mergeOptions,

    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,

    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,

    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });

  // Item View
  // ---------

  // A single item view implementation that contains code for rendering
  // with underscore.js templates, serializing the view's model or collection,
  // and calling several methods on extended views, such as `onRender`.
  Marionette.ItemView = Marionette.View.extend({

    // Setting up the inheritance chain which allows changes to
    // Marionette.View.prototype.constructor which allows overriding
    constructor: function() {
      Marionette.View.apply(this, arguments);
    },

    // Serialize the model or collection for the view. If a model is
    // found, the view's `serializeModel` is called. If a collection is found,
    // each model in the collection is serialized by calling
    // the view's `serializeCollection` and put into an `items` array in
    // the resulting data. If both are found, defaults to the model.
    // You can override the `serializeData` method in your own view definition,
    // to provide custom serialization for your view's data.
    serializeData: function() {
      if (!this.model && !this.collection) {
        return {};
      }

      var args = [this.model || this.collection];
      if (arguments.length) {
        args.push.apply(args, arguments);
      }

      if (this.model) {
        return this.serializeModel.apply(this, args);
      } else {
        return {
          items: this.serializeCollection.apply(this, args)
        };
      }
    },

    // Serialize a collection by serializing each of its models.
    serializeCollection: function(collection) {
      return collection.toJSON.apply(collection, _.rest(arguments));
    },

    // Render the view, defaulting to underscore.js templates.
    // You can override this in your view definition to provide
    // a very specific rendering for your view. In general, though,
    // you should override the `Marionette.Renderer` object to
    // change how Marionette renders views.
    render: function() {
      this._ensureViewIsIntact();

      this.triggerMethod('before:render', this);

      this._renderTemplate();
      this.isRendered = true;
      this.bindUIElements();

      this.triggerMethod('render', this);

      return this;
    },

    // Internal method to render the template with the serialized data
    // and template helpers via the `Marionette.Renderer` object.
    // Throws an `UndefinedTemplateError` error if the template is
    // any falsely value but literal `false`.
    _renderTemplate: function() {
      var template = this.getTemplate();

      // Allow template-less item views
      if (template === false) {
        return;
      }

      if (!template) {
        throw new Marionette.Error({
          name: 'UndefinedTemplateError',
          message: 'Cannot render the template since it is null or undefined.'
        });
      }

      // Add in entity data and template helpers
      var data = this.mixinTemplateHelpers(this.serializeData());

      // Render and add to el
      var html = Marionette.Renderer.render(template, data, this);
      this.attachElContent(html);

      return this;
    },

    // Attaches the content of a given view.
    // This method can be overridden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);

      return this;
    }
  });

  /* jshint maxstatements: 14 */

  // Collection View
  // ---------------

  // A view that iterates over a Backbone.Collection
  // and renders an individual child view for each model.
  Marionette.CollectionView = Marionette.View.extend({

    // used as the prefix for child view events
    // that are forwarded through the collectionview
    childViewEventPrefix: 'childview',

    // flag for maintaining the sorted order of the collection
    sort: true,

    // constructor
    // option to pass `{sort: false}` to prevent the `CollectionView` from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    //
    // option to pass `{comparator: compFunction()}` to allow the `CollectionView`
    // to use a custom sort order for the collection.
    constructor: function(options) {

      this.once('render', this._initialEvents);
      this._initChildViewStorage();

      Marionette.View.apply(this, arguments);

      this.on('show', this._onShowCalled);

      this.initRenderBuffer();
    },

    // Instead of inserting elements one by one into the page,
    // it's much more performant to insert elements into a document
    // fragment and then insert that document fragment into the page
    initRenderBuffer: function() {
      this._bufferedChildren = [];
    },

    startBuffering: function() {
      this.initRenderBuffer();
      this.isBuffering = true;
    },

    endBuffering: function() {
      this.isBuffering = false;
      this._triggerBeforeShowBufferedChildren();

      this.attachBuffer(this);

      this._triggerShowBufferedChildren();
      this.initRenderBuffer();
    },

    _triggerBeforeShowBufferedChildren: function() {
      if (this._isShown) {
        _.each(this._bufferedChildren, _.partial(this._triggerMethodOnChild, 'before:show'));
      }
    },

    _triggerShowBufferedChildren: function() {
      if (this._isShown) {
        _.each(this._bufferedChildren, _.partial(this._triggerMethodOnChild, 'show'));

        this._bufferedChildren = [];
      }
    },

    // Internal method for _.each loops to call `Marionette.triggerMethodOn` on
    // a child view
    _triggerMethodOnChild: function(event, childView) {
      Marionette.triggerMethodOn(childView, event);
    },

    // Configured the initial events that the collection view
    // binds to.
    _initialEvents: function() {
      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this.render);

        if (this.getOption('sort')) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },

    // Handle a child added to the collection
    _onCollectionAdd: function(child, collection, opts) {
      var index;
      if (opts.at !== undefined) {
        index = opts.at;
      } else {
        index = _.indexOf(this._filteredSortedModels(), child);
      }

      if (this._shouldAddChild(child, index)) {
        this.destroyEmptyView();
        var ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }
    },

    // get the child view by model it holds, and remove it
    _onCollectionRemove: function(model) {
      var view = this.children.findByModel(model);
      this.removeChildView(view);
      this.checkEmpty();
    },

    _onShowCalled: function() {
      this.children.each(_.partial(this._triggerMethodOnChild, 'show'));
    },

    // Render children views. Override this method to
    // provide your own implementation of a render function for
    // the collection view.
    render: function() {
      this._ensureViewIsIntact();
      this.triggerMethod('before:render', this);
      this._renderChildren();
      this.isRendered = true;
      this.triggerMethod('render', this);
      return this;
    },

    // Reorder DOM after sorting. When your element's rendering
    // do not use their index, you can pass reorderOnSort: true
    // to only reorder the DOM after a sort instead of rendering
    // all the collectionView
    reorder: function() {
      var children = this.children;
      var models = this._filteredSortedModels();
      var modelsChanged = _.find(models, function(model) {
        return !children.findByModel(model);
      });

      // If the models we're displaying have changed due to filtering
      // We need to add and/or remove child views
      // So render as normal
      if (modelsChanged) {
        this.render();
      } else {
        // get the DOM nodes in the same order as the models
        var els = _.map(models, function(model) {
          return children.findByModel(model).el;
        });

        // since append moves elements that are already in the DOM,
        // appending the elements will effectively reorder them
        this.triggerMethod('before:reorder');
        this._appendReorderedChildren(els);
        this.triggerMethod('reorder');
      }
    },

    // Render view after sorting. Override this method to
    // change how the view renders after a `sort` on the collection.
    // An example of this would be to only `renderChildren` in a `CompositeView`
    // rather than the full view.
    resortView: function() {
      if (Marionette.getOption(this, 'reorderOnSort')) {
        this.reorder();
      } else {
        this.render();
      }
    },

    // Internal method. This checks for any changes in the order of the collection.
    // If the index of any view doesn't match, it will render.
    _sortViews: function() {
      var models = this._filteredSortedModels();

      // check for any changes in sort order of views
      var orderChanged = _.find(models, function(item, index) {
        var view = this.children.findByModel(item);
        return !view || view._index !== index;
      }, this);

      if (orderChanged) {
        this.resortView();
      }
    },

    // Internal reference to what index a `emptyView` is.
    _emptyViewIndex: -1,

    // Internal method. Separated so that CompositeView can append to the childViewContainer
    // if necessary
    _appendReorderedChildren: function(children) {
      this.$el.append(children);
    },

    // Internal method. Separated so that CompositeView can have
    // more control over events being triggered, around the rendering
    // process
    _renderChildren: function() {
      this.destroyEmptyView();
      this.destroyChildren();

      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      } else {
        this.triggerMethod('before:render:collection', this);
        this.startBuffering();
        this.showCollection();
        this.endBuffering();
        this.triggerMethod('render:collection', this);

        // If we have shown children and none have passed the filter, show the empty view
        if (this.children.isEmpty()) {
          this.showEmptyView();
        }
      }
    },

    // Internal method to loop through collection and show each child view.
    showCollection: function() {
      var ChildView;

      var models = this._filteredSortedModels();

      _.each(models, function(child, index) {
        ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }, this);
    },

    // Allow the collection to be sorted by a custom view comparator
    _filteredSortedModels: function() {
      var models;
      var viewComparator = this.getViewComparator();

      if (viewComparator) {
        if (_.isString(viewComparator) || viewComparator.length === 1) {
          models = this.collection.sortBy(viewComparator, this);
        } else {
          models = _.clone(this.collection.models).sort(_.bind(viewComparator, this));
        }
      } else {
        models = this.collection.models;
      }

      // Filter after sorting in case the filter uses the index
      if (this.getOption('filter')) {
        models = _.filter(models, function(model, index) {
          return this._shouldAddChild(model, index);
        }, this);
      }

      return models;
    },

    // Internal method to show an empty view in place of
    // a collection of child views, when the collection is empty
    showEmptyView: function() {
      var EmptyView = this.getEmptyView();

      if (EmptyView && !this._showingEmptyView) {
        this.triggerMethod('before:render:empty');

        this._showingEmptyView = true;
        var model = new Backbone.Model();
        this.addEmptyView(model, EmptyView);

        this.triggerMethod('render:empty');
      }
    },

    // Internal method to destroy an existing emptyView instance
    // if one exists. Called when a collection view has been
    // rendered empty, and then a child is added to the collection.
    destroyEmptyView: function() {
      if (this._showingEmptyView) {
        this.triggerMethod('before:remove:empty');

        this.destroyChildren();
        delete this._showingEmptyView;

        this.triggerMethod('remove:empty');
      }
    },

    // Retrieve the empty view class
    getEmptyView: function() {
      return this.getOption('emptyView');
    },

    // Render and show the emptyView. Similar to addChild method
    // but "add:child" events are not fired, and the event from
    // emptyView are not forwarded
    addEmptyView: function(child, EmptyView) {

      // get the emptyViewOptions, falling back to childViewOptions
      var emptyViewOptions = this.getOption('emptyViewOptions') ||
        this.getOption('childViewOptions');

      if (_.isFunction(emptyViewOptions)) {
        emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex);
      }

      // build the empty view
      var view = this.buildChildView(child, EmptyView, emptyViewOptions);

      view._parent = this;

      // Proxy emptyView events
      this.proxyChildEvents(view);

      // trigger the 'before:show' event on `view` if the collection view
      // has already been shown
      if (this._isShown) {
        Marionette.triggerMethodOn(view, 'before:show');
      }

      // Store the `emptyView` like a `childView` so we can properly
      // remove and/or close it later
      this.children.add(view);

      // Render it and show it
      this.renderChildView(view, this._emptyViewIndex);

      // call the 'show' method if the collection view
      // has already been shown
      if (this._isShown) {
        Marionette.triggerMethodOn(view, 'show');
      }
    },

    // Retrieve the `childView` class, either from `this.options.childView`
    // or from the `childView` in the object definition. The "options"
    // takes precedence.
    // This method receives the model that will be passed to the instance
    // created from this `childView`. Overriding methods may use the child
    // to determine what `childView` class to return.
    getChildView: function(child) {
      var childView = this.getOption('childView');

      if (!childView) {
        throw new Marionette.Error({
          name: 'NoChildViewError',
          message: 'A "childView" must be specified'
        });
      }

      return childView;
    },

    // Render the child's view and add it to the
    // HTML for the collection view at a given index.
    // This will also update the indices of later views in the collection
    // in order to keep the children in sync with the collection.
    addChild: function(child, ChildView, index) {
      var childViewOptions = this.getOption('childViewOptions');
      childViewOptions = Marionette._getValue(childViewOptions, this, [child, index]);

      var view = this.buildChildView(child, ChildView, childViewOptions);

      // increment indices of views after this one
      this._updateIndices(view, true, index);

      this._addChildView(view, index);

      view._parent = this;

      return view;
    },

    // Internal method. This decrements or increments the indices of views after the
    // added/removed view to keep in sync with the collection.
    _updateIndices: function(view, increment, index) {
      if (!this.getOption('sort')) {
        return;
      }

      if (increment) {
        // assign the index to the view
        view._index = index;
      }

      // update the indexes of views after this one
      this.children.each(function(laterView) {
        if (laterView._index >= view._index) {
          laterView._index += increment ? 1 : -1;
        }
      });
    },

    // Internal Method. Add the view to children and render it at
    // the given index.
    _addChildView: function(view, index) {
      // set up the child view event forwarding
      this.proxyChildEvents(view);

      this.triggerMethod('before:add:child', view);

      // trigger the 'before:show' event on `view` if the collection view
      // has already been shown
      if (this._isShown && !this.isBuffering) {
        Marionette.triggerMethodOn(view, 'before:show');
      }

      // Store the child view itself so we can properly
      // remove and/or destroy it later
      this.children.add(view);
      this.renderChildView(view, index);

      if (this._isShown && !this.isBuffering) {
        Marionette.triggerMethodOn(view, 'show');
      }

      this.triggerMethod('add:child', view);
    },

    // render the child view
    renderChildView: function(view, index) {
      view.render();
      this.attachHtml(this, view, index);
      return view;
    },

    // Build a `childView` for a model in the collection.
    buildChildView: function(child, ChildViewClass, childViewOptions) {
      var options = _.extend({model: child}, childViewOptions);
      return new ChildViewClass(options);
    },

    // Remove the child view and destroy it.
    // This function also updates the indices of
    // later views in the collection in order to keep
    // the children in sync with the collection.
    removeChildView: function(view) {

      if (view) {
        this.triggerMethod('before:remove:child', view);

        // call 'destroy' or 'remove', depending on which is found
        if (view.destroy) {
          view.destroy();
        } else if (view.remove) {
          view.remove();
        }

        delete view._parent;
        this.stopListening(view);
        this.children.remove(view);
        this.triggerMethod('remove:child', view);

        // decrement the index of views after this one
        this._updateIndices(view, false);
      }

      return view;
    },

    // check if the collection is empty
    isEmpty: function() {
      return !this.collection || this.collection.length === 0;
    },

    // If empty, show the empty view
    checkEmpty: function() {
      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      }
    },

    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(collectionView) {
      collectionView.$el.append(this._createBuffer(collectionView));
    },

    // Create a fragment buffer from the currently buffered children
    _createBuffer: function(collectionView) {
      var elBuffer = document.createDocumentFragment();
      _.each(collectionView._bufferedChildren, function(b) {
        elBuffer.appendChild(b.el);
      });
      return elBuffer;
    },

    // Append the HTML to the collection's `el`.
    // Override this method to do something other
    // than `.append`.
    attachHtml: function(collectionView, childView, index) {
      if (collectionView.isBuffering) {
        // buffering happens on reset events and initial renders
        // in order to reduce the number of inserts into the
        // document, which are expensive.
        collectionView._bufferedChildren.splice(index, 0, childView);
      } else {
        // If we've already rendered the main collection, append
        // the new child into the correct order if we need to. Otherwise
        // append to the end.
        if (!collectionView._insertBefore(childView, index)) {
          collectionView._insertAfter(childView);
        }
      }
    },

    // Internal method. Check whether we need to insert the view into
    // the correct position.
    _insertBefore: function(childView, index) {
      var currentView;
      var findPosition = this.getOption('sort') && (index < this.children.length - 1);
      if (findPosition) {
        // Find the view after this one
        currentView = this.children.find(function(view) {
          return view._index === index + 1;
        });
      }

      if (currentView) {
        currentView.$el.before(childView.el);
        return true;
      }

      return false;
    },

    // Internal method. Append a view to the end of the $el
    _insertAfter: function(childView) {
      this.$el.append(childView.el);
    },

    // Internal method to set up the `children` object for
    // storing all of the child views
    _initChildViewStorage: function() {
      this.children = new Backbone.ChildViewContainer();
    },

    // Handle cleanup and other destroying needs for the collection of views
    destroy: function() {
      if (this.isDestroyed) { return this; }

      this.triggerMethod('before:destroy:collection');
      this.destroyChildren();
      this.triggerMethod('destroy:collection');

      return Marionette.View.prototype.destroy.apply(this, arguments);
    },

    // Destroy the child views that this collection view
    // is holding on to, if any
    destroyChildren: function() {
      var childViews = this.children.map(_.identity);
      this.children.each(this.removeChildView, this);
      this.checkEmpty();
      return childViews;
    },

    // Return true if the given child should be shown
    // Return false otherwise
    // The filter will be passed (child, index, collection)
    // Where
    //  'child' is the given model
    //  'index' is the index of that model in the collection
    //  'collection' is the collection referenced by this CollectionView
    _shouldAddChild: function(child, index) {
      var filter = this.getOption('filter');
      return !_.isFunction(filter) || filter.call(this, child, index, this.collection);
    },

    // Set up the child view event forwarding. Uses a "childview:"
    // prefix in front of all forwarded events.
    proxyChildEvents: function(view) {
      var prefix = this.getOption('childViewEventPrefix');

      // Forward all child view events through the parent,
      // prepending "childview:" to the event name
      this.listenTo(view, 'all', function() {
        var args = _.toArray(arguments);
        var rootEvent = args[0];
        var childEvents = this.normalizeMethods(_.result(this, 'childEvents'));

        args[0] = prefix + ':' + rootEvent;
        args.splice(1, 0, view);

        // call collectionView childEvent if defined
        if (typeof childEvents !== 'undefined' && _.isFunction(childEvents[rootEvent])) {
          childEvents[rootEvent].apply(this, args.slice(1));
        }

        this.triggerMethod.apply(this, args);
      });
    },

    _getImmediateChildren: function() {
      return _.values(this.children._views);
    },

    getViewComparator: function() {
      return this.getOption('viewComparator');
    }
  });

  /* jshint maxstatements: 17, maxlen: 117 */

  // Composite View
  // --------------

  // Used for rendering a branch-leaf, hierarchical structure.
  // Extends directly from CollectionView and also renders an
  // a child view as `modelView`, for the top leaf
  Marionette.CompositeView = Marionette.CollectionView.extend({

    // Setting up the inheritance chain which allows changes to
    // Marionette.CollectionView.prototype.constructor which allows overriding
    // option to pass '{sort: false}' to prevent the CompositeView from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    constructor: function() {
      Marionette.CollectionView.apply(this, arguments);
    },

    // Configured the initial events that the composite view
    // binds to. Override this method to prevent the initial
    // events, or to add your own initial events.
    _initialEvents: function() {

      // Bind only after composite view is rendered to avoid adding child views
      // to nonexistent childViewContainer

      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this._renderChildren);

        if (this.getOption('sort')) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },

    // Retrieve the `childView` to be used when rendering each of
    // the items in the collection. The default is to return
    // `this.childView` or Marionette.CompositeView if no `childView`
    // has been defined
    getChildView: function(child) {
      var childView = this.getOption('childView') || this.constructor;

      return childView;
    },

    // Serialize the model for the view.
    // You can override the `serializeData` method in your own view
    // definition, to provide custom serialization for your view's data.
    serializeData: function() {
      var data = {};

      if (this.model) {
        data = _.partial(this.serializeModel, this.model).apply(this, arguments);
      }

      return data;
    },

    // Renders the model and the collection.
    render: function() {
      this._ensureViewIsIntact();
      this._isRendering = true;
      this.resetChildViewContainer();

      this.triggerMethod('before:render', this);

      this._renderTemplate();
      this._renderChildren();

      this._isRendering = false;
      this.isRendered = true;
      this.triggerMethod('render', this);
      return this;
    },

    _renderChildren: function() {
      if (this.isRendered || this._isRendering) {
        Marionette.CollectionView.prototype._renderChildren.call(this);
      }
    },

    // Render the root template that the children
    // views are appended to
    _renderTemplate: function() {
      var data = {};
      data = this.serializeData();
      data = this.mixinTemplateHelpers(data);

      this.triggerMethod('before:render:template');

      var template = this.getTemplate();
      var html = Marionette.Renderer.render(template, data, this);
      this.attachElContent(html);

      // the ui bindings is done here and not at the end of render since they
      // will not be available until after the model is rendered, but should be
      // available before the collection is rendered.
      this.bindUIElements();
      this.triggerMethod('render:template');
    },

    // Attaches the content of the root.
    // This method can be overridden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);

      return this;
    },

    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(compositeView) {
      var $container = this.getChildViewContainer(compositeView);
      $container.append(this._createBuffer(compositeView));
    },

    // Internal method. Append a view to the end of the $el.
    // Overidden from CollectionView to ensure view is appended to
    // childViewContainer
    _insertAfter: function(childView) {
      var $container = this.getChildViewContainer(this, childView);
      $container.append(childView.el);
    },

    // Internal method. Append reordered childView'.
    // Overidden from CollectionView to ensure reordered views
    // are appended to childViewContainer
    _appendReorderedChildren: function(children) {
      var $container = this.getChildViewContainer(this);
      $container.append(children);
    },

    // Internal method to ensure an `$childViewContainer` exists, for the
    // `attachHtml` method to use.
    getChildViewContainer: function(containerView, childView) {
      if ('$childViewContainer' in containerView) {
        return containerView.$childViewContainer;
      }

      var container;
      var childViewContainer = Marionette.getOption(containerView, 'childViewContainer');
      if (childViewContainer) {

        var selector = Marionette._getValue(childViewContainer, containerView);

        if (selector.charAt(0) === '@' && containerView.ui) {
          container = containerView.ui[selector.substr(4)];
        } else {
          container = containerView.$(selector);
        }

        if (container.length <= 0) {
          throw new Marionette.Error({
            name: 'ChildViewContainerMissingError',
            message: 'The specified "childViewContainer" was not found: ' + containerView.childViewContainer
          });
        }

      } else {
        container = containerView.$el;
      }

      containerView.$childViewContainer = container;
      return container;
    },

    // Internal method to reset the `$childViewContainer` on render
    resetChildViewContainer: function() {
      if (this.$childViewContainer) {
        delete this.$childViewContainer;
      }
    }
  });

  // Layout View
  // -----------

  // Used for managing application layoutViews, nested layoutViews and
  // multiple regions within an application or sub-application.
  //
  // A specialized view class that renders an area of HTML and then
  // attaches `Region` instances to the specified `regions`.
  // Used for composite view management and sub-application areas.
  Marionette.LayoutView = Marionette.ItemView.extend({
    regionClass: Marionette.Region,

    options: {
      destroyImmediate: false
    },

    // used as the prefix for child view events
    // that are forwarded through the layoutview
    childViewEventPrefix: 'childview',

    // Ensure the regions are available when the `initialize` method
    // is called.
    constructor: function(options) {
      options = options || {};

      this._firstRender = true;
      this._initializeRegions(options);

      Marionette.ItemView.call(this, options);
    },

    // LayoutView's render will use the existing region objects the
    // first time it is called. Subsequent calls will destroy the
    // views that the regions are showing and then reset the `el`
    // for the regions to the newly rendered DOM elements.
    render: function() {
      this._ensureViewIsIntact();

      if (this._firstRender) {
        // if this is the first render, don't do anything to
        // reset the regions
        this._firstRender = false;
      } else {
        // If this is not the first render call, then we need to
        // re-initialize the `el` for each region
        this._reInitializeRegions();
      }

      return Marionette.ItemView.prototype.render.apply(this, arguments);
    },

    // Handle destroying regions, and then destroy the view itself.
    destroy: function() {
      if (this.isDestroyed) { return this; }
      // #2134: remove parent element before destroying the child views, so
      // removing the child views doesn't retrigger repaints
      if (this.getOption('destroyImmediate') === true) {
        this.$el.remove();
      }
      this.regionManager.destroy();
      return Marionette.ItemView.prototype.destroy.apply(this, arguments);
    },

    showChildView: function(regionName, view) {
      return this.getRegion(regionName).show(view);
    },

    getChildView: function(regionName) {
      return this.getRegion(regionName).currentView;
    },

    // Add a single region, by name, to the layoutView
    addRegion: function(name, definition) {
      var regions = {};
      regions[name] = definition;
      return this._buildRegions(regions)[name];
    },

    // Add multiple regions as a {name: definition, name2: def2} object literal
    addRegions: function(regions) {
      this.regions = _.extend({}, this.regions, regions);
      return this._buildRegions(regions);
    },

    // Remove a single region from the LayoutView, by name
    removeRegion: function(name) {
      delete this.regions[name];
      return this.regionManager.removeRegion(name);
    },

    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this.regionManager.get(region);
    },

    // Get all regions
    getRegions: function() {
      return this.regionManager.getRegions();
    },

    // internal method to build regions
    _buildRegions: function(regions) {
      var defaults = {
        regionClass: this.getOption('regionClass'),
        parentEl: _.partial(_.result, this, 'el')
      };

      return this.regionManager.addRegions(regions, defaults);
    },

    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on this layoutView.
    _initializeRegions: function(options) {
      var regions;
      this._initRegionManager();

      regions = Marionette._getValue(this.regions, this, [options]) || {};

      // Enable users to define `regions` as instance options.
      var regionOptions = this.getOption.call(options, 'regions');

      // enable region options to be a function
      regionOptions = Marionette._getValue(regionOptions, this, [options]);

      _.extend(regions, regionOptions);

      // Normalize region selectors hash to allow
      // a user to use the @ui. syntax.
      regions = this.normalizeUIValues(regions, ['selector', 'el']);

      this.addRegions(regions);
    },

    // Internal method to re-initialize all of the regions by updating the `el` that
    // they point to
    _reInitializeRegions: function() {
      this.regionManager.invoke('reset');
    },

    // Enable easy overriding of the default `RegionManager`
    // for customized region interactions and business specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },

    // Internal method to initialize the region manager
    // and all regions in it
    _initRegionManager: function() {
      this.regionManager = this.getRegionManager();
      this.regionManager._parent = this;

      this.listenTo(this.regionManager, 'before:add:region', function(name) {
        this.triggerMethod('before:add:region', name);
      });

      this.listenTo(this.regionManager, 'add:region', function(name, region) {
        this[name] = region;
        this.triggerMethod('add:region', name, region);
      });

      this.listenTo(this.regionManager, 'before:remove:region', function(name) {
        this.triggerMethod('before:remove:region', name);
      });

      this.listenTo(this.regionManager, 'remove:region', function(name, region) {
        delete this[name];
        this.triggerMethod('remove:region', name, region);
      });
    },

    _getImmediateChildren: function() {
      return _.chain(this.regionManager.getRegions())
        .pluck('currentView')
        .compact()
        .value();
    }
  });


  // Behavior
  // --------

  // A Behavior is an isolated set of DOM /
  // user interactions that can be mixed into any View.
  // Behaviors allow you to blackbox View specific interactions
  // into portable logical chunks, keeping your views simple and your code DRY.

  Marionette.Behavior = Marionette.Object.extend({
    constructor: function(options, view) {
      // Setup reference to the view.
      // this comes in handle when a behavior
      // wants to directly talk up the chain
      // to the view.
      this.view = view;
      this.defaults = _.result(this, 'defaults') || {};
      this.options  = _.extend({}, this.defaults, options);
      // Construct an internal UI hash using
      // the views UI hash and then the behaviors UI hash.
      // This allows the user to use UI hash elements
      // defined in the parent view as well as those
      // defined in the given behavior.
      this.ui = _.extend({}, _.result(view, 'ui'), _.result(this, 'ui'));

      Marionette.Object.apply(this, arguments);
    },

    // proxy behavior $ method to the view
    // this is useful for doing jquery DOM lookups
    // scoped to behaviors view.
    $: function() {
      return this.view.$.apply(this.view, arguments);
    },

    // Stops the behavior from listening to events.
    // Overrides Object#destroy to prevent additional events from being triggered.
    destroy: function() {
      this.stopListening();

      return this;
    },

    proxyViewProperties: function(view) {
      this.$el = view.$el;
      this.el = view.el;
    }
  });

  /* jshint maxlen: 143 */
  // Behaviors
  // ---------

  // Behaviors is a utility class that takes care of
  // gluing your behavior instances to their given View.
  // The most important part of this class is that you
  // **MUST** override the class level behaviorsLookup
  // method for things to work properly.

  Marionette.Behaviors = (function(Marionette, _) {
    // Borrow event splitter from Backbone
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;

    function Behaviors(view, behaviors) {

      if (!_.isObject(view.behaviors)) {
        return {};
      }

      // Behaviors defined on a view can be a flat object literal
      // or it can be a function that returns an object.
      behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, 'behaviors'));

      // Wraps several of the view's methods
      // calling the methods first on each behavior
      // and then eventually calling the method on the view.
      Behaviors.wrap(view, behaviors, _.keys(methods));
      return behaviors;
    }

    var methods = {
      behaviorTriggers: function(behaviorTriggers, behaviors) {
        var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);
        return triggerBuilder.buildBehaviorTriggers();
      },

      behaviorEvents: function(behaviorEvents, behaviors) {
        var _behaviorsEvents = {};

        _.each(behaviors, function(b, i) {
          var _events = {};
          var behaviorEvents = _.clone(_.result(b, 'events')) || {};

          // Normalize behavior events hash to allow
          // a user to use the @ui. syntax.
          behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, getBehaviorsUI(b));

          var j = 0;
          _.each(behaviorEvents, function(behaviour, key) {
            var match     = key.match(delegateEventSplitter);

            // Set event name to be namespaced using the view cid,
            // the behavior index, and the behavior event index
            // to generate a non colliding event namespace
            // http://api.jquery.com/event.namespace/
            var eventName = match[1] + '.' + [this.cid, i, j++, ' '].join('');
            var selector  = match[2];

            var eventKey  = eventName + selector;
            var handler   = _.isFunction(behaviour) ? behaviour : b[behaviour];

            _events[eventKey] = _.bind(handler, b);
          }, this);

          _behaviorsEvents = _.extend(_behaviorsEvents, _events);
        }, this);

        return _behaviorsEvents;
      }
    };

    _.extend(Behaviors, {

      // Placeholder method to be extended by the user.
      // The method should define the object that stores the behaviors.
      // i.e.
      //
      // ```js
      // Marionette.Behaviors.behaviorsLookup: function() {
      //   return App.Behaviors
      // }
      // ```
      behaviorsLookup: function() {
        throw new Marionette.Error({
          message: 'You must define where your behaviors are stored.',
          url: 'marionette.behaviors.html#behaviorslookup'
        });
      },

      // Takes care of getting the behavior class
      // given options and a key.
      // If a user passes in options.behaviorClass
      // default to using that. Otherwise delegate
      // the lookup to the users `behaviorsLookup` implementation.
      getBehaviorClass: function(options, key) {
        if (options.behaviorClass) {
          return options.behaviorClass;
        }

        // Get behavior class can be either a flat object or a method
        return Marionette._getValue(Behaviors.behaviorsLookup, this, [options, key])[key];
      },

      // Iterate over the behaviors object, for each behavior
      // instantiate it and get its grouped behaviors.
      parseBehaviors: function(view, behaviors) {
        return _.chain(behaviors).map(function(options, key) {
          var BehaviorClass = Behaviors.getBehaviorClass(options, key);

          var behavior = new BehaviorClass(options, view);
          var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, 'behaviors'));

          return [behavior].concat(nestedBehaviors);
        }).flatten().value();
      },

      // Wrap view internal methods so that they delegate to behaviors. For example,
      // `onDestroy` should trigger destroy on all of the behaviors and then destroy itself.
      // i.e.
      //
      // `view.delegateEvents = _.partial(methods.delegateEvents, view.delegateEvents, behaviors);`
      wrap: function(view, behaviors, methodNames) {
        _.each(methodNames, function(methodName) {
          view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);
        });
      }
    });

    // Class to build handlers for `triggers` on behaviors
    // for views
    function BehaviorTriggersBuilder(view, behaviors) {
      this._view      = view;
      this._behaviors = behaviors;
      this._triggers  = {};
    }

    _.extend(BehaviorTriggersBuilder.prototype, {
      // Main method to build the triggers hash with event keys and handlers
      buildBehaviorTriggers: function() {
        _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this);
        return this._triggers;
      },

      // Internal method to build all trigger handlers for a given behavior
      _buildTriggerHandlersForBehavior: function(behavior, i) {
        var triggersHash = _.clone(_.result(behavior, 'triggers')) || {};

        triggersHash = Marionette.normalizeUIKeys(triggersHash, getBehaviorsUI(behavior));

        _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));
      },

      // Internal method to create and assign the trigger handler for a given
      // behavior
      _setHandlerForBehavior: function(behavior, i, eventName, trigger) {
        // Unique identifier for the `this._triggers` hash
        var triggerKey = trigger.replace(/^\S+/, function(triggerName) {
          return triggerName + '.' + 'behaviortriggers' + i;
        });

        this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);
      }
    });

    function getBehaviorsUI(behavior) {
      return behavior._uiBindings || behavior.ui;
    }

    return Behaviors;

  })(Marionette, _);


  // App Router
  // ----------

  // Reduce the boilerplate code of handling route events
  // and then calling a single method on another object.
  // Have your routers configured to call the method on
  // your object, directly.
  //
  // Configure an AppRouter with `appRoutes`.
  //
  // App routers can only take one `controller` object.
  // It is recommended that you divide your controller
  // objects in to smaller pieces of related functionality
  // and have multiple routers / controllers, instead of
  // just one giant router and controller.
  //
  // You can also add standard routes to an AppRouter.

  Marionette.AppRouter = Backbone.Router.extend({

    constructor: function(options) {
      this.options = options || {};

      Backbone.Router.apply(this, arguments);

      var appRoutes = this.getOption('appRoutes');
      var controller = this._getController();
      this.processAppRoutes(controller, appRoutes);
      this.on('route', this._processOnRoute, this);
    },

    // Similar to route method on a Backbone Router but
    // method is called on the controller
    appRoute: function(route, methodName) {
      var controller = this._getController();
      this._addAppRoute(controller, route, methodName);
    },

    // process the route event and trigger the onRoute
    // method call, if it exists
    _processOnRoute: function(routeName, routeArgs) {
      // make sure an onRoute before trying to call it
      if (_.isFunction(this.onRoute)) {
        // find the path that matches the current route
        var routePath = _.invert(this.getOption('appRoutes'))[routeName];
        this.onRoute(routeName, routePath, routeArgs);
      }
    },

    // Internal method to process the `appRoutes` for the
    // router, and turn them in to routes that trigger the
    // specified method on the specified `controller`.
    processAppRoutes: function(controller, appRoutes) {
      if (!appRoutes) { return; }

      var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes

      _.each(routeNames, function(route) {
        this._addAppRoute(controller, route, appRoutes[route]);
      }, this);
    },

    _getController: function() {
      return this.getOption('controller');
    },

    _addAppRoute: function(controller, route, methodName) {
      var method = controller[methodName];

      if (!method) {
        throw new Marionette.Error('Method "' + methodName + '" was not found on the controller');
      }

      this.route(route, methodName, _.bind(method, controller));
    },

    mergeOptions: Marionette.mergeOptions,

    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,

    triggerMethod: Marionette.triggerMethod,

    bindEntityEvents: Marionette.proxyBindEntityEvents,

    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });

  // Application
  // -----------

  // Contain and manage the composite application as a whole.
  // Stores and starts up `Region` objects, includes an
  // event aggregator as `app.vent`
  Marionette.Application = Marionette.Object.extend({
    constructor: function(options) {
      this._initializeRegions(options);
      this._initCallbacks = new Marionette.Callbacks();
      this.submodules = {};
      _.extend(this, options);
      this._initChannel();
      Marionette.Object.call(this, options);
    },

    // Command execution, facilitated by Backbone.Wreqr.Commands
    execute: function() {
      this.commands.execute.apply(this.commands, arguments);
    },

    // Request/response, facilitated by Backbone.Wreqr.RequestResponse
    request: function() {
      return this.reqres.request.apply(this.reqres, arguments);
    },

    // Add an initializer that is either run at when the `start`
    // method is called, or run immediately if added after `start`
    // has already been called.
    addInitializer: function(initializer) {
      this._initCallbacks.add(initializer);
    },

    // kick off all of the application's processes.
    // initializes all of the regions that have been added
    // to the app, and runs all of the initializer functions
    start: function(options) {
      this.triggerMethod('before:start', options);
      this._initCallbacks.run(options, this);
      this.triggerMethod('start', options);
    },

    // Add regions to your app.
    // Accepts a hash of named strings or Region objects
    // addRegions({something: "#someRegion"})
    // addRegions({something: Region.extend({el: "#someRegion"}) });
    addRegions: function(regions) {
      return this._regionManager.addRegions(regions);
    },

    // Empty all regions in the app, without removing them
    emptyRegions: function() {
      return this._regionManager.emptyRegions();
    },

    // Removes a region from your app, by name
    // Accepts the regions name
    // removeRegion('myRegion')
    removeRegion: function(region) {
      return this._regionManager.removeRegion(region);
    },

    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this._regionManager.get(region);
    },

    // Get all the regions from the region manager
    getRegions: function() {
      return this._regionManager.getRegions();
    },

    // Create a module, attached to the application
    module: function(moduleNames, moduleDefinition) {

      // Overwrite the module class if the user specifies one
      var ModuleClass = Marionette.Module.getClass(moduleDefinition);

      var args = _.toArray(arguments);
      args.unshift(this);

      // see the Marionette.Module object for more information
      return ModuleClass.create.apply(ModuleClass, args);
    },

    // Enable easy overriding of the default `RegionManager`
    // for customized region interactions and business-specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },

    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on the application instance
    _initializeRegions: function(options) {
      var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};

      this._initRegionManager();

      // Enable users to define `regions` in instance options.
      var optionRegions = Marionette.getOption(options, 'regions');

      // Enable region options to be a function
      if (_.isFunction(optionRegions)) {
        optionRegions = optionRegions.call(this, options);
      }

      // Overwrite current regions with those passed in options
      _.extend(regions, optionRegions);

      this.addRegions(regions);

      return this;
    },

    // Internal method to set up the region manager
    _initRegionManager: function() {
      this._regionManager = this.getRegionManager();
      this._regionManager._parent = this;

      this.listenTo(this._regionManager, 'before:add:region', function() {
        Marionette._triggerMethod(this, 'before:add:region', arguments);
      });

      this.listenTo(this._regionManager, 'add:region', function(name, region) {
        this[name] = region;
        Marionette._triggerMethod(this, 'add:region', arguments);
      });

      this.listenTo(this._regionManager, 'before:remove:region', function() {
        Marionette._triggerMethod(this, 'before:remove:region', arguments);
      });

      this.listenTo(this._regionManager, 'remove:region', function(name) {
        delete this[name];
        Marionette._triggerMethod(this, 'remove:region', arguments);
      });
    },

    // Internal method to setup the Wreqr.radio channel
    _initChannel: function() {
      this.channelName = _.result(this, 'channelName') || 'global';
      this.channel = _.result(this, 'channel') || Backbone.Wreqr.radio.channel(this.channelName);
      this.vent = _.result(this, 'vent') || this.channel.vent;
      this.commands = _.result(this, 'commands') || this.channel.commands;
      this.reqres = _.result(this, 'reqres') || this.channel.reqres;
    }
  });

  /* jshint maxparams: 9 */

  // Module
  // ------

  // A simple module system, used to create privacy and encapsulation in
  // Marionette applications
  Marionette.Module = function(moduleName, app, options) {
    this.moduleName = moduleName;
    this.options = _.extend({}, this.options, options);
    // Allow for a user to overide the initialize
    // for a given module instance.
    this.initialize = options.initialize || this.initialize;

    // Set up an internal store for sub-modules.
    this.submodules = {};

    this._setupInitializersAndFinalizers();

    // Set an internal reference to the app
    // within a module.
    this.app = app;

    if (_.isFunction(this.initialize)) {
      this.initialize(moduleName, app, this.options);
    }
  };

  Marionette.Module.extend = Marionette.extend;

  // Extend the Module prototype with events / listenTo, so that the module
  // can be used as an event aggregator or pub/sub.
  _.extend(Marionette.Module.prototype, Backbone.Events, {

    // By default modules start with their parents.
    startWithParent: true,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic when extending Marionette.Module.
    initialize: function() {},

    // Initializer for a specific module. Initializers are run when the
    // module's `start` method is called.
    addInitializer: function(callback) {
      this._initializerCallbacks.add(callback);
    },

    // Finalizers are run when a module is stopped. They are used to teardown
    // and finalize any variables, references, events and other code that the
    // module had set up.
    addFinalizer: function(callback) {
      this._finalizerCallbacks.add(callback);
    },

    // Start the module, and run all of its initializers
    start: function(options) {
      // Prevent re-starting a module that is already started
      if (this._isInitialized) { return; }

      // start the sub-modules (depth-first hierarchy)
      _.each(this.submodules, function(mod) {
        // check to see if we should start the sub-module with this parent
        if (mod.startWithParent) {
          mod.start(options);
        }
      });

      // run the callbacks to "start" the current module
      this.triggerMethod('before:start', options);

      this._initializerCallbacks.run(options, this);
      this._isInitialized = true;

      this.triggerMethod('start', options);
    },

    // Stop this module by running its finalizers and then stop all of
    // the sub-modules for this module
    stop: function() {
      // if we are not initialized, don't bother finalizing
      if (!this._isInitialized) { return; }
      this._isInitialized = false;

      this.triggerMethod('before:stop');

      // stop the sub-modules; depth-first, to make sure the
      // sub-modules are stopped / finalized before parents
      _.invoke(this.submodules, 'stop');

      // run the finalizers
      this._finalizerCallbacks.run(undefined, this);

      // reset the initializers and finalizers
      this._initializerCallbacks.reset();
      this._finalizerCallbacks.reset();

      this.triggerMethod('stop');
    },

    // Configure the module with a definition function and any custom args
    // that are to be passed in to the definition function
    addDefinition: function(moduleDefinition, customArgs) {
      this._runModuleDefinition(moduleDefinition, customArgs);
    },

    // Internal method: run the module definition function with the correct
    // arguments
    _runModuleDefinition: function(definition, customArgs) {
      // If there is no definition short circut the method.
      if (!definition) { return; }

      // build the correct list of arguments for the module definition
      var args = _.flatten([
        this,
        this.app,
        Backbone,
        Marionette,
        Backbone.$, _,
        customArgs
      ]);

      definition.apply(this, args);
    },

    // Internal method: set up new copies of initializers and finalizers.
    // Calling this method will wipe out all existing initializers and
    // finalizers.
    _setupInitializersAndFinalizers: function() {
      this._initializerCallbacks = new Marionette.Callbacks();
      this._finalizerCallbacks = new Marionette.Callbacks();
    },

    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod
  });

  // Class methods to create modules
  _.extend(Marionette.Module, {

    // Create a module, hanging off the app parameter as the parent object.
    create: function(app, moduleNames, moduleDefinition) {
      var module = app;

      // get the custom args passed in after the module definition and
      // get rid of the module name and definition function
      var customArgs = _.drop(arguments, 3);

      // Split the module names and get the number of submodules.
      // i.e. an example module name of `Doge.Wow.Amaze` would
      // then have the potential for 3 module definitions.
      moduleNames = moduleNames.split('.');
      var length = moduleNames.length;

      // store the module definition for the last module in the chain
      var moduleDefinitions = [];
      moduleDefinitions[length - 1] = moduleDefinition;

      // Loop through all the parts of the module definition
      _.each(moduleNames, function(moduleName, i) {
        var parentModule = module;
        module = this._getModule(parentModule, moduleName, app, moduleDefinition);
        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
      }, this);

      // Return the last module in the definition chain
      return module;
    },

    _getModule: function(parentModule, moduleName, app, def, args) {
      var options = _.extend({}, def);
      var ModuleClass = this.getClass(def);

      // Get an existing module of this name if we have one
      var module = parentModule[moduleName];

      if (!module) {
        // Create a new module if we don't have one
        module = new ModuleClass(moduleName, app, options);
        parentModule[moduleName] = module;
        // store the module on the parent
        parentModule.submodules[moduleName] = module;
      }

      return module;
    },

    // ## Module Classes
    //
    // Module classes can be used as an alternative to the define pattern.
    // The extend function of a Module is identical to the extend functions
    // on other Backbone and Marionette classes.
    // This allows module lifecyle events like `onStart` and `onStop` to be called directly.
    getClass: function(moduleDefinition) {
      var ModuleClass = Marionette.Module;

      if (!moduleDefinition) {
        return ModuleClass;
      }

      // If all of the module's functionality is defined inside its class,
      // then the class can be passed in directly. `MyApp.module("Foo", FooModule)`.
      if (moduleDefinition.prototype instanceof ModuleClass) {
        return moduleDefinition;
      }

      return moduleDefinition.moduleClass || ModuleClass;
    },

    // Add the module definition and add a startWithParent initializer function.
    // This is complicated because module definitions are heavily overloaded
    // and support an anonymous function, module class, or options object
    _addModuleDefinition: function(parentModule, module, def, args) {
      var fn = this._getDefine(def);
      var startWithParent = this._getStartWithParent(def, module);

      if (fn) {
        module.addDefinition(fn, args);
      }

      this._addStartWithParent(parentModule, module, startWithParent);
    },

    _getStartWithParent: function(def, module) {
      var swp;

      if (_.isFunction(def) && (def.prototype instanceof Marionette.Module)) {
        swp = module.constructor.prototype.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }

      if (_.isObject(def)) {
        swp = def.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }

      return true;
    },

    _getDefine: function(def) {
      if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
        return def;
      }

      if (_.isObject(def)) {
        return def.define;
      }

      return null;
    },

    _addStartWithParent: function(parentModule, module, startWithParent) {
      module.startWithParent = module.startWithParent && startWithParent;

      if (!module.startWithParent || !!module.startWithParentIsConfigured) {
        return;
      }

      module.startWithParentIsConfigured = true;

      parentModule.addInitializer(function(options) {
        if (module.startWithParent) {
          module.start(options);
        }
      });
    }
  });


  return Marionette;
}));
/*!
 * jQuery Cookie Plugin v1.3.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */

(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as anonymous module.
    define(['jquery'], factory);
  } else {
    // Browser globals.
    factory(jQuery);
  }
}(function ($) {

  var pluses = /\+/g;

  function raw(s) {
    return s;
  }

  function decoded(s) {
    return decodeURIComponent(s.replace(pluses, ' '));
  }

  function converted(s) {
    if (s.indexOf('"') === 0) {
      // This is a quoted cookie as according to RFC2068, unescape
      s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
    }
    try {
      return config.json ? JSON.parse(s) : s;
    } catch(er) {}
  }

  var config = $.cookie = function (key, value, options) {

    // write
    if (value !== undefined) {
      options = $.extend({}, config.defaults, options);

      if (typeof options.expires === 'number') {
        var days = options.expires, t = options.expires = new Date();
        t.setDate(t.getDate() + days);
      }

      value = config.json ? JSON.stringify(value) : String(value);

      return (document.cookie = [
        config.raw ? key : encodeURIComponent(key),
        '=',
        config.raw ? value : encodeURIComponent(value),
        options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
        options.path    ? '; path=' + options.path : '',
        options.domain  ? '; domain=' + options.domain : '',
        options.secure  ? '; secure' : ''
      ].join(''));
    }

    // read
    var decode = config.raw ? raw : decoded;
    var cookies = document.cookie.split('; ');
    var result = key ? undefined : {};
    for (var i = 0, l = cookies.length; i < l; i++) {
      var parts = cookies[i].split('=');
      var name = decode(parts.shift());
      var cookie = decode(parts.join('='));

      if (key && key === name) {
        result = converted(cookie);
        break;
      }

      if (!key) {
        result[name] = converted(cookie);
      }
    }

    return result;
  };

  config.defaults = {};

  $.removeCookie = function (key, options) {
    if ($.cookie(key) !== undefined) {
      // Must not alter options, thus extending a fresh object...
      $.cookie(key, '', $.extend({}, options, { expires: -1 }));
      return true;
    }
    return false;
  };

}));
/*
  https://github.com/warfares/pretty-json @ 7105fbfb2fd80761ca90787b45e1a4056a48c1d7
  License here,
  I dont think too  much about licence
  just feel free to do anything you want... :-)
*/

// Modified to conform to our non-default template settings, and to add more XSS prevention

(function($){
window.PrettyJSON={view:{},tpl:{}};PrettyJSON.util={isObject:function(v){return Object.prototype.toString.call(v)==='[object Object]';},pad:function(str,length){str=String(str);while(str.length<length)str='0'+str;return str;},dateFormat:function(date,f){f=f.replace('YYYY',date.getFullYear());f=f.replace('YY',String(date.getFullYear()).slice(-2));f=f.replace('MM',PrettyJSON.util.pad(date.getMonth()+1,2));f=f.replace('DD',PrettyJSON.util.pad(date.getDate(),2));f=f.replace('HH24',PrettyJSON.util.pad(date.getHours(),2));f=f.replace('HH',PrettyJSON.util.pad((date.getHours()%12),2));f=f.replace('MI',PrettyJSON.util.pad(date.getMinutes(),2));f=f.replace('SS',PrettyJSON.util.pad(date.getSeconds(),2));return f;}}
PrettyJSON.tpl.Node=''+'<span class="node-container">'+'<span class="node-top node-bracket" />'+'<span class="node-content-wrapper">'+'<ul class="node-body" />'+'</span>'+'<span class="node-down node-bracket" />'+'</span>';PrettyJSON.tpl.Leaf=''+'<span class="leaf-container">'+'<span class="{{type}}"> {{data}}</span><span>{{coma}}</span>'+'</span>';PrettyJSON.view.Node=Backbone.View.extend({tagName:'span',data:null,level:1,path:'',type:'',size:0,isLast:true,rendered:false,events:{'click .node-bracket':'collapse','mouseover .node-container':'mouseover','mouseout .node-container':'mouseout'},initialize:function(opt){this.options=opt;this.data=this.options.data;this.level=this.options.level||this.level;this.path=this.options.path;this.isLast=_.isUndefined(this.options.isLast)?this.isLast:this.options.isLast;this.dateFormat=this.options.dateFormat;var m=this.getMeta();this.type=m.type;this.size=m.size;this.childs=[];this.render();if(this.level==1)
this.show();},getMeta:function(){var val={size:_.size(this.data),type:_.isArray(this.data)?'array':'object',};return val;},elements:function(){this.els={container:$(this.el).find('.node-container'),contentWrapper:$(this.el).find('.node-content-wrapper'),top:$(this.el).find('.node-top'),ul:$(this.el).find('.node-body'),down:$(this.el).find('.node-down')};},render:function(){this.tpl=_.template(PrettyJSON.tpl.Node);$(this.el).html(this.tpl);this.elements();var b=this.getBrackets();this.els.top.html(b.top);this.els.down.html(b.bottom);this.hide();return this;},renderChilds:function(){var count=1;_.each(this.data,function(val,key){var isLast=(count==this.size);count=count+1;var path=(this.type=='array')?this.path+'['+_.string.escapeHTML(key)+']':this.path+'.'+_.string.escapeHTML(key);var opt={key:key,data:val,parent:this,path:path,level:this.level+1,dateFormat:this.dateFormat,isLast:isLast};var child=(PrettyJSON.util.isObject(val)||_.isArray(val))?new PrettyJSON.view.Node(opt):new PrettyJSON.view.Leaf(opt);child.on('mouseover',function(e,path){this.trigger("mouseover",e,path);},this);child.on('mouseout',function(e){this.trigger("mouseout",e);},this);var li=$('<li/>');var colom='&nbsp;:&nbsp;';var left=$('<span />');var right=$('<span />').append(child.el);(this.type=='array')?left.html(''):left.html(_.string.escapeHTML(key)+colom);left.append(right);li.append(left);this.els.ul.append(li);child.parent=this;this.childs.push(child);},this);},isVisible:function(){return this.els.contentWrapper.is(":visible");},collapse:function(e){e.stopPropagation();this.isVisible()?this.hide():this.show();this.trigger("collapse",e);},show:function(){if(!this.rendered){this.renderChilds();this.rendered=true;}
this.els.top.html(this.getBrackets().top);this.els.contentWrapper.show();this.els.down.show();},hide:function(){var b=this.getBrackets();this.els.top.html(b.close);this.els.contentWrapper.hide();this.els.down.hide();},getBrackets:function(){var v={top:'{',bottom:'}',close:'{ ... }'};if(this.type=='array'){v={top:'[',bottom:']',close:'[ ... ]'};};v.bottom=(this.isLast)?v.bottom:v.bottom+',';v.close=(this.isLast)?v.close:v.close+',';return v;},mouseover:function(e){e.stopPropagation();this.trigger("mouseover",e,this.path);},mouseout:function(e){e.stopPropagation();this.trigger("mouseout",e);},expandAll:function(){_.each(this.childs,function(child){if(child instanceof PrettyJSON.view.Node){child.show();child.expandAll();}},this);this.show();},collapseAll:function(){_.each(this.childs,function(child){if(child instanceof PrettyJSON.view.Node){child.hide();child.collapseAll();}},this);if(this.level!=1)
this.hide();}});PrettyJSON.view.Leaf=Backbone.View.extend({tagName:'span',data:null,level:0,path:'',type:'string',isLast:true,events:{"mouseover .leaf-container":"mouseover","mouseout .leaf-container":"mouseout"},initialize:function(opt){this.options=opt;this.data=this.options.data;this.level=this.options.level;this.path=this.options.path;this.type=this.getType();this.dateFormat=this.options.dateFormat;this.isLast=_.isUndefined(this.options.isLast)?this.isLast:this.options.isLast;this.render();},getType:function(){var m='string';var d=this.data;if(_.isNumber(d))m='number';else if(_.isBoolean(d))m='boolean';else if(_.isDate(d))m='date';else if(_.isNull(d))m='null'
return m;},getState:function(){var coma=this.isLast?'':',';var state={data:this.data,level:this.level,path:this.path,type:this.type,coma:coma};return state;},render:function(){var state=this.getState();if(state.type=='date'&&this.dateFormat){state.data=PrettyJSON.util.dateFormat(this.data,this.dateFormat);}
if(state.type=='null'){state.data='null';}
if(state.type=='string'){state.data=(state.data=='')?'""':'"'+_.string.escapeHTML(state.data)+'"';}
this.tpl=_.template(PrettyJSON.tpl.Leaf);$(this.el).html(this.tpl(state));return this;},mouseover:function(e){e.stopPropagation();var path=this.path+'&nbsp;:&nbsp;<span class="'+this.type+'"><b>'+_.string.escapeHTML(this.data)+'</b></span>';this.trigger("mouseover",e,path);},mouseout:function(e){e.stopPropagation();this.trigger("mouseout",e);}});
})(jQuery);
/**!

 @license
 handlebars v4.5.3

Copyright (C) 2011-2017 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Handlebars"] = factory();
	else
		root["Handlebars"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(1)['default'];

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _handlebarsBase = __webpack_require__(3);

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = __webpack_require__(32);

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = __webpack_require__(5);

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = __webpack_require__(4);

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = __webpack_require__(33);

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = __webpack_require__(38);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;

	var _utils = __webpack_require__(4);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = __webpack_require__(9);

	var _decorators = __webpack_require__(29);

	var _logger = __webpack_require__(31);

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.5.3';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 8;
	exports.COMPILER_REVISION = COMPILER_REVISION;
	var LAST_COMPATIBLE_COMPILER_REVISION = 7;

	exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0 <4.3.0',
	  8: '>= 4.3.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};

	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: _logger2['default'],
	  log: _logger2['default'].log,

	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },

	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;

	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$defineProperty = __webpack_require__(6)['default'];

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'endLineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      endLineNumber = undefined,
	      column = undefined,
	      endColumn = undefined;

	  if (loc) {
	    line = loc.start.line;
	    endLineNumber = loc.end.line;
	    column = loc.start.column;
	    endColumn = loc.end.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  try {
	    if (loc) {
	      this.lineNumber = line;
	      this.endLineNumber = endLineNumber;

	      // Work around issue under safari where we can't directly set the column value
	      /* istanbul ignore next */
	      if (_Object$defineProperty) {
	        Object.defineProperty(this, 'column', {
	          value: column,
	          enumerable: true
	        });
	        Object.defineProperty(this, 'endColumn', {
	          value: endColumn,
	          enumerable: true
	        });
	      } else {
	        this.column = column;
	        this.endColumn = endColumn;
	      }
	    }
	  } catch (nop) {
	    /* Ignore if the browser is very particular */
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(7), __esModule: true };

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(8);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;
	exports.moveHelperToHooks = moveHelperToHooks;

	var _helpersBlockHelperMissing = __webpack_require__(10);

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = __webpack_require__(11);

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = __webpack_require__(24);

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = __webpack_require__(25);

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = __webpack_require__(26);

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = __webpack_require__(27);

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = __webpack_require__(28);

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}

	function moveHelperToHooks(instance, helperName, keepHelper) {
	  if (instance.helpers[helperName]) {
	    instance.hooks[helperName] = instance.helpers[helperName];
	    if (!keepHelper) {
	      delete instance.helpers[helperName];
	    }
	  }
	}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _Object$keys = __webpack_require__(12)['default'];

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else if (global.Symbol && context[global.Symbol.iterator]) {
	        var newContext = [];
	        var iterator = context[global.Symbol.iterator]();
	        for (var it = iterator.next(); !it.done; it = iterator.next()) {
	          newContext.push(it.value);
	        }
	        context = newContext;
	        for (var j = context.length; i < j; i++) {
	          execIteration(i, i, i === context.length - 1);
	        }
	      } else {
	        (function () {
	          var priorKey = undefined;

	          _Object$keys(context).forEach(function (key) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          });
	          if (priorKey !== undefined) {
	            execIteration(priorKey, i - 1, true);
	          }
	        })();
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(13), __esModule: true };

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(14);
	module.exports = __webpack_require__(20).Object.keys;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(15);

	__webpack_require__(17)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(16);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(18)
	  , core    = __webpack_require__(20)
	  , fails   = __webpack_require__(23);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(19)
	  , core      = __webpack_require__(20)
	  , ctx       = __webpack_require__(21)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(22);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (arguments.length != 2) {
	      throw new _exception2['default']('#if requires exactly one argument');
	    }
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    if (arguments.length != 2) {
	      throw new _exception2['default']('#unless requires exactly one argument');
	    }
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }

	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;

	    instance.log.apply(instance, args);
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var dangerousPropertyRegex = /^(constructor|__defineGetter__|__defineSetter__|__lookupGetter__|__proto__)$/;

	exports.dangerousPropertyRegex = dangerousPropertyRegex;

	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    if (!obj) {
	      return obj;
	    }
	    if (dangerousPropertyRegex.test(String(field)) && !Object.prototype.propertyIsEnumerable.call(obj, field)) {
	      return undefined;
	    }
	    return obj[field];
	  });
	};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (arguments.length != 2) {
	      throw new _exception2['default']('#with requires exactly one argument');
	    }
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }

	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;

	var _decoratorsInline = __webpack_require__(30);

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }

	    props.partials[options.args[0]] = options.fn;

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',

	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }

	    return level;
	  },

	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);

	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }

	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }

	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports['default'] = logger;
	module.exports = exports['default'];

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$seal = __webpack_require__(34)['default'];

	var _interopRequireWildcard = __webpack_require__(1)['default'];

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;

	var _utils = __webpack_require__(4);

	var Utils = _interopRequireWildcard(_utils);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	var _base = __webpack_require__(3);

	var _helpers = __webpack_require__(9);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;

	  if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
	    return;
	  }

	  if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
	    var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	        compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	    throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	  } else {
	    // Use the embedded version info since the runtime doesn't know about this revision yet
	    throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	  }
	}

	function template(templateSpec, env) {

	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  templateSpec.main.decorator = templateSpec.main_d;

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as pseudo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)
	  var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }
	    partial = env.VM.resolvePartial.call(this, partial, context, options);

	    var optionsWithHooks = Utils.extend({}, options, { hooks: this.hooks });

	    var result = env.VM.invokePartial.call(this, partial, context, optionsWithHooks);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, optionsWithHooks);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name, loc) {
	      if (!obj || !(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj, { loc: loc });
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    // An empty object to use as replacement for null-contexts
	    nullContext: _Object$seal({}),

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }

	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = Utils.extend({}, env.helpers, options.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = Utils.extend({}, env.partials, options.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = Utils.extend({}, env.decorators, options.decorators);
	      }

	      container.hooks = {};

	      var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
	      _helpers.moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);
	      _helpers.moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	      container.hooks = options.hooks;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var currentDepths = depths;
	    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
	      currentDepths = [context].concat(depths);
	    }

	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }

	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	/**
	 * This is currently part of the official API, therefore implementation details should not be changed.
	 */

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      partial = options.data['partial-block'];
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  // Use the current closure context to save the partial-block if this partial
	  var currentPartialBlock = options.data && options.data['partial-block'];
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }

	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    (function () {
	      options.data = _base.createFrame(options.data);
	      // Wrapper function to get access to currentPartialBlock from the closure
	      var fn = options.fn;
	      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
	        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        // Restore the partial-block from the closure for the execution of the block
	        // i.e. the part inside the block of the partial call.
	        options.data = _base.createFrame(options.data);
	        options.data['partial-block'] = currentPartialBlock;
	        return fn(context, options);
	      };
	      if (fn.partials) {
	        options.partials = Utils.extend({}, options.partials, fn.partials);
	      }
	    })();
	  }

	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }

	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(35), __esModule: true };

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(36);
	module.exports = __webpack_require__(20).Object.seal;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(37);

	__webpack_require__(17)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(it) : it;
	  };
	});

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ })
/******/ ])
});
;
/* Handlebars Helpers - Dan Harper (http://github.com/danharper) */

/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

/**
 *  Following lines make Handlebars helper function to work with all
 *  three such as Direct web, RequireJS AMD and Node JS.
 *  This concepts derived from UMD.
 *  @courtesy - https://github.com/umdjs/umd/blob/master/returnExports.js
 */


(function (root, factory) {
    if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory(require('handlebars'));
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['handlebars'], factory);
    } else {
        // Browser globals (root is window)
        root.returnExports = factory(root.Handlebars);
    }
}(this, function (Handlebars) {

    /**
     * If Equals
     * if_eq this compare=that
     */
    Handlebars.registerHelper('if_eq', function(context, options) {
        if (context == options.hash.compare)
            return options.fn(this);
        return options.inverse(this);
    });

    /**
     * Unless Equals
     * unless_eq this compare=that
     */
    Handlebars.registerHelper('unless_eq', function(context, options) {
        if (context == options.hash.compare)
            return options.inverse(this);
        return options.fn(this);
    });


    /**
     * If Greater Than
     * if_gt this compare=that
     */
    Handlebars.registerHelper('if_gt', function(context, options) {
        if (context > options.hash.compare)
            return options.fn(this);
        return options.inverse(this);
    });

    /**
     * Unless Greater Than
     * unless_gt this compare=that
     */
    Handlebars.registerHelper('unless_gt', function(context, options) {
        if (context > options.hash.compare)
            return options.inverse(this);
        return options.fn(this);
    });


    /**
     * If Less Than
     * if_lt this compare=that
     */
    Handlebars.registerHelper('if_lt', function(context, options) {
        if (context < options.hash.compare)
            return options.fn(this);
        return options.inverse(this);
    });

    /**
     * Unless Less Than
     * unless_lt this compare=that
     */
    Handlebars.registerHelper('unless_lt', function(context, options) {
        if (context < options.hash.compare)
            return options.inverse(this);
        return options.fn(this);
    });


    /**
     * If Greater Than or Equal To
     * if_gteq this compare=that
     */
    Handlebars.registerHelper('if_gteq', function(context, options) {
        if (context >= options.hash.compare)
            return options.fn(this);
        return options.inverse(this);
    });

    /**
     * Unless Greater Than or Equal To
     * unless_gteq this compare=that
     */
    Handlebars.registerHelper('unless_gteq', function(context, options) {
        if (context >= options.hash.compare)
            return options.inverse(this);
        return options.fn(this);
    });


    /**
     * If Less Than or Equal To
     * if_lteq this compare=that
     */
    Handlebars.registerHelper('if_lteq', function(context, options) {
        if (context <= options.hash.compare)
            return options.fn(this);
        return options.inverse(this);
    });

    /**
     * Unless Less Than or Equal To
     * unless_lteq this compare=that
     */
    Handlebars.registerHelper('unless_lteq', function(context, options) {
        if (context <= options.hash.compare)
            return options.inverse(this);
        return options.fn(this);
    });

    /**
     * Convert new line (\n\r) to <br>
     * from http://phpjs.org/functions/nl2br:480
     */
    Handlebars.registerHelper('nl2br', function(text) {
        text = Handlebars.Utils.escapeExpression(text);
        var nl2br = (text + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + '<br>' + '$2');
        return new Handlebars.SafeString(nl2br);
    });

}));
(function() {

  Handlebars.registerHelper('encodeURIComponent', function(obj) {
    return encodeURIComponent(obj);
  });

  Handlebars.registerHelper('exists?', function(obj) {
    return obj != null;
  });

  Handlebars.registerHelper('humanize', function(obj) {
    return _.str.humanize(obj);
  });

  Handlebars.registerHelper('downcase', function(obj) {
    return obj.toLowerCase();
  });

  Handlebars.registerHelper('upcase', function(obj) {
    return obj.toUpperCase();
  });

  Handlebars.registerHelper('camelize', function(obj) {
    return _.str.camelize(obj);
  });

  Handlebars.registerHelper('lower', function(obj) {
    if (obj.toLowerCase != null) {
      return obj.toLowerCase();
    }
  });

  Handlebars.registerHelper('lookupStat', function(obj, obj2) {
    return obj[obj2] || 0;
  });

  Handlebars.registerHelper('humanizeStat', function(app, statName) {
    var schema;
    schema = _.find(app.stats, function(stat) {
      return stat.num === statName;
    });
    return _.str.humanize((schema != null ? schema.name : void 0) || obj2);
  });

  Handlebars.registerHelper('formatStat', function(obj, obj2) {
    var num, stat;
    stat = obj[obj2] || 0;
    if (("" + stat).match(/^[\d]+$/) && parseInt(stat) > 1000) {
      num = (parseInt(stat) / 1000).toFixed(1);
      return ("" + num + "k").replace(/\.0/, '');
    } else {
      return stat;
    }
  });

  Handlebars.registerHelper('even_class?', function(options) {
    if ((parseInt(options.fn(this)) + 2) % 2 === 0) {
      return "even";
    } else {
      return "odd";
    }
  });

  Handlebars.registerHelper('percentize', function(arr, stats) {
    var percent;
    percent = stats[arr[0]] / stats[arr[1]] * 100 || 0;
    percent = percent.toFixed(1);
    return ("" + percent + "%").replace(/\.0/, '');
  });

  Handlebars.registerHelper('underscored', function(options) {
    return _.str.underscored(options.fn(this));
  });

  Handlebars.registerHelper('titleize', function(options) {
    return _.str.titleize(options.fn(this).replace('_', ' '));
  });

  Handlebars.registerHelper('if_arrContains', function(context, options) {
    if (_.contains(context, options.hash.compare)) {
      return options.fn(this);
    }
    return options.inverse(this);
  });

  Handlebars.registerHelper('unless_arrContains', function(context, options) {
    if (_.contains(context, options.hash.compare)) {
      return options.inverse(this);
    }
    return options.fn(this);
  });

  Handlebars.registerHelper('utc_to_datepicker', function(options) {
    if (options.fn(this)) {
      return moment(options.fn(this)).format('MM/DD/YYYY');
    } else {
      return options.fn(this);
    }
  });

  Handlebars.registerHelper('if_present', function(context, options) {
    var isLengthy;
    isLengthy = (context != null) && (typeof context === 'string' || (context instanceof Array));
    if ((context != null) && (!isLengthy || (isLengthy && context.length > 0))) {
      return options.fn(this);
    } else {
      return options.inverse(this);
    }
  });

}).call(this);
(function() {
  var PRELOADED_IMAGES;

  PRELOADED_IMAGES = ["/assets/icons/silky/information_hover-14a9d682776bb882f5a94d77a6503aa1e2ad652adfe979d5790e09b4ba9930fe.png", "/assets/spinner-e008bc0bca2fa6f9b9c113fad73551230961baec88c06b20997ec50171bb2b6b.gif", "/assets/loader-bar-8411d80c628ffbe753443d652de05d8952e41238ac8e4ab9990f3435909f5a85.gif"];

  _.each(PRELOADED_IMAGES, function(src) {
    return (new Image).src = src;
  });

}).call(this);
// Snipped from the js-popunder lib
// https://github.com/tuki/js-popunder

window.browserDetect = function() {
  var n = navigator.userAgent.toLowerCase();
  var b = {
    webkit: /webkit/.test(n),
    mozilla: (/mozilla/.test(n)) && (!/(compatible|webkit)/.test(n)),
    chrome: /chrome/.test(n),
    msie: (/msie/.test(n)) && (!/opera/.test(n)),
    firefox: /firefox/.test(n),
    safari: (/safari/.test(n) && !(/chrome/.test(n))),
    opera: /opera/.test(n)
  };
  b.version = (b.safari) ? (n.match(/.+(?:ri)[\/: ]([\d.]+)/) || [])[1] :
                           (n.match(/.+(?:ox|me|ra|ie)[\/: ]([\d.]+)/) || [])[1];
  return b;
};
(function() {
  var $, COOKIE_EXPIRATION, SUPPORTED_BROWSERS, SYSTEM_REQS_URL, browserIsSupported, browserName, browsers, key, matchedBrowsers, msg, name, requiredVersion, val, version, _i, _len,
    __hasProp = {}.hasOwnProperty;

  $ = jQuery;

  SYSTEM_REQS_URL = 'www.rapid7.com/products/metasploit/system-requirements.jsp';

  COOKIE_EXPIRATION = 2;

  SUPPORTED_BROWSERS = {
    chrome: 12,
    msie: 10,
    firefox: 18
  };

  browserIsSupported = false;

  requiredVersion = null;

  browsers = window.browserDetect();

  matchedBrowsers = [];

  for (key in SUPPORTED_BROWSERS) {
    if (!__hasProp.call(SUPPORTED_BROWSERS, key)) continue;
    val = SUPPORTED_BROWSERS[key];
    if (browsers[key]) {
      matchedBrowsers.push(key);
    }
  }

  msg = null;

  browserName = null;

  if (!(matchedBrowsers != null ? matchedBrowsers.length : void 0) && !(browsers.webkit != null) && !(browsers.mozilla != null)) {
    msg = "You are using an unsupported browser. Please install a <a " + ("href='" + SYSTEM_REQS_URL + "' target='_blank' class='supported-") + "browsers'>supported browser</a>.";
  } else {
    version = parseInt(browsers.version, 10);
    if (!version) {
      return;
    }
    browserName = null;
    for (_i = 0, _len = matchedBrowsers.length; _i < _len; _i++) {
      name = matchedBrowsers[_i];
      if (SUPPORTED_BROWSERS[name]) {
        browserName = name;
        break;
      }
    }
    requiredVersion = SUPPORTED_BROWSERS[browserName];
    browserIsSupported = !((requiredVersion != null) && version < requiredVersion);
  }

  if (!(browserIsSupported || $.cookie('browser-nagware') === '1')) {
    $(document).ready(function() {
      var $close, $nag;
      $nag = $('<div />', {
        id: 'nagware'
      }).appendTo($('body'));
      name = browserName === 'msie' ? 'IE' : browserName.replace(/^./, browserName[0].toUpperCase());
      msg || (msg = ("You are using an unsupported browser. Please upgrade to " + name + " ") + ("<strong>" + requiredVersion + "</strong> or higher."));
      $nag.html(msg);
      $('#appWrap').css('padding-top', $nag.height() + 1);
      return $close = $('<a />', {
        "class": 'close'
      }).html('&times;').appendTo($nag).click(function() {
        $nag.remove();
        $('#appWrap').css('padding-top', 0);
        return $.cookie('browser-nagware', '1', {
          expires: COOKIE_EXPIRATION
        });
      });
    });
  }

}).call(this);

/*
jQuery Growl
Copyright 2013 Kevin Sylvestre
1.1.8
*/


(function() {
  "use strict";

  var $, Animation, Growl,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Animation = (function() {

    function Animation() {}

    Animation.transitions = {
      "webkitTransition": "webkitTransitionEnd",
      "mozTransition": "mozTransitionEnd",
      "oTransition": "oTransitionEnd",
      "transition": "transitionend"
    };

    Animation.transition = function($el) {
      var el, result, type, _ref;
      el = $el[0];
      _ref = this.transitions;
      for (type in _ref) {
        result = _ref[type];
        if (el.style[type] != null) {
          return result;
        }
      }
    };

    return Animation;

  })();

  Growl = (function() {

    Growl.settings = {
      namespace: 'growl',
      duration: 3200,
      close: "&times;",
      location: "default",
      style: "default",
      size: "medium"
    };

    Growl.growl = function(settings) {
      if (settings == null) {
        settings = {};
      }
      this.initialize();
      return new Growl(settings);
    };

    Growl.initialize = function() {
      return $("body:not(:has(#growls))").append('<div id="growls" />');
    };

    function Growl(settings) {
      if (settings == null) {
        settings = {};
      }
      this.html = __bind(this.html, this);

      this.$growl = __bind(this.$growl, this);

      this.$growls = __bind(this.$growls, this);

      this.animate = __bind(this.animate, this);

      this.remove = __bind(this.remove, this);

      this.dismiss = __bind(this.dismiss, this);

      this.present = __bind(this.present, this);

      this.cycle = __bind(this.cycle, this);

      this.close = __bind(this.close, this);

      this.unbind = __bind(this.unbind, this);

      this.bind = __bind(this.bind, this);

      this.render = __bind(this.render, this);

      this.settings = $.extend({}, Growl.settings, settings);
      this.$growls().attr('class', this.settings.location);
      this.render();
    }

    Growl.prototype.render = function() {
      var $growl;
      $growl = this.$growl();
      this.$growls().append($growl);
      if (this.settings["static"] != null) {
        this.present();
      } else {
        this.cycle();
      }
    };

    Growl.prototype.bind = function($growl) {
      if ($growl == null) {
        $growl = this.$growl();
      }
      return $growl.on("contextmenu", this.close).find("." + this.settings.namespace + "-close").on("click", this.close);
    };

    Growl.prototype.unbind = function($growl) {
      if ($growl == null) {
        $growl = this.$growl();
      }
      return $growl.off("contextmenu", this.close).find("." + (this.settings.namespace - close)).off("click", this.close);
    };

    Growl.prototype.close = function(event) {
      var $growl;
      event.preventDefault();
      event.stopPropagation();
      $growl = this.$growl();
      return $growl.stop().queue(this.dismiss).queue(this.remove);
    };

    Growl.prototype.cycle = function() {
      var $growl;
      $growl = this.$growl();
      return $growl.queue(this.present).delay(this.settings.duration).queue(this.dismiss).queue(this.remove);
    };

    Growl.prototype.present = function(callback) {
      var $growl;
      $growl = this.$growl();
      this.bind($growl);
      return this.animate($growl, "" + this.settings.namespace + "-incoming", 'out', callback);
    };

    Growl.prototype.dismiss = function(callback) {
      var $growl;
      $growl = this.$growl();
      this.unbind($growl);
      return this.animate($growl, "" + this.settings.namespace + "-outgoing", 'in', callback);
    };

    Growl.prototype.remove = function(callback) {
      this.$growl().remove();
      return callback();
    };

    Growl.prototype.animate = function($element, name, direction, callback) {
      var transition;
      if (direction == null) {
        direction = 'in';
      }
      transition = Animation.transition($element);
      $element[direction === 'in' ? 'removeClass' : 'addClass'](name);
      $element.offset().position;
      $element[direction === 'in' ? 'addClass' : 'removeClass'](name);
      if (callback == null) {
        return;
      }
      if (transition != null) {
        $element.one(transition, callback);
      } else {
        callback();
      }
    };

    Growl.prototype.$growls = function() {
      var _ref;
      return (_ref = this.$_growls) != null ? _ref : this.$_growls = $('#growls');
    };

    Growl.prototype.$growl = function() {
      var _ref;
      return (_ref = this.$_growl) != null ? _ref : this.$_growl = $(this.html());
    };

    Growl.prototype.html = function() {
      return "<div class='" + this.settings.namespace + " " + this.settings.namespace + "-" + this.settings.style + " " + this.settings.namespace + "-" + this.settings.size + "'>\n  <div class='" + this.settings.namespace + "-close'>" + this.settings.close + "</div>\n  <div class='" + this.settings.namespace + "-title'>" + this.settings.title + "</div>\n  <div class='" + this.settings.namespace + "-message'>" + this.settings.message + "</div>\n</div>";
    };

    return Growl;

  })();

  $.growl = function(options) {
    if (options == null) {
      options = {};
    }
    return Growl.growl(options);
  };

  $.growl.error = function(options) {
    var settings;
    if (options == null) {
      options = {};
    }
    settings = {
      title: "Error!",
      style: "error"
    };
    return $.growl($.extend(settings, options));
  };

  $.growl.notice = function(options) {
    var settings;
    if (options == null) {
      options = {};
    }
    settings = {
      title: "Notice!",
      style: "notice"
    };
    return $.growl($.extend(settings, options));
  };

  $.growl.warning = function(options) {
    var settings;
    if (options == null) {
      options = {};
    }
    settings = {
      title: "Warning!",
      style: "warning"
    };
    return $.growl($.extend(settings, options));
  };

}).call(this);
// This [jQuery](http://jquery.com/) plugin implements an `<iframe>`
// [transport](http://api.jquery.com/extending-ajax/#Transports) so that
// `$.ajax()` calls support the uploading of files using standard HTML file
// input fields. This is done by switching the exchange from `XMLHttpRequest`
// to a hidden `iframe` element containing a form that is submitted.

// The [source for the plugin](http://github.com/cmlenz/jquery-iframe-transport)
// is available on [Github](http://github.com/) and dual licensed under the MIT
// or GPL Version 2 licenses.

// ## Usage

// To use this plugin, you simply add an `iframe` option with the value `true`
// to the Ajax settings an `$.ajax()` call, and specify the file fields to
// include in the submssion using the `files` option, which can be a selector,
// jQuery object, or a list of DOM elements containing one or more
// `<input type="file">` elements:

//     $("#myform").submit(function() {
//         $.ajax(this.action, {
//             files: $(":file", this),
//             iframe: true
//         }).complete(function(data) {
//             console.log(data);
//         });
//     });

// The plugin will construct hidden `<iframe>` and `<form>` elements, add the
// file field(s) to that form, submit the form, and process the response.

// If you want to include other form fields in the form submission, include
// them in the `data` option, and set the `processData` option to `false`:

//     $("#myform").submit(function() {
//         $.ajax(this.action, {
//             data: $(":text", this).serializeArray(),
//             files: $(":file", this),
//             iframe: true,
//             processData: false
//         }).complete(function(data) {
//             console.log(data);
//         });
//     });

// ### Response Data Types

// As the transport does not have access to the HTTP headers of the server
// response, it is not as simple to make use of the automatic content type
// detection provided by jQuery as with regular XHR. If you can't set the
// expected response data type (for example because it may vary depending on
// the outcome of processing by the server), you will need to employ a
// workaround on the server side: Send back an HTML document containing just a
// `<textarea>` element with a `data-type` attribute that specifies the MIME
// type, and put the actual payload in the textarea:

//     <textarea data-type="application/json">
//       {"ok": true, "message": "Thanks so much"}
//     </textarea>

// The iframe transport plugin will detect this and pass the value of the
// `data-type` attribute on to jQuery as if it was the "Content-Type" response
// header, thereby enabling the same kind of conversions that jQuery applies
// to regular responses. For the example above you should get a Javascript
// object as the `data` parameter of the `complete` callback, with the
// properties `ok: true` and `message: "Thanks so much"`.

// ### Handling Server Errors

// Another problem with using an `iframe` for file uploads is that it is
// impossible for the javascript code to determine the HTTP status code of the
// servers response. Effectively, all of the calls you make will look like they
// are getting successful responses, and thus invoke the `done()` or
// `complete()` callbacks. You can only determine communicate problems using
// the content of the response payload. For example, consider using a JSON
// response such as the following to indicate a problem with an uploaded file:

//     <textarea data-type="application/json">
//       {"ok": false, "message": "Please only upload reasonably sized files."}
//     </textarea>

// ### Compatibility

// This plugin has primarily been tested on Safari 5 (or later), Firefox 4 (or
// later), and Internet Explorer (all the way back to version 6). While I
// haven't found any issues with it so far, I'm fairly sure it still doesn't
// work around all the quirks in all different browsers. But the code is still
// pretty simple overall, so you should be able to fix it and contribute a
// patch :)

// ## Annotated Source

(function ($, undefined) {
  "use strict";

  // Register a prefilter that checks whether the `iframe` option is set, and
  // switches to the "iframe" data type if it is `true`.
  $.ajaxPrefilter(function (options, origOptions, jqXHR) {
    if (options.iframe) {
      return "iframe";
    }
  });

  // Register a transport for the "iframe" data type. It will only activate
  // when the "files" option has been set to a non-empty list of enabled file
  // inputs.
  $.ajaxTransport("iframe", function (options, origOptions, jqXHR) {
    var form = null,
        iframe = null,
        name = "iframe-" + $.now(),
        files = $(options.files).filter(":file:enabled"),
        markers = null;

    // This function gets called after a successful submission or an abortion
    // and should revert all changes made to the page to enable the
    // submission via this transport.
    function cleanUp() {
      markers.replaceWith(function (idx) {
        return files.get(idx);
      });
      form.remove();
      iframe.attr("src", "about:blank").remove();
    }

    // Remove "iframe" from the data types list so that further processing is
    // based on the content type returned by the server, without attempting an
    // (unsupported) conversion from "iframe" to the actual type.
    options.dataTypes.shift();

    form = $("<form enctype='multipart/form-data' method='post'></form>")
      .hide().attr({action: options.url, target: name});

    // If there is any additional data specified via the `data` option,
    // we add it as hidden fields to the form. This (currently) requires
    // the `processData` option to be set to false so that the data doesn't
    // get serialized to a string.
    if (typeof(options.data) === "string" && options.data.length > 0) {
      $.error("data must not be serialized");
    } else {
      $.each($.param(options.data || {}).split('&'), function (index, el) {
        el = el.split('=');
        $("<input type='hidden' />").attr({
          name: decodeURIComponent(el[0])
        , value: decodeURIComponent(el[1].replace(/\+/g, '%20'))
        }).appendTo(form);
      });
    }


    // Add a hidden `X-Requested-With` field with the value `IFrame` to the
    // field, to help server-side code to determine that the upload happened
    // through this transport.
    $("<input type='hidden' value='IFrame' name='X-Requested-With' />")
      .appendTo(form);

    // Move the file fields into the hidden form, but first remember their
    // original locations in the document by replacing them with disabled
    // clones. This should also avoid introducing unwanted changes to the
    // page layout during submission.
    markers = files.after(function (idx) {
      return $(this).clone().attr("disabled", true);
    }).next();
    files.appendTo(form);

    return {

      // The `send` function is called by jQuery when the request should be
      // sent.
      send: function (headers, completeCallback) {
        iframe = $("<iframe src='about:blank' name='" + name +
          "' id='" + name + "' style='display:none'></iframe>");

        // The first load event gets fired after the iframe has been injected
        // into the DOM, and is used to prepare the actual submission.
        iframe.bind("load", function () {

          // The second load event gets fired when the response to the form
          // submission is received. The implementation detects whether the
          // actual payload is embedded in a `<textarea>` element, and
          // prepares the required conversions to be made in that case.
          iframe.unbind("load").bind("load", function () {
            var doc = this.contentWindow ? this.contentWindow.document :
              (this.contentDocument ? this.contentDocument : this.document),
              root = doc.body,
              textarea = root.getElementsByTagName("textarea")[0],
              type = textarea ? textarea.getAttribute("data-type") : null,
              status = textarea ? textarea.getAttribute("data-status") : 200,
              statusText = textarea ? textarea.getAttribute("data-statusText") : "OK",
              content = {
                html: root.innerHTML,
                text: type ?
                  textarea.value :
                  $('<div/>').html(root.innerHTML).html()
              };

            cleanUp();
            completeCallback(status, statusText, content, type ?
              ("Content-Type: " + type) :
              null);
          });

          // Now that the load handler has been set up, submit the form.
          form[0].submit();
        });

        // After everything has been set up correctly, the form and iframe
        // get injected into the DOM so that the submission can be
        // initiated.
        $("body").append(form, iframe);
      },

      // The `abort` function is called by jQuery when the request should be
      // aborted.
      abort: function () {
        if (iframe !== null) {
          iframe.unbind("load").attr("src", "about:blank");
          cleanUp();
        }
      }
    };
  });

}(jQuery));
(function() {

  jQuery(document).ready(function($) {
    var $console, $hider, $oldHelp, CONSOLE_HEIGHT_COOKIE, INPUT_SEL, WORKSPACE_REGEX, consoleId, consoleMouseUp, cookieKey, desiredHeight, maxHeight, minHeight, mousedown, toggleConsole, workspaceId, yankTimeout;
    INPUT_SEL = 'textarea:focus:visible,input[type=text]:focus:visible,' + 'input[type=email]:focus:visible,input[type=number]:focus:visible,' + 'input[type=tel]:focus:visible,input[type=url]:focus:visible,' + 'input[type=week]:focus:visible,input[type=color]:focus:visible,' + 'input[type=date]:focus:visible, input[type=password]:focus:visible';
    WORKSPACE_REGEX = /workspaces\/(\d+)/;
    CONSOLE_HEIGHT_COOKIE = 'console-height';
    $oldHelp = null;
    yankTimeout = null;
    if (location.href.match(WORKSPACE_REGEX)) {
      workspaceId = location.href.match(WORKSPACE_REGEX)[1];
    } else {
      workspaceId = null;
    }
    cookieKey = 'session-consoleId' + workspaceId;
    consoleId = $.cookie(cookieKey);
    $hider = null;
    $console = null;
    mousedown = false;
    desiredHeight = parseInt($.cookie()[CONSOLE_HEIGHT_COOKIE]) || null;
    minHeight = 200;
    maxHeight = $(window).height() - 30;
    $(window).on('resize', function() {
      return maxHeight = $(window).height() - 30;
    });
    consoleMouseUp = function() {
      var consoleHeight;
      $('body').unbind('mousemove.console-dragger');
      mousedown = false;
      if (!(($console != null ? $console.length : void 0) && ($console != null ? $console.is(':visible') : void 0))) {
        return;
      }
      if ($hider != null) {
        $hider.hide();
      }
      consoleHeight = $console.height();
      if (desiredHeight !== consoleHeight) {
        desiredHeight = consoleHeight;
        $.removeCookie(CONSOLE_HEIGHT_COOKIE);
        return $.cookie(CONSOLE_HEIGHT_COOKIE, consoleHeight);
      }
    };
    toggleConsole = function() {
      var $dragger, $iframe, initHeight, initPos, onMouseMove;
      if (!workspaceId) {
        return;
      }
      $console = $('#console-tray');
      if (yankTimeout != null) {
        window.clearTimeout(yankTimeout);
      }
      if (!$console.length) {
        $console = $('<div />', {
          id: 'console-tray',
          "class": 'hidden-console'
        }).appendTo($('body'));
        if ((desiredHeight != null) && desiredHeight > minHeight && desiredHeight < maxHeight) {
          $console.height(desiredHeight);
        }
        $iframe = $('<iframe />', {
          src: 'about:blank',
          name: 'console'
        }).appendTo($console);
        $dragger = $('<div />', {
          "class": 'dragger'
        }).appendTo($console);
        $hider = $('<div />', {
          "class": 'iframe-hider'
        }).appendTo($console);
        initPos = null;
        initHeight = null;
        onMouseMove = function(e) {
          var datHeight;
          if (!mousedown) {
            return;
          }
          datHeight = initHeight + e.screenY - initPos;
          if (datHeight < minHeight) {
            datHeight = minHeight;
          }
          if (datHeight > maxHeight) {
            datHeight = maxHeight;
          }
          return $console.height(datHeight);
        };
        $dragger.on('mousedown', function(e) {
          mousedown = true;
          initHeight = $console.height();
          initPos = e.screenY;
          $hider.show();
          return $('body').bind('mousemove.console-dragger', onMouseMove);
        });
        $('body').bind('mouseup.console-events, mouseleave.console-events', consoleMouseUp);
        if (consoleId) {
          $iframe.attr('src', "/workspaces/" + workspaceId + "/consoles/" + consoleId);
        } else {
          $iframe.attr('src', "/workspaces/" + workspaceId + "/console");
        }
        return window.setTimeout(function() {
          return $console.removeClass('hidden-console');
        });
      } else if ($console.hasClass('hidden-console')) {
        $console.show();
        $('body').bind('mouseup.console-events, mouseleave.console-events', consoleMouseUp);
        $iframe = $console.find('iframe');
        $iframe[0].contentWindow.focus();
        if ($console[0].parentNode == null) {
          $console.appendTo($('body'));
        }
        return window.setTimeout(function() {
          return $console.removeClass('hidden-console');
        });
      } else if (!$console.hasClass('hidden-console')) {
        $iframe = $console.find('iframe');
        $iframe[0].contentWindow.blur();
        $console.addClass('hidden-console');
        $('body').unbind('mouseup.console-events, mouseleave.console-events');
        yankTimeout = window.setTimeout((function() {
          return $console.remove();
        }), 10000);
        return window.focus();
      }
    };
    window['toggleConsole'] = toggleConsole;
    $(document).bind('consoleLoad', function(e, data) {
      consoleId = data.id;
      $.removeCookie(cookieKey);
      return $.cookie(cookieKey, consoleId, {
        expires: new Date(+(new Date) + 1000 * 60 * 5)
      });
    });
    return $(document.body).bind('keydown', function(e) {
      var $help, fieldKey;
      if (e.keyCode === 114) {
        $help = $(e.target).parents('li').find('a.help');
        if ($help.length < 1 && ($oldHelp != null) && $oldHelp.length > 0) {
          fieldKey = $oldHelp.data('field');
          if ($(".inline-help[data-field='" + fieldKey + "']").is(':visible')) {
            $oldHelp.click();
            $oldHelp = null;
            return;
          }
        }
        if ($help && $help.length) {
          $help.click();
        }
        $oldHelp = $help;
        e.preventDefault();
        return e.stopPropagation();
      } else if (e.keyCode === 112) {
        return window.open($('#top-menu a.help-item').first().attr('href'), '_blank');
      } else if (e.keyCode === 192 & (e.altKey || e.ctrlKey)) {
        return toggleConsole.call(this);
      }
    });
  });

}).call(this);
// Backbone.Syphon, v0.4.1
// Copyright (c)2012 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
// http://github.com/derickbailey/backbone.syphon
Backbone.Syphon = (function(Backbone, $, _){
  var Syphon = {};

  // Ignore Element Types
  // --------------------

  // Tell Syphon to ignore all elements of these types. You can
  // push new types to ignore directly in to this array.
  Syphon.ignoredTypes = ["button", "submit", "reset", "fieldset"];

  // Syphon
  // ------

  // Get a JSON object that represents
  // all of the form inputs, in this view.
  // Alternately, pass a form element directly
  // in place of the view.
  Syphon.serialize = function(view, options){
    var data = {};

    // Build the configuration
    var config = buildConfig(options);

    // Get all of the elements to process
    var elements = getInputElements(view, config);

    // Process all of the elements
    _.each(elements, function(el){
      var $el = $(el);
      var type = getElementType($el); 

      // Get the key for the input
      var keyExtractor = config.keyExtractors.get(type);
      var key = keyExtractor($el);

      // Get the value for the input
      var inputReader = config.inputReaders.get(type);
      var value = inputReader($el);

      // Get the key assignment validator and make sure
      // it's valid before assigning the value to the key
      var validKeyAssignment = config.keyAssignmentValidators.get(type);
      if (validKeyAssignment($el, key, value)){
        var keychain = config.keySplitter(key);
        data = assignKeyValue(data, keychain, value);
      }
    });

    // Done; send back the results.
    return data;
  };
  
  // Use the given JSON object to populate
  // all of the form inputs, in this view.
  // Alternately, pass a form element directly
  // in place of the view.
  Syphon.deserialize = function(view, data, options){
    // Build the configuration
    var config = buildConfig(options);

    // Get all of the elements to process
    var elements = getInputElements(view, config);

    // Flatten the data structure that we are deserializing
    var flattenedData = flattenData(config, data);

    // Process all of the elements
    _.each(elements, function(el){
      var $el = $(el);
      var type = getElementType($el); 

      // Get the key for the input
      var keyExtractor = config.keyExtractors.get(type);
      var key = keyExtractor($el);

      // Get the input writer and the value to write
      var inputWriter = config.inputWriters.get(type);
      var value = flattenedData[key];

      // Write the value to the input
      inputWriter($el, value);
    });
  };

  // Helpers
  // -------

  // Retrieve all of the form inputs
  // from the form
  var getInputElements = function(view, config){
    var form = getForm(view);
    var elements = form.elements;

    elements = _.reject(elements, function(el){
      var reject;
      var type = getElementType(el);
      var extractor = config.keyExtractors.get(type);
      var identifier = extractor($(el));
     
      var foundInIgnored = _.include(config.ignoredTypes, type);
      var foundInInclude = _.include(config.include, identifier);
      var foundInExclude = _.include(config.exclude, identifier);

      if (foundInInclude){
        reject = false;
      } else {
        if (config.include){
          reject = true;
        } else {
          reject = (foundInExclude || foundInIgnored);
        }
      }

      return reject;
    });

    return elements;
  };

  // Determine what type of element this is. It
  // will either return the `type` attribute of
  // an `<input>` element, or the `tagName` of
  // the element when the element is not an `<input>`.
  var getElementType = function(el){
    var typeAttr;
    var $el = $(el);
    var tagName = $el[0].tagName;
    var type = tagName;

    if (tagName.toLowerCase() === "input"){
      typeAttr = $el.attr("type");
      if (typeAttr){
        type = typeAttr;
      } else {
        type = "text";
      }
    }
    
    // Always return the type as lowercase
    // so it can be matched to lowercase
    // type registrations.
    return type.toLowerCase();
  };
  
  // If a form element is given, just return it. 
  // Otherwise, get the form element from the view.
  var getForm = function(viewOrForm){
    if (_.isUndefined(viewOrForm.$el) && viewOrForm.tagName.toLowerCase() === 'form'){
      return viewOrForm;
    } else {
      return viewOrForm.$el.is("form") ? viewOrForm.el : viewOrForm.$("form")[0];
    }
  };

  // Build a configuration object and initialize
  // default values.
  var buildConfig = function(options){
    var config = _.clone(options) || {};
    
    config.ignoredTypes = _.clone(Syphon.ignoredTypes);
    config.inputReaders = config.inputReaders || Syphon.InputReaders;
    config.inputWriters = config.inputWriters || Syphon.InputWriters;
    config.keyExtractors = config.keyExtractors || Syphon.KeyExtractors;
    config.keySplitter = config.keySplitter || Syphon.KeySplitter;
    config.keyJoiner = config.keyJoiner || Syphon.KeyJoiner;
    config.keyAssignmentValidators = config.keyAssignmentValidators || Syphon.KeyAssignmentValidators;
    
    return config;
  };

  // Assigns `value` to a parsed JSON key. 
  //
  // The first parameter is the object which will be
  // modified to store the key/value pair.
  //
  // The second parameter accepts an array of keys as a 
  // string with an option array containing a 
  // single string as the last option.
  //
  // The third parameter is the value to be assigned.
  //
  // Examples:
  //
  // `["foo", "bar", "baz"] => {foo: {bar: {baz: "value"}}}`
  // 
  // `["foo", "bar", ["baz"]] => {foo: {bar: {baz: ["value"]}}}`
  // 
  // When the final value is an array with a string, the key
  // becomes an array, and values are pushed in to the array,
  // allowing multiple fields with the same name to be 
  // assigned to the array.
  var assignKeyValue = function(obj, keychain, value) {
    if (!keychain){ return obj; }

    var key = keychain.shift();

    // build the current object we need to store data
    if (!obj[key]){
      obj[key] = _.isArray(key) ? [] : {};
    }

    // if it's the last key in the chain, assign the value directly
    if (keychain.length === 0){
      if (_.isArray(obj[key])){
        obj[key].push(value);
      } else {
        obj[key] = value;
      }
    }

    // recursive parsing of the array, depth-first
    if (keychain.length > 0){
      assignKeyValue(obj[key], keychain, value);
    }
    
    return obj;
  };

  // Flatten the data structure in to nested strings, using the
  // provided `KeyJoiner` function.
  //
  // Example:
  //
  // This input:
  //
  // ```js
  // {
  //   widget: "wombat",
  //   foo: {
  //     bar: "baz",
  //     baz: {
  //       quux: "qux"
  //     },
  //     quux: ["foo", "bar"]
  //   }
  // }
  // ```
  //
  // With a KeyJoiner that uses [ ] square brackets, 
  // should produce this output:
  //
  // ```js
  // {
  //  "widget": "wombat",
  //  "foo[bar]": "baz",
  //  "foo[baz][quux]": "qux",
  //  "foo[quux]": ["foo", "bar"]
  // }
  // ```
  var flattenData = function(config, data, parentKey){
    var flatData = {};

    _.each(data, function(value, keyName){
      var hash = {};

      // If there is a parent key, join it with
      // the current, child key.
      if (parentKey){
        keyName = config.keyJoiner(parentKey, keyName);
      }

      if (_.isArray(value)){
        keyName += "[]";
        hash[keyName] = value;
      } else if (_.isObject(value)){
        hash = flattenData(config, value, keyName);
      } else {
        hash[keyName] = value;
      }

      // Store the resulting key/value pairs in the
      // final flattened data object
      _.extend(flatData, hash);
    });

    return flatData;
  };

  return Syphon;
})(Backbone, jQuery, _);

// Type Registry
// -------------

// Type Registries allow you to register something to
// an input type, and retrieve either the item registered
// for a specific type or the default registration
Backbone.Syphon.TypeRegistry = function(){
  this.registeredTypes = {};
};

// Borrow Backbone's `extend` keyword for our TypeRegistry
Backbone.Syphon.TypeRegistry.extend = Backbone.Model.extend;

_.extend(Backbone.Syphon.TypeRegistry.prototype, {

  // Get the registered item by type. If nothing is
  // found for the specified type, the default is
  // returned.
  get: function(type){
    var item = this.registeredTypes[type];

    if (!item){
      item = this.registeredTypes["default"];
    }

    return item;
  },

  // Register a new item for a specified type
  register: function(type, item){
    this.registeredTypes[type] = item;
  },

  // Register a default item to be used when no
  // item for a specified type is found
  registerDefault: function(item){
    this.registeredTypes["default"] = item;
  },

  // Remove an item from a given type registration
  unregister: function(type){
    if (this.registeredTypes[type]){
      delete this.registeredTypes[type];
    }
  }
});




// Key Extractors
// --------------

// Key extractors produce the "key" in `{key: "value"}`
// pairs, when serializing.
Backbone.Syphon.KeyExtractorSet = Backbone.Syphon.TypeRegistry.extend();

// Built-in Key Extractors
Backbone.Syphon.KeyExtractors = new Backbone.Syphon.KeyExtractorSet();

// The default key extractor, which uses the
// input element's "id" attribute
Backbone.Syphon.KeyExtractors.registerDefault(function($el){
  return $el.prop("name");
});


// Input Readers
// -------------

// Input Readers are used to extract the value from
// an input element, for the serialized object result
Backbone.Syphon.InputReaderSet = Backbone.Syphon.TypeRegistry.extend();

// Built-in Input Readers
Backbone.Syphon.InputReaders = new Backbone.Syphon.InputReaderSet();

// The default input reader, which uses an input
// element's "value"
Backbone.Syphon.InputReaders.registerDefault(function($el){
  return $el.val();
});

// Checkbox reader, returning a boolean value for
// whether or not the checkbox is checked.
Backbone.Syphon.InputReaders.register("checkbox", function($el){
  var checked = $el.prop("checked");
  return checked;
});


// Input Writers
// -------------

// Input Writers are used to insert a value from an
// object into an input element.
Backbone.Syphon.InputWriterSet = Backbone.Syphon.TypeRegistry.extend();

// Built-in Input Writers
Backbone.Syphon.InputWriters = new Backbone.Syphon.InputWriterSet();

// The default input writer, which sets an input
// element's "value"
Backbone.Syphon.InputWriters.registerDefault(function($el, value){
  $el.val(value);
});

// Checkbox writer, set whether or not the checkbox is checked
// depending on the boolean value.
Backbone.Syphon.InputWriters.register("checkbox", function($el, value){
  $el.prop("checked", value);
});

// Radio button writer, set whether or not the radio button is
// checked.  The button should only be checked if it's value
// equals the given value.
Backbone.Syphon.InputWriters.register("radio", function($el, value){
  $el.prop("checked", $el.val() === value);
});

// Key Assignment Validators
// -------------------------

// Key Assignment Validators are used to determine whether or not a
// key should be assigned to a value, after the key and value have been
// extracted from the element. This is the last opportunity to prevent
// bad data from getting serialized to your object.

Backbone.Syphon.KeyAssignmentValidatorSet = Backbone.Syphon.TypeRegistry.extend();

// Build-in Key Assignment Validators
Backbone.Syphon.KeyAssignmentValidators = new Backbone.Syphon.KeyAssignmentValidatorSet();

// Everything is valid by default
Backbone.Syphon.KeyAssignmentValidators.registerDefault(function(){ return true; });

// But only the "checked" radio button for a given
// radio button group is valid
Backbone.Syphon.KeyAssignmentValidators.register("radio", function($el, key, value){ 
  return $el.prop("checked");
});


// Backbone.Syphon.KeySplitter
// ---------------------------

// This function is used to split DOM element keys in to an array
// of parts, which are then used to create a nested result structure.
// returning `["foo", "bar"]` results in `{foo: { bar: "value" }}`.
//
// Override this method to use a custom key splitter, such as:
// `<input name="foo.bar.baz">`, `return key.split(".")`
Backbone.Syphon.KeySplitter = function(key){
  var matches = key.match(/[^\[\]]+/g);

  if (key.indexOf("[]") === key.length - 2){
    lastKey = matches.pop();
    matches.push([lastKey]);
  }

  return matches;
}


// Backbone.Syphon.KeyJoiner
// -------------------------

// Take two segments of a key and join them together, to create the
// de-normalized key name, when deserializing a data structure back
// in to a form.
//
// Example: 
//
// With this data strucutre `{foo: { bar: {baz: "value", quux: "another"} } }`,
// the key joiner will be called with these parameters, and assuming the
// join happens with "[ ]" square brackets, the specified output:
// 
// `KeyJoiner("foo", "bar")` //=> "foo[bar]"
// `KeyJoiner("foo[bar]", "baz")` //=> "foo[bar][baz]"
// `KeyJoiner("foo[bar]", "quux")` //=> "foo[bar][quux]"

Backbone.Syphon.KeyJoiner = function(parentKey, childKey){
  return parentKey + "[" + childKey + "]";
}
;
/*! Backbone.Mutators - v0.4.1
------------------------------
Build @ 2014-03-27
Documentation and Full License Available at:
http://asciidisco.github.com/Backbone.Mutators/index.html
git://github.com/asciidisco/Backbone.Mutators.git
Copyright (c) 2014 Sebastian Golasch <public@asciidisco.com>

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the

Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.*/

!function(a,b,c){"use strict";"object"==typeof exports?module.exports=b(require("underscore"),require("backbone")):"function"==typeof define&&define.amd?define(["underscore","backbone"],function(d,e){return d=d===c?a._:d,e=e===c?a.Backbone:e,a.returnExportsGlobal=b(d,e,a)}):a.returnExportsGlobal=b(a._,a.Backbone)}(this,function(a,b,c,d){"use strict";b=b===d?c.Backbone:b,a=a===d?c._:a;var e=function(){},f=b.Model.prototype.get,g=b.Model.prototype.set,h=b.Model.prototype.toJSON;return e.prototype.mutators={},e.prototype.get=function(b){var c=this.mutators!==d;return c===!0&&a.isFunction(this.mutators[b])===!0?this.mutators[b].call(this):c===!0&&a.isObject(this.mutators[b])===!0&&a.isFunction(this.mutators[b].get)===!0?this.mutators[b].get.call(this):f.call(this,b)},e.prototype.set=function(b,c,e){var f=this.mutators!==d,h=null,i=null;return h=g.call(this,b,c,e),a.isObject(b)||null===b?(i=b,e=c):(i={},i[b]=c),f===!0&&a.isObject(this.mutators[b])===!0&&(a.isFunction(this.mutators[b].set)===!0?h=this.mutators[b].set.call(this,b,i[b],e,a.bind(g,this)):a.isFunction(this.mutators[b])&&(h=this.mutators[b].call(this,b,i[b],e,a.bind(g,this)))),f===!0&&a.isObject(i)&&a.each(i,a.bind(function(b,c){if(a.isObject(this.mutators[c])===!0){var f=this.mutators[c];a.isFunction(f.set)&&(f=f.set),a.isFunction(f)&&((e===d||a.isObject(e)===!0&&e.silent!==!0&&e.mutators!==d&&e.mutators.silent!==!0)&&this.trigger("mutators:set:"+c),f.call(this,c,b,e,a.bind(g,this)))}},this)),h},e.prototype.toJSON=function(b){var c,d,e=h.call(this);return a.each(this.mutators,a.bind(function(f,g){a.isObject(this.mutators[g])===!0&&a.isFunction(this.mutators[g].get)?(c=a.has(b||{},"emulateHTTP"),d=this.mutators[g].transient,c&&d||(e[g]=a.bind(this.mutators[g].get,this)())):a.isFunction(this.mutators[g])&&(e[g]=a.bind(this.mutators[g],this)())},this)),e},e.prototype.escape=function(b){var c=this.get(b);return a.escape(null==c?"":""+c)},a.extend(b.Model.prototype,e.prototype),b.Mutators=e,e});
/* Onsi Fakhouri <onsijoe@gmail.com>
 * backbone.cocktail v0.5.7
 * https://github.com/onsi/cocktail/ */

!function(a){"function"==typeof require&&"undefined"!=typeof module&&module.exports?module.exports=a(require("underscore")):"function"==typeof define2?define(["underscore"],a):this.Cocktail=a(_)}(function(a){var b={};b.mixins={},b.mixin=function(c){var d=a.chain(arguments).toArray().rest().flatten().value(),e=c.prototype||c,f={};return a(d).each(function(c){a.isString(c)&&(c=b.mixins[c]),a(c).each(function(b,c){if(a.isFunction(b)){if(e[c]===b)return;e[c]&&(f[c]=f[c]||[e[c]],f[c].push(b)),e[c]=b}else a.isArray(b)?e[c]=a.union(b,e[c]||[]):a.isObject(b)?e[c]=a.extend({},b,e[c]||{}):c in e||(e[c]=b)})}),a(f).each(function(b,c){e[c]=function(){var c,d=this,e=arguments;return a(b).each(function(b){var f=a.isFunction(b)?b.apply(d,e):b;c="undefined"==typeof f?c:f}),c}}),c};var c;return b.patch=function(d){c=d.Model.extend;var e=function(a,d){var e=c.call(this,a,d),f=e.prototype.mixins;return f&&e.prototype.hasOwnProperty("mixins")&&b.mixin(e,f),e};a([d.Model,d.Collection,d.Router,d.View]).each(function(c){c.mixin=function(){b.mixin(this,a.toArray(arguments))},c.extend=e})},b.unpatch=function(b){a([b.Model,b.Collection,b.Router,b.View]).each(function(a){a.mixin=void 0,a.extend=c})},b});
/*! nanoScrollerJS - v0.7.2
* http://jamesflorentino.github.com/nanoScrollerJS/
* Copyright (c) 2013 James Florentino; Licensed MIT */



(function($, window, document) {
  "use strict";

  var BROWSER_IS_IE7, BROWSER_SCROLLBAR_WIDTH, DOMSCROLL, DOWN, DRAG, KEYDOWN, KEYUP, MOUSEDOWN, MOUSEMOVE, MOUSEUP, MOUSEWHEEL, NanoScroll, PANEDOWN, RESIZE, SCROLL, SCROLLBAR, TOUCHMOVE, UP, WHEEL, defaults, getBrowserScrollbarWidth;
  defaults = {
    /**
      a classname for the pane element.
      @property paneClass
      @type String
      @default 'pane'
    */

    paneClass: 'pane',
    /**
      a classname for the slider element.
      @property sliderClass
      @type String
      @default 'slider'
    */

    sliderClass: 'slider',
    /**
      a classname for the content element.
      @property contentClass
      @type String
      @default 'content'
    */

    contentClass: 'content',
    /**
      a setting to enable native scrolling in iOS devices.
      @property iOSNativeScrolling
      @type Boolean
      @default false
    */

    iOSNativeScrolling: false,
    /**
      a setting to prevent the rest of the page being
      scrolled when user scrolls the `.content` element.
      @property preventPageScrolling
      @type Boolean
      @default false
    */

    preventPageScrolling: false,
    /**
      a setting to disable binding to the resize event.
      @property disableResize
      @type Boolean
      @default false
    */

    disableResize: false,
    /**
      a setting to make the scrollbar always visible.
      @property alwaysVisible
      @type Boolean
      @default false
    */

    alwaysVisible: false,
    /**
      a default timeout for the `flash()` method.
      @property flashDelay
      @type Number
      @default 1500
    */

    flashDelay: 1500,
    /**
      a minimum height for the `.slider` element.
      @property sliderMinHeight
      @type Number
      @default 20
    */

    sliderMinHeight: 20,
    /**
      a maximum height for the `.slider` element.
      @property sliderMaxHeight
      @type Number
      @default null
    */

    sliderMaxHeight: null,
    /**
      an alternate document context.
      @property documentContext
      @type Document
      @default null
    */

    documentContext: null,
    /**
      an alternate window context.
      @property windowContext
      @type Window
      @default null
    */

    windowContext: null
  };
  /**
    @property SCROLLBAR
    @type String
    @static
    @final
    @private
  */

  SCROLLBAR = 'scrollbar';
  /**
    @property SCROLL
    @type String
    @static
    @final
    @private
  */

  SCROLL = 'scroll';
  /**
    @property MOUSEDOWN
    @type String
    @final
    @private
  */

  MOUSEDOWN = 'mousedown';
  /**
    @property MOUSEMOVE
    @type String
    @static
    @final
    @private
  */

  MOUSEMOVE = 'mousemove';
  /**
    @property MOUSEWHEEL
    @type String
    @final
    @private
  */

  MOUSEWHEEL = 'mousewheel';
  /**
    @property MOUSEUP
    @type String
    @static
    @final
    @private
  */

  MOUSEUP = 'mouseup';
  /**
    @property RESIZE
    @type String
    @final
    @private
  */

  RESIZE = 'resize';
  /**
    @property DRAG
    @type String
    @static
    @final
    @private
  */

  DRAG = 'drag';
  /**
    @property UP
    @type String
    @static
    @final
    @private
  */

  UP = 'up';
  /**
    @property PANEDOWN
    @type String
    @static
    @final
    @private
  */

  PANEDOWN = 'panedown';
  /**
    @property DOMSCROLL
    @type String
    @static
    @final
    @private
  */

  DOMSCROLL = 'DOMMouseScroll';
  /**
    @property DOWN
    @type String
    @static
    @final
    @private
  */

  DOWN = 'down';
  /**
    @property WHEEL
    @type String
    @static
    @final
    @private
  */

  WHEEL = 'wheel';
  /**
    @property KEYDOWN
    @type String
    @static
    @final
    @private
  */

  KEYDOWN = 'keydown';
  /**
    @property KEYUP
    @type String
    @static
    @final
    @private
  */

  KEYUP = 'keyup';
  /**
    @property TOUCHMOVE
    @type String
    @static
    @final
    @private
  */

  TOUCHMOVE = 'touchmove';
  /**
    @property BROWSER_IS_IE7
    @type Boolean
    @static
    @final
    @private
  */

  BROWSER_IS_IE7 = window.navigator.appName === 'Microsoft Internet Explorer' && /msie 7./i.test(window.navigator.appVersion) && window.ActiveXObject;
  /**
    @property BROWSER_SCROLLBAR_WIDTH
    @type Number
    @static
    @default null
    @private
  */

  BROWSER_SCROLLBAR_WIDTH = null;
  /**
    Returns browser's native scrollbar width
    @method getBrowserScrollbarWidth
    @return {Number} the scrollbar width in pixels
    @static
    @private
  */

  getBrowserScrollbarWidth = function() {
    var outer, outerStyle, scrollbarWidth;
    outer = document.createElement('div');
    outerStyle = outer.style;
    outerStyle.position = 'absolute';
    outerStyle.width = '100px';
    outerStyle.height = '100px';
    outerStyle.overflow = SCROLL;
    outerStyle.top = '-9999px';
    document.body.appendChild(outer);
    scrollbarWidth = outer.offsetWidth - outer.clientWidth;
    document.body.removeChild(outer);
    return scrollbarWidth;
  };
  /**
    @class NanoScroll
    @param element {HTMLElement|Node} the main element
    @param options {Object} nanoScroller's options
    @constructor
  */

  NanoScroll = (function() {

    function NanoScroll(el, options) {
      this.el = el;
      this.options = options;
      BROWSER_SCROLLBAR_WIDTH || (BROWSER_SCROLLBAR_WIDTH = getBrowserScrollbarWidth());
      this.$el = $(this.el);
      this.doc = $(this.options.documentContext || document);
      this.win = $(this.options.windowContext || window);
      this.$content = this.$el.children("." + options.contentClass);
      this.$content.attr('tabindex', 0);
      this.content = this.$content[0];
      if (this.options.iOSNativeScrolling && (this.el.style.WebkitOverflowScrolling != null)) {
        this.nativeScrolling();
      } else {
        this.generate();
      }
      this.createEvents();
      this.addEvents();
      this.reset();
    }

    /**
      Prevents the rest of the page being scrolled
      when user scrolls the `.content` element.
      @method preventScrolling
      @param event {Event}
      @param direction {String} Scroll direction (up or down)
      @private
    */


    NanoScroll.prototype.preventScrolling = function(e, direction) {
      if (!this.isActive) {
        return;
      }
      if (e.type === DOMSCROLL) {
        if (direction === DOWN && e.originalEvent.detail > 0 || direction === UP && e.originalEvent.detail < 0) {
          e.preventDefault();
        }
      } else if (e.type === MOUSEWHEEL) {
        if (!e.originalEvent || !e.originalEvent.wheelDelta) {
          return;
        }
        if (direction === DOWN && e.originalEvent.wheelDelta < 0 || direction === UP && e.originalEvent.wheelDelta > 0) {
          e.preventDefault();
        }
      }
    };

    /**
      Enable iOS native scrolling
    */


    NanoScroll.prototype.nativeScrolling = function() {
      this.$content.css({
        WebkitOverflowScrolling: 'touch'
      });
      this.iOSNativeScrolling = true;
      this.isActive = true;
    };

    /**
      Updates those nanoScroller properties that
      are related to current scrollbar position.
      @method updateScrollValues
      @private
    */


    NanoScroll.prototype.updateScrollValues = function() {
      var content;
      content = this.content;
      this.maxScrollTop = content.scrollHeight - content.clientHeight;
      this.contentScrollTop = content.scrollTop;
      if (!this.iOSNativeScrolling) {
        this.maxSliderTop = this.paneHeight - this.sliderHeight;
        this.sliderTop = this.contentScrollTop * this.maxSliderTop / this.maxScrollTop;
      }
    };

    /**
      Creates event related methods
      @method createEvents
      @private
    */


    NanoScroll.prototype.createEvents = function() {
      var _this = this;
      this.events = {
        down: function(e) {
          _this.isBeingDragged = true;
          _this.offsetY = e.pageY - _this.slider.offset().top;
          _this.pane.addClass('active');
          _this.doc.bind(MOUSEMOVE, _this.events[DRAG]).bind(MOUSEUP, _this.events[UP]);
          return false;
        },
        drag: function(e) {
          _this.sliderY = e.pageY - _this.$el.offset().top - _this.offsetY;
          _this.scroll();
          _this.updateScrollValues();
          if (_this.contentScrollTop >= _this.maxScrollTop) {
            _this.$el.trigger('scrollend');
          } else if (_this.contentScrollTop === 0) {
            _this.$el.trigger('scrolltop');
          }
          return false;
        },
        up: function(e) {
          _this.isBeingDragged = false;
          _this.pane.removeClass('active');
          _this.doc.unbind(MOUSEMOVE, _this.events[DRAG]).unbind(MOUSEUP, _this.events[UP]);
          return false;
        },
        resize: function(e) {
          _this.reset();
        },
        panedown: function(e) {
          _this.sliderY = (e.offsetY || e.originalEvent.layerY) - (_this.sliderHeight * 0.5);
          _this.scroll();
          _this.events.down(e);
          return false;
        },
        scroll: function(e) {
          if (_this.isBeingDragged) {
            return;
          }
          _this.updateScrollValues();
          if (!_this.iOSNativeScrolling) {
            _this.sliderY = _this.sliderTop;
            _this.slider.css({
              top: _this.sliderTop
            });
          }
          if (e == null) {
            return;
          }
          if (_this.contentScrollTop >= _this.maxScrollTop) {
            if (_this.options.preventPageScrolling) {
              _this.preventScrolling(e, DOWN);
            }
            _this.$el.trigger('scrollend');
          } else if (_this.contentScrollTop === 0) {
            if (_this.options.preventPageScrolling) {
              _this.preventScrolling(e, UP);
            }
            _this.$el.trigger('scrolltop');
          }
        },
        wheel: function(e) {
          var delta;
          if (e == null) {
            return;
          }
          delta = e.delta || e.wheelDelta || (e.originalEvent && e.originalEvent.wheelDelta) || -e.detail || (e.originalEvent && -e.originalEvent.detail);
          if (delta) {
            _this.sliderY += -delta / 3;
          }
          _this.scroll();
          return false;
        }
      };
    };

    /**
      Adds event listeners with jQuery.
      @method addEvents
      @private
    */


    NanoScroll.prototype.addEvents = function() {
      var events;
      this.removeEvents();
      events = this.events;
      if (!this.options.disableResize) {
        this.win.bind(RESIZE, events[RESIZE]);
      }
      if (!this.iOSNativeScrolling) {
        this.slider.bind(MOUSEDOWN, events[DOWN]);
        this.pane.bind(MOUSEDOWN, events[PANEDOWN]).bind("" + MOUSEWHEEL + " " + DOMSCROLL, events[WHEEL]);
      }
      this.$content.bind("" + SCROLL + " " + MOUSEWHEEL + " " + DOMSCROLL + " " + TOUCHMOVE, events[SCROLL]);
    };

    /**
      Removes event listeners with jQuery.
      @method removeEvents
      @private
    */


    NanoScroll.prototype.removeEvents = function() {
      var events;
      events = this.events;
      this.win.unbind(RESIZE, events[RESIZE]);
      if (!this.iOSNativeScrolling) {
        this.slider.unbind();
        this.pane.unbind();
      }
      this.$content.unbind("" + SCROLL + " " + MOUSEWHEEL + " " + DOMSCROLL + " " + TOUCHMOVE, events[SCROLL]);
    };

    /**
      Generates nanoScroller's scrollbar and elements for it.
      @method generate
      @chainable
      @private
    */


    NanoScroll.prototype.generate = function() {
      var contentClass, cssRule, options, paneClass, sliderClass;
      options = this.options;
      paneClass = options.paneClass, sliderClass = options.sliderClass, contentClass = options.contentClass;
      if (!this.$el.find("" + paneClass).length && !this.$el.find("" + sliderClass).length) {
        this.$el.append("<div class=\"" + paneClass + "\"><div class=\"" + sliderClass + "\" /></div>");
      }
      this.pane = this.$el.children("." + paneClass);
      this.slider = this.pane.find("." + sliderClass);
      if (BROWSER_SCROLLBAR_WIDTH) {
        cssRule = {
          right: -BROWSER_SCROLLBAR_WIDTH
        };
        this.$el.addClass('has-scrollbar');
      }
      if (cssRule != null) {
        this.$content.css(cssRule);
      }
      return this;
    };

    /**
      @method restore
      @private
    */


    NanoScroll.prototype.restore = function() {
      this.stopped = false;
      this.pane.show();
      this.addEvents();
    };

    /**
      Resets nanoScroller's scrollbar.
      @method reset
      @chainable
      @example
          $(".nano").nanoScroller();
    */


    NanoScroll.prototype.reset = function() {
      var content, contentHeight, contentStyle, contentStyleOverflowY, paneBottom, paneHeight, paneOuterHeight, paneTop, sliderHeight;
      if (this.iOSNativeScrolling) {
        this.contentHeight = this.content.scrollHeight;
        return;
      }
      if (!this.$el.find("." + this.options.paneClass).length) {
        this.generate().stop();
      }
      if (this.stopped) {
        this.restore();
      }
      content = this.content;
      contentStyle = content.style;
      contentStyleOverflowY = contentStyle.overflowY;
      if (BROWSER_IS_IE7) {
        this.$content.css({
          height: this.$content.height()
        });
      }
      contentHeight = content.scrollHeight + BROWSER_SCROLLBAR_WIDTH;
      paneHeight = this.pane.outerHeight();
      paneTop = parseInt(this.pane.css('top'), 10);
      paneBottom = parseInt(this.pane.css('bottom'), 10);
      paneOuterHeight = paneHeight + paneTop + paneBottom;
      sliderHeight = Math.round(paneOuterHeight / contentHeight * paneOuterHeight);
      if (sliderHeight < this.options.sliderMinHeight) {
        sliderHeight = this.options.sliderMinHeight;
      } else if ((this.options.sliderMaxHeight != null) && sliderHeight > this.options.sliderMaxHeight) {
        sliderHeight = this.options.sliderMaxHeight;
      }
      if (contentStyleOverflowY === SCROLL && contentStyle.overflowX !== SCROLL) {
        sliderHeight += BROWSER_SCROLLBAR_WIDTH;
      }
      this.maxSliderTop = paneOuterHeight - sliderHeight;
      this.contentHeight = contentHeight;
      this.paneHeight = paneHeight;
      this.paneOuterHeight = paneOuterHeight;
      this.sliderHeight = sliderHeight;
      this.slider.height(sliderHeight);
      this.events.scroll();
      this.pane.show();
      this.isActive = true;
      if ((content.scrollHeight === content.clientHeight) || (this.pane.outerHeight(true) >= content.scrollHeight && contentStyleOverflowY !== SCROLL)) {
        this.pane.hide();
        this.isActive = false;
      } else if (this.el.clientHeight === content.scrollHeight && contentStyleOverflowY === SCROLL) {
        this.slider.hide();
      } else {
        this.slider.show();
      }
      this.pane.css({
        opacity: (this.options.alwaysVisible ? 1 : ''),
        visibility: (this.options.alwaysVisible ? 'visible' : '')
      });
      return this;
    };

    /**
      @method scroll
      @private
      @example
          $(".nano").nanoScroller({ scroll: 'top' });
    */


    NanoScroll.prototype.scroll = function() {
      if (!this.isActive) {
        return;
      }
      this.sliderY = Math.max(0, this.sliderY);
      this.sliderY = Math.min(this.maxSliderTop, this.sliderY);
      this.$content.scrollTop((this.paneHeight - this.contentHeight + BROWSER_SCROLLBAR_WIDTH) * this.sliderY / this.maxSliderTop * -1);
      if (!this.iOSNativeScrolling) {
        this.slider.css({
          top: this.sliderY
        });
      }
      return this;
    };

    /**
      Scroll at the bottom with an offset value
      @method scrollBottom
      @param offsetY {Number}
      @chainable
      @example
          $(".nano").nanoScroller({ scrollBottom: value });
    */


    NanoScroll.prototype.scrollBottom = function(offsetY) {
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.$content.scrollTop(this.contentHeight - this.$content.height() - offsetY).trigger(MOUSEWHEEL);
      return this;
    };

    /**
      Scroll at the top with an offset value
      @method scrollTop
      @param offsetY {Number}
      @chainable
      @example
          $(".nano").nanoScroller({ scrollTop: value });
    */


    NanoScroll.prototype.scrollTop = function(offsetY) {
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.$content.scrollTop(+offsetY).trigger(MOUSEWHEEL);
      return this;
    };

    /**
      Scroll to an element
      @method scrollTo
      @param node {Node} A node to scroll to.
      @chainable
      @example
          $(".nano").nanoScroller({ scrollTo: $('#a_node') });
    */


    NanoScroll.prototype.scrollTo = function(node) {
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.scrollTop($(node).get(0).offsetTop);
      return this;
    };

    /**
      To stop the operation.
      This option will tell the plugin to disable all event bindings and hide the gadget scrollbar from the UI.
      @method stop
      @chainable
      @example
          $(".nano").nanoScroller({ stop: true });
    */


    NanoScroll.prototype.stop = function() {
      this.stopped = true;
      this.removeEvents();
      this.pane.hide();
      return this;
    };

    /**
      Destroys nanoScroller and restores browser's native scrollbar.
      @method destroy
      @chainable
      @example
          $(".nano").nanoScroller({ destroy: true });
    */


    NanoScroll.prototype.destroy = function() {
      if (!this.stopped) {
        this.stop();
      }
      if (this.pane.length) {
        this.pane.remove();
      }
      if (BROWSER_IS_IE7) {
        this.$content.height('');
      }
      this.$content.removeAttr('tabindex');
      if (this.$el.hasClass('has-scrollbar')) {
        this.$el.removeClass('has-scrollbar');
        this.$content.css({
          right: ''
        });
      }
      return this;
    };

    /**
      To flash the scrollbar gadget for an amount of time defined in plugin settings (defaults to 1,5s).
      Useful if you want to show the user (e.g. on pageload) that there is more content waiting for him.
      @method flash
      @chainable
      @example
          $(".nano").nanoScroller({ flash: true });
    */


    NanoScroll.prototype.flash = function() {
      var _this = this;
      if (!this.isActive) {
        return;
      }
      this.reset();
      this.pane.addClass('flashed');
      setTimeout(function() {
        _this.pane.removeClass('flashed');
      }, this.options.flashDelay);
      return this;
    };

    return NanoScroll;

  })();
  $.fn.nanoScroller = function(settings) {
    return this.each(function() {
      var options, scrollbar;
      if (!(scrollbar = this.nanoscroller)) {
        options = $.extend({}, defaults, settings);
        this.nanoscroller = scrollbar = new NanoScroll(this, options);
      }
      if (settings && typeof settings === "object") {
        $.extend(scrollbar.options, settings);
        if (settings.scrollBottom) {
          return scrollbar.scrollBottom(settings.scrollBottom);
        }
        if (settings.scrollTop) {
          return scrollbar.scrollTop(settings.scrollTop);
        }
        if (settings.scrollTo) {
          return scrollbar.scrollTo(settings.scrollTo);
        }
        if (settings.scroll === 'bottom') {
          return scrollbar.scrollBottom(0);
        }
        if (settings.scroll === 'top') {
          return scrollbar.scrollTop(0);
        }
        if (settings.scroll && settings.scroll instanceof $) {
          return scrollbar.scrollTo(settings.scroll);
        }
        if (settings.stop) {
          return scrollbar.stop();
        }
        if (settings.destroy) {
          return scrollbar.destroy();
        }
        if (settings.flash) {
          return scrollbar.flash();
        }
      }
      return scrollbar.reset();
    });
  };
})(jQuery, window, document);

/*
 This script defines the Pro global, which contains a top-level Marionette
 Application, on top of which we define different namespaced modules for
 controllers and views. The Pro App can be further "refined" by calling
 instance methods on it (e.g. in your page-specific app source).

 This script is included in application.js (and therefore is on every page).
 This ensures that Pro.module method (used to namespace all of our stuff)
 is always defined and accessible, regardless of load order (important for
 parallel require.js loads).
*/


(function() {

  this.Pro = (function() {
    var App;
    App = new Backbone.Marionette.Application;
    App.reqres.setHandler("default:region", function() {
      return App.mainRegion;
    });
    App.reqres.setHandler("default:region", function() {
      return App.mainRegion;
    });
    App.reqres.setHandler("concern", function(concern) {
      return App.Concerns[concern];
    });
    App.on("start", function(options) {
      if (this.startHistory != null) {
        this.startHistory();
        if (!this.getCurrentRoute()) {
          return this.navigate('', {
            trigger: true
          });
        }
      }
    });
    App.commands.setHandler("loadingOverlay:show", function(opts) {
      var _ref, _ref1;
      if (opts == null) {
        opts = {};
      }
      if (App.mainRegion != null) {
        if ((_ref = App.mainRegion.$el) != null) {
          _ref.addClass('blocking-loading');
        }
        if (opts.loadMsg) {
          return (_ref1 = App.mainRegion.$el) != null ? _ref1.prepend("<div class='tab-loading-text'>" + opts.loadMsg + "</div>") : void 0;
        }
      } else {
        jQuery('.mainContent').addClass('blocking-loading');
        if (opts.loadMsg) {
          return jQuery('mainContent').prepend("<div class='tab-loading-text'>" + opts.loadMsg + "</div>");
        }
      }
    });
    App.commands.setHandler("loadingOverlay:hide", function(opts) {
      var $mainContent, _ref, _ref1, _ref2;
      if (opts == null) {
        opts = {};
      }
      if (App.mainRegion != null) {
        if (((_ref = App.mainRegion) != null ? _ref.$el : void 0) != null) {
          if ((_ref1 = App.mainRegion) != null) {
            _ref1.$el.removeClass('blocking-loading');
          }
          return jQuery('.tab-loading-text', (_ref2 = App.mainRegion) != null ? _ref2.$el : void 0).remove();
        }
      } else {
        $mainContent = jQuery('.mainContent');
        $mainContent.removeClass('blocking-loading');
        return jQuery('.tab-loading-text', $mainContent).remove();
      }
    });
    return App;
  })();

}).call(this);
(function() {
  var __slice = [].slice;

  this.Pro.module("Utilities", function(Utilities, App) {
    var include, key, klass, klasses, mixinKeywords, module, modules, obj, _i, _len, _results;
    mixinKeywords = ["beforeIncluded", "afterIncluded"];
    include = function() {
      var concern, klass, obj, objs, _i, _len, _ref, _ref1, _ref2;
      objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      klass = this;
      for (_i = 0, _len = objs.length; _i < _len; _i++) {
        obj = objs[_i];
        concern = App.request("concern", obj);
        if ((_ref = concern.beforeIncluded) != null) {
          _ref.call(klass.prototype, klass, concern);
        }
        Cocktail.mixin(klass, (_ref1 = _(concern)).omit.apply(_ref1, mixinKeywords));
        if ((_ref2 = concern.afterIncluded) != null) {
          _ref2.call(klass.prototype, klass, concern);
        }
      }
      return klass;
    };
    modules = [
      {
        Backbone: ["Collection", "Model", "View"]
      }, {
        Marionette: ["ItemView", "LayoutView", "CollectionView", "CompositeView", "Controller"]
      }
    ];
    _results = [];
    for (_i = 0, _len = modules.length; _i < _len; _i++) {
      module = modules[_i];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (key in module) {
          klasses = module[key];
          _results1.push((function() {
            var _j, _len1, _results2;
            _results2 = [];
            for (_j = 0, _len1 = klasses.length; _j < _len1; _j++) {
              klass = klasses[_j];
              obj = window[key] || App[key];
              _results2.push(obj[klass].include = include);
            }
            return _results2;
          })());
        }
        return _results1;
      })());
    }
    return _results;
  });

}).call(this);
/*
File generated by js-routes 1.4.14
Based on Rails 7.0.4.3 routes of Pro::Application
 */

(function() {
  var DeprecatedGlobbingBehavior, NodeTypes, ParameterMissing, ReservedOptions, SpecialOptionsKey, UriEncoderSegmentRegex, Utils, error, result,
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ParameterMissing = function(message, fileName, lineNumber) {
    var instance;
    instance = new Error(message, fileName, lineNumber);
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    } else {
      instance.__proto__ = this.__proto__;
    }
    if (Error.captureStackTrace) {
      Error.captureStackTrace(instance, ParameterMissing);
    }
    return instance;
  };

  ParameterMissing.prototype = Object.create(Error.prototype, {
    constructor: {
      value: Error,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ParameterMissing, Error);
  } else {
    ParameterMissing.__proto__ = Error;
  }

  NodeTypes = {"GROUP":1,"CAT":2,"SYMBOL":3,"OR":4,"STAR":5,"LITERAL":6,"SLASH":7,"DOT":8};

  DeprecatedGlobbingBehavior = false;

  SpecialOptionsKey = "_options";

  UriEncoderSegmentRegex = /[^a-zA-Z0-9\-\._~!\$&'\(\)\*\+,;=:@]/g;

  ReservedOptions = ['anchor', 'trailing_slash', 'subdomain', 'host', 'port', 'protocol'];

  Utils = {
    configuration: {
      prefix: "",
      default_url_options: {},
      special_options_key: "_options",
      serializer: null
    },
    default_serializer: function(object, prefix) {
      var element, i, j, key, len, prop, s;
      if (prefix == null) {
        prefix = null;
      }
      if (object == null) {
        return "";
      }
      if (!prefix && !(this.get_object_type(object) === "object")) {
        throw new Error("Url parameters should be a javascript hash");
      }
      s = [];
      switch (this.get_object_type(object)) {
        case "array":
          for (i = j = 0, len = object.length; j < len; i = ++j) {
            element = object[i];
            s.push(this.default_serializer(element, prefix + "[]"));
          }
          break;
        case "object":
          for (key in object) {
            if (!hasProp.call(object, key)) continue;
            prop = object[key];
            if ((prop == null) && (prefix != null)) {
              prop = "";
            }
            if (prop != null) {
              if (prefix != null) {
                key = prefix + "[" + key + "]";
              }
              s.push(this.default_serializer(prop, key));
            }
          }
          break;
        default:
          if (object != null) {
            s.push((encodeURIComponent(prefix.toString())) + "=" + (encodeURIComponent(object.toString())));
          }
      }
      if (!s.length) {
        return "";
      }
      return s.join("&");
    },
    serialize: function(object) {
      var custom_serializer;
      custom_serializer = this.configuration.serializer;
      if ((custom_serializer != null) && this.get_object_type(custom_serializer) === "function") {
        return custom_serializer(object);
      } else {
        return this.default_serializer(object);
      }
    },
    clean_path: function(path) {
      var last_index;
      path = path.split("://");
      last_index = path.length - 1;
      path[last_index] = path[last_index].replace(/\/+/g, "/");
      return path.join("://");
    },
    extract_options: function(number_of_params, args) {
      var last_el, options;
      last_el = args[args.length - 1];
      if ((args.length > number_of_params && last_el === void 0) || ((last_el != null) && "object" === this.get_object_type(last_el) && !this.looks_like_serialized_model(last_el))) {
        options = args.pop() || {};
        delete options[this.configuration.special_options_key];
        return options;
      } else {
        return {};
      }
    },
    looks_like_serialized_model: function(object) {
      return !object[this.configuration.special_options_key] && ("id" in object || "to_param" in object);
    },
    path_identifier: function(object) {
      var property;
      if (object === 0) {
        return "0";
      }
      if (!object) {
        return "";
      }
      property = object;
      if (this.get_object_type(object) === "object") {
        if ("to_param" in object) {
          if (object.to_param == null) {
            throw new ParameterMissing("Route parameter missing: to_param");
          }
          property = object.to_param;
        } else if ("id" in object) {
          if (object.id == null) {
            throw new ParameterMissing("Route parameter missing: id");
          }
          property = object.id;
        } else {
          property = object;
        }
        if (this.get_object_type(property) === "function") {
          property = property.call(object);
        }
      }
      return property.toString();
    },
    clone: function(obj) {
      var attr, copy, key;
      if ((obj == null) || "object" !== this.get_object_type(obj)) {
        return obj;
      }
      copy = obj.constructor();
      for (key in obj) {
        if (!hasProp.call(obj, key)) continue;
        attr = obj[key];
        copy[key] = attr;
      }
      return copy;
    },
    merge: function() {
      var tap, xs;
      xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      tap = function(o, fn) {
        fn(o);
        return o;
      };
      if ((xs != null ? xs.length : void 0) > 0) {
        return tap({}, function(m) {
          var j, k, len, results, v, x;
          results = [];
          for (j = 0, len = xs.length; j < len; j++) {
            x = xs[j];
            results.push((function() {
              var results1;
              results1 = [];
              for (k in x) {
                v = x[k];
                results1.push(m[k] = v);
              }
              return results1;
            })());
          }
          return results;
        });
      }
    },
    normalize_options: function(parts, required_parts, default_options, actual_parameters) {
      var i, j, key, len, options, part, parts_options, result, route_parts, url_parameters, use_all_parts, value;
      options = this.extract_options(parts.length, actual_parameters);
      if (actual_parameters.length > parts.length) {
        throw new Error("Too many parameters provided for path");
      }
      use_all_parts = actual_parameters.length > required_parts.length;
      parts_options = {};
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        use_all_parts = true;
        if (this.indexOf(parts, key) >= 0) {
          parts_options[key] = value;
        }
      }
      options = this.merge(this.configuration.default_url_options, default_options, options);
      result = {};
      url_parameters = {};
      result['url_parameters'] = url_parameters;
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        value = options[key];
        if (this.indexOf(ReservedOptions, key) >= 0) {
          result[key] = value;
        } else {
          url_parameters[key] = value;
        }
      }
      route_parts = use_all_parts ? parts : required_parts;
      i = 0;
      for (j = 0, len = route_parts.length; j < len; j++) {
        part = route_parts[j];
        if (i < actual_parameters.length) {
          if (!parts_options.hasOwnProperty(part)) {
            url_parameters[part] = actual_parameters[i];
            ++i;
          }
        }
      }
      return result;
    },
    build_route: function(parts, required_parts, default_options, route, full_url, args) {
      var options, parameters, result, url, url_params;
      args = Array.prototype.slice.call(args);
      options = this.normalize_options(parts, required_parts, default_options, args);
      parameters = options['url_parameters'];
      result = "" + (this.get_prefix()) + (this.visit(route, parameters));
      url = Utils.clean_path(result);
      if (options['trailing_slash'] === true) {
        url = url.replace(/(.*?)[\/]?$/, "$1/");
      }
      if ((url_params = this.serialize(parameters)).length) {
        url += "?" + url_params;
      }
      url += options.anchor ? "#" + options.anchor : "";
      if (full_url) {
        url = this.route_url(options) + url;
      }
      return url;
    },
    visit: function(route, parameters, optional) {
      var left, left_part, right, right_part, type, value;
      if (optional == null) {
        optional = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return this.visit(left, parameters, true);
        case NodeTypes.STAR:
          return this.visit_globbing(left, parameters, true);
        case NodeTypes.LITERAL:
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
          return left;
        case NodeTypes.CAT:
          left_part = this.visit(left, parameters, optional);
          right_part = this.visit(right, parameters, optional);
          if (optional && ((this.is_optional_node(left[0]) && !left_part) || ((this.is_optional_node(right[0])) && !right_part))) {
            return "";
          }
          return "" + left_part + right_part;
        case NodeTypes.SYMBOL:
          value = parameters[left];
          delete parameters[left];
          if (value != null) {
            return this.encode_segment(this.path_identifier(value));
          }
          if (optional) {
            return "";
          } else {
            throw new ParameterMissing("Route parameter missing: " + left);
          }
          break;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    encode_segment: function(segment) {
      return segment.replace(UriEncoderSegmentRegex, function(str) {
        return encodeURIComponent(str);
      });
    },
    is_optional_node: function(node) {
      return this.indexOf([NodeTypes.STAR, NodeTypes.SYMBOL, NodeTypes.CAT], node) >= 0;
    },
    build_path_spec: function(route, wildcard) {
      var left, right, type;
      if (wildcard == null) {
        wildcard = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return "(" + (this.build_path_spec(left)) + ")";
        case NodeTypes.CAT:
          return "" + (this.build_path_spec(left)) + (this.build_path_spec(right));
        case NodeTypes.STAR:
          return this.build_path_spec(left, true);
        case NodeTypes.SYMBOL:
          if (wildcard === true) {
            return "" + (left[0] === '*' ? '' : '*') + left;
          } else {
            return ":" + left;
          }
          break;
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
        case NodeTypes.LITERAL:
          return left;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    visit_globbing: function(route, parameters, optional) {
      var left, right, type, value;
      type = route[0], left = route[1], right = route[2];
      value = parameters[left];
      delete parameters[left];
      if (value == null) {
        return this.visit(route, parameters, optional);
      }
      value = (function() {
        switch (this.get_object_type(value)) {
          case "array":
            return value.join("/");
          default:
            return value;
        }
      }).call(this);
      if (DeprecatedGlobbingBehavior) {
        return this.path_identifier(value);
      } else {
        return encodeURI(this.path_identifier(value));
      }
    },
    get_prefix: function() {
      var prefix;
      prefix = this.configuration.prefix;
      if (prefix !== "") {
        prefix = (prefix.match("/$") ? prefix : prefix + "/");
      }
      return prefix;
    },
    route: function(parts_table, default_options, route_spec, full_url) {
      var j, len, part, parts, path_fn, ref, required, required_parts;
      required_parts = [];
      parts = [];
      for (j = 0, len = parts_table.length; j < len; j++) {
        ref = parts_table[j], part = ref[0], required = ref[1];
        parts.push(part);
        if (required) {
          required_parts.push(part);
        }
      }
      path_fn = function() {
        return Utils.build_route(parts, required_parts, default_options, route_spec, full_url, arguments);
      };
      path_fn.required_params = required_parts;
      path_fn.toString = function() {
        return Utils.build_path_spec(route_spec);
      };
      return path_fn;
    },
    route_url: function(route_defaults) {
      var hostname, port, protocol, subdomain;
      if (typeof route_defaults === 'string') {
        return route_defaults;
      }
      hostname = route_defaults.host || Utils.current_host();
      if (!hostname) {
        return '';
      }
      subdomain = route_defaults.subdomain ? route_defaults.subdomain + '.' : '';
      protocol = route_defaults.protocol || Utils.current_protocol();
      port = route_defaults.port || (!route_defaults.host ? Utils.current_port() : void 0);
      port = port ? ":" + port : '';
      return protocol + "://" + subdomain + hostname + port;
    },
    has_location: function() {
      return (typeof window !== "undefined" && window !== null ? window.location : void 0) != null;
    },
    current_host: function() {
      if (this.has_location()) {
        return window.location.hostname;
      } else {
        return null;
      }
    },
    current_protocol: function() {
      if (this.has_location() && window.location.protocol !== '') {
        return window.location.protocol.replace(/:$/, '');
      } else {
        return 'http';
      }
    },
    current_port: function() {
      if (this.has_location() && window.location.port !== '') {
        return window.location.port;
      } else {
        return '';
      }
    },
    _classToTypeCache: null,
    _classToType: function() {
      var j, len, name, ref;
      if (this._classToTypeCache != null) {
        return this._classToTypeCache;
      }
      this._classToTypeCache = {};
      ref = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
      for (j = 0, len = ref.length; j < len; j++) {
        name = ref[j];
        this._classToTypeCache["[object " + name + "]"] = name.toLowerCase();
      }
      return this._classToTypeCache;
    },
    get_object_type: function(obj) {
      if (this.jQuery && (this.jQuery.type != null)) {
        return this.jQuery.type(obj);
      }
      if (obj == null) {
        return "" + obj;
      }
      if (typeof obj === "object" || typeof obj === "function") {
        return this._classToType()[Object.prototype.toString.call(obj)] || "object";
      } else {
        return typeof obj;
      }
    },
    indexOf: function(array, element) {
      if (Array.prototype.indexOf) {
        return array.indexOf(element);
      } else {
        return this.indexOfImplementation(array, element);
      }
    },
    indexOfImplementation: function(array, element) {
      var el, i, j, len, result;
      result = -1;
      for (i = j = 0, len = array.length; j < len; i = ++j) {
        el = array[i];
        if (el === element) {
          result = i;
        }
      }
      return result;
    },
    namespace: function(root, namespace, routes) {
      var index, j, len, part, parts;
      parts = namespace ? namespace.split(".") : [];
      if (parts.length === 0) {
        return routes;
      }
      for (index = j = 0, len = parts.length; j < len; index = ++j) {
        part = parts[index];
        if (index < parts.length - 1) {
          root = (root[part] || (root[part] = {}));
        } else {
          return root[part] = routes;
        }
      }
    },
    configure: function(new_config) {
      return this.configuration = this.merge(this.configuration, new_config);
    },
    config: function() {
      return this.clone(this.configuration);
    },
    make: function() {
      var routes;
      routes = {
// attempt_session_workspace_metasploit_credential_login => /workspaces/:workspace_id/metasploit/credential/logins/:id/attempt_session(.:format)
  // function(workspace_id, id, options)
  attempt_session_workspace_metasploit_credential_login_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"metasploit",false],[2,[7,"/",false],[2,[6,"credential",false],[2,[7,"/",false],[2,[6,"logins",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"attempt_session",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// clone_module_run => /workspaces/:workspace_id/tasks/clone_module_run/:clone_id(.:format)
  // function(workspace_id, clone_id, options)
  clone_module_run_path: Utils.route([["workspace_id",true],["clone_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"clone_module_run",false],[2,[7,"/",false],[2,[3,"clone_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// clone_rc_script_run => /workspaces/:workspace_id/tasks/clone_rc_script_run/:clone_id(.:format)
  // function(workspace_id, clone_id, options)
  clone_rc_script_run_path: Utils.route([["workspace_id",true],["clone_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"clone_rc_script_run",false],[2,[7,"/",false],[2,[3,"clone_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// combined_workspace_notes => /workspaces/:workspace_id/notes/combined(.:format)
  // function(workspace_id, options)
  combined_workspace_notes_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"notes",false],[2,[7,"/",false],[2,[6,"combined",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// combined_workspace_services => /workspaces/:workspace_id/services/combined(.:format)
  // function(workspace_id, options)
  combined_workspace_services_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"combined",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// combined_workspace_vulns => /workspaces/:workspace_id/vulns/combined(.:format)
  // function(workspace_id, options)
  combined_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"combined",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// combined_workspace_web_vulns => /workspaces/:workspace_id/web_vulns/combined(.:format)
  // function(workspace_id, options)
  combined_workspace_web_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"web_vulns",false],[2,[7,"/",false],[2,[6,"combined",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// cores_workspace_brute_force_reuse_group => /workspaces/:workspace_id/brute_force/reuse/groups/:id/cores(.:format)
  // function(workspace_id, id, options)
  cores_workspace_brute_force_reuse_group_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"cores",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// delete_web_vulns => /workspaces/:workspace_id/web/vuln/delete/:site_id(.:format)
  // function(workspace_id, site_id, options)
  delete_web_vulns_path: Utils.route([["workspace_id",true],["site_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"web",false],[2,[7,"/",false],[2,[6,"vuln",false],[2,[7,"/",false],[2,[6,"delete",false],[2,[7,"/",false],[2,[3,"site_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// destroy_multiple_groups_workspace_vulns => /workspaces/:workspace_id/vulns/destroy_multiple_groups(.:format)
  // function(workspace_id, options)
  destroy_multiple_groups_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"destroy_multiple_groups",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_hosts => /workspaces/:workspace_id/hosts/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_hosts_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_workspace_loots => /workspaces/:workspace_id/loots/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_workspace_loots_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"loots",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_workspace_notes => /workspaces/:workspace_id/notes/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_workspace_notes_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"notes",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_workspace_services => /workspaces/:workspace_id/services/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_workspace_services_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// destroy_multiple_workspace_vulns => /workspaces/:workspace_id/vulns/destroy_multiple(.:format)
  // function(workspace_id, options)
  destroy_multiple_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"destroy_multiple",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_notifications_message => /notifications/messages/:id/edit(.:format)
  // function(id, options)
  edit_notifications_message_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// edit_workspace_brute_force_guess => /workspaces/:workspace_id/brute_force/guess/:id/edit(.:format)
  // function(workspace_id, id, options)
  edit_workspace_brute_force_guess_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// edit_workspace_brute_force_reuse_group => /workspaces/:workspace_id/brute_force/reuse/groups/:id/edit(.:format)
  // function(workspace_id, id, options)
  edit_workspace_brute_force_reuse_group_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// edit_workspace_brute_force_reuse_target => /workspaces/:workspace_id/brute_force/reuse/targets/:id/edit(.:format)
  // function(workspace_id, id, options)
  edit_workspace_brute_force_reuse_target_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// edit_workspace_brute_force_run => /workspaces/:workspace_id/brute_force/runs/:id/edit(.:format)
  // function(workspace_id, id, options)
  edit_workspace_brute_force_run_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"runs",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// filter_values_workspace_brute_force_reuse_targets => /workspaces/:workspace_id/brute_force/reuse/targets/filter_values(.:format)
  // function(workspace_id, options)
  filter_values_workspace_brute_force_reuse_targets_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[6,"filter_values",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// filter_values_workspace_nexpose_data_sites => /workspaces/:workspace_id/nexpose/data/sites/filter_values(.:format)
  // function(workspace_id, options)
  filter_values_workspace_nexpose_data_sites_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"data",false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[6,"filter_values",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// filter_values_workspace_sonar_import_fdnss_index => /workspaces/:workspace_id/sonar/imports/:import_id/fdnss/filter_values(.:format)
  // function(workspace_id, import_id, options)
  filter_values_workspace_sonar_import_fdnss_index_path: Utils.route([["workspace_id",true],["import_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"sonar",false],[2,[7,"/",false],[2,[6,"imports",false],[2,[7,"/",false],[2,[3,"import_id",false],[2,[7,"/",false],[2,[6,"fdnss",false],[2,[7,"/",false],[2,[6,"filter_values",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// get_session_workspace_metasploit_credential_core_login => /workspaces/:workspace_id/metasploit/credential/cores/:core_id/logins/:id/get_session(.:format)
  // function(workspace_id, core_id, id, options)
  get_session_workspace_metasploit_credential_core_login_path: Utils.route([["workspace_id",true],["core_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"metasploit",false],[2,[7,"/",false],[2,[6,"credential",false],[2,[7,"/",false],[2,[6,"cores",false],[2,[7,"/",false],[2,[3,"core_id",false],[2,[7,"/",false],[2,[6,"logins",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"get_session",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]]]]]),
// get_session_workspace_metasploit_credential_login => /workspaces/:workspace_id/metasploit/credential/logins/:id/get_session(.:format)
  // function(workspace_id, id, options)
  get_session_workspace_metasploit_credential_login_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"metasploit",false],[2,[7,"/",false],[2,[6,"credential",false],[2,[7,"/",false],[2,[6,"logins",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"get_session",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]),
// history_workspace_vuln => /workspaces/:workspace_id/vulns/:id/history(.:format)
  // function(workspace_id, id, options)
  history_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"history",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// host => /hosts/:id(.:format)
  // function(id, options)
  host_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// host_tags => /hosts/:id/tags(.:format)
  // function(id, options)
  host_tags_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"tags",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// host_vulns => /hosts/:host_id/vulns(.:format)
  // function(host_id, options)
  host_vulns_path: Utils.route([["host_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"host_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// host_vulns_tab => /hosts/:id/vulns(.:format)
  // function(id, options)
  host_vulns_tab_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// host_web_vulns_tab => /hosts/:id/web_vulns(.:format)
  // function(id, options)
  host_web_vulns_tab_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"web_vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// hosts => /workspaces/:workspace_id/hosts(.:format)
  // function(workspace_id, options)
  hosts_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// map_host => /workspaces/:workspace_id/hosts/map(.:format)
  // function(workspace_id, options)
  map_host_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[6,"map",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// mark_read_notifications_messages => /notifications/messages/mark_read(.:format)
  // function(options)
  mark_read_notifications_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"mark_read",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// modules => /workspaces/:workspace_id/modules(.:format)
  // function(workspace_id, options)
  modules_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"modules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_bruteforce => /workspaces/:workspace_id/tasks/new_bruteforce(.:format)
  // function(workspace_id, options)
  new_bruteforce_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_bruteforce",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_exploit => /workspaces/:workspace_id/tasks/new_exploit(.:format)
  // function(workspace_id, options)
  new_exploit_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_exploit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_host => /workspaces/:workspace_id/hosts/new(.:format)
  // function(workspace_id, options)
  new_host_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_module_run => /workspaces/:workspace_id/tasks/new_module_run(/*path)(.:format)
  // function(workspace_id, options)
  new_module_run_path: Utils.route([["workspace_id",true],["path",false],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_module_run",false],[2,[1,[2,[7,"/",false],[5,[3,"path",false],false]],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]),
// new_notifications_message => /notifications/messages/new(.:format)
  // function(options)
  new_notifications_message_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_rc_script_run => /workspaces/:workspace_id/tasks/new_rc_script_run(/*path)(.:format)
  // function(workspace_id, options)
  new_rc_script_run_path: Utils.route([["workspace_id",true],["path",false],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_rc_script_run",false],[2,[1,[2,[7,"/",false],[5,[3,"path",false],false]],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]),
// new_scan => /workspaces/:workspace_id/tasks/new_scan(.:format)
  // function(workspace_id, options)
  new_scan_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_scan",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_webscan => /workspaces/:workspace_id/tasks/new_webscan(.:format)
  // function(workspace_id, options)
  new_webscan_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"new_webscan",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// new_workspace_brute_force_guess => /workspaces/:workspace_id/brute_force/guess/new(.:format)
  // function(workspace_id, options)
  new_workspace_brute_force_guess_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// new_workspace_brute_force_reuse_group => /workspaces/:workspace_id/brute_force/reuse/groups/new(.:format)
  // function(workspace_id, options)
  new_workspace_brute_force_reuse_group_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// new_workspace_brute_force_reuse_target => /workspaces/:workspace_id/brute_force/reuse/targets/new(.:format)
  // function(workspace_id, options)
  new_workspace_brute_force_reuse_target_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// new_workspace_brute_force_run => /workspaces/:workspace_id/brute_force/runs/new(.:format)
  // function(workspace_id, options)
  new_workspace_brute_force_run_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"runs",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// new_workspace_import => /workspaces/:workspace_id/imports/new(.:format)
  // function(workspace_id, options)
  new_workspace_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"imports",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// notifications_message => /notifications/messages/:id(.:format)
  // function(id, options)
  notifications_message_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// notifications_messages => /notifications/messages(.:format)
  // function(options)
  notifications_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// pause_task => /tasks/:id/pause(.:format)
  // function(id, options)
  pause_task_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"pause",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// poll_notifications_messages => /notifications/messages/poll(.:format)
  // function(options)
  poll_notifications_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"notifications",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"poll",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// push_to_nexpose_message_workspace_vulns => /workspaces/:workspace_id/vulns/push_to_nexpose_message(.:format)
  // function(workspace_id, options)
  push_to_nexpose_message_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"push_to_nexpose_message",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// push_to_nexpose_status_workspace_vulns => /workspaces/:workspace_id/vulns/push_to_nexpose_status(.:format)
  // function(workspace_id, options)
  push_to_nexpose_status_workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[6,"push_to_nexpose_status",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// quick_multi_tag => /workspaces/:workspace_id/hosts/quick_multi_tag(.:format)
  // function(workspace_id, options)
  quick_multi_tag_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[6,"quick_multi_tag",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// quick_multi_tag_workspace_notes => /workspaces/:workspace_id/notes/quick_multi_tag(.:format)
  // function(workspace_id, options)
  quick_multi_tag_workspace_notes_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"notes",false],[2,[7,"/",false],[2,[6,"quick_multi_tag",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// quick_multi_tag_workspace_services => /workspaces/:workspace_id/services/quick_multi_tag(.:format)
  // function(workspace_id, options)
  quick_multi_tag_workspace_services_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[6,"quick_multi_tag",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rc_script_delete => /workspaces/:workspace_id/rc_scripts/*path/delete(.:format)
  // function(workspace_id, path, options)
  rc_script_delete_path: Utils.route([["workspace_id",true],["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"rc_scripts",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[2,[7,"/",false],[2,[6,"delete",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rc_script_run => /workspaces/:workspace_id/rc_scripts/*path/run(.:format)
  // function(workspace_id, path, options)
  rc_script_run_path: Utils.route([["workspace_id",true],["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"rc_scripts",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[2,[7,"/",false],[2,[6,"run",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rc_script_upload => /workspaces/:workspace_id/rc_scripts/upload(.:format)
  // function(workspace_id, options)
  rc_script_upload_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"rc_scripts",false],[2,[7,"/",false],[2,[6,"upload",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rc_scripts => /workspaces/:workspace_id/rc_scripts(.:format)
  // function(workspace_id, options)
  rc_scripts_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"rc_scripts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// related_hosts_filter_values_workspace_vuln => /workspaces/:workspace_id/vulns/:id/related_hosts_filter_values(.:format)
  // function(workspace_id, id, options)
  related_hosts_filter_values_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"related_hosts_filter_values",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// related_hosts_workspace_vuln => /workspaces/:workspace_id/vulns/:id/related_hosts(.:format)
  // function(workspace_id, id, options)
  related_hosts_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"related_hosts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// related_modules_workspace_vuln => /workspaces/:workspace_id/vulns/:id/related_modules(.:format)
  // function(workspace_id, id, options)
  related_modules_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"related_modules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rest_api_v2_workspace_host_service_vulns => /rest_api/v2/workspaces/:workspace_id/hosts/:host_id/services/:service_id/vulns(.:format)
  // function(workspace_id, host_id, service_id, options)
  rest_api_v2_workspace_host_service_vulns_path: Utils.route([["workspace_id",true],["host_id",true],["service_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rest_api",false],[2,[7,"/",false],[2,[6,"v2",false],[2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"host_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]]]]]),
// rest_api_v2_workspace_host_service_web_site_web_vulns => /rest_api/v2/workspaces/:workspace_id/hosts/:host_id/services/:service_id/web_sites/:web_site_id/web_vulns(.:format)
  // function(workspace_id, host_id, service_id, web_site_id, options)
  rest_api_v2_workspace_host_service_web_site_web_vulns_path: Utils.route([["workspace_id",true],["host_id",true],["service_id",true],["web_site_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rest_api",false],[2,[7,"/",false],[2,[6,"v2",false],[2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"hosts",false],[2,[7,"/",false],[2,[3,"host_id",false],[2,[7,"/",false],[2,[6,"services",false],[2,[7,"/",false],[2,[3,"service_id",false],[2,[7,"/",false],[2,[6,"web_sites",false],[2,[7,"/",false],[2,[3,"web_site_id",false],[2,[7,"/",false],[2,[6,"web_vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]]]]]]]]]]]),
// restore_last_vuln_attempt_status_workspace_vuln => /workspaces/:workspace_id/vulns/:id/restore_last_vuln_attempt_status(.:format)
  // function(workspace_id, id, options)
  restore_last_vuln_attempt_status_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"restore_last_vuln_attempt_status",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// resume_task => /tasks/:id/resume(.:format)
  // function(id, options)
  resume_task_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"resume",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// search_operators_workspace_brute_force_reuse_targets => /workspaces/:workspace_id/brute_force/reuse/targets/search_operators(.:format)
  // function(workspace_id, options)
  search_operators_workspace_brute_force_reuse_targets_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[6,"search_operators",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// search_operators_workspace_nexpose_data_sites => /workspaces/:workspace_id/nexpose/data/sites/search_operators(.:format)
  // function(workspace_id, options)
  search_operators_workspace_nexpose_data_sites_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"data",false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[6,"search_operators",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// search_operators_workspace_vuln => /workspaces/:workspace_id/vulns/:id/search_operators(.:format)
  // function(workspace_id, id, options)
  search_operators_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"search_operators",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// search_workspace_tags => /workspaces/:workspace_id/tags/search(.:format)
  // function(workspace_id, options)
  search_workspace_tags_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tags",false],[2,[7,"/",false],[2,[6,"search",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// session => /workspaces/:workspace_id/sessions/:id(.:format)
  // function(workspace_id, id, options)
  session_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"sessions",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// start_bruteforce => /workspaces/:workspace_id/tasks/start_bruteforce(.:format)
  // function(workspace_id, options)
  start_bruteforce_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_bruteforce",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// start_import => /workspaces/:workspace_id/tasks/start_import(.:format)
  // function(workspace_id, options)
  start_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// start_module_run => /workspaces/:workspace_id/tasks/start_module_run/*path(.:format)
  // function(workspace_id, path, options)
  start_module_run_path: Utils.route([["workspace_id",true],["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_module_run",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// start_rc_script_run => /workspaces/:workspace_id/tasks/start_rc_script_run/*path(.:format)
  // function(workspace_id, path, options)
  start_rc_script_run_path: Utils.route([["workspace_id",true],["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_rc_script_run",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// start_scan_and_import => /workspaces/:workspace_id/tasks/start_scan_and_import(.:format)
  // function(workspace_id, options)
  start_scan_and_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"start_scan_and_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// stop_paused_task => /tasks/:id/stop_paused(.:format)
  // function(id, options)
  stop_paused_task_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"stop_paused",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// stop_task => /tasks/stop(.:format)
  // function(options)
  stop_task_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"stop",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// target_count_workspace_brute_force_guess_runs => /workspaces/:workspace_id/brute_force/guess/runs/target_count(.:format)
  // function(workspace_id, options)
  target_count_workspace_brute_force_guess_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[6,"runs",false],[2,[7,"/",false],[2,[6,"target_count",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// task_detail => /workspaces/:workspace_id/tasks/:id(.:format)
  // function(workspace_id, id, options)
  task_detail_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// tasks => /workspaces/:workspace_id/tasks(.:format)
  // function(workspace_id, options)
  tasks_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// update_last_vuln_attempt_status_workspace_vuln => /workspaces/:workspace_id/vulns/:id/update_last_vuln_attempt_status(.:format)
  // function(workspace_id, id, options)
  update_last_vuln_attempt_status_workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"update_last_vuln_attempt_status",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// validate_bruteforce => /workspaces/:workspace_id/tasks/validate_bruteforce(.:format)
  // function(workspace_id, options)
  validate_bruteforce_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_bruteforce",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// validate_import => /workspaces/:workspace_id/tasks/validate_import(.:format)
  // function(workspace_id, options)
  validate_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// validate_module_run => /workspaces/:workspace_id/tasks/validate_module_run(.:format)
  // function(workspace_id, options)
  validate_module_run_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_module_run",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// validate_rc_script_run => /workspaces/:workspace_id/tasks/validate_rc_script_run(.:format)
  // function(workspace_id, options)
  validate_rc_script_run_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_rc_script_run",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// validate_scan_and_import => /workspaces/:workspace_id/tasks/validate_scan_and_import(.:format)
  // function(workspace_id, options)
  validate_scan_and_import_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"tasks",false],[2,[7,"/",false],[2,[6,"validate_scan_and_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// web_vulns => /workspaces/:workspace_id/web/vulns/:site_id(.:format)
  // function(workspace_id, site_id, options)
  web_vulns_path: Utils.route([["workspace_id",true],["site_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"web",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"site_id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_guess => /workspaces/:workspace_id/brute_force/guess/:id(.:format)
  // function(workspace_id, id, options)
  workspace_brute_force_guess_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_guess_index => /workspaces/:workspace_id/brute_force/guess(.:format)
  // function(workspace_id, options)
  workspace_brute_force_guess_index_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_brute_force_guess_runs => /workspaces/:workspace_id/brute_force/guess/runs(.:format)
  // function(workspace_id, options)
  workspace_brute_force_guess_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"guess",false],[2,[7,"/",false],[2,[6,"runs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_reuse_group => /workspaces/:workspace_id/brute_force/reuse/groups/:id(.:format)
  // function(workspace_id, id, options)
  workspace_brute_force_reuse_group_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// workspace_brute_force_reuse_groups => /workspaces/:workspace_id/brute_force/reuse/groups(.:format)
  // function(workspace_id, options)
  workspace_brute_force_reuse_groups_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"groups",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_reuse_target => /workspaces/:workspace_id/brute_force/reuse/targets/:id(.:format)
  // function(workspace_id, id, options)
  workspace_brute_force_reuse_target_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// workspace_brute_force_reuse_targets => /workspaces/:workspace_id/brute_force/reuse/targets(.:format)
  // function(workspace_id, options)
  workspace_brute_force_reuse_targets_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"reuse",false],[2,[7,"/",false],[2,[6,"targets",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_run => /workspaces/:workspace_id/brute_force/runs/:id(.:format)
  // function(workspace_id, id, options)
  workspace_brute_force_run_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"runs",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_brute_force_runs => /workspaces/:workspace_id/brute_force/runs(.:format)
  // function(workspace_id, options)
  workspace_brute_force_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"brute_force",false],[2,[7,"/",false],[2,[6,"runs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_credentials => /workspaces/:workspace_id/credentials(.:format)
  // function(workspace_id, options)
  workspace_credentials_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"credentials",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_loots => /workspaces/:workspace_id/loots(.:format)
  // function(workspace_id, options)
  workspace_loots_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"loots",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_module_detail => /workspaces/:workspace_id/module_details/:id(.:format)
  // function(workspace_id, id, options)
  workspace_module_detail_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"module_details",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_nexpose_data_import_runs => /workspaces/:workspace_id/nexpose/data/import_runs(.:format)
  // function(workspace_id, options)
  workspace_nexpose_data_import_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"data",false],[2,[7,"/",false],[2,[6,"import_runs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_nexpose_data_sites => /workspaces/:workspace_id/nexpose/data/sites(.:format)
  // function(workspace_id, options)
  workspace_nexpose_data_sites_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"data",false],[2,[7,"/",false],[2,[6,"sites",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_nexpose_result_exceptions => /workspaces/:workspace_id/nexpose/result/exceptions(.:format)
  // function(workspace_id, options)
  workspace_nexpose_result_exceptions_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"result",false],[2,[7,"/",false],[2,[6,"exceptions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_nexpose_result_export_runs => /workspaces/:workspace_id/nexpose/result/export_runs(.:format)
  // function(workspace_id, options)
  workspace_nexpose_result_export_runs_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"result",false],[2,[7,"/",false],[2,[6,"export_runs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_nexpose_result_validations => /workspaces/:workspace_id/nexpose/result/validations(.:format)
  // function(workspace_id, options)
  workspace_nexpose_result_validations_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"nexpose",false],[2,[7,"/",false],[2,[6,"result",false],[2,[7,"/",false],[2,[6,"validations",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_notes => /workspaces/:workspace_id/notes(.:format)
  // function(workspace_id, options)
  workspace_notes_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"notes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_related_modules => /workspaces/:workspace_id/related_modules(.:format)
  // function(workspace_id, options)
  workspace_related_modules_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"related_modules",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_services => /workspaces/:workspace_id/services(.:format)
  // function(workspace_id, options)
  workspace_services_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"services",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_shared_payload_settings => /workspaces/:workspace_id/shared/payload_settings(.:format)
  // function(workspace_id, options)
  workspace_shared_payload_settings_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"shared",false],[2,[7,"/",false],[2,[6,"payload_settings",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_social_engineering_target_list_human_targets => /workspaces/:workspace_id/social_engineering/target_lists/:target_list_id/human_targets(.:format)
  // function(workspace_id, target_list_id, options)
  workspace_social_engineering_target_list_human_targets_path: Utils.route([["workspace_id",true],["target_list_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"social_engineering",false],[2,[7,"/",false],[2,[6,"target_lists",false],[2,[7,"/",false],[2,[3,"target_list_id",false],[2,[7,"/",false],[2,[6,"human_targets",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// workspace_sonar_import_fdnss_index => /workspaces/:workspace_id/sonar/imports/:import_id/fdnss(.:format)
  // function(workspace_id, import_id, options)
  workspace_sonar_import_fdnss_index_path: Utils.route([["workspace_id",true],["import_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"sonar",false],[2,[7,"/",false],[2,[6,"imports",false],[2,[7,"/",false],[2,[3,"import_id",false],[2,[7,"/",false],[2,[6,"fdnss",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// workspace_sonar_imports => /workspaces/:workspace_id/sonar/imports(.:format)
  // function(workspace_id, options)
  workspace_sonar_imports_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"sonar",false],[2,[7,"/",false],[2,[6,"imports",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_vuln => /workspaces/:workspace_id/vulns/:id(.:format)
  // function(workspace_id, id, options)
  workspace_vuln_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// workspace_vuln_attempts => /workspaces/:workspace_id/vulns/:id/attempts(.:format)
  // function(workspace_id, id, options)
  workspace_vuln_attempts_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"attempts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_vuln_details => /workspaces/:workspace_id/vulns/:id/details(.:format)
  // function(workspace_id, id, options)
  workspace_vuln_details_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"details",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_vuln_exploits => /workspaces/:workspace_id/vulns/:id/exploits(.:format)
  // function(workspace_id, id, options)
  workspace_vuln_exploits_path: Utils.route([["workspace_id",true],["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"exploits",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// workspace_vulns => /workspaces/:workspace_id/vulns(.:format)
  // function(workspace_id, options)
  workspace_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// workspace_web_vulns => /workspaces/:workspace_id/web_vulns(.:format)
  // function(workspace_id, options)
  workspace_web_vulns_path: Utils.route([["workspace_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"workspaces",false],[2,[7,"/",false],[2,[3,"workspace_id",false],[2,[7,"/",false],[2,[6,"web_vulns",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]])}
;
      routes.configure = function(config) {
        return Utils.configure(config);
      };
      routes.config = function() {
        return Utils.config();
      };
      routes.default_serializer = function(object, prefix) {
        return Utils.default_serializer(object, prefix);
      };
      return Object.assign({
        "default": routes
      }, routes);
    }
  };

  result = Utils.make();

  if (typeof define === "function" && define.amd) {
    define([], function() {
      return result;
    });
  } else if (typeof module !== "undefined" && module !== null) {
    try {
      module.exports = result;
    } catch (error1) {
      error = error1;
      if (error.name !== 'TypeError') {
        throw error;
      }
    }
  } else {
    Utils.namespace(this, "Routes", result);
  }

  return result;

}).call(this);

// Common JS dependencies between the application and application_backbone manifests
//































// Uncomment the below line in order to enable banner messages.
// require shared/banner_message
;
// NOTE: this file used to be 'application.js' pre-Rails3 upgrade

// TODO: Rails 3 upgrade - when we drop the rest of this file, we want to keep this
// console.log stuff.
// usage: log('inside coolFunc', this, arguments);
// paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
window.log = function(){
  log.history = log.history || [];   // store logs to an array for reference
  log.history.push(arguments);
  if(this.console) {
      arguments.callee = arguments.callee.caller;
      console.log( Array.prototype.slice.call(arguments) );
  }
};
// make it safe to use console.log always
(function(b){function c(){}for(var d="assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(","),a;a=d.pop();)b[a]=b[a]||c})(window.console=window.console||{});

function getParameterByName(name)
{
  name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
  var regexS = "[\\?&]" + name + "=([^&#]*)";
  var regex = new RegExp(regexS);
  var results = regex.exec(window.location.href);
  if(results == null)
    return "";
  else
    return decodeURIComponent(results[1].replace(/\+/g, " "));
}
/////////////////////////////////////////////////////////////////

document.observe("dom:loaded", function() {
  // close popup
  var overlay = $('popup_overlay');
  if (overlay) {
    overlay.observe('click', function(e) {
      close_popup();
    });
  }
});

function close_popup() {
  $('popup').hide();
}

function fill_in_tag_form(form_elem,tag_id,bool1,bool2,bool3) {
  form_elem.create_tag_name.value = document.getElementById(tag_id).children[0].innerText;
  form_elem.create_tag_desc.value = document.getElementById(tag_id).children[1].innerText;
  form_elem.create_tag_report_summary.checked = bool1;
  form_elem.create_tag_report_detail.checked = bool2;
  form_elem.create_tag_critical.checked = bool3;
  return true;
}

function remove_fields(link) {
  $(link).previous('input[type=hidden]').value = "1";
  $(link).up('.fields').hide();
}
jQuery(document).on('click', 'a.remove-fields', function(e) {
  e.preventDefault();
  remove_fields(this);
  return false;
});

function add_fields(link, content) {
  var new_id = new Date().getTime();
  var regexp = new RegExp("new_object", "g");
  var table = $(link).previous('table');
  var empty_row = table.select('tr.emptyset');
  if (empty_row.size() > 0) {
    empty_row[0].hide();
  };
  // add the content and replace 'new_object' with an ID generated from the current timestamp
  table.insert({
    bottom: content.replace(regexp, new_id)
  });
  // focus the first input field that was inserted
  var rows = table.select('tr');
  var last_row = rows[rows.size()-1];
  last_row.select('input')[0].focus()
}

jQuery(document).ready(function() {
  jQuery(document).on('click', 'a.add-new-fields', function(e) {
    e.preventDefault();
    add_fields(this, jQuery(this).data('new-fields'));
    return false;
  });
});

function show_mitm_warning(element) {
  var value = element.value;
  if (! (value == "127.0.0.1" || value == "localhost")) {
    $('mitm_warning').show();
  } else {
    $('mitm_warning').hide();
  }
}

/*
 * If the given select element is set to "", disables every other element
 * inside the select's form.
 */
function disable_fields_if_select_is_blank(select) {
  var formElement = Element.up(select, "form");
  var fields = formElement.getElements();

  Element.observe(select, "change", function(e) {
    var v = select.getValue();
    for (var i in fields) {
      if (fields[i] != select && fields[i].type && fields[i].type.toLowerCase() != 'hidden' && fields[i].type.toLowerCase() != 'submit') {
        if (v != "") {
          fields[i].disabled = true
        } else {
          fields[i].disabled = false;
        }
        }
    }
  });
}

function enable_fields_with_checkbox(checkbox, div) {
  var fields;

  if (!div) {
    div = Element.up(checkbox, "fieldset")
  }

  f = function(e) {
    fields = div.descendants();
    var v = checkbox.getValue();
    for (var i in fields) {
      if (fields[i] != checkbox && fields[i].type && fields[i].type.toLowerCase() != 'hidden') {
        if (!v) {
          fields[i].disabled = true
        } else {
          fields[i].disabled = false;
        }
      }
    }
  }
  f();
  Element.observe(checkbox, "change", f);
}

function submit_checkboxes_to(path, token) {
  var f = document.createElement('form'); 
  f.style.display = 'none'; 
      
  /* Set the post destination */
  f.method = 'POST'; 
  f.action = path;
    
  /* Create the authenticity_token */
  var s = document.createElement('input'); 
  s.setAttribute('type', 'hidden'); 
  s.setAttribute('name', 'authenticity_token'); 
  s.setAttribute('value', token); 
  f.appendChild(s);
    
  /* Copy the checkboxes from the host form */
  $$("input[type=checkbox]").each(function(e) {
    if (e.checked)  {
      var c = document.createElement('input'); 
      c.setAttribute('type', 'hidden'); 
      c.setAttribute('name',  e.getAttribute('name')  ); 
      c.setAttribute('value', e.getAttribute('value') ); 
      f.appendChild(c);
    }
  })

  /* Look for hidden variables in checkbox form */
  $$("input[type=hidden]").each(function(e) {
    if ( e.getAttribute('name').indexOf("[]") != -1 )  {
      var c = document.createElement('input'); 
      c.setAttribute('type', 'hidden'); 
      c.setAttribute('name',  e.getAttribute('name')  ); 
      c.setAttribute('value', e.getAttribute('value') ); 
      f.appendChild(c);
    }
  })
  
  /* Copy the search field from the host form */
  $$("input#search").each(function (e) {
    var c = document.createElement('input');
    c.setAttribute('type', 'hidden'); 
    c.setAttribute('name',  e.getAttribute('name')  ); 
    c.setAttribute('value', e.value ); 
    f.appendChild(c);
  });

  /* Append to the main form body */
  document.body.appendChild(f);   
  f.submit();
  return false;
}
jQuery(document).on('click', 'a.submit_checkboxes', function(e) {
  e.preventDefault();
  return submit_checkboxes_to(jQuery(this).data('path'), jQuery(this).data('token'));
});

function reveal_tag_rename_field(i) {
  f = document.getElementById("tag_rename_field_" + i);
  f.style.display = "block";
  return true;
}

// Look for the other half of this in app/coffeescripts/forms.coffee
function enableSubmitButtons() {
  $$("form.formtastic input[type='submit']").each(function(elmt) { 
    elmt.removeClassName('disabled'); elmt.removeClassName('submitting'); 
  });
}
;
/*
 * File:        jquery.dataTables.js
 * Version:     1.8.0
 * Description: Paginate, search and sort HTML tables
 * Author:      Allan Jardine (www.sprymedia.co.uk)
 * Created:     28/3/2008
 * Language:    Javascript
 * License:     GPL v2 or BSD 3 point style
 * Project:     Mtaala
 * Contact:     allan.jardine@sprymedia.co.uk
 *
 * Copyright 2008-2011 Allan Jardine, all rights reserved.
 *
 * This source file is free software, under either the GPL v2 license or a
 * BSD style license, as supplied with this software.
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*
 * When considering jsLint, we need to allow eval() as it it is used for reading cookies
 */
/*jslint evil: true, undef: true, browser: true */
/*globals $, jQuery,_fnExternApiFunc,_fnInitalise,_fnInitComplete,_fnLanguageProcess,_fnAddColumn,_fnColumnOptions,_fnAddData,_fnCreateTr,_fnGatherData,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAjaxUpdate,_fnAjaxUpdateDraw,_fnAddOptionsHtml,_fnFeatureHtmlTable,_fnScrollDraw,_fnAjustColumnSizing,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnBuildSearchArray,_fnBuildSearchRow,_fnFilterCreateSearch,_fnDataToSearch,_fnSort,_fnSortAttachListener,_fnSortingClasses,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnFeatureHtmlLength,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnNodeToDataIndex,_fnVisbleColumns,_fnCalculateEnd,_fnConvertToWidth,_fnCalculateColumnWidths,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnArrayCmp,_fnDetectType,_fnSettingsFromNode,_fnGetDataMaster,_fnGetTrNodes,_fnGetTdNodes,_fnEscapeRegex,_fnDeleteIndex,_fnReOrderIndex,_fnColumnOrdering,_fnLog,_fnClearTable,_fnSaveState,_fnLoadState,_fnCreateCookie,_fnReadCookie,_fnDetectHeader,_fnGetUniqueThs,_fnScrollBarWidth,_fnApplyToChildren,_fnMap,_fnGetRowData,_fnGetCellData,_fnSetCellData,_fnGetObjectDataFn,_fnSetObjectDataFn*/


(function($, window, document) {
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Section - DataTables variables
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  /*
   * Variable: dataTableSettings
   * Purpose:  Store the settings for each dataTables instance
   * Scope:    jQuery.fn
   */
  $.fn.dataTableSettings = [];
  var _aoSettings = $.fn.dataTableSettings; /* Short reference for fast internal lookup */

  /*
   * Variable: dataTableExt
   * Purpose:  Container for customisable parts of DataTables
   * Scope:    jQuery.fn
   */
  $.fn.dataTableExt = {};
  var _oExt = $.fn.dataTableExt;


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Section - DataTables extensible objects
   *
   * The _oExt object is used to provide an area where user dfined plugins can be
   * added to DataTables. The following properties of the object are used:
   *   oApi - Plug-in API functions
   *   aTypes - Auto-detection of types
   *   oSort - Sorting functions used by DataTables (based on the type)
   *   oPagination - Pagination functions for different input styles
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  /*
   * Variable: sVersion
   * Purpose:  Version string for plug-ins to check compatibility
   * Scope:    jQuery.fn.dataTableExt
   * Notes:    Allowed format is a.b.c.d.e where:
   *   a:int, b:int, c:int, d:string(dev|beta), e:int. d and e are optional
   */
  _oExt.sVersion = "1.8.0";

  /*
   * Variable: sErrMode
   * Purpose:  How should DataTables report an error. Can take the value 'alert' or 'throw'
   * Scope:    jQuery.fn.dataTableExt
   */
  _oExt.sErrMode = "alert";

  /*
   * Variable: iApiIndex
   * Purpose:  Index for what 'this' index API functions should use
   * Scope:    jQuery.fn.dataTableExt
   */
  _oExt.iApiIndex = 0;

  /*
   * Variable: oApi
   * Purpose:  Container for plugin API functions
   * Scope:    jQuery.fn.dataTableExt
   */
  _oExt.oApi = { };

  /*
   * Variable: aFiltering
   * Purpose:  Container for plugin filtering functions
   * Scope:    jQuery.fn.dataTableExt
   */
  _oExt.afnFiltering = [ ];

  /*
   * Variable: aoFeatures
   * Purpose:  Container for plugin function functions
   * Scope:    jQuery.fn.dataTableExt
   * Notes:    Array of objects with the following parameters:
   *   fnInit: Function for initialisation of Feature. Takes oSettings and returns node
   *   cFeature: Character that will be matched in sDom - case sensitive
   *   sFeature: Feature name - just for completeness :-)
   */
  _oExt.aoFeatures = [ ];

  /*
   * Variable: ofnSearch
   * Purpose:  Container for custom filtering functions
   * Scope:    jQuery.fn.dataTableExt
   * Notes:    This is an object (the name should match the type) for custom filtering function,
   *   which can be used for live DOM checking or formatted text filtering
   */
  _oExt.ofnSearch = { };

  /*
   * Variable: afnSortData
   * Purpose:  Container for custom sorting data source functions
   * Scope:    jQuery.fn.dataTableExt
   * Notes:    Array (associative) of functions which is run prior to a column of this
   *   'SortDataType' being sorted upon.
   *   Function input parameters:
   *     object:oSettings-  DataTables settings object
   *     int:iColumn - Target column number
   *   Return value: Array of data which exactly matched the full data set size for the column to
   *     be sorted upon
   */
  _oExt.afnSortData = [ ];

  /*
   * Variable: oStdClasses
   * Purpose:  Storage for the various classes that DataTables uses
   * Scope:    jQuery.fn.dataTableExt
   */
  _oExt.oStdClasses = {
    /* Two buttons buttons */
    "sPagePrevEnabled": "paginate_enabled_previous",
    "sPagePrevDisabled": "paginate_disabled_previous",
    "sPageNextEnabled": "paginate_enabled_next",
    "sPageNextDisabled": "paginate_disabled_next",
    "sPageJUINext": "",
    "sPageJUIPrev": "",

    /* Full numbers paging buttons */
    "sPageButton": "paginate_button",
    "sPageButtonActive": "paginate_active",
    "sPageButtonStaticDisabled": "paginate_button paginate_button_disabled",
    "sPageFirst": "first",
    "sPagePrevious": "previous",
    "sPageNext": "next",
    "sPageLast": "last",

    /* Stripping classes */
    "sStripOdd": "odd",
    "sStripEven": "even",

    /* Empty row */
    "sRowEmpty": "dataTables_empty",

    /* Features */
    "sWrapper": "dataTables_wrapper",
    "sFilter": "dataTables_filter",
    "sInfo": "dataTables_info",
    "sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
    "sLength": "dataTables_length",
    "sProcessing": "dataTables_processing",

    /* Sorting */
    "sSortAsc": "sorting_asc",
    "sSortDesc": "sorting_desc",
    "sSortable": "sorting", /* Sortable in both directions */
    "sSortableAsc": "sorting_asc_disabled",
    "sSortableDesc": "sorting_desc_disabled",
    "sSortableNone": "sorting_disabled",
    "sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
    "sSortJUIAsc": "",
    "sSortJUIDesc": "",
    "sSortJUI": "",
    "sSortJUIAscAllowed": "",
    "sSortJUIDescAllowed": "",
    "sSortJUIWrapper": "",
    "sSortIcon": "",

    /* Scrolling */
    "sScrollWrapper": "dataTables_scroll",
    "sScrollHead": "dataTables_scrollHead",
    "sScrollHeadInner": "dataTables_scrollHeadInner",
    "sScrollBody": "dataTables_scrollBody",
    "sScrollFoot": "dataTables_scrollFoot",
    "sScrollFootInner": "dataTables_scrollFootInner",

    /* Misc */
    "sFooterTH": ""
  };

  /*
   * Variable: oJUIClasses
   * Purpose:  Storage for the various classes that DataTables uses - jQuery UI suitable
   * Scope:    jQuery.fn.dataTableExt
   */
  _oExt.oJUIClasses = {
    /* Two buttons buttons */
    "sPagePrevEnabled": "fg-button ui-button ui-state-default ui-corner-left",
    "sPagePrevDisabled": "fg-button ui-button ui-state-default ui-corner-left ui-state-disabled",
    "sPageNextEnabled": "fg-button ui-button ui-state-default ui-corner-right",
    "sPageNextDisabled": "fg-button ui-button ui-state-default ui-corner-right ui-state-disabled",
    "sPageJUINext": "ui-icon ui-icon-circle-arrow-e",
    "sPageJUIPrev": "ui-icon ui-icon-circle-arrow-w",

    /* Full numbers paging buttons */
    "sPageButton": "fg-button ui-button ui-state-default",
    "sPageButtonActive": "fg-button ui-button ui-state-default ui-state-disabled",
    "sPageButtonStaticDisabled": "fg-button ui-button ui-state-default ui-state-disabled",
    "sPageFirst": "first ui-corner-tl ui-corner-bl",
    "sPagePrevious": "previous",
    "sPageNext": "next",
    "sPageLast": "last ui-corner-tr ui-corner-br",

    /* Stripping classes */
    "sStripOdd": "odd",
    "sStripEven": "even",

    /* Empty row */
    "sRowEmpty": "dataTables_empty",

    /* Features */
    "sWrapper": "dataTables_wrapper",
    "sFilter": "dataTables_filter",
    "sInfo": "dataTables_info",
    "sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi "+
      "ui-buttonset-multi paging_", /* Note that the type is postfixed */
    "sLength": "dataTables_length",
    "sProcessing": "dataTables_processing",

    /* Sorting */
    "sSortAsc": "ui-state-default",
    "sSortDesc": "ui-state-default",
    "sSortable": "ui-state-default",
    "sSortableAsc": "ui-state-default",
    "sSortableDesc": "ui-state-default",
    "sSortableNone": "ui-state-default",
    "sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
    "sSortJUIAsc": "css_right ui-icon ui-icon-triangle-1-n",
    "sSortJUIDesc": "css_right ui-icon ui-icon-triangle-1-s",
    "sSortJUI": "css_right ui-icon ui-icon-carat-2-n-s",
    "sSortJUIAscAllowed": "css_right ui-icon ui-icon-carat-1-n",
    "sSortJUIDescAllowed": "css_right ui-icon ui-icon-carat-1-s",
    "sSortJUIWrapper": "DataTables_sort_wrapper",
    "sSortIcon": "DataTables_sort_icon",

    /* Scrolling */
    "sScrollWrapper": "dataTables_scroll",
    "sScrollHead": "dataTables_scrollHead ui-state-default",
    "sScrollHeadInner": "dataTables_scrollHeadInner",
    "sScrollBody": "dataTables_scrollBody",
    "sScrollFoot": "dataTables_scrollFoot ui-state-default",
    "sScrollFootInner": "dataTables_scrollFootInner",

    /* Misc */
    "sFooterTH": "ui-state-default"
  };

  /*
   * Variable: oPagination
   * Purpose:  Container for the various type of pagination that dataTables supports
   * Scope:    jQuery.fn.dataTableExt
   */
  _oExt.oPagination = {
    /*
     * Variable: two_button
     * Purpose:  Standard two button (forward/back) pagination
     * Scope:    jQuery.fn.dataTableExt.oPagination
     */
    "two_button": {
      /*
       * Function: oPagination.two_button.fnInit
       * Purpose:  Initalise dom elements required for pagination with forward/back buttons only
       * Returns:  -
       * Inputs:   object:oSettings - dataTables settings object
       *           node:nPaging - the DIV which contains this pagination control
       *           function:fnCallbackDraw - draw function which must be called on update
       */
      "fnInit": function ( oSettings, nPaging, fnCallbackDraw )
      {
        var nPrevious, nNext, nPreviousInner, nNextInner;

        /* Store the next and previous elements in the oSettings object as they can be very
         * usful for automation - particularly testing
         */
        if ( !oSettings.bJUI )
        {
          nPrevious = document.createElement( 'div' );
          nNext = document.createElement( 'div' );
        }
        else
        {
          nPrevious = document.createElement( 'a' );
          nNext = document.createElement( 'a' );

          nNextInner = document.createElement('span');
          nNextInner.className = oSettings.oClasses.sPageJUINext;
          nNext.appendChild( nNextInner );

          nPreviousInner = document.createElement('span');
          nPreviousInner.className = oSettings.oClasses.sPageJUIPrev;
          nPrevious.appendChild( nPreviousInner );
        }

        nPrevious.className = oSettings.oClasses.sPagePrevDisabled;
        nNext.className = oSettings.oClasses.sPageNextDisabled;

        nPrevious.title = oSettings.oLanguage.oPaginate.sPrevious;
        nNext.title = oSettings.oLanguage.oPaginate.sNext;

        nPaging.appendChild( nPrevious );
        nPaging.appendChild( nNext );

        $(nPrevious).bind( 'click.DT', function() {
          if ( oSettings.oApi._fnPageChange( oSettings, "previous" ) )
          {
            /* Only draw when the page has actually changed */
            fnCallbackDraw( oSettings );
          }
        } );

        $(nNext).bind( 'click.DT', function() {
          if ( oSettings.oApi._fnPageChange( oSettings, "next" ) )
          {
            fnCallbackDraw( oSettings );
          }
        } );

        /* Take the brutal approach to cancelling text selection */
        $(nPrevious).bind( 'selectstart.DT', function () { return false; } );
        $(nNext).bind( 'selectstart.DT', function () { return false; } );

        /* ID the first elements only */
        if ( oSettings.sTableId !== '' && typeof oSettings.aanFeatures.p == "undefined" )
        {
          nPaging.setAttribute( 'id', oSettings.sTableId+'_paginate' );
          nPrevious.setAttribute( 'id', oSettings.sTableId+'_previous' );
          nNext.setAttribute( 'id', oSettings.sTableId+'_next' );
        }
      },

      /*
       * Function: oPagination.two_button.fnUpdate
       * Purpose:  Update the two button pagination at the end of the draw
       * Returns:  -
       * Inputs:   object:oSettings - dataTables settings object
       *           function:fnCallbackDraw - draw function to call on page change
       */
      "fnUpdate": function ( oSettings, fnCallbackDraw )
      {
        if ( !oSettings.aanFeatures.p )
        {
          return;
        }

        /* Loop over each instance of the pager */
        var an = oSettings.aanFeatures.p;
        for ( var i=0, iLen=an.length ; i<iLen ; i++ )
        {
          if ( an[i].childNodes.length !== 0 )
          {
            an[i].childNodes[0].className =
              ( oSettings._iDisplayStart === 0 ) ?
                oSettings.oClasses.sPagePrevDisabled : oSettings.oClasses.sPagePrevEnabled;

            an[i].childNodes[1].className =
              ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() ) ?
                oSettings.oClasses.sPageNextDisabled : oSettings.oClasses.sPageNextEnabled;
          }
        }
      }
    },


    /*
     * Variable: iFullNumbersShowPages
     * Purpose:  Change the number of pages which can be seen
     * Scope:    jQuery.fn.dataTableExt.oPagination
     */
    "iFullNumbersShowPages": 5,

    /*
     * Variable: full_numbers
     * Purpose:  Full numbers pagination
     * Scope:    jQuery.fn.dataTableExt.oPagination
     */
    "full_numbers": {
      /*
       * Function: oPagination.full_numbers.fnInit
       * Purpose:  Initalise dom elements required for pagination with a list of the pages
       * Returns:  -
       * Inputs:   object:oSettings - dataTables settings object
       *           node:nPaging - the DIV which contains this pagination control
       *           function:fnCallbackDraw - draw function which must be called on update
       */
      "fnInit": function ( oSettings, nPaging, fnCallbackDraw )
      {
        var nFirst = document.createElement( 'span' );
        var nPrevious = document.createElement( 'span' );
        var nList = document.createElement( 'span' );
        var nNext = document.createElement( 'span' );
        var nLast = document.createElement( 'span' );

        nFirst.innerHTML = oSettings.oLanguage.oPaginate.sFirst;
        nPrevious.innerHTML = oSettings.oLanguage.oPaginate.sPrevious;
        nNext.innerHTML = oSettings.oLanguage.oPaginate.sNext;
        nLast.innerHTML = oSettings.oLanguage.oPaginate.sLast;

        var oClasses = oSettings.oClasses;
        nFirst.className = oClasses.sPageButton+" "+oClasses.sPageFirst;
        nPrevious.className = oClasses.sPageButton+" "+oClasses.sPagePrevious;
        nNext.className= oClasses.sPageButton+" "+oClasses.sPageNext;
        nLast.className = oClasses.sPageButton+" "+oClasses.sPageLast;

        nPaging.appendChild( nFirst );
        nPaging.appendChild( nPrevious );
        nPaging.appendChild( nList );
        nPaging.appendChild( nNext );
        nPaging.appendChild( nLast );

        $(nFirst).bind( 'click.DT', function () {
          if ( oSettings.oApi._fnPageChange( oSettings, "first" ) )
          {
            fnCallbackDraw( oSettings );
          }
        } );

        $(nPrevious).bind( 'click.DT', function() {
          if ( oSettings.oApi._fnPageChange( oSettings, "previous" ) )
          {
            fnCallbackDraw( oSettings );
          }
        } );

        $(nNext).bind( 'click.DT', function() {
          if ( oSettings.oApi._fnPageChange( oSettings, "next" ) )
          {
            fnCallbackDraw( oSettings );
          }
        } );

        $(nLast).bind( 'click.DT', function() {
          if ( oSettings.oApi._fnPageChange( oSettings, "last" ) )
          {
            fnCallbackDraw( oSettings );
          }
        } );

        /* Take the brutal approach to cancelling text selection */
        $('span', nPaging)
          .bind( 'mousedown.DT', function () { return false; } )
          .bind( 'selectstart.DT', function () { return false; } );

        /* ID the first elements only */
        if ( oSettings.sTableId !== '' && typeof oSettings.aanFeatures.p == "undefined" )
        {
          nPaging.setAttribute( 'id', oSettings.sTableId+'_paginate' );
          nFirst.setAttribute( 'id', oSettings.sTableId+'_first' );
          nPrevious.setAttribute( 'id', oSettings.sTableId+'_previous' );
          nNext.setAttribute( 'id', oSettings.sTableId+'_next' );
          nLast.setAttribute( 'id', oSettings.sTableId+'_last' );
        }
      },

      /*
       * Function: oPagination.full_numbers.fnUpdate
       * Purpose:  Update the list of page buttons shows
       * Returns:  -
       * Inputs:   object:oSettings - dataTables settings object
       *           function:fnCallbackDraw - draw function to call on page change
       */
      "fnUpdate": function ( oSettings, fnCallbackDraw )
      {
        if ( !oSettings.aanFeatures.p )
        {
          return;
        }

        var iPageCount = _oExt.oPagination.iFullNumbersShowPages;
        var iPageCountHalf = Math.floor(iPageCount / 2);
        var iPages = Math.ceil((oSettings.fnRecordsDisplay()) / oSettings._iDisplayLength);
        var iCurrentPage = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;
        var sList = "";
        var iStartButton, iEndButton, i, iLen;
        var oClasses = oSettings.oClasses;

        /* Pages calculation */
        if (iPages < iPageCount)
        {
          iStartButton = 1;
          iEndButton = iPages;
        }
        else
        {
          if (iCurrentPage <= iPageCountHalf)
          {
            iStartButton = 1;
            iEndButton = iPageCount;
          }
          else
          {
            if (iCurrentPage >= (iPages - iPageCountHalf))
            {
              iStartButton = iPages - iPageCount + 1;
              iEndButton = iPages;
            }
            else
            {
              iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
              iEndButton = iStartButton + iPageCount - 1;
            }
          }
        }

        /* Build the dynamic list */
        for ( i=iStartButton ; i<=iEndButton ; i++ )
        {
          if ( iCurrentPage != i )
          {
            sList += '<span class="'+oClasses.sPageButton+'">'+i+'</span>';
          }
          else
          {
            sList += '<span class="'+oClasses.sPageButtonActive+'">'+i+'</span>';
          }
        }

        /* Loop over each instance of the pager */
        var an = oSettings.aanFeatures.p;
        var anButtons, anStatic, nPaginateList;
        var fnClick = function(e) {
          /* Use the information in the element to jump to the required page */
          var iTarget = (this.innerHTML * 1) - 1;
          oSettings._iDisplayStart = iTarget * oSettings._iDisplayLength;
          fnCallbackDraw( oSettings );
          e.preventDefault();
        };
        var fnFalse = function () { return false; };

        for ( i=0, iLen=an.length ; i<iLen ; i++ )
        {
          if ( an[i].childNodes.length === 0 )
          {
            continue;
          }

          /* Build up the dynamic list forst - html and listeners */
          var qjPaginateList = $('span:eq(2)', an[i]);
          qjPaginateList.html( sList );
          $('span', qjPaginateList).bind( 'click.DT', fnClick ).bind( 'mousedown.DT', fnFalse )
            .bind( 'selectstart.DT', fnFalse );

          /* Update the 'premanent botton's classes */
          anButtons = an[i].getElementsByTagName('span');
          anStatic = [
            anButtons[0], anButtons[1],
            anButtons[anButtons.length-2], anButtons[anButtons.length-1]
          ];
          $(anStatic).removeClass( oClasses.sPageButton+" "+oClasses.sPageButtonActive+" "+oClasses.sPageButtonStaticDisabled );
          if ( iCurrentPage == 1 )
          {
            anStatic[0].className += " "+oClasses.sPageButtonStaticDisabled;
            anStatic[1].className += " "+oClasses.sPageButtonStaticDisabled;
          }
          else
          {
            anStatic[0].className += " "+oClasses.sPageButton;
            anStatic[1].className += " "+oClasses.sPageButton;
          }

          if ( iPages === 0 || iCurrentPage == iPages || oSettings._iDisplayLength == -1 )
          {
            anStatic[2].className += " "+oClasses.sPageButtonStaticDisabled;
            anStatic[3].className += " "+oClasses.sPageButtonStaticDisabled;
          }
          else
          {
            anStatic[2].className += " "+oClasses.sPageButton;
            anStatic[3].className += " "+oClasses.sPageButton;
          }
        }
      }
    }
  };

  /*
   * Variable: oSort
   * Purpose:  Wrapper for the sorting functions that can be used in DataTables
   * Scope:    jQuery.fn.dataTableExt
   * Notes:    The functions provided in this object are basically standard javascript sort
   *   functions - they expect two inputs which they then compare and then return a priority
   *   result. For each sort method added, two functions need to be defined, an ascending sort and
   *   a descending sort.
   */
  _oExt.oSort = {
    /*
     * text sorting
     */
    "string-asc": function ( a, b )
    {
      if ( typeof a != 'string' ) { a = ''; }
      if ( typeof b != 'string' ) { b = ''; }
      var x = a.toLowerCase();
      var y = b.toLowerCase();
      return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    },

    "string-desc": function ( a, b )
    {
      if ( typeof a != 'string' ) { a = ''; }
      if ( typeof b != 'string' ) { b = ''; }
      var x = a.toLowerCase();
      var y = b.toLowerCase();
      return ((x < y) ? 1 : ((x > y) ? -1 : 0));
    },


    /*
     * html sorting (ignore html tags)
     */
    "html-asc": function ( a, b )
    {
      var x = a.replace( /<.*?>/g, "" ).toLowerCase();
      var y = b.replace( /<.*?>/g, "" ).toLowerCase();
      return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    },

    "html-desc": function ( a, b )
    {
      var x = a.replace( /<.*?>/g, "" ).toLowerCase();
      var y = b.replace( /<.*?>/g, "" ).toLowerCase();
      return ((x < y) ? 1 : ((x > y) ? -1 : 0));
    },


    /*
     * date sorting
     */
    "date-asc": function ( a, b )
    {
      var x = Date.parse( a );
      var y = Date.parse( b );

      if ( isNaN(x) || x==="" )
      {
        x = Date.parse( "01/01/1970 00:00:00" );
      }
      if ( isNaN(y) || y==="" )
      {
        y =	Date.parse( "01/01/1970 00:00:00" );
      }

      return x - y;
    },

    "date-desc": function ( a, b )
    {
      var x = Date.parse( a );
      var y = Date.parse( b );

      if ( isNaN(x) || x==="" )
      {
        x = Date.parse( "01/01/1970 00:00:00" );
      }
      if ( isNaN(y) || y==="" )
      {
        y =	Date.parse( "01/01/1970 00:00:00" );
      }

      return y - x;
    },


    /*
     * numerical sorting
     */
    "numeric-asc": function ( a, b )
    {
      var x = (a=="-" || a==="") ? 0 : a*1;
      var y = (b=="-" || b==="") ? 0 : b*1;
      return x - y;
    },

    "numeric-desc": function ( a, b )
    {
      var x = (a=="-" || a==="") ? 0 : a*1;
      var y = (b=="-" || b==="") ? 0 : b*1;
      return y - x;
    }
  };


  /*
   * Variable: aTypes
   * Purpose:  Container for the various type of type detection that dataTables supports
   * Scope:    jQuery.fn.dataTableExt
   * Notes:    The functions in this array are expected to parse a string to see if it is a data
   *   type that it recognises. If so then the function should return the name of the type (a
   *   corresponding sort function should be defined!), if the type is not recognised then the
   *   function should return null such that the parser and move on to check the next type.
   *   Note that ordering is important in this array - the functions are processed linearly,
   *   starting at index 0.
   *   Note that the input for these functions is always a string! It cannot be any other data
   *   type
   */
  _oExt.aTypes = [
    /*
     * Function: -
     * Purpose:  Check to see if a string is numeric
     * Returns:  string:'numeric' or null
     * Inputs:   mixed:sText - string to check
     */
    function ( sData )
    {
      /* Allow zero length strings as a number */
      if ( typeof sData == 'number' )
      {
        return 'numeric';
      }
      else if ( typeof sData != 'string' )
      {
        return null;
      }

      var sValidFirstChars = "0123456789-";
      var sValidChars = "0123456789.";
      var Char;
      var bDecimal = false;

      /* Check for a valid first char (no period and allow negatives) */
      Char = sData.charAt(0);
      if (sValidFirstChars.indexOf(Char) == -1)
      {
        return null;
      }

      /* Check all the other characters are valid */
      for ( var i=1 ; i<sData.length ; i++ )
      {
        Char = sData.charAt(i);
        if (sValidChars.indexOf(Char) == -1)
        {
          return null;
        }

        /* Only allowed one decimal place... */
        if ( Char == "." )
        {
          if ( bDecimal )
          {
            return null;
          }
          bDecimal = true;
        }
      }

      return 'numeric';
    },

    /*
     * Function: -
     * Purpose:  Check to see if a string is actually a formatted date
     * Returns:  string:'date' or null
     * Inputs:   string:sText - string to check
     */
    function ( sData )
    {
      var iParse = Date.parse(sData);
      if ( (iParse !== null && !isNaN(iParse)) || (typeof sData == 'string' && sData.length === 0) )
      {
        return 'date';
      }
      return null;
    },

    /*
     * Function: -
     * Purpose:  Check to see if a string should be treated as an HTML string
     * Returns:  string:'html' or null
     * Inputs:   string:sText - string to check
     */
    function ( sData )
    {
      if ( typeof sData == 'string' && sData.indexOf('<') != -1 && sData.indexOf('>') != -1 )
      {
        return 'html';
      }
      return null;
    }
  ];

  /*
   * Function: fnVersionCheck
   * Purpose:  Check a version string against this version of DataTables. Useful for plug-ins
   * Returns:  bool:true -this version of DataTables is greater or equal to the required version
   *                false -this version of DataTales is not suitable
   * Inputs:   string:sVersion - the version to check against. May be in the following formats:
   *             "a", "a.b" or "a.b.c"
   * Notes:    This function will only check the first three parts of a version string. It is
   *   assumed that beta and dev versions will meet the requirements. This might change in future
   */
  _oExt.fnVersionCheck = function( sVersion )
  {
    /* This is cheap, but very effective */
    var fnZPad = function (Zpad, count)
    {
      while(Zpad.length < count) {
        Zpad += '0';
      }
      return Zpad;
    };
    var aThis = _oExt.sVersion.split('.');
    var aThat = sVersion.split('.');
    var sThis = '', sThat = '';

    for ( var i=0, iLen=aThat.length ; i<iLen ; i++ )
    {
      sThis += fnZPad( aThis[i], 3 );
      sThat += fnZPad( aThat[i], 3 );
    }

    return parseInt(sThis, 10) >= parseInt(sThat, 10);
  };

  /*
   * Variable: _oExternConfig
   * Purpose:  Store information for DataTables to access globally about other instances
   * Scope:    jQuery.fn.dataTableExt
   */
  _oExt._oExternConfig = {
    /* int:iNextUnique - next unique number for an instance */
    "iNextUnique": 0
  };


  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Section - DataTables prototype
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  /*
   * Function: dataTable
   * Purpose:  DataTables information
   * Returns:  -
   * Inputs:   object:oInit - initalisation options for the table
   */
  $.fn.dataTable = function( oInit )
  {
    /*
     * Function: classSettings
     * Purpose:  Settings container function for all 'class' properties which are required
     *   by dataTables
     * Returns:  -
     * Inputs:   -
     */
    function classSettings ()
    {
      this.fnRecordsTotal = function ()
      {
        if ( this.oFeatures.bServerSide ) {
          return parseInt(this._iRecordsTotal, 10);
        } else {
          return this.aiDisplayMaster.length;
        }
      };

      this.fnRecordsDisplay = function ()
      {
        if ( this.oFeatures.bServerSide ) {
          return parseInt(this._iRecordsDisplay, 10);
        } else {
          return this.aiDisplay.length;
        }
      };

      this.fnDisplayEnd = function ()
      {
        if ( this.oFeatures.bServerSide ) {
          if ( this.oFeatures.bPaginate === false || this._iDisplayLength == -1 ) {
            return this._iDisplayStart+this.aiDisplay.length;
          } else {
            return Math.min( this._iDisplayStart+this._iDisplayLength,
              this._iRecordsDisplay );
          }
        } else {
          return this._iDisplayEnd;
        }
      };

      /*
       * Variable: oInstance
       * Purpose:  The DataTables object for this table
       * Scope:    jQuery.dataTable.classSettings
       */
      this.oInstance = null;

      /*
       * Variable: sInstance
       * Purpose:  Unique idendifier for each instance of the DataTables object
       * Scope:    jQuery.dataTable.classSettings
       */
      this.sInstance = null;

      /*
       * Variable: oFeatures
       * Purpose:  Indicate the enablement of key dataTable features
       * Scope:    jQuery.dataTable.classSettings
       */
      this.oFeatures = {
        "bPaginate": true,
        "bLengthChange": true,
        "bFilter": true,
        "bSort": true,
        "bInfo": true,
        "bAutoWidth": true,
        "bProcessing": false,
        "bSortClasses": true,
        "bStateSave": false,
        "bServerSide": false,
        "bDeferRender": false
      };

      /*
       * Variable: oScroll
       * Purpose:  Container for scrolling options
       * Scope:    jQuery.dataTable.classSettings
       */
      this.oScroll = {
        "sX": "",
        "sXInner": "",
        "sY": "",
        "bCollapse": false,
        "bInfinite": false,
        "iLoadGap": 100,
        "iBarWidth": 0,
        "bAutoCss": true
      };

      /*
       * Variable: aanFeatures
       * Purpose:  Array referencing the nodes which are used for the features
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    The parameters of this object match what is allowed by sDom - i.e.
       *   'l' - Length changing
       *   'f' - Filtering input
       *   't' - The table!
       *   'i' - Information
       *   'p' - Pagination
       *   'r' - pRocessing
       */
      this.aanFeatures = [];

      /*
       * Variable: oLanguage
       * Purpose:  Store the language strings used by dataTables
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    The words in the format _VAR_ are variables which are dynamically replaced
       *   by javascript
       */
      this.oLanguage = {
        "sProcessing": "Processing...",
        "sLengthMenu": "Show _MENU_ entries",
        "sZeroRecords": "No matching records found",
        "sEmptyTable": "No data available in table",
        "sLoadingRecords": "Loading...",
        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
        "sInfoFiltered": "(filtered from _MAX_ total entries)",
        "sInfoPostFix": "",
        "sSearch": "Search:",
        "sUrl": "",
        "oPaginate": {
          "sFirst":    "First",
          "sPrevious": "Previous",
          "sNext":     "Next",
          "sLast":     "Last"
        },
        "fnInfoCallback": null
      };

      /*
       * Variable: aoData
       * Purpose:  Store data information
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    This is an array of objects with the following parameters:
       *   int: _iId - internal id for tracking
       *   array: _aData - internal data - used for sorting / filtering etc
       *   node: nTr - display node
       *   array node: _anHidden - hidden TD nodes
       *   string: _sRowStripe
       */
      this.aoData = [];

      /*
       * Variable: aiDisplay
       * Purpose:  Array of indexes which are in the current display (after filtering etc)
       * Scope:    jQuery.dataTable.classSettings
       */
      this.aiDisplay = [];

      /*
       * Variable: aiDisplayMaster
       * Purpose:  Array of indexes for display - no filtering
       * Scope:    jQuery.dataTable.classSettings
       */
      this.aiDisplayMaster = [];

      /*
       * Variable: aoColumns
       * Purpose:  Store information about each column that is in use
       * Scope:    jQuery.dataTable.classSettings
       */
      this.aoColumns = [];

      /*
       * Variable: aoHeader
       * Purpose:  Store information about the table's header
       * Scope:    jQuery.dataTable.classSettings
       */
      this.aoHeader = [];

      /*
       * Variable: aoFooter
       * Purpose:  Store information about the table's footer
       * Scope:    jQuery.dataTable.classSettings
       */
      this.aoFooter = [];

      /*
       * Variable: iNextId
       * Purpose:  Store the next unique id to be used for a new row
       * Scope:    jQuery.dataTable.classSettings
       */
      this.iNextId = 0;

      /*
       * Variable: asDataSearch
       * Purpose:  Search data array for regular expression searching
       * Scope:    jQuery.dataTable.classSettings
       */
      this.asDataSearch = [];

      /*
       * Variable: oPreviousSearch
       * Purpose:  Store the previous search incase we want to force a re-search
       *   or compare the old search to a new one
       * Scope:    jQuery.dataTable.classSettings
       */
      this.oPreviousSearch = {
        "sSearch": "",
        "bRegex": false,
        "bSmart": true
      };

      /*
       * Variable: aoPreSearchCols
       * Purpose:  Store the previous search for each column
       * Scope:    jQuery.dataTable.classSettings
       */
      this.aoPreSearchCols = [];

      /*
       * Variable: aaSorting
       * Purpose:  Sorting information
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    Index 0 - column number
       *           Index 1 - current sorting direction
       *           Index 2 - index of asSorting for this column
       */
      this.aaSorting = [ [0, 'asc', 0] ];

      /*
       * Variable: aaSortingFixed
       * Purpose:  Sorting information that is always applied
       * Scope:    jQuery.dataTable.classSettings
       */
      this.aaSortingFixed = null;

      /*
       * Variable: asStripClasses
       * Purpose:  Classes to use for the striping of a table
       * Scope:    jQuery.dataTable.classSettings
       */
      this.asStripClasses = [];

      /*
       * Variable: asDestoryStrips
       * Purpose:  If restoring a table - we should restore it's striping classes as well
       * Scope:    jQuery.dataTable.classSettings
       */
      this.asDestoryStrips = [];

      /*
       * Variable: sDestroyWidth
       * Purpose:  If restoring a table - we should restore it's width
       * Scope:    jQuery.dataTable.classSettings
       */
      this.sDestroyWidth = 0;

      /*
       * Variable: fnRowCallback
       * Purpose:  Call this function every time a row is inserted (draw)
       * Scope:    jQuery.dataTable.classSettings
       */
      this.fnRowCallback = null;

      /*
       * Variable: fnHeaderCallback
       * Purpose:  Callback function for the header on each draw
       * Scope:    jQuery.dataTable.classSettings
       */
      this.fnHeaderCallback = null;

      /*
       * Variable: fnFooterCallback
       * Purpose:  Callback function for the footer on each draw
       * Scope:    jQuery.dataTable.classSettings
       */
      this.fnFooterCallback = null;

      /*
       * Variable: aoDrawCallback
       * Purpose:  Array of callback functions for draw callback functions
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    Each array element is an object with the following parameters:
       *   function:fn - function to call
       *   string:sName - name callback (feature). useful for arranging array
       */
      this.aoDrawCallback = [];

      /*
       * Variable: fnPreDrawCallback
       * Purpose:  Callback function for just before the table is redrawn. A return of false
       *           will be used to cancel the draw.
       * Scope:    jQuery.dataTable.classSettings
       */
      this.fnPreDrawCallback = null;

      /*
       * Variable: fnInitComplete
       * Purpose:  Callback function for when the table has been initalised
       * Scope:    jQuery.dataTable.classSettings
       */
      this.fnInitComplete = null;

      /*
       * Variable: sTableId
       * Purpose:  Cache the table ID for quick access
       * Scope:    jQuery.dataTable.classSettings
       */
      this.sTableId = "";

      /*
       * Variable: nTable
       * Purpose:  Cache the table node for quick access
       * Scope:    jQuery.dataTable.classSettings
       */
      this.nTable = null;

      /*
       * Variable: nTHead
       * Purpose:  Permanent ref to the thead element
       * Scope:    jQuery.dataTable.classSettings
       */
      this.nTHead = null;

      /*
       * Variable: nTFoot
       * Purpose:  Permanent ref to the tfoot element - if it exists
       * Scope:    jQuery.dataTable.classSettings
       */
      this.nTFoot = null;

      /*
       * Variable: nTBody
       * Purpose:  Permanent ref to the tbody element
       * Scope:    jQuery.dataTable.classSettings
       */
      this.nTBody = null;

      /*
       * Variable: nTableWrapper
       * Purpose:  Cache the wrapper node (contains all DataTables controlled elements)
       * Scope:    jQuery.dataTable.classSettings
       */
      this.nTableWrapper = null;

      /*
       * Variable: bDeferLoading
       * Purpose:  Indicate if when using server-side processing the loading of data
       *           should be deferred until the second draw
       * Scope:    jQuery.dataTable.classSettings
       */
      this.bDeferLoading = false;

      /*
       * Variable: bInitialised
       * Purpose:  Indicate if all required information has been read in
       * Scope:    jQuery.dataTable.classSettings
       */
      this.bInitialised = false;

      /*
       * Variable: aoOpenRows
       * Purpose:  Information about open rows
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    Has the parameters 'nTr' and 'nParent'
       */
      this.aoOpenRows = [];

      /*
       * Variable: sDom
       * Purpose:  Dictate the positioning that the created elements will take
       * Scope:    jQuery.dataTable.classSettings
       * Notes:
       *   The following options are allowed:
       *     'l' - Length changing
       *     'f' - Filtering input
       *     't' - The table!
       *     'i' - Information
       *     'p' - Pagination
       *     'r' - pRocessing
       *   The following constants are allowed:
       *     'H' - jQueryUI theme "header" classes
       *     'F' - jQueryUI theme "footer" classes
       *   The following syntax is expected:
       *     '<' and '>' - div elements
       *     '<"class" and '>' - div with a class
       *   Examples:
       *     '<"wrapper"flipt>', '<lf<t>ip>'
       */
      this.sDom = 'lfrtip';

      /*
       * Variable: sPaginationType
       * Purpose:  Note which type of sorting should be used
       * Scope:    jQuery.dataTable.classSettings
       */
      this.sPaginationType = "two_button";

      /*
       * Variable: iCookieDuration
       * Purpose:  The cookie duration (for bStateSave) in seconds - default 2 hours
       * Scope:    jQuery.dataTable.classSettings
       */
      this.iCookieDuration = 60 * 60 * 2;

      /*
       * Variable: sCookiePrefix
       * Purpose:  The cookie name prefix
       * Scope:    jQuery.dataTable.classSettings
       */
      this.sCookiePrefix = "SpryMedia_DataTables_";

      /*
       * Variable: fnCookieCallback
       * Purpose:  Callback function for cookie creation
       * Scope:    jQuery.dataTable.classSettings
       */
      this.fnCookieCallback = null;

      /*
       * Variable: aoStateSave
       * Purpose:  Array of callback functions for state saving
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    Each array element is an object with the following parameters:
       *   function:fn - function to call. Takes two parameters, oSettings and the JSON string to
       *     save that has been thus far created. Returns a JSON string to be inserted into a
       *     json object (i.e. '"param": [ 0, 1, 2]')
       *   string:sName - name of callback
       */
      this.aoStateSave = [];

      /*
       * Variable: aoStateLoad
       * Purpose:  Array of callback functions for state loading
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    Each array element is an object with the following parameters:
       *   function:fn - function to call. Takes two parameters, oSettings and the object stored.
       *     May return false to cancel state loading.
       *   string:sName - name of callback
       */
      this.aoStateLoad = [];

      /*
       * Variable: oLoadedState
       * Purpose:  State that was loaded from the cookie. Useful for back reference
       * Scope:    jQuery.dataTable.classSettings
       */
      this.oLoadedState = null;

      /*
       * Variable: sAjaxSource
       * Purpose:  Source url for AJAX data for the table
       * Scope:    jQuery.dataTable.classSettings
       */
      this.sAjaxSource = null;

      /*
       * Variable: sAjaxDataProp
       * Purpose:  Property from a given object from which to read the table data from. This can
       *           be an empty string (when not server-side processing), in which case it is
       *           assumed an an array is given directly.
       * Scope:    jQuery.dataTable.classSettings
       */
      this.sAjaxDataProp = 'aaData';

      /*
       * Variable: bAjaxDataGet
       * Purpose:  Note if draw should be blocked while getting data
       * Scope:    jQuery.dataTable.classSettings
       */
      this.bAjaxDataGet = true;

      /*
       * Variable: jqXHR
       * Purpose:  The last jQuery XHR object that was used for server-side data gathering.
       *           This can be used for working with the XHR information in one of the callbacks
       * Scope:    jQuery.dataTable.classSettings
       */
      this.jqXHR = null;

      /*
       * Variable: fnServerData
       * Purpose:  Function to get the server-side data - can be overruled by the developer
       * Scope:    jQuery.dataTable.classSettings
       */
      this.fnServerData = function ( url, data, callback, settings ) {
        settings.jqXHR = $.ajax( {
          "url": url,
          "data": data,
          "success": callback,
          "dataType": "json",
          "cache": false,
          "error": function (xhr, error, thrown) {
            if ( error == "parsererror" ) {
              alert( "DataTables warning: JSON data from server could not be parsed. "+
                "This is caused by a JSON formatting error." );
            }
          }
        } );
      };

      /*
       * Variable: fnFormatNumber
       * Purpose:  Format numbers for display
       * Scope:    jQuery.dataTable.classSettings
       */
      this.fnFormatNumber = function ( iIn )
      {
        if ( iIn < 1000 )
        {
          /* A small optimisation for what is likely to be the vast majority of use cases */
          return iIn;
        }
        else
        {
          var s=(iIn+""), a=s.split(""), out="", iLen=s.length;

          for ( var i=0 ; i<iLen ; i++ )
          {
            if ( i%3 === 0 && i !== 0 )
            {
              out = ','+out;
            }
            out = a[iLen-i-1]+out;
          }
        }
        return out;
      };

      /*
       * Variable: aLengthMenu
       * Purpose:  List of options that can be used for the user selectable length menu
       * Scope:    jQuery.dataTable.classSettings
       * Note:     This varaible can take for form of a 1D array, in which case the value and the
       *   displayed value in the menu are the same, or a 2D array in which case the value comes
       *   from the first array, and the displayed value to the end user comes from the second
       *   array. 2D example: [ [ 10, 25, 50, 100, -1 ], [ 10, 25, 50, 100, 'All' ] ];
       */
      this.aLengthMenu = [ 10, 25, 50, 100 ];

      /*
       * Variable: iDraw
       * Purpose:  Counter for the draws that the table does. Also used as a tracker for
       *   server-side processing
       * Scope:    jQuery.dataTable.classSettings
       */
      this.iDraw = 0;

      /*
       * Variable: bDrawing
       * Purpose:  Indicate if a redraw is being done - useful for Ajax
       * Scope:    jQuery.dataTable.classSettings
       */
      this.bDrawing = 0;

      /*
       * Variable: iDrawError
       * Purpose:  Last draw error
       * Scope:    jQuery.dataTable.classSettings
       */
      this.iDrawError = -1;

      /*
       * Variable: _iDisplayLength, _iDisplayStart, _iDisplayEnd
       * Purpose:  Display length variables
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    These variable must NOT be used externally to get the data length. Rather, use
       *   the fnRecordsTotal() (etc) functions.
       */
      this._iDisplayLength = 10;
      this._iDisplayStart = 0;
      this._iDisplayEnd = 10;

      /*
       * Variable: _iRecordsTotal, _iRecordsDisplay
       * Purpose:  Display length variables used for server side processing
       * Scope:    jQuery.dataTable.classSettings
       * Notes:    These variable must NOT be used externally to get the data length. Rather, use
       *   the fnRecordsTotal() (etc) functions.
       */
      this._iRecordsTotal = 0;
      this._iRecordsDisplay = 0;

      /*
       * Variable: bJUI
       * Purpose:  Should we add the markup needed for jQuery UI theming?
       * Scope:    jQuery.dataTable.classSettings
       */
      this.bJUI = false;

      /*
       * Variable: oClasses
       * Purpose:  Should we add the markup needed for jQuery UI theming?
       * Scope:    jQuery.dataTable.classSettings
       */
      this.oClasses = _oExt.oStdClasses;

      /*
       * Variable: bFiltered and bSorted
       * Purpose:  Flags to allow callback functions to see what actions have been performed
       * Scope:    jQuery.dataTable.classSettings
       */
      this.bFiltered = false;
      this.bSorted = false;

      /*
       * Variable: bSortCellsTop
       * Purpose:  Indicate that if multiple rows are in the header and there is more than one
       *           unique cell per column, if the top one (true) or bottom one (false) should
       *           be used for sorting / title by DataTables
       * Scope:    jQuery.dataTable.classSettings
       */
      this.bSortCellsTop = false;

      /*
       * Variable: oInit
       * Purpose:  Initialisation object that is used for the table
       * Scope:    jQuery.dataTable.classSettings
       */
      this.oInit = null;
    }

    /*
     * Variable: oApi
     * Purpose:  Container for publicly exposed 'private' functions
     * Scope:    jQuery.dataTable
     */
    this.oApi = {};


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - API functions
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

    /*
     * Function: fnDraw
     * Purpose:  Redraw the table
     * Returns:  -
     * Inputs:   bool:bComplete - Refilter and resort (if enabled) the table before the draw.
     *             Optional: default - true
     */
    this.fnDraw = function( bComplete )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      if ( typeof bComplete != 'undefined' && bComplete === false )
      {
        _fnCalculateEnd( oSettings );
        _fnDraw( oSettings );
      }
      else
      {
        _fnReDraw( oSettings );
      }
    };

    /*
     * Function: fnFilter
     * Purpose:  Filter the input based on data
     * Returns:  -
     * Inputs:   string:sInput - string to filter the table on
     *           int:iColumn - optional - column to limit filtering to
     *           bool:bRegex - optional - treat as regular expression or not - default false
     *           bool:bSmart - optional - perform smart filtering or not - default true
     *           bool:bShowGlobal - optional - show the input global filter in it's input box(es)
     *              - default true
     */
    this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );

      if ( !oSettings.oFeatures.bFilter )
      {
        return;
      }

      if ( typeof bRegex == 'undefined' )
      {
        bRegex = false;
      }

      if ( typeof bSmart == 'undefined' )
      {
        bSmart = true;
      }

      if ( typeof bShowGlobal == 'undefined' )
      {
        bShowGlobal = true;
      }

      if ( typeof iColumn == "undefined" || iColumn === null )
      {
        /* Global filter */
        _fnFilterComplete( oSettings, {
          "sSearch":sInput,
          "bRegex": bRegex,
          "bSmart": bSmart
        }, 1 );

        if ( bShowGlobal && typeof oSettings.aanFeatures.f != 'undefined' )
        {
          var n = oSettings.aanFeatures.f;
          for ( var i=0, iLen=n.length ; i<iLen ; i++ )
          {
            $('input', n[i]).val( sInput );
          }
        }
      }
      else
      {
        /* Single column filter */
        oSettings.aoPreSearchCols[ iColumn ].sSearch = sInput;
        oSettings.aoPreSearchCols[ iColumn ].bRegex = bRegex;
        oSettings.aoPreSearchCols[ iColumn ].bSmart = bSmart;
        _fnFilterComplete( oSettings, oSettings.oPreviousSearch, 1 );
      }
    };

    /*
     * Function: fnSettings
     * Purpose:  Get the settings for a particular table for extern. manipulation
     * Returns:  -
     * Inputs:   -
     */
    this.fnSettings = function( nNode  )
    {
      return _fnSettingsFromNode( this[_oExt.iApiIndex] );
    };

    /*
     * Function: fnVersionCheck
     * Notes:    The function is the same as the 'static' function provided in the ext variable
     */
    this.fnVersionCheck = _oExt.fnVersionCheck;

    /*
     * Function: fnSort
     * Purpose:  Sort the table by a particular row
     * Returns:  -
     * Inputs:   int:iCol - the data index to sort on. Note that this will
     *   not match the 'display index' if you have hidden data entries
     */
    this.fnSort = function( aaSort )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      oSettings.aaSorting = aaSort;
      _fnSort( oSettings );
    };

    /*
     * Function: fnSortListener
     * Purpose:  Attach a sort listener to an element for a given column
     * Returns:  -
     * Inputs:   node:nNode - the element to attach the sort listener to
     *           int:iColumn - the column that a click on this node will sort on
     *           function:fnCallback - callback function when sort is run - optional
     */
    this.fnSortListener = function( nNode, iColumn, fnCallback )
    {
      _fnSortAttachListener( _fnSettingsFromNode( this[_oExt.iApiIndex] ), nNode, iColumn,
        fnCallback );
    };

    /*
     * Function: fnAddData
     * Purpose:  Add new row(s) into the table
     * Returns:  array int: array of indexes (aoData) which have been added (zero length on error)
     * Inputs:   array:mData - the data to be added. The length must match
     *               the original data from the DOM
     *             or
     *             array array:mData - 2D array of data to be added
     *           bool:bRedraw - redraw the table or not - default true
     * Notes:    Warning - the refilter here will cause the table to redraw
     *             starting at zero
     * Notes:    Thanks to Yekimov Denis for contributing the basis for this function!
     */
    this.fnAddData = function( mData, bRedraw )
    {
      if ( mData.length === 0 )
      {
        return [];
      }

      var aiReturn = [];
      var iTest;

      /* Find settings from table node */
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );

      /* Check if we want to add multiple rows or not */
      if ( typeof mData[0] == "object" )
      {
        for ( var i=0 ; i<mData.length ; i++ )
        {
          iTest = _fnAddData( oSettings, mData[i] );
          if ( iTest == -1 )
          {
            return aiReturn;
          }
          aiReturn.push( iTest );
        }
      }
      else
      {
        iTest = _fnAddData( oSettings, mData );
        if ( iTest == -1 )
        {
          return aiReturn;
        }
        aiReturn.push( iTest );
      }

      oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

      if ( typeof bRedraw == 'undefined' || bRedraw )
      {
        _fnReDraw( oSettings );
      }
      return aiReturn;
    };

    /*
     * Function: fnDeleteRow
     * Purpose:  Remove a row for the table
     * Returns:  array:aReturn - the row that was deleted
     * Inputs:   mixed:mTarget -
     *             int: - index of aoData to be deleted, or
     *             node(TR): - TR element you want to delete
     *           function:fnCallBack - callback function - default null
     *           bool:bRedraw - redraw the table or not - default true
     */
    this.fnDeleteRow = function( mTarget, fnCallBack, bRedraw )
    {
      /* Find settings from table node */
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      var i, iAODataIndex;

      iAODataIndex = (typeof mTarget == 'object') ?
        _fnNodeToDataIndex(oSettings, mTarget) : mTarget;

      /* Return the data array from this row */
      var oData = oSettings.aoData.splice( iAODataIndex, 1 );

      /* Remove the target row from the search array */
      var iDisplayIndex = $.inArray( iAODataIndex, oSettings.aiDisplay );
      oSettings.asDataSearch.splice( iDisplayIndex, 1 );

      /* Delete from the display arrays */
      _fnDeleteIndex( oSettings.aiDisplayMaster, iAODataIndex );
      _fnDeleteIndex( oSettings.aiDisplay, iAODataIndex );

      /* If there is a user callback function - call it */
      if ( typeof fnCallBack == "function" )
      {
        fnCallBack.call( this, oSettings, oData );
      }

      /* Check for an 'overflow' they case for dislaying the table */
      if ( oSettings._iDisplayStart >= oSettings.aiDisplay.length )
      {
        oSettings._iDisplayStart -= oSettings._iDisplayLength;
        if ( oSettings._iDisplayStart < 0 )
        {
          oSettings._iDisplayStart = 0;
        }
      }

      if ( typeof bRedraw == 'undefined' || bRedraw )
      {
        _fnCalculateEnd( oSettings );
        _fnDraw( oSettings );
      }

      return oData;
    };

    /*
     * Function: fnClearTable
     * Purpose:  Quickly and simply clear a table
     * Returns:  -
     * Inputs:   bool:bRedraw - redraw the table or not - default true
     * Notes:    Thanks to Yekimov Denis for contributing the basis for this function!
     */
    this.fnClearTable = function( bRedraw )
    {
      /* Find settings from table node */
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      _fnClearTable( oSettings );

      if ( typeof bRedraw == 'undefined' || bRedraw )
      {
        _fnDraw( oSettings );
      }
    };

    /*
     * Function: fnOpen
     * Purpose:  Open a display row (append a row after the row in question)
     * Returns:  node:nNewRow - the row opened
     * Inputs:   node:nTr - the table row to 'open'
     *           string|node|jQuery:mHtml - the HTML to put into the row
     *           string:sClass - class to give the new TD cell
     */
    this.fnOpen = function( nTr, mHtml, sClass )
    {
      /* Find settings from table node */
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );

      /* the old open one if there is one */
      this.fnClose( nTr );

      var nNewRow = document.createElement("tr");
      var nNewCell = document.createElement("td");
      nNewRow.appendChild( nNewCell );
      nNewCell.className = sClass;
      nNewCell.colSpan = _fnVisbleColumns( oSettings );

      if( typeof mHtml.jquery != 'undefined' || typeof mHtml == "object" )
      {
        nNewCell.appendChild( mHtml );
      }
      else
      {
        nNewCell.innerHTML = mHtml;
      }

      /* If the nTr isn't on the page at the moment - then we don't insert at the moment */
      var nTrs = $('tr', oSettings.nTBody);
      if ( $.inArray(nTr, nTrs) != -1 )
      {
        $(nNewRow).insertAfter(nTr);
      }

      oSettings.aoOpenRows.push( {
        "nTr": nNewRow,
        "nParent": nTr
      } );

      return nNewRow;
    };

    /*
     * Function: fnClose
     * Purpose:  Close a display row
     * Returns:  int: 0 (success) or 1 (failed)
     * Inputs:   node:nTr - the table row to 'close'
     */
    this.fnClose = function( nTr )
    {
      /* Find settings from table node */
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );

      for ( var i=0 ; i<oSettings.aoOpenRows.length ; i++ )
      {
        if ( oSettings.aoOpenRows[i].nParent == nTr )
        {
          var nTrParent = oSettings.aoOpenRows[i].nTr.parentNode;
          if ( nTrParent )
          {
            /* Remove it if it is currently on display */
            nTrParent.removeChild( oSettings.aoOpenRows[i].nTr );
          }
          oSettings.aoOpenRows.splice( i, 1 );
          return 0;
        }
      }
      return 1;
    };

    /*
     * Function: fnGetData
     * Purpose:  Return an array with the data which is used to make up the table
     * Returns:  array array string: 2d data array ([row][column]) or array string: 1d data array
     *           or string if both row and column are given
     * Inputs:   mixed:mRow - optional - if not present, then the full 2D array for the table
     *             if given then:
     *               int: - return data object for aoData entry of this index
     *               node(TR): - return data object for this TR element
     *           int:iCol - optional - the column that you want the data of. This will take into
     *               account mDataProp and return the value DataTables uses for this column
     */
    this.fnGetData = function( mRow, iCol )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );

      if ( typeof mRow != 'undefined' )
      {
        var iRow = (typeof mRow == 'object') ?
          _fnNodeToDataIndex(oSettings, mRow) : mRow;

        if ( typeof iCol != 'undefined' )
        {
          return _fnGetCellData( oSettings, iRow, iCol, '' );
        }
        return (typeof oSettings.aoData[iRow] != 'undefined') ?
          oSettings.aoData[iRow]._aData : null;
      }
      return _fnGetDataMaster( oSettings );
    };

    /*
     * Function: fnGetNodes
     * Purpose:  Return an array with the TR nodes used for drawing the table
     * Returns:  array node: TR elements
     *           or
     *           node (if iRow specified)
     * Inputs:   int:iRow - optional - if present then the array returned will be the node for
     *             the row with the index 'iRow'
     */
    this.fnGetNodes = function( iRow )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );

      if ( typeof iRow != 'undefined' )
      {
        return (typeof oSettings.aoData[iRow] != 'undefined') ? oSettings.aoData[iRow].nTr : null;
      }
      return _fnGetTrNodes( oSettings );
    };

    /*
     * Function: fnGetPosition
     * Purpose:  Get the array indexes of a particular cell from it's DOM element
     * Returns:  int: - row index, or array[ int, int, int ]: - row index, column index (visible)
     *             and column index including hidden columns
     * Inputs:   node:nNode - this can either be a TR, TD or TH in the table's body, the return is
     *             dependent on this input
     */
    this.fnGetPosition = function( nNode )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      var sNodeName = nNode.nodeName.toUpperCase();

      if ( sNodeName == "TR" )
      {
        return _fnNodeToDataIndex(oSettings, nNode);
      }
      else if ( sNodeName == "TD" || sNodeName == "TH" )
      {
        var iDataIndex = _fnNodeToDataIndex(oSettings, nNode.parentNode);
        var anCells = _fnGetTdNodes( oSettings, iDataIndex );

        for ( var i=0 ; i<oSettings.aoColumns.length ; i++ )
        {
          if ( anCells[i] == nNode )
          {
            return [ iDataIndex, _fnColumnIndexToVisible(oSettings, i ), i ];
          }
        }
      }
      return null;
    };

    /*
     * Function: fnUpdate
     * Purpose:  Update a table cell or row - this method will accept either a single value to
     *             update the cell with, an array of values with one element for each column or
     *             an object in the same format as the original data source. The function is
     *             self-referencing in order to make the multi column updates easier.
     * Returns:  int: 0 okay, 1 error
     * Inputs:   object | array string | string:mData - data to update the cell/row with
     *           mixed:mRow -
     *             int: - index of aoData to be updated, or
     *             node(TR): - TR element you want to update
     *           int:iColumn - the column to update - optional (not used of mData is an array or object)
     *           bool:bRedraw - redraw the table or not - default true
     *           bool:bAction - perform predraw actions or not (you will want this as 'true' if
     *             you have bRedraw as true) - default true
     */
    this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      var iVisibleColumn, i, iLen, sDisplay;
      var iRow = (typeof mRow == 'object') ?
        _fnNodeToDataIndex(oSettings, mRow) : mRow;

      if ( $.isArray(mData) && typeof mData == 'object' )
      {
        /* Array update - update the whole row */
        if ( mData.length != oSettings.aoColumns.length )
        {
          _fnLog( oSettings, 0, 'An array passed to fnUpdate must have the same number of '+
            'columns as the table in question - in this case '+oSettings.aoColumns.length );
          return 1;
        }

        oSettings.aoData[iRow]._aData = mData.slice();

        for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
        {
          this.fnUpdate( _fnGetCellData( oSettings, iRow, i ), iRow, i, false, false );
        }
      }
      else if ( typeof mData == 'object' )
      {
        /* Object update - update the whole row - assume the developer gets the object right */
        oSettings.aoData[iRow]._aData = $.extend( true, {}, mData );

        for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
        {
          this.fnUpdate( _fnGetCellData( oSettings, iRow, i ), iRow, i, false, false );
        }
      }
      else
      {
        /* Individual cell update */
        sDisplay = mData;
        _fnSetCellData( oSettings, iRow, iColumn, sDisplay );

        if ( oSettings.aoColumns[iColumn].fnRender !== null )
        {
          sDisplay = oSettings.aoColumns[iColumn].fnRender( {
            "iDataRow": iRow,
            "iDataColumn": iColumn,
            "aData": oSettings.aoData[iRow]._aData,
            "oSettings": oSettings
          } );

          if ( oSettings.aoColumns[iColumn].bUseRendered )
          {
            _fnSetCellData( oSettings, iRow, iColumn, sDisplay );
          }
        }

        if ( oSettings.aoData[iRow].nTr !== null )
        {
          /* Do the actual HTML update */
          _fnGetTdNodes( oSettings, iRow )[iColumn].innerHTML = sDisplay;
        }
      }

      /* Modify the search index for this row (strictly this is likely not needed, since fnReDraw
       * will rebuild the search array - however, the redraw might be disabled by the user)
       */
      var iDisplayIndex = $.inArray( iRow, oSettings.aiDisplay );
      oSettings.asDataSearch[iDisplayIndex] = _fnBuildSearchRow( oSettings,
        _fnGetRowData( oSettings, iRow, 'filter' ) );

      /* Perform pre-draw actions */
      if ( typeof bAction == 'undefined' || bAction )
      {
        _fnAjustColumnSizing( oSettings );
      }

      /* Redraw the table */
      if ( typeof bRedraw == 'undefined' || bRedraw )
      {
        _fnReDraw( oSettings );
      }
      return 0;
    };


    /*
     * Function: fnShowColoumn
     * Purpose:  Show a particular column
     * Returns:  -
     * Inputs:   int:iCol - the column whose display should be changed
     *           bool:bShow - show (true) or hide (false) the column
     *           bool:bRedraw - redraw the table or not - default true
     */
    this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      var i, iLen;
      var iColumns = oSettings.aoColumns.length;
      var nTd, nCell, anTrs, jqChildren, bAppend, iBefore;

      /* No point in doing anything if we are requesting what is already true */
      if ( oSettings.aoColumns[iCol].bVisible == bShow )
      {
        return;
      }

      /* Show the column */
      if ( bShow )
      {
        var iInsert = 0;
        for ( i=0 ; i<iCol ; i++ )
        {
          if ( oSettings.aoColumns[i].bVisible )
          {
            iInsert++;
          }
        }

        /* Need to decide if we should use appendChild or insertBefore */
        bAppend = (iInsert >= _fnVisbleColumns( oSettings ));

        /* Which coloumn should we be inserting before? */
        if ( !bAppend )
        {
          for ( i=iCol ; i<iColumns ; i++ )
          {
            if ( oSettings.aoColumns[i].bVisible )
            {
              iBefore = i;
              break;
            }
          }
        }

        for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
        {
          if ( oSettings.aoData[i].nTr !== null )
          {
            if ( bAppend )
            {
              oSettings.aoData[i].nTr.appendChild(
                oSettings.aoData[i]._anHidden[iCol]
              );
            }
            else
            {
              oSettings.aoData[i].nTr.insertBefore(
                oSettings.aoData[i]._anHidden[iCol],
                _fnGetTdNodes( oSettings, i )[iBefore] );
            }
          }
        }
      }
      else
      {
        /* Remove a column from display */
        for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
        {
          if ( oSettings.aoData[i].nTr !== null )
          {
            nTd = _fnGetTdNodes( oSettings, i )[iCol];
            oSettings.aoData[i]._anHidden[iCol] = nTd;
            nTd.parentNode.removeChild( nTd );
          }
        }
      }

      /* Clear to set the visible flag */
      oSettings.aoColumns[iCol].bVisible = bShow;

      /* Redraw the header and footer based on the new column visibility */
      _fnDrawHead( oSettings, oSettings.aoHeader );
      if ( oSettings.nTFoot )
      {
        _fnDrawHead( oSettings, oSettings.aoFooter );
      }

      /* If there are any 'open' rows, then we need to alter the colspan for this col change */
      for ( i=0, iLen=oSettings.aoOpenRows.length ; i<iLen ; i++ )
      {
        oSettings.aoOpenRows[i].nTr.colSpan = _fnVisbleColumns( oSettings );
      }

      /* Do a redraw incase anything depending on the table columns needs it
       * (built-in: scrolling)
       */
      if ( typeof bRedraw == 'undefined' || bRedraw )
      {
        _fnAjustColumnSizing( oSettings );
        _fnDraw( oSettings );
      }

      _fnSaveState( oSettings );
    };

    /*
     * Function: fnPageChange
     * Purpose:  Change the pagination
     * Returns:  -
     * Inputs:   string:sAction - paging action to take: "first", "previous", "next" or "last"
     *           bool:bRedraw - redraw the table or not - optional - default true
     */
    this.fnPageChange = function ( sAction, bRedraw )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      _fnPageChange( oSettings, sAction );
      _fnCalculateEnd( oSettings );

      if ( typeof bRedraw == 'undefined' || bRedraw )
      {
        _fnDraw( oSettings );
      }
    };

    /*
     * Function: fnDestroy
     * Purpose:  Destructor for the DataTable
     * Returns:  -
     * Inputs:   -
     */
    this.fnDestroy = function ( )
    {
      var oSettings = _fnSettingsFromNode( this[_oExt.iApiIndex] );
      var nOrig = oSettings.nTableWrapper.parentNode;
      var nBody = oSettings.nTBody;
      var i, iLen;

      /* Flag to note that the table is currently being destoryed - no action should be taken */
      oSettings.bDestroying = true;

      /* Blitz all DT events */
      $(oSettings.nTableWrapper).find('*').andSelf().unbind('.DT');

      /* Restore hidden columns */
      for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
      {
        if ( oSettings.aoColumns[i].bVisible === false )
        {
          this.fnSetColumnVis( i, true );
        }
      }

      /* If there is an 'empty' indicator row, remove it */
      $('tbody>tr>td.'+oSettings.oClasses.sRowEmpty, oSettings.nTable).parent().remove();

      /* When scrolling we had to break the table up - restore it */
      if ( oSettings.nTable != oSettings.nTHead.parentNode )
      {
        $('>thead', oSettings.nTable).remove();
        oSettings.nTable.appendChild( oSettings.nTHead );
      }

      if ( oSettings.nTFoot && oSettings.nTable != oSettings.nTFoot.parentNode )
      {
        $('>tfoot', oSettings.nTable).remove();
        oSettings.nTable.appendChild( oSettings.nTFoot );
      }

      /* Remove the DataTables generated nodes, events and classes */
      oSettings.nTable.parentNode.removeChild( oSettings.nTable );
      $(oSettings.nTableWrapper).remove();

      oSettings.aaSorting = [];
      oSettings.aaSortingFixed = [];
      _fnSortingClasses( oSettings );

      $(_fnGetTrNodes( oSettings )).removeClass( oSettings.asStripClasses.join(' ') );

      if ( !oSettings.bJUI )
      {
        $('th', oSettings.nTHead).removeClass( [ _oExt.oStdClasses.sSortable,
            _oExt.oStdClasses.sSortableAsc,
            _oExt.oStdClasses.sSortableDesc,
            _oExt.oStdClasses.sSortableNone ].join(' ')
        );
      }
      else
      {
        $('th', oSettings.nTHead).removeClass( [ _oExt.oStdClasses.sSortable,
            _oExt.oJUIClasses.sSortableAsc,
            _oExt.oJUIClasses.sSortableDesc,
            _oExt.oJUIClasses.sSortableNone ].join(' ')
        );
        $('th span.'+_oExt.oJUIClasses.sSortIcon, oSettings.nTHead).remove();

        $('th', oSettings.nTHead).each( function () {
          var jqWrapper = $('div.'+_oExt.oJUIClasses.sSortJUIWrapper, this);
          var kids = jqWrapper.contents();
          $(this).append( kids );
          jqWrapper.remove();
        } );
      }

      /* Add the TR elements back into the table in their original order */
      if ( oSettings.nTableReinsertBefore )
      {
        nOrig.insertBefore( oSettings.nTable, oSettings.nTableReinsertBefore );
      }
      else
      {
        nOrig.appendChild( oSettings.nTable );
      }

      for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
      {
        if ( oSettings.aoData[i].nTr !== null )
        {
          nBody.appendChild( oSettings.aoData[i].nTr );
        }
      }

      /* Restore the width of the original table */
      oSettings.nTable.style.width = _fnStringToCss(oSettings.sDestroyWidth);

      /* If the were originally odd/even type classes - then we add them back here. Note
       * this is not fool proof (for example if not all rows as odd/even classes - but
       * it's a good effort without getting carried away
       */
      $('>tr:even', nBody).addClass( oSettings.asDestoryStrips[0] );
      $('>tr:odd', nBody).addClass( oSettings.asDestoryStrips[1] );

      /* Remove the settings object from the settings array */
      for ( i=0, iLen=_aoSettings.length ; i<iLen ; i++ )
      {
        if ( _aoSettings[i] == oSettings )
        {
          _aoSettings.splice( i, 1 );
        }
      }

      /* End it all */
      oSettings = null;
    };

    /*
     * Function: fnAjustColumnSizing
     * Purpose:  Update tale sizing based on content. This would most likely be used for scrolling
     *   and will typically need a redraw after it.
     * Returns:  -
     * Inputs:   bool:bRedraw - redraw the table or not, you will typically want to - default true
     */
    this.fnAdjustColumnSizing = function ( bRedraw )
    {
      var oSettings = _fnSettingsFromNode(this[_oExt.iApiIndex]);
      _fnAjustColumnSizing( oSettings );

      if ( typeof bRedraw == 'undefined' || bRedraw )
      {
        this.fnDraw( false );
      }
      else if ( oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "" )
      {
        /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
        this.oApi._fnScrollDraw(oSettings);
      }
    };

    /*
     * Plugin API functions
     *
     * This call will add the functions which are defined in _oExt.oApi to the
     * DataTables object, providing a rather nice way to allow plug-in API functions. Note that
     * this is done here, so that API function can actually override the built in API functions if
     * required for a particular purpose.
     */

    /*
     * Function: _fnExternApiFunc
     * Purpose:  Create a wrapper function for exporting an internal func to an external API func
     * Returns:  function: - wrapped function
     * Inputs:   string:sFunc - API function name
     */
    function _fnExternApiFunc (sFunc)
    {
      return function() {
        var aArgs = [_fnSettingsFromNode(this[_oExt.iApiIndex])].concat(
          Array.prototype.slice.call(arguments) );
        return _oExt.oApi[sFunc].apply( this, aArgs );
      };
    }

    for ( var sFunc in _oExt.oApi )
    {
      if ( sFunc )
      {
        /*
         * Function: anon
         * Purpose:  Wrap the plug-in API functions in order to provide the settings as 1st arg
         *   and execute in this scope
         * Returns:  -
         * Inputs:   -
         */
        this[sFunc] = _fnExternApiFunc(sFunc);
      }
    }



    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Local functions
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Initalisation
     */

    /*
     * Function: _fnInitalise
     * Purpose:  Draw the table for the first time, adding all required features
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnInitalise ( oSettings )
    {
      var i, iLen, iAjaxStart=oSettings.iInitDisplayStart;

      /* Ensure that the table data is fully initialised */
      if ( oSettings.bInitialised === false )
      {
        setTimeout( function(){ _fnInitalise( oSettings ); }, 200 );
        return;
      }

      /* Show the display HTML options */
      _fnAddOptionsHtml( oSettings );

      /* Build and draw the header / footer for the table */
      _fnBuildHead( oSettings );
      _fnDrawHead( oSettings, oSettings.aoHeader );
      if ( oSettings.nTFoot )
      {
        _fnDrawHead( oSettings, oSettings.aoFooter );
      }

      /* Okay to show that something is going on now */
      _fnProcessingDisplay( oSettings, true );

      /* Calculate sizes for columns */
      if ( oSettings.oFeatures.bAutoWidth )
      {
        _fnCalculateColumnWidths( oSettings );
      }

      for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
      {
        if ( oSettings.aoColumns[i].sWidth !== null )
        {
          oSettings.aoColumns[i].nTh.style.width = _fnStringToCss( oSettings.aoColumns[i].sWidth );
        }
      }

      /* If there is default sorting required - let's do it. The sort function will do the
       * drawing for us. Otherwise we draw the table regardless of the Ajax source - this allows
       * the table to look initialised for Ajax sourcing data (show 'loading' message possibly)
       */
      if ( oSettings.oFeatures.bSort )
      {
        _fnSort( oSettings );
      }
      else if ( oSettings.oFeatures.bFilter )
      {
        _fnFilterComplete( oSettings, oSettings.oPreviousSearch );
      }
      else
      {
        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
        _fnCalculateEnd( oSettings );
        _fnDraw( oSettings );
      }

      /* if there is an ajax source load the data */
      if ( oSettings.sAjaxSource !== null && !oSettings.oFeatures.bServerSide )
      {
        oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, [], function(json) {
          var aData = json;
          if ( oSettings.sAjaxDataProp !== "" )
          {
            var fnDataSrc = _fnGetObjectDataFn( oSettings.sAjaxDataProp );
            aData = fnDataSrc( json );
          }

          /* Got the data - add it to the table */
          for ( i=0 ; i<aData.length ; i++ )
          {
            _fnAddData( oSettings, aData[i] );
          }

          /* Reset the init display for cookie saving. We've already done a filter, and
           * therefore cleared it before. So we need to make it appear 'fresh'
           */
          oSettings.iInitDisplayStart = iAjaxStart;

          if ( oSettings.oFeatures.bSort )
          {
            _fnSort( oSettings );
          }
          else
          {
            oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
            _fnCalculateEnd( oSettings );
            _fnDraw( oSettings );
          }

          _fnProcessingDisplay( oSettings, false );
          _fnInitComplete( oSettings, json );
        }, oSettings );
        return;
      }

      /* Server-side processing initialisation complete is done at the end of _fnDraw */
      if ( !oSettings.oFeatures.bServerSide )
      {
        _fnProcessingDisplay( oSettings, false );
        _fnInitComplete( oSettings );
      }
    }

    /*
     * Function: _fnInitalise
     * Purpose:  Draw the table for the first time, adding all required features
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnInitComplete ( oSettings, json )
    {
      oSettings._bInitComplete = true;
      if ( typeof oSettings.fnInitComplete == 'function' )
      {
        if ( typeof json != 'undefined' )
        {
          oSettings.fnInitComplete.call( oSettings.oInstance, oSettings, json );
        }
        else
        {
          oSettings.fnInitComplete.call( oSettings.oInstance, oSettings );
        }
      }
    }

    /*
     * Function: _fnLanguageProcess
     * Purpose:  Copy language variables from remote object to a local one
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           object:oLanguage - Language information
     *           bool:bInit - init once complete
     */
    function _fnLanguageProcess( oSettings, oLanguage, bInit )
    {
      _fnMap( oSettings.oLanguage, oLanguage, 'sProcessing' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sLengthMenu' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sEmptyTable' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sLoadingRecords' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sZeroRecords' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sInfo' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sInfoEmpty' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sInfoFiltered' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sInfoPostFix' );
      _fnMap( oSettings.oLanguage, oLanguage, 'sSearch' );

      if ( typeof oLanguage.oPaginate != 'undefined' )
      {
        _fnMap( oSettings.oLanguage.oPaginate, oLanguage.oPaginate, 'sFirst' );
        _fnMap( oSettings.oLanguage.oPaginate, oLanguage.oPaginate, 'sPrevious' );
        _fnMap( oSettings.oLanguage.oPaginate, oLanguage.oPaginate, 'sNext' );
        _fnMap( oSettings.oLanguage.oPaginate, oLanguage.oPaginate, 'sLast' );
      }

      /* Backwards compatibility - if there is no sEmptyTable given, then use the same as
       * sZeroRecords - assuming that is given.
       */
      if ( typeof oLanguage.sEmptyTable == 'undefined' &&
        typeof oLanguage.sZeroRecords != 'undefined' )
      {
        _fnMap( oSettings.oLanguage, oLanguage, 'sZeroRecords', 'sEmptyTable' );
      }

      /* Likewise with loading records */
      if ( typeof oLanguage.sLoadingRecords == 'undefined' &&
        typeof oLanguage.sZeroRecords != 'undefined' )
      {
        _fnMap( oSettings.oLanguage, oLanguage, 'sZeroRecords', 'sLoadingRecords' );
      }

      if ( bInit )
      {
        _fnInitalise( oSettings );
      }
    }

    /*
     * Function: _fnAddColumn
     * Purpose:  Add a column to the list used for the table with default values
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           node:nTh - the th element for this column
     */
    function _fnAddColumn( oSettings, nTh )
    {
      var iCol = oSettings.aoColumns.length;
      var oCol = {
        "sType": null,
        "_bAutoType": true,
        "bVisible": true,
        "bSearchable": true,
        "bSortable": true,
        "asSorting": [ 'asc', 'desc' ],
        "sSortingClass": oSettings.oClasses.sSortable,
        "sSortingClassJUI": oSettings.oClasses.sSortJUI,
        "sTitle": nTh ? nTh.innerHTML : '',
        "sName": '',
        "sWidth": null,
        "sWidthOrig": null,
        "sClass": null,
        "fnRender": null,
        "bUseRendered": true,
        "iDataSort": iCol,
        "mDataProp": iCol,
        "fnGetData": null,
        "fnSetData": null,
        "sSortDataType": 'std',
        "sDefaultContent": null,
        "sContentPadding": "",
        "nTh": nTh ? nTh : document.createElement('th'),
        "nTf": null
      };
      oSettings.aoColumns.push( oCol );

      /* Add a column specific filter */
      if ( typeof oSettings.aoPreSearchCols[ iCol ] == 'undefined' ||
        oSettings.aoPreSearchCols[ iCol ] === null )
      {
        oSettings.aoPreSearchCols[ iCol ] = {
          "sSearch": "",
          "bRegex": false,
          "bSmart": true
        };
      }
      else
      {
        /* Don't require that the user must specify bRegex and / or bSmart */
        if ( typeof oSettings.aoPreSearchCols[ iCol ].bRegex == 'undefined' )
        {
          oSettings.aoPreSearchCols[ iCol ].bRegex = true;
        }

        if ( typeof oSettings.aoPreSearchCols[ iCol ].bSmart == 'undefined' )
        {
          oSettings.aoPreSearchCols[ iCol ].bSmart = true;
        }
      }

      /* Use the column options function to initialise classes etc */
      _fnColumnOptions( oSettings, iCol, null );
    }

    /*
     * Function: _fnColumnOptions
     * Purpose:  Apply options for a column
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iCol - column index to consider
     *           object:oOptions - object with sType, bVisible and bSearchable
     */
    function _fnColumnOptions( oSettings, iCol, oOptions )
    {
      var oCol = oSettings.aoColumns[ iCol ];

      /* User specified column options */
      if ( typeof oOptions != 'undefined' && oOptions !== null )
      {
        if ( typeof oOptions.sType != 'undefined' )
        {
          oCol.sType = oOptions.sType;
          oCol._bAutoType = false;
        }

        _fnMap( oCol, oOptions, "bVisible" );
        _fnMap( oCol, oOptions, "bSearchable" );
        _fnMap( oCol, oOptions, "bSortable" );
        _fnMap( oCol, oOptions, "sTitle" );
        _fnMap( oCol, oOptions, "sName" );
        _fnMap( oCol, oOptions, "sWidth" );
        _fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
        _fnMap( oCol, oOptions, "sClass" );
        _fnMap( oCol, oOptions, "fnRender" );
        _fnMap( oCol, oOptions, "bUseRendered" );
        _fnMap( oCol, oOptions, "iDataSort" );
        _fnMap( oCol, oOptions, "mDataProp" );
        _fnMap( oCol, oOptions, "asSorting" );
        _fnMap( oCol, oOptions, "sSortDataType" );
        _fnMap( oCol, oOptions, "sDefaultContent" );
        _fnMap( oCol, oOptions, "sContentPadding" );
      }

      /* Cache the data get and set functions for speed */
      oCol.fnGetData = _fnGetObjectDataFn( oCol.mDataProp );
      oCol.fnSetData = _fnSetObjectDataFn( oCol.mDataProp );

      /* Feature sorting overrides column specific when off */
      if ( !oSettings.oFeatures.bSort )
      {
        oCol.bSortable = false;
      }

      /* Check that the class assignment is correct for sorting */
      if ( !oCol.bSortable ||
        ($.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) == -1) )
      {
        oCol.sSortingClass = oSettings.oClasses.sSortableNone;
        oCol.sSortingClassJUI = "";
      }
      else if ( $.inArray('asc', oCol.asSorting) != -1 && $.inArray('desc', oCol.asSorting) == -1 )
      {
        oCol.sSortingClass = oSettings.oClasses.sSortableAsc;
        oCol.sSortingClassJUI = oSettings.oClasses.sSortJUIAscAllowed;
      }
      else if ( $.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) != -1 )
      {
        oCol.sSortingClass = oSettings.oClasses.sSortableDesc;
        oCol.sSortingClassJUI = oSettings.oClasses.sSortJUIDescAllowed;
      }
    }

    /*
     * Function: _fnAddData
     * Purpose:  Add a data array to the table, creating DOM node etc
     * Returns:  int: - >=0 if successful (index of new aoData entry), -1 if failed
     * Inputs:   object:oSettings - dataTables settings object
     *           array:aData - data array to be added
     * Notes:    There are two basic methods for DataTables to get data to display - a JS array
     *   (which is dealt with by this function), and the DOM, which has it's own optimised
     *   function (_fnGatherData). Be careful to make the same changes here as there and vice-versa
     */
    function _fnAddData ( oSettings, aDataSupplied )
    {
      var oCol;

      /* Take an independent copy of the data source so we can bash it about as we wish */
      var aDataIn = (typeof aDataSupplied.length == 'number') ?
        aDataSupplied.slice() :
        $.extend( true, {}, aDataSupplied );

      /* Create the object for storing information about this new row */
      var iRow = oSettings.aoData.length;
      var oData = {
        "nTr": null,
        "_iId": oSettings.iNextId++,
        "_aData": aDataIn,
        "_anHidden": [],
        "_sRowStripe": ""
      };
      oSettings.aoData.push( oData );

      /* Create the cells */
      var nTd, sThisType;
      for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
      {
        oCol = oSettings.aoColumns[i];

        /* Use rendered data for filtering/sorting */
        if ( typeof oCol.fnRender == 'function' && oCol.bUseRendered && oCol.mDataProp !== null )
        {
          _fnSetCellData( oSettings, iRow, i, oCol.fnRender( {
            "iDataRow": iRow,
            "iDataColumn": i,
            "aData": oData._aData,
            "oSettings": oSettings
          } ) );
        }

        /* See if we should auto-detect the column type */
        if ( oCol._bAutoType && oCol.sType != 'string' )
        {
          /* Attempt to auto detect the type - same as _fnGatherData() */
          var sVarType = _fnGetCellData( oSettings, iRow, i, 'type' );
          if ( sVarType !== null && sVarType !== '' )
          {
            sThisType = _fnDetectType( sVarType );
            if ( oCol.sType === null )
            {
              oCol.sType = sThisType;
            }
            else if ( oCol.sType != sThisType )
            {
              /* String is always the 'fallback' option */
              oCol.sType = 'string';
            }
          }
        }
      }

      /* Add to the display array */
      oSettings.aiDisplayMaster.push( iRow );

      /* Create the DOM imformation */
      if ( !oSettings.oFeatures.bDeferRender )
      {
        _fnCreateTr( oSettings, iRow );
      }

      return iRow;
    }

    /*
     * Function: _fnCreateTr
     * Purpose:  Create a new TR element (and it's TD children) for a row
     * Returns:  void
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iRow - Row to consider
     */
    function _fnCreateTr ( oSettings, iRow )
    {
      var oData = oSettings.aoData[iRow];
      var nTd;

      if ( oData.nTr === null )
      {
        oData.nTr = document.createElement('tr');

        /* Special parameters can be given by the data source to be used on the row */
        if ( typeof oData._aData.DT_RowId != 'undefined' )
        {
          oData.nTr.setAttribute( 'id', oData._aData.DT_RowId );
        }

        if ( typeof oData._aData.DT_RowClass != 'undefined' )
        {
          $(oData.nTr).addClass( oData._aData.DT_RowClass );
        }

        /* Process each column */
        for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
        {
          var oCol = oSettings.aoColumns[i];
          nTd = document.createElement('td');

          /* Render if needed - if bUseRendered is true then we already have the rendered
           * value in the data source - so can just use that
           */
          if ( typeof oCol.fnRender == 'function' && (!oCol.bUseRendered || oCol.mDataProp === null) )
          {
            nTd.innerHTML = oCol.fnRender( {
              "iDataRow": iRow,
              "iDataColumn": i,
              "aData": oData._aData,
              "oSettings": oSettings
            } );
          }
          else
          {
            nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
          }

          /* Add user defined class */
          if ( oCol.sClass !== null )
          {
            nTd.className = oCol.sClass;
          }

          if ( oCol.bVisible )
          {
            oData.nTr.appendChild( nTd );
            oData._anHidden[i] = null;
          }
          else
          {
            oData._anHidden[i] = nTd;
          }
        }
      }
    }

    /*
     * Function: _fnGatherData
     * Purpose:  Read in the data from the target table from the DOM
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     * Notes:    This is a optimised version of _fnAddData (more or less) for reading information
     *   from the DOM. The basic actions must be identical in the two functions.
     */
    function _fnGatherData( oSettings )
    {
      var iLoop, i, iLen, j, jLen, jInner,
        nTds, nTrs, nTd, aLocalData, iThisIndex,
        iRow, iRows, iColumn, iColumns, sNodeName;

      /*
       * Process by row first
       * Add the data object for the whole table - storing the tr node. Note - no point in getting
       * DOM based data if we are going to go and replace it with Ajax source data.
       */
      if ( oSettings.bDeferLoading || oSettings.sAjaxSource === null )
      {
        nTrs = oSettings.nTBody.childNodes;
        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
        {
          if ( nTrs[i].nodeName.toUpperCase() == "TR" )
          {
            iThisIndex = oSettings.aoData.length;
            oSettings.aoData.push( {
              "nTr": nTrs[i],
              "_iId": oSettings.iNextId++,
              "_aData": [],
              "_anHidden": [],
              "_sRowStripe": ''
            } );

            oSettings.aiDisplayMaster.push( iThisIndex );
            nTds = nTrs[i].childNodes;
            jInner = 0;

            for ( j=0, jLen=nTds.length ; j<jLen ; j++ )
            {
              sNodeName = nTds[j].nodeName.toUpperCase();
              if ( sNodeName == "TD" || sNodeName == "TH" )
              {
                _fnSetCellData( oSettings, iThisIndex, jInner, $.trim(nTds[j].innerHTML) );
                jInner++;
              }
            }
          }
        }
      }

      /* Gather in the TD elements of the Table - note that this is basically the same as
       * fnGetTdNodes, but that function takes account of hidden columns, which we haven't yet
       * setup!
       */
      nTrs = _fnGetTrNodes( oSettings );
      nTds = [];
      for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
      {
        for ( j=0, jLen=nTrs[i].childNodes.length ; j<jLen ; j++ )
        {
          nTd = nTrs[i].childNodes[j];
          sNodeName = nTd.nodeName.toUpperCase();
          if ( sNodeName == "TD" || sNodeName == "TH" )
          {
            nTds.push( nTd );
          }
        }
      }

      /* Sanity check */
      if ( nTds.length != nTrs.length * oSettings.aoColumns.length )
      {
        _fnLog( oSettings, 1, "Unexpected number of TD elements. Expected "+
          (nTrs.length * oSettings.aoColumns.length)+" and got "+nTds.length+". DataTables does "+
          "not support rowspan / colspan in the table body, and there must be one cell for each "+
          "row/column combination." );
      }

      /* Now process by column */
      for ( iColumn=0, iColumns=oSettings.aoColumns.length ; iColumn<iColumns ; iColumn++ )
      {
        /* Get the title of the column - unless there is a user set one */
        if ( oSettings.aoColumns[iColumn].sTitle === null )
        {
          oSettings.aoColumns[iColumn].sTitle = oSettings.aoColumns[iColumn].nTh.innerHTML;
        }

        var
          bAutoType = oSettings.aoColumns[iColumn]._bAutoType,
          bRender = typeof oSettings.aoColumns[iColumn].fnRender == 'function',
          bClass = oSettings.aoColumns[iColumn].sClass !== null,
          bVisible = oSettings.aoColumns[iColumn].bVisible,
          nCell, sThisType, sRendered, sValType;

        /* A single loop to rule them all (and be more efficient) */
        if ( bAutoType || bRender || bClass || !bVisible )
        {
          for ( iRow=0, iRows=oSettings.aoData.length ; iRow<iRows ; iRow++ )
          {
            nCell = nTds[ (iRow*iColumns) + iColumn ];

            /* Type detection */
            if ( bAutoType && oSettings.aoColumns[iColumn].sType != 'string' )
            {
              sValType = _fnGetCellData( oSettings, iRow, iColumn, 'type' );
              if ( sValType !== '' )
              {
                sThisType = _fnDetectType( sValType );
                if ( oSettings.aoColumns[iColumn].sType === null )
                {
                  oSettings.aoColumns[iColumn].sType = sThisType;
                }
                else if ( oSettings.aoColumns[iColumn].sType != sThisType )
                {
                  /* String is always the 'fallback' option */
                  oSettings.aoColumns[iColumn].sType = 'string';
                }
              }
            }

            /* Rendering */
            if ( bRender )
            {
              sRendered = oSettings.aoColumns[iColumn].fnRender( {
                "iDataRow": iRow,
                "iDataColumn": iColumn,
                "aData": oSettings.aoData[iRow]._aData,
                "oSettings": oSettings
              } );
              nCell.innerHTML = sRendered;
              if ( oSettings.aoColumns[iColumn].bUseRendered )
              {
                /* Use the rendered data for filtering/sorting */
                _fnSetCellData( oSettings, iRow, iColumn, sRendered );
              }
            }

            /* Classes */
            if ( bClass )
            {
              nCell.className += ' '+oSettings.aoColumns[iColumn].sClass;
            }

            /* Column visability */
            if ( !bVisible )
            {
              oSettings.aoData[iRow]._anHidden[iColumn] = nCell;
              nCell.parentNode.removeChild( nCell );
            }
            else
            {
              oSettings.aoData[iRow]._anHidden[iColumn] = null;
            }
          }
        }
      }
    }

    /*
     * Function: _fnBuildHead
     * Purpose:  Create the HTML header for the table
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnBuildHead( oSettings )
    {
      var i, nTh, iLen, j, jLen;
      var anTr = oSettings.nTHead.getElementsByTagName('tr');
      var iThs = oSettings.nTHead.getElementsByTagName('th').length;
      var iCorrector = 0;
      var jqChildren;

      /* If there is a header in place - then use it - otherwise it's going to get nuked... */
      if ( iThs !== 0 )
      {
        /* We've got a thead from the DOM, so remove hidden columns and apply width to vis cols */
        for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
        {
          nTh = oSettings.aoColumns[i].nTh;

          if ( oSettings.aoColumns[i].sClass !== null )
          {
            $(nTh).addClass( oSettings.aoColumns[i].sClass );
          }

          /* Set the title of the column if it is user defined (not what was auto detected) */
          if ( oSettings.aoColumns[i].sTitle != nTh.innerHTML )
          {
            nTh.innerHTML = oSettings.aoColumns[i].sTitle;
          }
        }
      }
      else
      {
        /* We don't have a header in the DOM - so we are going to have to create one */
        var nTr = document.createElement( "tr" );

        for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
        {
          nTh = oSettings.aoColumns[i].nTh;
          nTh.innerHTML = oSettings.aoColumns[i].sTitle;

          if ( oSettings.aoColumns[i].sClass !== null )
          {
            $(nTh).addClass( oSettings.aoColumns[i].sClass );
          }

          nTr.appendChild( nTh );
        }
        $(oSettings.nTHead).html( '' )[0].appendChild( nTr );
        _fnDetectHeader( oSettings.aoHeader, oSettings.nTHead );
      }

      /* Add the extra markup needed by jQuery UI's themes */
      if ( oSettings.bJUI )
      {
        for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
        {
          nTh = oSettings.aoColumns[i].nTh;

          var nDiv = document.createElement('div');
          nDiv.className = oSettings.oClasses.sSortJUIWrapper;
          $(nTh).contents().appendTo(nDiv);

          var nSpan = document.createElement('span');
          nSpan.className = oSettings.oClasses.sSortIcon;
          nDiv.appendChild( nSpan );
          nTh.appendChild( nDiv );
        }
      }

      /* Add sort listener */
      var fnNoSelect = function (e) {
        this.onselectstart = function() { return false; };
        return false;
      };

      if ( oSettings.oFeatures.bSort )
      {
        for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
        {
          if ( oSettings.aoColumns[i].bSortable !== false )
          {
            _fnSortAttachListener( oSettings, oSettings.aoColumns[i].nTh, i );

            /* Take the brutal approach to cancelling text selection in header */
            $(oSettings.aoColumns[i].nTh).bind( 'mousedown.DT', fnNoSelect );
          }
          else
          {
            $(oSettings.aoColumns[i].nTh).addClass( oSettings.oClasses.sSortableNone );
          }
        }
      }

      /* Deal with the footer - add classes if required */
      if ( oSettings.oClasses.sFooterTH !== "" )
      {
        $('>tr>th', oSettings.nTFoot).addClass( oSettings.oClasses.sFooterTH );
      }

      /* Cache the footer elements */
      if ( oSettings.nTFoot !== null )
      {
        var anCells = _fnGetUniqueThs( oSettings, null, oSettings.aoFooter );
        for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
        {
          if ( typeof anCells[i] != 'undefined' )
          {
            oSettings.aoColumns[i].nTf = anCells[i];
          }
        }
      }
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Drawing functions
     */

    /*
     * Function: _fnDrawHead
     * Purpose:  Draw the header (or footer) element based on the column visibility states. The
     *           methodology here is to use the layout array from _fnDetectHeader, modified for
     *           the instantaneous column visibility, to construct the new layout. The grid is
     *           traversed over cell at a time in a rows x columns grid fashion, although each
     *           cell insert can cover multiple elements in the grid - which is tracks using the
     *           aApplied array. Cell inserts in the grid will only occur where there isn't
     *           already a cell in that position.
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           array objects:aoSource - Layout array from _fnDetectHeader
     *           boolean:bIncludeHidden - If true then include the hidden columns in the calc,
     *             - optional: default false
     */
    function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
    {
      var i, iLen, j, jLen, k, kLen;
      var aoLocal = [];
      var aApplied = [];
      var iColumns = oSettings.aoColumns.length;
      var iRowspan, iColspan;

      if ( typeof bIncludeHidden == 'undefined' )
      {
        bIncludeHidden = false;
      }

      /* Make a copy of the master layout array, but without the visible columns in it */
      for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
      {
        aoLocal[i] = aoSource[i].slice();
        aoLocal[i].nTr = aoSource[i].nTr;

        /* Remove any columns which are currently hidden */
        for ( j=iColumns-1 ; j>=0 ; j-- )
        {
          if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
          {
            aoLocal[i].splice( j, 1 );
          }
        }

        /* Prep the applied array - it needs an element for each row */
        aApplied.push( [] );
      }

      for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
      {
        /* All cells are going to be replaced, so empty out the row */
        if ( aoLocal[i].nTr )
        {
          for ( k=0, kLen=aoLocal[i].nTr.childNodes.length ; k<kLen ; k++ )
          {
            aoLocal[i].nTr.removeChild( aoLocal[i].nTr.childNodes[0] );
          }
        }

        for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
        {
          iRowspan = 1;
          iColspan = 1;

          /* Check to see if there is already a cell (row/colspan) covering our target
           * insert point. If there is, then there is nothing to do.
           */
          if ( typeof aApplied[i][j] == 'undefined' )
          {
            aoLocal[i].nTr.appendChild( aoLocal[i][j].cell );
            aApplied[i][j] = 1;

            /* Expand the cell to cover as many rows as needed */
            while ( typeof aoLocal[i+iRowspan] != 'undefined' &&
              aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
            {
              aApplied[i+iRowspan][j] = 1;
              iRowspan++;
            }

            /* Expand the cell to cover as many columns as needed */
            while ( typeof aoLocal[i][j+iColspan] != 'undefined' &&
              aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
            {
              /* Must update the applied array over the rows for the columns */
              for ( k=0 ; k<iRowspan ; k++ )
              {
                aApplied[i+k][j+iColspan] = 1;
              }
              iColspan++;
            }

            /* Do the actual expansion in the DOM */
            aoLocal[i][j].cell.setAttribute('rowspan', iRowspan);
            aoLocal[i][j].cell.setAttribute('colspan', iColspan);
          }
        }
      }
    }

    /*
     * Function: _fnDraw
     * Purpose:  Insert the required TR nodes into the table for display
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnDraw( oSettings )
    {
      var i, iLen;
      var anRows = [];
      var iRowCount = 0;
      var bRowError = false;
      var iStrips = oSettings.asStripClasses.length;
      var iOpenRows = oSettings.aoOpenRows.length;

      /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
      if ( oSettings.fnPreDrawCallback !== null &&
        oSettings.fnPreDrawCallback.call( oSettings.oInstance, oSettings ) === false )
      {
        return;
      }

      oSettings.bDrawing = true;

      /* Check and see if we have an initial draw position from state saving */
      if ( typeof oSettings.iInitDisplayStart != 'undefined' && oSettings.iInitDisplayStart != -1 )
      {
        if ( oSettings.oFeatures.bServerSide )
        {
          oSettings._iDisplayStart = oSettings.iInitDisplayStart;
        }
        else
        {
          oSettings._iDisplayStart = (oSettings.iInitDisplayStart >= oSettings.fnRecordsDisplay()) ?
            0 : oSettings.iInitDisplayStart;
        }
        oSettings.iInitDisplayStart = -1;
        _fnCalculateEnd( oSettings );
      }

      /* Server-side processing draw intercept */
      if ( oSettings.bDeferLoading )
      {
        oSettings.bDeferLoading = false;
        oSettings.iDraw++;
      }
      else if ( !oSettings.oFeatures.bServerSide )
      {
        oSettings.iDraw++;
      }
      else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
      {
        return;
      }

      if ( oSettings.aiDisplay.length !== 0 )
      {
        var iStart = oSettings._iDisplayStart;
        var iEnd = oSettings._iDisplayEnd;

        if ( oSettings.oFeatures.bServerSide )
        {
          iStart = 0;
          iEnd = oSettings.aoData.length;
        }

        for ( var j=iStart ; j<iEnd ; j++ )
        {
          var aoData = oSettings.aoData[ oSettings.aiDisplay[j] ];
          if ( aoData.nTr === null )
          {
            _fnCreateTr( oSettings, oSettings.aiDisplay[j] );
          }

          var nRow = aoData.nTr;

          /* Remove the old stripping classes and then add the new one */
          if ( iStrips !== 0 )
          {
            var sStrip = oSettings.asStripClasses[ iRowCount % iStrips ];
            if ( aoData._sRowStripe != sStrip )
            {
              $(nRow).removeClass( aoData._sRowStripe ).addClass( sStrip );
              aoData._sRowStripe = sStrip;
            }
          }

          /* Custom row callback function - might want to manipule the row */
          if ( typeof oSettings.fnRowCallback == "function" )
          {
            nRow = oSettings.fnRowCallback.call( oSettings.oInstance, nRow,
              oSettings.aoData[ oSettings.aiDisplay[j] ]._aData, iRowCount, j );
            if ( !nRow && !bRowError )
            {
              _fnLog( oSettings, 0, "A node was not returned by fnRowCallback" );
              bRowError = true;
            }
          }

          anRows.push( nRow );
          iRowCount++;

          /* If there is an open row - and it is attached to this parent - attach it on redraw */
          if ( iOpenRows !== 0 )
          {
            for ( var k=0 ; k<iOpenRows ; k++ )
            {
              if ( nRow == oSettings.aoOpenRows[k].nParent )
              {
                anRows.push( oSettings.aoOpenRows[k].nTr );
              }
            }
          }
        }
      }
      else
      {
        /* Table is empty - create a row with an empty message in it */
        anRows[ 0 ] = document.createElement( 'tr' );

        if ( typeof oSettings.asStripClasses[0] != 'undefined' )
        {
          anRows[ 0 ].className = oSettings.asStripClasses[0];
        }

        var sZero = oSettings.oLanguage.sZeroRecords.replace(
          '_MAX_', oSettings.fnFormatNumber(oSettings.fnRecordsTotal()) );
        if ( oSettings.iDraw == 1 && oSettings.sAjaxSource !== null && !oSettings.oFeatures.bServerSide )
        {
          sZero = oSettings.oLanguage.sLoadingRecords;
        }
        else if ( typeof oSettings.oLanguage.sEmptyTable != 'undefined' &&
          oSettings.fnRecordsTotal() === 0 )
        {
          sZero = oSettings.oLanguage.sEmptyTable;
        }

        var nTd = document.createElement( 'td' );
        nTd.setAttribute( 'valign', "top" );
        nTd.colSpan = _fnVisbleColumns( oSettings );
        nTd.className = oSettings.oClasses.sRowEmpty;
        nTd.innerHTML = sZero;

        anRows[ iRowCount ].appendChild( nTd );
      }

      /* Callback the header and footer custom funcation if there is one */
      if ( typeof oSettings.fnHeaderCallback == 'function' )
      {
        oSettings.fnHeaderCallback.call( oSettings.oInstance, $('>tr', oSettings.nTHead)[0],
          _fnGetDataMaster( oSettings ), oSettings._iDisplayStart, oSettings.fnDisplayEnd(),
          oSettings.aiDisplay );
      }

      if ( typeof oSettings.fnFooterCallback == 'function' )
      {
        oSettings.fnFooterCallback.call( oSettings.oInstance, $('>tr', oSettings.nTFoot)[0],
          _fnGetDataMaster( oSettings ), oSettings._iDisplayStart, oSettings.fnDisplayEnd(),
          oSettings.aiDisplay );
      }

      /*
       * Need to remove any old row from the display - note we can't just empty the tbody using
       * $().html('') since this will unbind the jQuery event handlers (even although the node
       * still exists!) - equally we can't use innerHTML, since IE throws an exception.
       */
      var
        nAddFrag = document.createDocumentFragment(),
        nRemoveFrag = document.createDocumentFragment(),
        nBodyPar, nTrs;

      if ( oSettings.nTBody )
      {
        nBodyPar = oSettings.nTBody.parentNode;
        nRemoveFrag.appendChild( oSettings.nTBody );

        /* When doing infinite scrolling, only remove child rows when sorting, filtering or start
         * up. When not infinite scroll, always do it.
         */
        if ( !oSettings.oScroll.bInfinite || !oSettings._bInitComplete ||
          oSettings.bSorted || oSettings.bFiltered )
        {
          nTrs = oSettings.nTBody.childNodes;
          for ( i=nTrs.length-1 ; i>=0 ; i-- )
          {
            nTrs[i].parentNode.removeChild( nTrs[i] );
          }
        }

        /* Put the draw table into the dom */
        for ( i=0, iLen=anRows.length ; i<iLen ; i++ )
        {
          nAddFrag.appendChild( anRows[i] );
        }

        oSettings.nTBody.appendChild( nAddFrag );
        if ( nBodyPar !== null )
        {
          nBodyPar.appendChild( oSettings.nTBody );
        }
      }

      /* Call all required callback functions for the end of a draw */
      for ( i=oSettings.aoDrawCallback.length-1 ; i>=0 ; i-- )
      {
        oSettings.aoDrawCallback[i].fn.call( oSettings.oInstance, oSettings );
      }

      /* Draw is complete, sorting and filtering must be as well */
      oSettings.bSorted = false;
      oSettings.bFiltered = false;
      oSettings.bDrawing = false;

      if ( oSettings.oFeatures.bServerSide )
      {
        _fnProcessingDisplay( oSettings, false );
        if ( typeof oSettings._bInitComplete == 'undefined' )
        {
          _fnInitComplete( oSettings );
        }
      }
    }

    /*
     * Function: _fnReDraw
     * Purpose:  Redraw the table - taking account of the various features which are enabled
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnReDraw( oSettings )
    {
      if ( oSettings.oFeatures.bSort )
      {
        /* Sorting will refilter and draw for us */
        _fnSort( oSettings, oSettings.oPreviousSearch );
      }
      else if ( oSettings.oFeatures.bFilter )
      {
        /* Filtering will redraw for us */
        _fnFilterComplete( oSettings, oSettings.oPreviousSearch );
      }
      else
      {
        _fnCalculateEnd( oSettings );
        _fnDraw( oSettings );
      }
    }

    /*
     * Function: _fnAjaxUpdate
     * Purpose:  Update the table using an Ajax call
     * Returns:  bool: block the table drawing or not
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnAjaxUpdate( oSettings )
    {
      if ( oSettings.bAjaxDataGet )
      {
        _fnProcessingDisplay( oSettings, true );
        var iColumns = oSettings.aoColumns.length;
        var aoData = [];
        var i;

        /* Paging and general */
        oSettings.iDraw++;
        aoData.push( { "name": "sEcho",          "value": oSettings.iDraw } );
        aoData.push( { "name": "iColumns",       "value": iColumns } );
        aoData.push( { "name": "sColumns",       "value": _fnColumnOrdering(oSettings) } );
        aoData.push( { "name": "iDisplayStart",  "value": oSettings._iDisplayStart } );
        aoData.push( { "name": "iDisplayLength", "value": oSettings.oFeatures.bPaginate !== false ?
          oSettings._iDisplayLength : -1 } );

        /* Filtering */
        if ( oSettings.oFeatures.bFilter !== false )
        {
          aoData.push( { "name": "sSearch", "value": oSettings.oPreviousSearch.sSearch } );
          aoData.push( { "name": "bRegex",  "value": oSettings.oPreviousSearch.bRegex } );
          for ( i=0 ; i<iColumns ; i++ )
          {
            aoData.push( { "name": "sSearch_"+i,     "value": oSettings.aoPreSearchCols[i].sSearch } );
            aoData.push( { "name": "bRegex_"+i,      "value": oSettings.aoPreSearchCols[i].bRegex } );
            aoData.push( { "name": "bSearchable_"+i, "value": oSettings.aoColumns[i].bSearchable } );
          }
        }

        /* Sorting */
        if ( oSettings.oFeatures.bSort !== false )
        {
          var iFixed = oSettings.aaSortingFixed !== null ? oSettings.aaSortingFixed.length : 0;
          var iUser = oSettings.aaSorting.length;
          aoData.push( { "name": "iSortingCols",   "value": iFixed+iUser } );
          for ( i=0 ; i<iFixed ; i++ )
          {
            aoData.push( { "name": "iSortCol_"+i,  "value": oSettings.aaSortingFixed[i][0] } );
            aoData.push( { "name": "sSortDir_"+i,  "value": oSettings.aaSortingFixed[i][1] } );
          }

          for ( i=0 ; i<iUser ; i++ )
          {
            aoData.push( { "name": "iSortCol_"+(i+iFixed),  "value": oSettings.aaSorting[i][0] } );
            aoData.push( { "name": "sSortDir_"+(i+iFixed),  "value": oSettings.aaSorting[i][1] } );
          }

          for ( i=0 ; i<iColumns ; i++ )
          {
            aoData.push( { "name": "bSortable_"+i,  "value": oSettings.aoColumns[i].bSortable } );
          }
        }

        oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aoData,
          function(json) {
            _fnAjaxUpdateDraw( oSettings, json );
          }, oSettings );
        return false;
      }
      else
      {
        return true;
      }
    }

    /*
     * Function: _fnAjaxUpdateDraw
     * Purpose:  Data the data from the server (nuking the old) and redraw the table
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           object:json - json data return from the server.
     *             The following must be defined:
     *               iTotalRecords, iTotalDisplayRecords, aaData
     *             The following may be defined:
     *               sColumns
     */
    function _fnAjaxUpdateDraw ( oSettings, json )
    {
      if ( typeof json.sEcho != 'undefined' )
      {
        /* Protect against old returns over-writing a new one. Possible when you get
         * very fast interaction, and later queires are completed much faster
         */
        if ( json.sEcho*1 < oSettings.iDraw )
        {
          return;
        }
        else
        {
          oSettings.iDraw = json.sEcho * 1;
        }
      }

      if ( !oSettings.oScroll.bInfinite ||
        (oSettings.oScroll.bInfinite && (oSettings.bSorted || oSettings.bFiltered)) )
      {
        _fnClearTable( oSettings );
      }
      oSettings._iRecordsTotal = json.iTotalRecords;
      oSettings._iRecordsDisplay = json.iTotalDisplayRecords;

      /* Determine if reordering is required */
      var sOrdering = _fnColumnOrdering(oSettings);
      var bReOrder = (typeof json.sColumns != 'undefined' && sOrdering !== "" && json.sColumns != sOrdering );
      if ( bReOrder )
      {
        var aiIndex = _fnReOrderIndex( oSettings, json.sColumns );
      }

      var fnDataSrc = _fnGetObjectDataFn( oSettings.sAjaxDataProp );
      var aData = fnDataSrc( json );

      for ( var i=0, iLen=aData.length ; i<iLen ; i++ )
      {
        if ( bReOrder )
        {
          /* If we need to re-order, then create a new array with the correct order and add it */
          var aDataSorted = [];
          for ( var j=0, jLen=oSettings.aoColumns.length ; j<jLen ; j++ )
          {
            aDataSorted.push( aData[i][ aiIndex[j] ] );
          }
          _fnAddData( oSettings, aDataSorted );
        }
        else
        {
          /* No re-order required, sever got it "right" - just straight add */
          _fnAddData( oSettings, aData[i] );
        }
      }
      oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

      oSettings.bAjaxDataGet = false;
      _fnDraw( oSettings );
      oSettings.bAjaxDataGet = true;
      _fnProcessingDisplay( oSettings, false );
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Options (features) HTML
     */

    /*
     * Function: _fnAddOptionsHtml
     * Purpose:  Add the options to the page HTML for the table
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnAddOptionsHtml ( oSettings )
    {
      /*
       * Create a temporary, empty, div which we can later on replace with what we have generated
       * we do it this way to rendering the 'options' html offline - speed :-)
       */
      var nHolding = document.createElement( 'div' );
      oSettings.nTable.parentNode.insertBefore( nHolding, oSettings.nTable );

      /*
       * All DataTables are wrapped in a div
       */
      oSettings.nTableWrapper = document.createElement( 'div' );
      oSettings.nTableWrapper.className = oSettings.oClasses.sWrapper;
      if ( oSettings.sTableId !== '' )
      {
        oSettings.nTableWrapper.setAttribute( 'id', oSettings.sTableId+'_wrapper' );
      }

      oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

      /* Track where we want to insert the option */
      var nInsertNode = oSettings.nTableWrapper;

      /* Loop over the user set positioning and place the elements as needed */
      var aDom = oSettings.sDom.split('');
      var nTmp, iPushFeature, cOption, nNewNode, cNext, sAttr, j;
      for ( var i=0 ; i<aDom.length ; i++ )
      {
        iPushFeature = 0;
        cOption = aDom[i];

        if ( cOption == '<' )
        {
          /* New container div */
          nNewNode = document.createElement( 'div' );

          /* Check to see if we should append an id and/or a class name to the container */
          cNext = aDom[i+1];
          if ( cNext == "'" || cNext == '"' )
          {
            sAttr = "";
            j = 2;
            while ( aDom[i+j] != cNext )
            {
              sAttr += aDom[i+j];
              j++;
            }

            /* Replace jQuery UI constants */
            if ( sAttr == "H" )
            {
              sAttr = "fg-toolbar ui-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix";
            }
            else if ( sAttr == "F" )
            {
              sAttr = "fg-toolbar ui-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix";
            }

            /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
             * breaks the string into parts and applies them as needed
             */
            if ( sAttr.indexOf('.') != -1 )
            {
              var aSplit = sAttr.split('.');
              nNewNode.setAttribute('id', aSplit[0].substr(1, aSplit[0].length-1) );
              nNewNode.className = aSplit[1];
            }
            else if ( sAttr.charAt(0) == "#" )
            {
              nNewNode.setAttribute('id', sAttr.substr(1, sAttr.length-1) );
            }
            else
            {
              nNewNode.className = sAttr;
            }

            i += j; /* Move along the position array */
          }

          nInsertNode.appendChild( nNewNode );
          nInsertNode = nNewNode;
        }
        else if ( cOption == '>' )
        {
          /* End container div */
          nInsertNode = nInsertNode.parentNode;
        }
        else if ( cOption == 'l' && oSettings.oFeatures.bPaginate && oSettings.oFeatures.bLengthChange )
        {
          /* Length */
          nTmp = _fnFeatureHtmlLength( oSettings );
          iPushFeature = 1;
        }
        else if ( cOption == 'f' && oSettings.oFeatures.bFilter )
        {
          /* Filter */
          nTmp = _fnFeatureHtmlFilter( oSettings );
          iPushFeature = 1;
        }
        else if ( cOption == 'r' && oSettings.oFeatures.bProcessing )
        {
          /* pRocessing */
          nTmp = _fnFeatureHtmlProcessing( oSettings );
          iPushFeature = 1;
        }
        else if ( cOption == 't' )
        {
          /* Table */
          nTmp = _fnFeatureHtmlTable( oSettings );
          iPushFeature = 1;
        }
        else if ( cOption ==  'i' && oSettings.oFeatures.bInfo )
        {
          /* Info */
          nTmp = _fnFeatureHtmlInfo( oSettings );
          iPushFeature = 1;
        }
        else if ( cOption == 'p' && oSettings.oFeatures.bPaginate )
        {
          /* Pagination */
          nTmp = _fnFeatureHtmlPaginate( oSettings );
          iPushFeature = 1;
        }
        else if ( _oExt.aoFeatures.length !== 0 )
        {
          /* Plug-in features */
          var aoFeatures = _oExt.aoFeatures;
          for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
          {
            if ( cOption == aoFeatures[k].cFeature )
            {
              nTmp = aoFeatures[k].fnInit( oSettings );
              if ( nTmp )
              {
                iPushFeature = 1;
              }
              break;
            }
          }
        }

        /* Add to the 2D features array */
        if ( iPushFeature == 1 && nTmp !== null )
        {
          if ( typeof oSettings.aanFeatures[cOption] != 'object' )
          {
            oSettings.aanFeatures[cOption] = [];
          }
          oSettings.aanFeatures[cOption].push( nTmp );
          nInsertNode.appendChild( nTmp );
        }
      }

      /* Built our DOM structure - replace the holding div with what we want */
      nHolding.parentNode.replaceChild( oSettings.nTableWrapper, nHolding );
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Feature: Filtering
     */

    /*
     * Function: _fnFeatureHtmlTable
     * Purpose:  Add any control elements for the table - specifically scrolling
     * Returns:  node: - Node to add to the DOM
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnFeatureHtmlTable ( oSettings )
    {
      /* Chack if scrolling is enabled or not - if not then leave the DOM unaltered */
      if ( oSettings.oScroll.sX === "" && oSettings.oScroll.sY === "" )
      {
        return oSettings.nTable;
      }

      /*
       * The HTML structure that we want to generate in this function is:
       *  div - nScroller
       *    div - nScrollHead
       *      div - nScrollHeadInner
       *        table - nScrollHeadTable
       *          thead - nThead
       *    div - nScrollBody
       *      table - oSettings.nTable
       *        thead - nTheadSize
       *        tbody - nTbody
       *    div - nScrollFoot
       *      div - nScrollFootInner
       *        table - nScrollFootTable
       *          tfoot - nTfoot
       */
      var
        nScroller = document.createElement('div'),
        nScrollHead = document.createElement('div'),
        nScrollHeadInner = document.createElement('div'),
        nScrollBody = document.createElement('div'),
        nScrollFoot = document.createElement('div'),
        nScrollFootInner = document.createElement('div'),
        nScrollHeadTable = oSettings.nTable.cloneNode(false),
        nScrollFootTable = oSettings.nTable.cloneNode(false),
        nThead = oSettings.nTable.getElementsByTagName('thead')[0],
        nTfoot = oSettings.nTable.getElementsByTagName('tfoot').length === 0 ? null :
          oSettings.nTable.getElementsByTagName('tfoot')[0],
        oClasses = (typeof oInit.bJQueryUI != 'undefined' && oInit.bJQueryUI) ?
          _oExt.oJUIClasses : _oExt.oStdClasses;

      nScrollHead.appendChild( nScrollHeadInner );
      nScrollFoot.appendChild( nScrollFootInner );
      nScrollBody.appendChild( oSettings.nTable );
      nScroller.appendChild( nScrollHead );
      nScroller.appendChild( nScrollBody );
      nScrollHeadInner.appendChild( nScrollHeadTable );
      nScrollHeadTable.appendChild( nThead );
      if ( nTfoot !== null )
      {
        nScroller.appendChild( nScrollFoot );
        nScrollFootInner.appendChild( nScrollFootTable );
        nScrollFootTable.appendChild( nTfoot );
      }

      nScroller.className = oClasses.sScrollWrapper;
      nScrollHead.className = oClasses.sScrollHead;
      nScrollHeadInner.className = oClasses.sScrollHeadInner;
      nScrollBody.className = oClasses.sScrollBody;
      nScrollFoot.className = oClasses.sScrollFoot;
      nScrollFootInner.className = oClasses.sScrollFootInner;

      if ( oSettings.oScroll.bAutoCss )
      {
        nScrollHead.style.overflow = "hidden";
        nScrollHead.style.position = "relative";
        nScrollFoot.style.overflow = "hidden";
        nScrollBody.style.overflow = "auto";
      }

      nScrollHead.style.border = "0";
      nScrollHead.style.width = "100%";
      nScrollFoot.style.border = "0";
      nScrollHeadInner.style.width = "150%"; /* will be overwritten */

      /* Modify attributes to respect the clones */
      nScrollHeadTable.removeAttribute('id');
      nScrollHeadTable.style.marginLeft = "0";
      oSettings.nTable.style.marginLeft = "0";
      if ( nTfoot !== null )
      {
        nScrollFootTable.removeAttribute('id');
        nScrollFootTable.style.marginLeft = "0";
      }

      /* Move any caption elements from the body to the header */
      var nCaptions = $('>caption', oSettings.nTable);
      for ( var i=0, iLen=nCaptions.length ; i<iLen ; i++ )
      {
        nScrollHeadTable.appendChild( nCaptions[i] );
      }

      /*
       * Sizing
       */
      /* When xscrolling add the width and a scroller to move the header with the body */
      if ( oSettings.oScroll.sX !== "" )
      {
        nScrollHead.style.width = _fnStringToCss( oSettings.oScroll.sX );
        nScrollBody.style.width = _fnStringToCss( oSettings.oScroll.sX );

        if ( nTfoot !== null )
        {
          nScrollFoot.style.width = _fnStringToCss( oSettings.oScroll.sX );
        }

        /* When the body is scrolled, then we also want to scroll the headers */
        $(nScrollBody).scroll( function (e) {
          nScrollHead.scrollLeft = this.scrollLeft;

          if ( nTfoot !== null )
          {
            nScrollFoot.scrollLeft = this.scrollLeft;
          }
        } );
      }

      /* When yscrolling, add the height */
      if ( oSettings.oScroll.sY !== "" )
      {
        nScrollBody.style.height = _fnStringToCss( oSettings.oScroll.sY );
      }

      /* Redraw - align columns across the tables */
      oSettings.aoDrawCallback.push( {
        "fn": _fnScrollDraw,
        "sName": "scrolling"
      } );

      /* Infinite scrolling event handlers */
      if ( oSettings.oScroll.bInfinite )
      {
        $(nScrollBody).scroll( function() {
          /* Use a blocker to stop scrolling from loading more data while other data is still loading */
          if ( !oSettings.bDrawing )
          {
            /* Check if we should load the next data set */
            if ( $(this).scrollTop() + $(this).height() >
              $(oSettings.nTable).height() - oSettings.oScroll.iLoadGap )
            {
              /* Only do the redraw if we have to - we might be at the end of the data */
              if ( oSettings.fnDisplayEnd() < oSettings.fnRecordsDisplay() )
              {
                _fnPageChange( oSettings, 'next' );
                _fnCalculateEnd( oSettings );
                _fnDraw( oSettings );
              }
            }
          }
        } );
      }

      oSettings.nScrollHead = nScrollHead;
      oSettings.nScrollFoot = nScrollFoot;

      return nScroller;
    }

    /*
     * Function: _fnScrollDraw
     * Purpose:  Update the various tables for resizing
     * Returns:  node: - Node to add to the DOM
     * Inputs:   object:o - dataTables settings object
     * Notes:    It's a bit of a pig this function, but basically the idea to:
     *   1. Re-create the table inside the scrolling div
     *   2. Take live measurements from the DOM
     *   3. Apply the measurements
     *   4. Clean up
     */
    function _fnScrollDraw ( o )
    {
      var
        nScrollHeadInner = o.nScrollHead.getElementsByTagName('div')[0],
        nScrollHeadTable = nScrollHeadInner.getElementsByTagName('table')[0],
        nScrollBody = o.nTable.parentNode,
        i, iLen, j, jLen, anHeadToSize, anHeadSizers, anFootSizers, anFootToSize, oStyle, iVis,
        iWidth, aApplied=[], iSanityWidth;

      /*
       * 1. Re-create the table inside the scrolling div
       */

      /* Remove the old minimised thead and tfoot elements in the inner table */
      var nTheadSize = o.nTable.getElementsByTagName('thead');
      if ( nTheadSize.length > 0 )
      {
        o.nTable.removeChild( nTheadSize[0] );
      }

      if ( o.nTFoot !== null )
      {
        /* Remove the old minimised footer element in the cloned header */
        var nTfootSize = o.nTable.getElementsByTagName('tfoot');
        if ( nTfootSize.length > 0 )
        {
          o.nTable.removeChild( nTfootSize[0] );
        }
      }

      /* Clone the current header and footer elements and then place it into the inner table */
      nTheadSize = o.nTHead.cloneNode(true);
      o.nTable.insertBefore( nTheadSize, o.nTable.childNodes[0] );

      if ( o.nTFoot !== null )
      {
        nTfootSize = o.nTFoot.cloneNode(true);
        o.nTable.insertBefore( nTfootSize, o.nTable.childNodes[1] );
      }

      /*
       * 2. Take live measurements from the DOM - do not alter the DOM itself!
       */

      /* Remove old sizing and apply the calculated column widths
       * Get the unique column headers in the newly created (cloned) header. We want to apply the
       * calclated sizes to this header
       */
      var nThs = _fnGetUniqueThs( o, nTheadSize );
      for ( i=0, iLen=nThs.length ; i<iLen ; i++ )
      {
        iVis = _fnVisibleToColumnIndex( o, i );
        nThs[i].style.width = o.aoColumns[iVis].sWidth;
      }

      if ( o.nTFoot !== null )
      {
        _fnApplyToChildren( function(n) {
          n.style.width = "";
        }, nTfootSize.getElementsByTagName('tr') );
      }

      /* Size the table as a whole */
      iSanityWidth = $(o.nTable).outerWidth();
      if ( o.oScroll.sX === "" )
      {
        /* No x scrolling */
        o.nTable.style.width = "100%";

        /* I know this is rubbish - but IE7 will make the width of the table when 100% include
         * the scrollbar - which is shouldn't. This needs feature detection in future - to do
         */
        if ( $.browser.msie && $.browser.version <= 7 )
        {
          o.nTable.style.width = _fnStringToCss( $(o.nTable).outerWidth()-o.oScroll.iBarWidth );
        }
      }
      else
      {
        if ( o.oScroll.sXInner !== "" )
        {
          /* x scroll inner has been given - use it */
          o.nTable.style.width = _fnStringToCss(o.oScroll.sXInner);
        }
        else if ( iSanityWidth == $(nScrollBody).width() &&
          $(nScrollBody).height() < $(o.nTable).height() )
        {
          /* There is y-scrolling - try to take account of the y scroll bar */
          o.nTable.style.width = _fnStringToCss( iSanityWidth-o.oScroll.iBarWidth );
          if ( $(o.nTable).outerWidth() > iSanityWidth-o.oScroll.iBarWidth )
          {
            /* Not possible to take account of it */
            o.nTable.style.width = _fnStringToCss( iSanityWidth );
          }
        }
        else
        {
          /* All else fails */
          o.nTable.style.width = _fnStringToCss( iSanityWidth );
        }
      }

      /* Recalculate the sanity width - now that we've applied the required width, before it was
       * a temporary variable. This is required because the column width calculation is done
       * before this table DOM is created.
       */
      iSanityWidth = $(o.nTable).outerWidth();

      /* We want the hidden header to have zero height, so remove padding and borders. Then
       * set the width based on the real headers
       */
      anHeadToSize = o.nTHead.getElementsByTagName('tr');
      anHeadSizers = nTheadSize.getElementsByTagName('tr');

      _fnApplyToChildren( function(nSizer, nToSize) {
        oStyle = nSizer.style;
        oStyle.paddingTop = "0";
        oStyle.paddingBottom = "0";
        oStyle.borderTopWidth = "0";
        oStyle.borderBottomWidth = "0";
        oStyle.height = 0;

        iWidth = $(nSizer).width();
        nToSize.style.width = _fnStringToCss( iWidth );
        aApplied.push( iWidth );
      }, anHeadSizers, anHeadToSize );
      $(anHeadSizers).height(0);

      if ( o.nTFoot !== null )
      {
        /* Clone the current footer and then place it into the body table as a "hidden header" */
        anFootSizers = nTfootSize.getElementsByTagName('tr');
        anFootToSize = o.nTFoot.getElementsByTagName('tr');

        _fnApplyToChildren( function(nSizer, nToSize) {
          oStyle = nSizer.style;
          oStyle.paddingTop = "0";
          oStyle.paddingBottom = "0";
          oStyle.borderTopWidth = "0";
          oStyle.borderBottomWidth = "0";
          oStyle.height = 0;

          iWidth = $(nSizer).width();
          nToSize.style.width = _fnStringToCss( iWidth );
          aApplied.push( iWidth );
        }, anFootSizers, anFootToSize );
        $(anFootSizers).height(0);
      }

      /*
       * 3. Apply the measurements
       */

      /* "Hide" the header and footer that we used for the sizing. We want to also fix their width
       * to what they currently are
       */
      _fnApplyToChildren( function(nSizer) {
        nSizer.innerHTML = "";
        nSizer.style.width = _fnStringToCss( aApplied.shift() );
      }, anHeadSizers );

      if ( o.nTFoot !== null )
      {
        _fnApplyToChildren( function(nSizer) {
          nSizer.innerHTML = "";
          nSizer.style.width = _fnStringToCss( aApplied.shift() );
        }, anFootSizers );
      }

      /* Sanity check that the table is of a sensible width. If not then we are going to get
       * misalignment
       */
      if ( $(o.nTable).outerWidth() < iSanityWidth )
      {
        if ( o.oScroll.sX === "" )
        {
          _fnLog( o, 1, "The table cannot fit into the current element which will cause column"+
            " misalignment. It is suggested that you enable x-scrolling or increase the width"+
            " the table has in which to be drawn" );
        }
        else if ( o.oScroll.sXInner !== "" )
        {
          _fnLog( o, 1, "The table cannot fit into the current element which will cause column"+
            " misalignment. It is suggested that you increase the sScrollXInner property to"+
            " allow it to draw in a larger area, or simply remove that parameter to allow"+
            " automatic calculation" );
        }
      }


      /*
       * 4. Clean up
       */

      if ( o.oScroll.sY === "" )
      {
        /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
         * the scrollbar height from the visible display, rather than adding it on. We need to
         * set the height in order to sort this. Don't want to do it in any other browsers.
         */
        if ( $.browser.msie && $.browser.version <= 7 )
        {
          nScrollBody.style.height = _fnStringToCss( o.nTable.offsetHeight+o.oScroll.iBarWidth );
        }
      }

      if ( o.oScroll.sY !== "" && o.oScroll.bCollapse )
      {
        nScrollBody.style.height = _fnStringToCss( o.oScroll.sY );

        var iExtra = (o.oScroll.sX !== "" && o.nTable.offsetWidth > nScrollBody.offsetWidth) ?
          o.oScroll.iBarWidth : 0;
        if ( o.nTable.offsetHeight < nScrollBody.offsetHeight )
        {
          nScrollBody.style.height = _fnStringToCss( $(o.nTable).height()+iExtra );
        }
      }

      /* Finally set the width's of the header and footer tables */
      var iOuterWidth = $(o.nTable).outerWidth();
      nScrollHeadTable.style.width = _fnStringToCss( iOuterWidth );
      nScrollHeadInner.style.width = _fnStringToCss( iOuterWidth+o.oScroll.iBarWidth );

      if ( o.nTFoot !== null )
      {
        var
          nScrollFootInner = o.nScrollFoot.getElementsByTagName('div')[0],
          nScrollFootTable = nScrollFootInner.getElementsByTagName('table')[0];

        nScrollFootInner.style.width = _fnStringToCss( o.nTable.offsetWidth+o.oScroll.iBarWidth );
        nScrollFootTable.style.width = _fnStringToCss( o.nTable.offsetWidth );
      }

      /* If sorting or filtering has occured, jump the scrolling back to the top */
      if ( o.bSorted || o.bFiltered )
      {
        nScrollBody.scrollTop = 0;
      }
    }

    /*
     * Function: _fnAjustColumnSizing
     * Purpose:  Ajust the table column widths for new data
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     * Notes:    You would probably want to do a redraw after calling this function!
     */
    function _fnAjustColumnSizing ( oSettings )
    {
      /* Not interested in doing column width calculation if autowidth is disabled */
      if ( oSettings.oFeatures.bAutoWidth === false )
      {
        return false;
      }

      _fnCalculateColumnWidths( oSettings );
      for ( var i=0 , iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
      {
        oSettings.aoColumns[i].nTh.style.width = oSettings.aoColumns[i].sWidth;
      }
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Feature: Filtering
     */

    /*
     * Function: _fnFeatureHtmlFilter
     * Purpose:  Generate the node required for filtering text
     * Returns:  node
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnFeatureHtmlFilter ( oSettings )
    {
      var nFilter = document.createElement( 'div' );
      if ( oSettings.sTableId !== '' && typeof oSettings.aanFeatures.f == "undefined" )
      {
        nFilter.setAttribute( 'id', oSettings.sTableId+'_filter' );
      }
      nFilter.className = oSettings.oClasses.sFilter;
      var sSpace = oSettings.oLanguage.sSearch==="" ? "" : " ";
      nFilter.innerHTML = oSettings.oLanguage.sSearch+sSpace+'<input type="text" />';

      var jqFilter = $("input", nFilter);
      jqFilter.val( oSettings.oPreviousSearch.sSearch.replace('"','&quot;') );
      jqFilter.bind( 'keyup.DT', function(e) {
        /* Update all other filter input elements for the new display */
        var n = oSettings.aanFeatures.f;
        for ( var i=0, iLen=n.length ; i<iLen ; i++ )
        {
          if ( n[i] != this.parentNode )
          {
            $('input', n[i]).val( this.value );
          }
        }

        /* Now do the filter */
        if ( this.value != oSettings.oPreviousSearch.sSearch )
        {
          _fnFilterComplete( oSettings, {
            "sSearch": this.value,
            "bRegex":  oSettings.oPreviousSearch.bRegex,
            "bSmart":  oSettings.oPreviousSearch.bSmart
          } );
        }
      } );

      jqFilter.bind( 'keypress.DT', function(e) {
        /* Prevent default */
        if ( e.keyCode == 13 )
        {
          return false;
        }
      } );

      return nFilter;
    }

    /*
     * Function: _fnFilterComplete
     * Purpose:  Filter the table using both the global filter and column based filtering
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           object:oSearch: search information
     *           int:iForce - optional - force a research of the master array (1) or not (undefined or 0)
     */
    function _fnFilterComplete ( oSettings, oInput, iForce )
    {
      /* Filter on everything */
      _fnFilter( oSettings, oInput.sSearch, iForce, oInput.bRegex, oInput.bSmart );

      /* Now do the individual column filter */
      for ( var i=0 ; i<oSettings.aoPreSearchCols.length ; i++ )
      {
        _fnFilterColumn( oSettings, oSettings.aoPreSearchCols[i].sSearch, i,
          oSettings.aoPreSearchCols[i].bRegex, oSettings.aoPreSearchCols[i].bSmart );
      }

      /* Custom filtering */
      if ( _oExt.afnFiltering.length !== 0 )
      {
        _fnFilterCustom( oSettings );
      }

      /* Tell the draw function we have been filtering */
      oSettings.bFiltered = true;

      /* Redraw the table */
      oSettings._iDisplayStart = 0;
      _fnCalculateEnd( oSettings );
      _fnDraw( oSettings );

      /* Rebuild search array 'offline' */
      _fnBuildSearchArray( oSettings, 0 );
    }

    /*
     * Function: _fnFilterCustom
     * Purpose:  Apply custom filtering functions
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnFilterCustom( oSettings )
    {
      var afnFilters = _oExt.afnFiltering;
      for ( var i=0, iLen=afnFilters.length ; i<iLen ; i++ )
      {
        var iCorrector = 0;
        for ( var j=0, jLen=oSettings.aiDisplay.length ; j<jLen ; j++ )
        {
          var iDisIndex = oSettings.aiDisplay[j-iCorrector];

          /* Check if we should use this row based on the filtering function */
          if ( !afnFilters[i]( oSettings, _fnGetRowData( oSettings, iDisIndex, 'filter' ), iDisIndex ) )
          {
            oSettings.aiDisplay.splice( j-iCorrector, 1 );
            iCorrector++;
          }
        }
      }
    }

    /*
     * Function: _fnFilterColumn
     * Purpose:  Filter the table on a per-column basis
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           string:sInput - string to filter on
     *           int:iColumn - column to filter
     *           bool:bRegex - treat search string as a regular expression or not
     *           bool:bSmart - use smart filtering or not
     */
    function _fnFilterColumn ( oSettings, sInput, iColumn, bRegex, bSmart )
    {
      if ( sInput === "" )
      {
        return;
      }

      var iIndexCorrector = 0;
      var rpSearch = _fnFilterCreateSearch( sInput, bRegex, bSmart );

      for ( var i=oSettings.aiDisplay.length-1 ; i>=0 ; i-- )
      {
        var sData = _fnDataToSearch( _fnGetCellData( oSettings, oSettings.aiDisplay[i], iColumn, 'filter' ),
          oSettings.aoColumns[iColumn].sType );
        if ( ! rpSearch.test( sData ) )
        {
          oSettings.aiDisplay.splice( i, 1 );
          iIndexCorrector++;
        }
      }
    }

    /*
     * Function: _fnFilter
     * Purpose:  Filter the data table based on user input and draw the table
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           string:sInput - string to filter on
     *           int:iForce - optional - force a research of the master array (1) or not (undefined or 0)
     *           bool:bRegex - treat as a regular expression or not
     *           bool:bSmart - perform smart filtering or not
     */
    function _fnFilter( oSettings, sInput, iForce, bRegex, bSmart )
    {
      var i;
      var rpSearch = _fnFilterCreateSearch( sInput, bRegex, bSmart );

      /* Check if we are forcing or not - optional parameter */
      if ( typeof iForce == 'undefined' || iForce === null )
      {
        iForce = 0;
      }

      /* Need to take account of custom filtering functions - always filter */
      if ( _oExt.afnFiltering.length !== 0 )
      {
        iForce = 1;
      }

      /*
       * If the input is blank - we want the full data set
       */
      if ( sInput.length <= 0 )
      {
        oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length);
        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
      }
      else
      {
        /*
         * We are starting a new search or the new search string is smaller
         * then the old one (i.e. delete). Search from the master array
         */
        if ( oSettings.aiDisplay.length == oSettings.aiDisplayMaster.length ||
          oSettings.oPreviousSearch.sSearch.length > sInput.length || iForce == 1 ||
          sInput.indexOf(oSettings.oPreviousSearch.sSearch) !== 0 )
        {
          /* Nuke the old display array - we are going to rebuild it */
          oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length);

          /* Force a rebuild of the search array */
          _fnBuildSearchArray( oSettings, 1 );

          /* Search through all records to populate the search array
           * The the oSettings.aiDisplayMaster and asDataSearch arrays have 1 to 1
           * mapping
           */
          for ( i=0 ; i<oSettings.aiDisplayMaster.length ; i++ )
          {
            if ( rpSearch.test(oSettings.asDataSearch[i]) )
            {
              oSettings.aiDisplay.push( oSettings.aiDisplayMaster[i] );
            }
          }
        }
        else
        {
          /* Using old search array - refine it - do it this way for speed
           * Don't have to search the whole master array again
           */
          var iIndexCorrector = 0;

          /* Search the current results */
          for ( i=0 ; i<oSettings.asDataSearch.length ; i++ )
          {
            if ( ! rpSearch.test(oSettings.asDataSearch[i]) )
            {
              oSettings.aiDisplay.splice( i-iIndexCorrector, 1 );
              iIndexCorrector++;
            }
          }
        }
      }
      oSettings.oPreviousSearch.sSearch = sInput;
      oSettings.oPreviousSearch.bRegex = bRegex;
      oSettings.oPreviousSearch.bSmart = bSmart;
    }

    /*
     * Function: _fnBuildSearchArray
     * Purpose:  Create an array which can be quickly search through
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iMaster - use the master data array - optional
     */
    function _fnBuildSearchArray ( oSettings, iMaster )
    {
      /* Clear out the old data */
      oSettings.asDataSearch.splice( 0, oSettings.asDataSearch.length );

      var aArray = (typeof iMaster != 'undefined' && iMaster == 1) ?
        oSettings.aiDisplayMaster : oSettings.aiDisplay;

      for ( var i=0, iLen=aArray.length ; i<iLen ; i++ )
      {
        oSettings.asDataSearch[i] = _fnBuildSearchRow( oSettings,
          _fnGetRowData( oSettings, aArray[i], 'filter' ) );
      }
    }

    /*
     * Function: _fnBuildSearchRow
     * Purpose:  Create a searchable string from a single data row
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           array:aData - Row data array to use for the data to search
     */
    function _fnBuildSearchRow( oSettings, aData )
    {
      var sSearch = '';
      if ( typeof oSettings.__nTmpFilter == 'undefined' ) {
        oSettings.__nTmpFilter = document.createElement('div');
      }
      var nTmp = oSettings.__nTmpFilter;

      for ( var j=0, jLen=oSettings.aoColumns.length ; j<jLen ; j++ )
      {
        if ( oSettings.aoColumns[j].bSearchable )
        {
          var sData = aData[j];
          sSearch += _fnDataToSearch( sData, oSettings.aoColumns[j].sType )+'  ';
        }
      }

      /* If it looks like there is an HTML entity in the string, attempt to decode it */
      if ( sSearch.indexOf('&') !== -1 )
      {
        nTmp.innerHTML = sSearch;
        sSearch = nTmp.textContent ? nTmp.textContent : nTmp.innerText;

        /* IE and Opera appear to put an newline where there is a <br> tag - remove it */
        sSearch = sSearch.replace(/\n/g," ").replace(/\r/g,"");
      }

      return sSearch;
    }

    /*
     * Function: _fnFilterCreateSearch
     * Purpose:  Build a regular expression object suitable for searching a table
     * Returns:  RegExp: - constructed object
     * Inputs:   string:sSearch - string to search for
     *           bool:bRegex - treat as a regular expression or not
     *           bool:bSmart - perform smart filtering or not
     */
    function _fnFilterCreateSearch( sSearch, bRegex, bSmart )
    {
      var asSearch, sRegExpString;

      if ( bSmart )
      {
        /* Generate the regular expression to use. Something along the lines of:
         * ^(?=.*?\bone\b)(?=.*?\btwo\b)(?=.*?\bthree\b).*$
         */
        asSearch = bRegex ? sSearch.split( ' ' ) : _fnEscapeRegex( sSearch ).split( ' ' );
        sRegExpString = '^(?=.*?'+asSearch.join( ')(?=.*?' )+').*$';
        return new RegExp( sRegExpString, "i" );
      }
      else
      {
        sSearch = bRegex ? sSearch : _fnEscapeRegex( sSearch );
        return new RegExp( sSearch, "i" );
      }
    }

    /*
     * Function: _fnDataToSearch
     * Purpose:  Convert raw data into something that the user can search on
     * Returns:  string: - search string
     * Inputs:   string:sData - data to be modified
     *           string:sType - data type
     */
    function _fnDataToSearch ( sData, sType )
    {
      if ( typeof _oExt.ofnSearch[sType] == "function" )
      {
        return _oExt.ofnSearch[sType]( sData );
      }
      else if ( sType == "html" )
      {
        return sData.replace(/\n/g," ").replace( /<.*?>/g, "" );
      }
      else if ( typeof sData == "string" )
      {
        return sData.replace(/\n/g," ");
      }
      else if ( sData === null )
      {
        return '';
      }
      return sData;
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Feature: Sorting
     */

    /*
     * Function: _fnSort
     * Purpose:  Change the order of the table
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           bool:bApplyClasses - optional - should we apply classes or not
     * Notes:    We always sort the master array and then apply a filter again
     *   if it is needed. This probably isn't optimal - but atm I can't think
     *   of any other way which is (each has disadvantages). we want to sort aiDisplayMaster -
     *   but according to aoData[]._aData
     */
    function _fnSort ( oSettings, bApplyClasses )
    {
      var
        iDataSort, iDataType,
        i, iLen, j, jLen,
        aaSort = [],
        aiOrig = [],
        oSort = _oExt.oSort,
        aoData = oSettings.aoData,
        aoColumns = oSettings.aoColumns;

      /* No sorting required if server-side or no sorting array */
      if ( !oSettings.oFeatures.bServerSide &&
        (oSettings.aaSorting.length !== 0 || oSettings.aaSortingFixed !== null) )
      {
        if ( oSettings.aaSortingFixed !== null )
        {
          aaSort = oSettings.aaSortingFixed.concat( oSettings.aaSorting );
        }
        else
        {
          aaSort = oSettings.aaSorting.slice();
        }

        /* If there is a sorting data type, and a fuction belonging to it, then we need to
         * get the data from the developer's function and apply it for this column
         */
        for ( i=0 ; i<aaSort.length ; i++ )
        {
          var iColumn = aaSort[i][0];
          var iVisColumn = _fnColumnIndexToVisible( oSettings, iColumn );
          var sDataType = oSettings.aoColumns[ iColumn ].sSortDataType;
          if ( typeof _oExt.afnSortData[sDataType] != 'undefined' )
          {
            var aData = _oExt.afnSortData[sDataType]( oSettings, iColumn, iVisColumn );
            for ( j=0, jLen=aoData.length ; j<jLen ; j++ )
            {
              _fnSetCellData( oSettings, j, iColumn, aData[j] );
            }
          }
        }

        /* Create a value - key array of the current row positions such that we can use their
         * current position during the sort, if values match, in order to perform stable sorting
         */
        for ( i=0, iLen=oSettings.aiDisplayMaster.length ; i<iLen ; i++ )
        {
          aiOrig[ oSettings.aiDisplayMaster[i] ] = i;
        }

        /* Do the sort - here we want multi-column sorting based on a given data source (column)
         * and sorting function (from oSort) in a certain direction. It's reasonably complex to
         * follow on it's own, but this is what we want (example two column sorting):
         *  fnLocalSorting = function(a,b){
         *  	var iTest;
         *  	iTest = oSort['string-asc']('data11', 'data12');
         *  	if (iTest !== 0)
         *  		return iTest;
         *    iTest = oSort['numeric-desc']('data21', 'data22');
         *    if (iTest !== 0)
         *  		return iTest;
         *  	return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
         *  }
         * Basically we have a test for each sorting column, if the data in that column is equal,
         * test the next column. If all columns match, then we use a numeric sort on the row
         * positions in the original data array to provide a stable sort.
         */
        var iSortLen = aaSort.length;
        oSettings.aiDisplayMaster.sort( function ( a, b ) {
          var iTest, iDataSort, sDataType;
          for ( i=0 ; i<iSortLen ; i++ )
          {
            iDataSort = aoColumns[ aaSort[i][0] ].iDataSort;
            sDataType = aoColumns[ iDataSort ].sType;
            iTest = oSort[ (sDataType?sDataType:'string')+"-"+aaSort[i][1] ](
              _fnGetCellData( oSettings, a, iDataSort, 'sort' ),
              _fnGetCellData( oSettings, b, iDataSort, 'sort' )
            );

            if ( iTest !== 0 )
            {
              return iTest;
            }
          }

          return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
        } );
      }

      /* Alter the sorting classes to take account of the changes */
      if ( (typeof bApplyClasses == 'undefined' || bApplyClasses) && !oSettings.oFeatures.bDeferRender )
      {
        _fnSortingClasses( oSettings );
      }

      /* Tell the draw function that we have sorted the data */
      oSettings.bSorted = true;

      /* Copy the master data into the draw array and re-draw */
      if ( oSettings.oFeatures.bFilter )
      {
        /* _fnFilter() will redraw the table for us */
        _fnFilterComplete( oSettings, oSettings.oPreviousSearch, 1 );
      }
      else
      {
        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
        oSettings._iDisplayStart = 0; /* reset display back to page 0 */
        _fnCalculateEnd( oSettings );
        _fnDraw( oSettings );
      }
    }

    /*
     * Function: _fnSortAttachListener
     * Purpose:  Attach a sort handler (click) to a node
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           node:nNode - node to attach the handler to
     *           int:iDataIndex - column sorting index
     *           function:fnCallback - callback function - optional
     */
    function _fnSortAttachListener ( oSettings, nNode, iDataIndex, fnCallback )
    {
      $(nNode).bind( 'click.DT', function (e) {
        /* If the column is not sortable - don't to anything */
        if ( oSettings.aoColumns[iDataIndex].bSortable === false )
        {
          return;
        }

        /*
         * This is a little bit odd I admit... I declare a temporary function inside the scope of
         * _fnBuildHead and the click handler in order that the code presented here can be used
         * twice - once for when bProcessing is enabled, and another time for when it is
         * disabled, as we need to perform slightly different actions.
         *   Basically the issue here is that the Javascript engine in modern browsers don't
         * appear to allow the rendering engine to update the display while it is still excuting
         * it's thread (well - it does but only after long intervals). This means that the
         * 'processing' display doesn't appear for a table sort. To break the js thread up a bit
         * I force an execution break by using setTimeout - but this breaks the expected
         * thread continuation for the end-developer's point of view (their code would execute
         * too early), so we on;y do it when we absolutely have to.
         */
        var fnInnerSorting = function () {
          var iColumn, iNextSort;

          /* If the shift key is pressed then we are multipe column sorting */
          if ( e.shiftKey )
          {
            /* Are we already doing some kind of sort on this column? */
            var bFound = false;
            for ( var i=0 ; i<oSettings.aaSorting.length ; i++ )
            {
              if ( oSettings.aaSorting[i][0] == iDataIndex )
              {
                bFound = true;
                iColumn = oSettings.aaSorting[i][0];
                iNextSort = oSettings.aaSorting[i][2]+1;

                if ( typeof oSettings.aoColumns[iColumn].asSorting[iNextSort] == 'undefined' )
                {
                  /* Reached the end of the sorting options, remove from multi-col sort */
                  oSettings.aaSorting.splice( i, 1 );
                }
                else
                {
                  /* Move onto next sorting direction */
                  oSettings.aaSorting[i][1] = oSettings.aoColumns[iColumn].asSorting[iNextSort];
                  oSettings.aaSorting[i][2] = iNextSort;
                }
                break;
              }
            }

            /* No sort yet - add it in */
            if ( bFound === false )
            {
              oSettings.aaSorting.push( [ iDataIndex,
                oSettings.aoColumns[iDataIndex].asSorting[0], 0 ] );
            }
          }
          else
          {
            /* If no shift key then single column sort */
            if ( oSettings.aaSorting.length == 1 && oSettings.aaSorting[0][0] == iDataIndex )
            {
              iColumn = oSettings.aaSorting[0][0];
              iNextSort = oSettings.aaSorting[0][2]+1;
              if ( typeof oSettings.aoColumns[iColumn].asSorting[iNextSort] == 'undefined' )
              {
                iNextSort = 0;
              }
              oSettings.aaSorting[0][1] = oSettings.aoColumns[iColumn].asSorting[iNextSort];
              oSettings.aaSorting[0][2] = iNextSort;
            }
            else
            {
              oSettings.aaSorting.splice( 0, oSettings.aaSorting.length );
              oSettings.aaSorting.push( [ iDataIndex,
                oSettings.aoColumns[iDataIndex].asSorting[0], 0 ] );
            }
          }

          /* Run the sort */
          _fnSort( oSettings );
        }; /* /fnInnerSorting */

        if ( !oSettings.oFeatures.bProcessing )
        {
          fnInnerSorting();
        }
        else
        {
          _fnProcessingDisplay( oSettings, true );
          setTimeout( function() {
            fnInnerSorting();
            if ( !oSettings.oFeatures.bServerSide )
            {
              _fnProcessingDisplay( oSettings, false );
            }
          }, 0 );
        }

        /* Call the user specified callback function - used for async user interaction */
        if ( typeof fnCallback == 'function' )
        {
          fnCallback( oSettings );
        }
      } );
    }

    /*
     * Function: _fnSortingClasses
     * Purpose:  Set the sortting classes on the header
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     * Notes:    It is safe to call this function when bSort and bSortClasses are false
     */
    function _fnSortingClasses( oSettings )
    {
      var i, iLen, j, jLen, iFound;
      var aaSort, sClass;
      var iColumns = oSettings.aoColumns.length;
      var oClasses = oSettings.oClasses;

      for ( i=0 ; i<iColumns ; i++ )
      {
        if ( oSettings.aoColumns[i].bSortable )
        {
          $(oSettings.aoColumns[i].nTh).removeClass( oClasses.sSortAsc +" "+ oClasses.sSortDesc +
            " "+ oSettings.aoColumns[i].sSortingClass );
        }
      }

      if ( oSettings.aaSortingFixed !== null )
      {
        aaSort = oSettings.aaSortingFixed.concat( oSettings.aaSorting );
      }
      else
      {
        aaSort = oSettings.aaSorting.slice();
      }

      /* Apply the required classes to the header */
      for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
      {
        if ( oSettings.aoColumns[i].bSortable )
        {
          sClass = oSettings.aoColumns[i].sSortingClass;
          iFound = -1;
          for ( j=0 ; j<aaSort.length ; j++ )
          {
            if ( aaSort[j][0] == i )
            {
              sClass = ( aaSort[j][1] == "asc" ) ?
                oClasses.sSortAsc : oClasses.sSortDesc;
              iFound = j;
              break;
            }
          }
          $(oSettings.aoColumns[i].nTh).addClass( sClass );

          if ( oSettings.bJUI )
          {
            /* jQuery UI uses extra markup */
            var jqSpan = $("span", oSettings.aoColumns[i].nTh);
            jqSpan.removeClass(oClasses.sSortJUIAsc +" "+ oClasses.sSortJUIDesc +" "+
              oClasses.sSortJUI +" "+ oClasses.sSortJUIAscAllowed +" "+ oClasses.sSortJUIDescAllowed );

            var sSpanClass;
            if ( iFound == -1 )
            {
              sSpanClass = oSettings.aoColumns[i].sSortingClassJUI;
            }
            else if ( aaSort[iFound][1] == "asc" )
            {
              sSpanClass = oClasses.sSortJUIAsc;
            }
            else
            {
              sSpanClass = oClasses.sSortJUIDesc;
            }

            jqSpan.addClass( sSpanClass );
          }
        }
        else
        {
          /* No sorting on this column, so add the base class. This will have been assigned by
           * _fnAddColumn
           */
          $(oSettings.aoColumns[i].nTh).addClass( oSettings.aoColumns[i].sSortingClass );
        }
      }

      /*
       * Apply the required classes to the table body
       * Note that this is given as a feature switch since it can significantly slow down a sort
       * on large data sets (adding and removing of classes is always slow at the best of times..)
       * Further to this, note that this code is admitadly fairly ugly. It could be made a lot
       * simpiler using jQuery selectors and add/removeClass, but that is significantly slower
       * (on the order of 5 times slower) - hence the direct DOM manipulation here.
       * Note that for defered drawing we do use jQuery - the reason being that taking the first
       * row found to see if the whole column needs processed can miss classes since the first
       * column might be new.
       */
      sClass = oClasses.sSortColumn;

      if ( oSettings.oFeatures.bSort && oSettings.oFeatures.bSortClasses )
      {
        var nTds = _fnGetTdNodes( oSettings );

        /* Remove the old classes */
        if ( oSettings.oFeatures.bDeferRender )
        {
          $(nTds).removeClass(sClass+'1 '+sClass+'2 '+sClass+'3');
        }
        else if ( nTds.length >= iColumns )
        {
          for ( i=0 ; i<iColumns ; i++ )
          {
            if ( nTds[i].className.indexOf(sClass+"1") != -1 )
            {
              for ( j=0, jLen=(nTds.length/iColumns) ; j<jLen ; j++ )
              {
                nTds[(iColumns*j)+i].className =
                  $.trim( nTds[(iColumns*j)+i].className.replace( sClass+"1", "" ) );
              }
            }
            else if ( nTds[i].className.indexOf(sClass+"2") != -1 )
            {
              for ( j=0, jLen=(nTds.length/iColumns) ; j<jLen ; j++ )
              {
                nTds[(iColumns*j)+i].className =
                  $.trim( nTds[(iColumns*j)+i].className.replace( sClass+"2", "" ) );
              }
            }
            else if ( nTds[i].className.indexOf(sClass+"3") != -1 )
            {
              for ( j=0, jLen=(nTds.length/iColumns) ; j<jLen ; j++ )
              {
                nTds[(iColumns*j)+i].className =
                  $.trim( nTds[(iColumns*j)+i].className.replace( " "+sClass+"3", "" ) );
              }
            }
          }
        }

        /* Add the new classes to the table */
        var iClass = 1, iTargetCol;
        for ( i=0 ; i<aaSort.length ; i++ )
        {
          iTargetCol = parseInt( aaSort[i][0], 10 );
          for ( j=0, jLen=(nTds.length/iColumns) ; j<jLen ; j++ )
          {
            nTds[(iColumns*j)+iTargetCol].className += " "+sClass+iClass;
          }

          if ( iClass < 3 )
          {
            iClass++;
          }
        }
      }
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Feature: Pagination. Note that most of the paging logic is done in
     * _oExt.oPagination
     */

    /*
     * Function: _fnFeatureHtmlPaginate
     * Purpose:  Generate the node required for default pagination
     * Returns:  node
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnFeatureHtmlPaginate ( oSettings )
    {
      if ( oSettings.oScroll.bInfinite )
      {
        return null;
      }

      var nPaginate = document.createElement( 'div' );
      nPaginate.className = oSettings.oClasses.sPaging+oSettings.sPaginationType;

      _oExt.oPagination[ oSettings.sPaginationType ].fnInit( oSettings, nPaginate,
        function( oSettings ) {
          _fnCalculateEnd( oSettings );
          _fnDraw( oSettings );
        }
      );

      /* Add a draw callback for the pagination on first instance, to update the paging display */
      if ( typeof oSettings.aanFeatures.p == "undefined" )
      {
        oSettings.aoDrawCallback.push( {
          "fn": function( oSettings ) {
            _oExt.oPagination[ oSettings.sPaginationType ].fnUpdate( oSettings, function( oSettings ) {
              _fnCalculateEnd( oSettings );
              _fnDraw( oSettings );
            } );
          },
          "sName": "pagination"
        } );
      }
      return nPaginate;
    }

    /*
     * Function: _fnPageChange
     * Purpose:  Alter the display settings to change the page
     * Returns:  bool:true - page has changed, false - no change (no effect) eg 'first' on page 1
     * Inputs:   object:oSettings - dataTables settings object
     *           string:sAction - paging action to take: "first", "previous", "next" or "last"
     */
    function _fnPageChange ( oSettings, sAction )
    {
      var iOldStart = oSettings._iDisplayStart;

      if ( sAction == "first" )
      {
        oSettings._iDisplayStart = 0;
      }
      else if ( sAction == "previous" )
      {
        oSettings._iDisplayStart = oSettings._iDisplayLength>=0 ?
          oSettings._iDisplayStart - oSettings._iDisplayLength :
          0;

        /* Correct for underrun */
        if ( oSettings._iDisplayStart < 0 )
        {
          oSettings._iDisplayStart = 0;
        }
      }
      else if ( sAction == "next" )
      {
        if ( oSettings._iDisplayLength >= 0 )
        {
          /* Make sure we are not over running the display array */
          if ( oSettings._iDisplayStart + oSettings._iDisplayLength < oSettings.fnRecordsDisplay() )
          {
            oSettings._iDisplayStart += oSettings._iDisplayLength;
          }
        }
        else
        {
          oSettings._iDisplayStart = 0;
        }
      }
      else if ( sAction == "last" )
      {
        if ( oSettings._iDisplayLength >= 0 )
        {
          var iPages = parseInt( (oSettings.fnRecordsDisplay()-1) / oSettings._iDisplayLength, 10 ) + 1;
          oSettings._iDisplayStart = (iPages-1) * oSettings._iDisplayLength;
        }
        else
        {
          oSettings._iDisplayStart = 0;
        }
      }
      else
      {
        _fnLog( oSettings, 0, "Unknown paging action: "+sAction );
      }

      return iOldStart != oSettings._iDisplayStart;
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Feature: HTML info
     */

    /*
     * Function: _fnFeatureHtmlInfo
     * Purpose:  Generate the node required for the info display
     * Returns:  node
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnFeatureHtmlInfo ( oSettings )
    {
      var nInfo = document.createElement( 'div' );
      nInfo.className = oSettings.oClasses.sInfo;

      /* Actions that are to be taken once only for this feature */
      if ( typeof oSettings.aanFeatures.i == "undefined" )
      {
        /* Add draw callback */
        oSettings.aoDrawCallback.push( {
          "fn": _fnUpdateInfo,
          "sName": "information"
        } );

        /* Add id */
        if ( oSettings.sTableId !== '' )
        {
          nInfo.setAttribute( 'id', oSettings.sTableId+'_info' );
        }
      }

      return nInfo;
    }

    /*
     * Function: _fnUpdateInfo
     * Purpose:  Update the information elements in the display
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnUpdateInfo ( oSettings )
    {
      /* Show information about the table */
      if ( !oSettings.oFeatures.bInfo || oSettings.aanFeatures.i.length === 0 )
      {
        return;
      }

      var
        iStart = oSettings._iDisplayStart+1, iEnd = oSettings.fnDisplayEnd(),
        iMax = oSettings.fnRecordsTotal(), iTotal = oSettings.fnRecordsDisplay(),
        sStart = oSettings.fnFormatNumber( iStart ), sEnd = oSettings.fnFormatNumber( iEnd ),
        sMax = oSettings.fnFormatNumber( iMax ), sTotal = oSettings.fnFormatNumber( iTotal ),
        sOut;

      /* When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
       * internally
       */
      if ( oSettings.oScroll.bInfinite )
      {
        sStart = oSettings.fnFormatNumber( 1 );
      }

      if ( oSettings.fnRecordsDisplay() === 0 &&
        oSettings.fnRecordsDisplay() == oSettings.fnRecordsTotal() )
      {
        /* Empty record set */
        sOut = oSettings.oLanguage.sInfoEmpty+ oSettings.oLanguage.sInfoPostFix;
      }
      else if ( oSettings.fnRecordsDisplay() === 0 )
      {
        /* Rmpty record set after filtering */
        sOut = oSettings.oLanguage.sInfoEmpty +' '+
          oSettings.oLanguage.sInfoFiltered.replace('_MAX_', sMax)+
          oSettings.oLanguage.sInfoPostFix;
      }
      else if ( oSettings.fnRecordsDisplay() == oSettings.fnRecordsTotal() )
      {
        /* Normal record set */
        sOut = oSettings.oLanguage.sInfo.
          replace('_START_', sStart).
          replace('_END_',   sEnd).
          replace('_TOTAL_', sTotal)+
          oSettings.oLanguage.sInfoPostFix;
      }
      else
      {
        /* Record set after filtering */
        sOut = oSettings.oLanguage.sInfo.
          replace('_START_', sStart).
          replace('_END_',   sEnd).
          replace('_TOTAL_', sTotal) +' '+
          oSettings.oLanguage.sInfoFiltered.replace('_MAX_',
            oSettings.fnFormatNumber(oSettings.fnRecordsTotal()))+
          oSettings.oLanguage.sInfoPostFix;
      }

      if ( oSettings.oLanguage.fnInfoCallback !== null )
      {
        sOut = oSettings.oLanguage.fnInfoCallback( oSettings, iStart, iEnd, iMax, iTotal, sOut );
      }

      var n = oSettings.aanFeatures.i;
      for ( var i=0, iLen=n.length ; i<iLen ; i++ )
      {
        $(n[i]).html( sOut );
      }
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Feature: Length change
     */

    /*
     * Function: _fnFeatureHtmlLength
     * Purpose:  Generate the node required for user display length changing
     * Returns:  node
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnFeatureHtmlLength ( oSettings )
    {
      if ( oSettings.oScroll.bInfinite )
      {
        return null;
      }

      /* This can be overruled by not using the _MENU_ var/macro in the language variable */
      var sName = (oSettings.sTableId === "") ? "" : 'name="'+oSettings.sTableId+'_length"';
      var sStdMenu = '<select size="1" '+sName+'>';
      var i, iLen;

      if ( oSettings.aLengthMenu.length == 2 && typeof oSettings.aLengthMenu[0] == 'object' &&
        typeof oSettings.aLengthMenu[1] == 'object' )
      {
        for ( i=0, iLen=oSettings.aLengthMenu[0].length ; i<iLen ; i++ )
        {
          sStdMenu += '<option value="'+oSettings.aLengthMenu[0][i]+'">'+
            oSettings.aLengthMenu[1][i]+'</option>';
        }
      }
      else
      {
        for ( i=0, iLen=oSettings.aLengthMenu.length ; i<iLen ; i++ )
        {
          sStdMenu += '<option value="'+oSettings.aLengthMenu[i]+'">'+
            oSettings.aLengthMenu[i]+'</option>';
        }
      }
      sStdMenu += '</select>';

      var nLength = document.createElement( 'div' );
      if ( oSettings.sTableId !== '' && typeof oSettings.aanFeatures.l == "undefined" )
      {
        nLength.setAttribute( 'id', oSettings.sTableId+'_length' );
      }
      nLength.className = oSettings.oClasses.sLength;
      nLength.innerHTML = oSettings.oLanguage.sLengthMenu.replace( '_MENU_', sStdMenu );

      /*
       * Set the length to the current display length - thanks to Andrea Pavlovic for this fix,
       * and Stefan Skopnik for fixing the fix!
       */
      $('select option[value="'+oSettings._iDisplayLength+'"]',nLength).prop("selected",true);

      $('select', nLength).bind( 'change.DT', function(e) {
        var iVal = $(this).val();

        /* Update all other length options for the new display */
        var n = oSettings.aanFeatures.l;
        for ( i=0, iLen=n.length ; i<iLen ; i++ )
        {
          if ( n[i] != this.parentNode )
          {
            $('select', n[i]).val( iVal );
          }
        }

        /* Redraw the table */
        oSettings._iDisplayLength = parseInt(iVal, 10);
        _fnCalculateEnd( oSettings );

        /* If we have space to show extra rows (backing up from the end point - then do so */
        if ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() )
        {
          oSettings._iDisplayStart = oSettings.fnDisplayEnd() - oSettings._iDisplayLength;
          if ( oSettings._iDisplayStart < 0 )
          {
            oSettings._iDisplayStart = 0;
          }
        }

        if ( oSettings._iDisplayLength == -1 )
        {
          oSettings._iDisplayStart = 0;
        }

        _fnDraw( oSettings );
      } );

      return nLength;
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Feature: Processing incidator
     */

    /*
     * Function: _fnFeatureHtmlProcessing
     * Purpose:  Generate the node required for the processing node
     * Returns:  node
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnFeatureHtmlProcessing ( oSettings )
    {
      var nProcessing = document.createElement( 'div' );

      if ( oSettings.sTableId !== '' && typeof oSettings.aanFeatures.r == "undefined" )
      {
        nProcessing.setAttribute( 'id', oSettings.sTableId+'_processing' );
      }
      nProcessing.innerHTML = oSettings.oLanguage.sProcessing;
      nProcessing.className = oSettings.oClasses.sProcessing;
      oSettings.nTable.parentNode.insertBefore( nProcessing, oSettings.nTable );

      return nProcessing;
    }

    /*
     * Function: _fnProcessingDisplay
     * Purpose:  Display or hide the processing indicator
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           bool:
     *   true - show the processing indicator
     *   false - don't show
     */
    function _fnProcessingDisplay ( oSettings, bShow )
    {
      if ( oSettings.oFeatures.bProcessing )
      {
        var an = oSettings.aanFeatures.r;
        for ( var i=0, iLen=an.length ; i<iLen ; i++ )
        {
          an[i].style.visibility = bShow ? "visible" : "hidden";
        }
      }
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Support functions
     */

    /*
     * Function: _fnVisibleToColumnIndex
     * Purpose:  Covert the index of a visible column to the index in the data array (take account
     *   of hidden columns)
     * Returns:  int:i - the data index
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnVisibleToColumnIndex( oSettings, iMatch )
    {
      var iColumn = -1;

      for ( var i=0 ; i<oSettings.aoColumns.length ; i++ )
      {
        if ( oSettings.aoColumns[i].bVisible === true )
        {
          iColumn++;
        }

        if ( iColumn == iMatch )
        {
          return i;
        }
      }

      return null;
    }

    /*
     * Function: _fnColumnIndexToVisible
     * Purpose:  Covert the index of an index in the data array and convert it to the visible
     *   column index (take account of hidden columns)
     * Returns:  int:i - the data index
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnColumnIndexToVisible( oSettings, iMatch )
    {
      var iVisible = -1;
      for ( var i=0 ; i<oSettings.aoColumns.length ; i++ )
      {
        if ( oSettings.aoColumns[i].bVisible === true )
        {
          iVisible++;
        }

        if ( i == iMatch )
        {
          return oSettings.aoColumns[i].bVisible === true ? iVisible : null;
        }
      }

      return null;
    }


    /*
     * Function: _fnNodeToDataIndex
     * Purpose:  Take a TR element and convert it to an index in aoData
     * Returns:  int:i - index if found, null if not
     * Inputs:   object:s - dataTables settings object
     *           node:n - the TR element to find
     */
    function _fnNodeToDataIndex( s, n )
    {
      var i, iLen;

      /* Optimisation - see if the nodes which are currently visible match, since that is
       * the most likely node to be asked for (a selector or event for example)
       */
      for ( i=s._iDisplayStart, iLen=s._iDisplayEnd ; i<iLen ; i++ )
      {
        if ( s.aoData[ s.aiDisplay[i] ].nTr == n )
        {
          return s.aiDisplay[i];
        }
      }

      /* Otherwise we are in for a slog through the whole data cache */
      for ( i=0, iLen=s.aoData.length ; i<iLen ; i++ )
      {
        if ( s.aoData[i].nTr == n )
        {
          return i;
        }
      }
      return null;
    }

    /*
     * Function: _fnVisbleColumns
     * Purpose:  Get the number of visible columns
     * Returns:  int:i - the number of visible columns
     * Inputs:   object:oS - dataTables settings object
     */
    function _fnVisbleColumns( oS )
    {
      var iVis = 0;
      for ( var i=0 ; i<oS.aoColumns.length ; i++ )
      {
        if ( oS.aoColumns[i].bVisible === true )
        {
          iVis++;
        }
      }
      return iVis;
    }

    /*
     * Function: _fnCalculateEnd
     * Purpose:  Rcalculate the end point based on the start point
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnCalculateEnd( oSettings )
    {
      if ( oSettings.oFeatures.bPaginate === false )
      {
        oSettings._iDisplayEnd = oSettings.aiDisplay.length;
      }
      else
      {
        /* Set the end point of the display - based on how many elements there are
         * still to display
         */
        if ( oSettings._iDisplayStart + oSettings._iDisplayLength > oSettings.aiDisplay.length ||
          oSettings._iDisplayLength == -1 )
        {
          oSettings._iDisplayEnd = oSettings.aiDisplay.length;
        }
        else
        {
          oSettings._iDisplayEnd = oSettings._iDisplayStart + oSettings._iDisplayLength;
        }
      }
    }

    /*
     * Function: _fnConvertToWidth
     * Purpose:  Convert a CSS unit width to pixels (e.g. 2em)
     * Returns:  int:iWidth - width in pixels
     * Inputs:   string:sWidth - width to be converted
     *           node:nParent - parent to get the with for (required for
     *             relative widths) - optional
     */
    function _fnConvertToWidth ( sWidth, nParent )
    {
      if ( !sWidth || sWidth === null || sWidth === '' )
      {
        return 0;
      }

      if ( typeof nParent == "undefined" )
      {
        nParent = document.getElementsByTagName('body')[0];
      }

      var iWidth;
      var nTmp = document.createElement( "div" );
      nTmp.style.width = _fnStringToCss( sWidth );

      nParent.appendChild( nTmp );
      iWidth = nTmp.offsetWidth;
      nParent.removeChild( nTmp );

      return ( iWidth );
    }

    /*
     * Function: _fnCalculateColumnWidths
     * Purpose:  Calculate the width of columns for the table
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnCalculateColumnWidths ( oSettings )
    {
      var iTableWidth = oSettings.nTable.offsetWidth;
      var iUserInputs = 0;
      var iTmpWidth;
      var iVisibleColumns = 0;
      var iColums = oSettings.aoColumns.length;
      var i, iIndex, iCorrector, iWidth;
      var oHeaders = $('th', oSettings.nTHead);

      /* Convert any user input sizes into pixel sizes */
      for ( i=0 ; i<iColums ; i++ )
      {
        if ( oSettings.aoColumns[i].bVisible )
        {
          iVisibleColumns++;

          if ( oSettings.aoColumns[i].sWidth !== null )
          {
            iTmpWidth = _fnConvertToWidth( oSettings.aoColumns[i].sWidthOrig,
              oSettings.nTable.parentNode );
            if ( iTmpWidth !== null )
            {
              oSettings.aoColumns[i].sWidth = _fnStringToCss( iTmpWidth );
            }

            iUserInputs++;
          }
        }
      }

      /* If the number of columns in the DOM equals the number that we have to process in
       * DataTables, then we can use the offsets that are created by the web-browser. No custom
       * sizes can be set in order for this to happen, nor scrolling used
       */
      if ( iColums == oHeaders.length && iUserInputs === 0 && iVisibleColumns == iColums &&
        oSettings.oScroll.sX === "" && oSettings.oScroll.sY === "" )
      {
        for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
        {
          iTmpWidth = $(oHeaders[i]).width();
          if ( iTmpWidth !== null )
          {
            oSettings.aoColumns[i].sWidth = _fnStringToCss( iTmpWidth );
          }
        }
      }
      else
      {
        /* Otherwise we are going to have to do some calculations to get the width of each column.
         * Construct a 1 row table with the widest node in the data, and any user defined widths,
         * then insert it into the DOM and allow the browser to do all the hard work of
         * calculating table widths.
         */
        var
          nCalcTmp = oSettings.nTable.cloneNode( false ),
          nTheadClone = oSettings.nTHead.cloneNode(true),
          nBody = document.createElement( 'tbody' ),
          nTr = document.createElement( 'tr' ),
          nDivSizing;

        nCalcTmp.removeAttribute( "id" );
        nCalcTmp.appendChild( nTheadClone );
        if ( oSettings.nTFoot !== null )
        {
          nCalcTmp.appendChild( oSettings.nTFoot.cloneNode(true) );
          _fnApplyToChildren( function(n) {
            n.style.width = "";
          }, nCalcTmp.getElementsByTagName('tr') );
        }

        nCalcTmp.appendChild( nBody );
        nBody.appendChild( nTr );

        /* Remove any sizing that was previously applied by the styles */
        var jqColSizing = $('thead th', nCalcTmp);
        if ( jqColSizing.length === 0 )
        {
          jqColSizing = $('tbody tr:eq(0)>td', nCalcTmp);
        }

        /* Apply custom sizing to the cloned header */
        var nThs = _fnGetUniqueThs( oSettings, nTheadClone );
        iCorrector = 0;
        for ( i=0 ; i<iColums ; i++ )
        {
          var oColumn = oSettings.aoColumns[i];
          if ( oColumn.bVisible && oColumn.sWidthOrig !== null && oColumn.sWidthOrig !== "" )
          {
            nThs[i-iCorrector].style.width = _fnStringToCss( oColumn.sWidthOrig );
          }
          else if ( oColumn.bVisible )
          {
            nThs[i-iCorrector].style.width = "";
          }
          else
          {
            iCorrector++;
          }
        }

        /* Find the biggest td for each column and put it into the table */
        for ( i=0 ; i<iColums ; i++ )
        {
          if ( oSettings.aoColumns[i].bVisible )
          {
            var nTd = _fnGetWidestNode( oSettings, i );
            if ( nTd !== null )
            {
              nTd = nTd.cloneNode(true);
              if ( oSettings.aoColumns[i].sContentPadding !== "" )
              {
                nTd.innerHTML += oSettings.aoColumns[i].sContentPadding;
              }
              nTr.appendChild( nTd );
            }
          }
        }

        /* Build the table and 'display' it */
        var nWrapper = oSettings.nTable.parentNode;
        nWrapper.appendChild( nCalcTmp );

        /* When scrolling (X or Y) we want to set the width of the table as appropriate. However,
         * when not scrolling leave the table width as it is. This results in slightly different,
         * but I think correct behaviour
         */
        if ( oSettings.oScroll.sX !== "" && oSettings.oScroll.sXInner !== "" )
        {
          nCalcTmp.style.width = _fnStringToCss(oSettings.oScroll.sXInner);
        }
        else if ( oSettings.oScroll.sX !== "" )
        {
          nCalcTmp.style.width = "";
          if ( $(nCalcTmp).width() < nWrapper.offsetWidth )
          {
            nCalcTmp.style.width = _fnStringToCss( nWrapper.offsetWidth );
          }
        }
        else if ( oSettings.oScroll.sY !== "" )
        {
          nCalcTmp.style.width = _fnStringToCss( nWrapper.offsetWidth );
        }
        nCalcTmp.style.visibility = "hidden";

        /* Scrolling considerations */
        _fnScrollingWidthAdjust( oSettings, nCalcTmp );

        /* Read the width's calculated by the browser and store them for use by the caller. We
         * first of all try to use the elements in the body, but it is possible that there are
         * no elements there, under which circumstances we use the header elements
         */
        var oNodes = $("tbody tr:eq(0)", nCalcTmp).children();
        if ( oNodes.length === 0 )
        {
          oNodes = _fnGetUniqueThs( oSettings, $('thead', nCalcTmp)[0] );
        }

        /* Browsers need a bit of a hand when a width is assigned to any columns when
         * x-scrolling as they tend to collapse the table to the min-width, even if
         * we sent the column widths. So we need to keep track of what the table width
         * should be by summing the user given values, and the automatic values
         */
        if ( oSettings.oScroll.sX !== "" )
        {
          var iTotal = 0;
          iCorrector = 0;
          for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
          {
            if ( oSettings.aoColumns[i].bVisible )
            {
              if ( oSettings.aoColumns[i].sWidthOrig === null )
              {
                iTotal += $(oNodes[iCorrector]).outerWidth();
              }
              else
              {
                iTotal += parseInt(oSettings.aoColumns[i].sWidth.replace('px',''), 10) +
                  ($(oNodes[iCorrector]).outerWidth() - $(oNodes[iCorrector]).width());
              }
              iCorrector++;
            }
          }

          nCalcTmp.style.width = _fnStringToCss( iTotal );
          oSettings.nTable.style.width = _fnStringToCss( iTotal );
        }

        iCorrector = 0;
        for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
        {
          if ( oSettings.aoColumns[i].bVisible )
          {
            iWidth = $(oNodes[iCorrector]).width();
            if ( iWidth !== null && iWidth > 0 )
            {
              oSettings.aoColumns[i].sWidth = _fnStringToCss( iWidth );
            }
            iCorrector++;
          }
        }

        oSettings.nTable.style.width = _fnStringToCss( $(nCalcTmp).outerWidth() );
        nCalcTmp.parentNode.removeChild( nCalcTmp );
      }
    }

    /*
     * Function: _fnScrollingWidthAdjust
     * Purpose:  Adjust a table's width to take account of scrolling
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           node:n - table node
     */
    function _fnScrollingWidthAdjust ( oSettings, n )
    {
      if ( oSettings.oScroll.sX === "" && oSettings.oScroll.sY !== "" )
      {
        /* When y-scrolling only, we want to remove the width of the scroll bar so the table
         * + scroll bar will fit into the area avaialble.
         */
        var iOrigWidth = $(n).width();
        n.style.width = _fnStringToCss( $(n).outerWidth()-oSettings.oScroll.iBarWidth );
      }
      else if ( oSettings.oScroll.sX !== "" )
      {
        /* When x-scrolling both ways, fix the table at it's current size, without adjusting */
        n.style.width = _fnStringToCss( $(n).outerWidth() );
      }
    }

    /*
     * Function: _fnGetWidestNode
     * Purpose:  Get the widest node
     * Returns:  string: - max strlens for each column
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iCol - column of interest
     */
    function _fnGetWidestNode( oSettings, iCol )
    {
      var iMaxIndex = _fnGetMaxLenString( oSettings, iCol );
      if ( iMaxIndex < 0 )
      {
        return null;
      }

      if ( oSettings.aoData[iMaxIndex].nTr === null )
      {
        var n = document.createElement('td');
        n.innerHTML = _fnGetCellData( oSettings, iMaxIndex, iCol, '' );
        return n;
      }
      return _fnGetTdNodes(oSettings, iMaxIndex)[iCol];
    }

    /*
     * Function: _fnGetMaxLenString
     * Purpose:  Get the maximum strlen for each data column
     * Returns:  string: - max strlens for each column
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iCol - column of interest
     */
    function _fnGetMaxLenString( oSettings, iCol )
    {
      var iMax = -1;
      var iMaxIndex = -1;

      for ( var i=0 ; i<oSettings.aoData.length ; i++ )
      {
        var s = _fnGetCellData( oSettings, i, iCol, 'display' )+"";
        s = s.replace( /<.*?>/g, "" );
        if ( s.length > iMax )
        {
          iMax = s.length;
          iMaxIndex = i;
        }
      }

      return iMaxIndex;
    }

    /*
     * Function: _fnStringToCss
     * Purpose:  Append a CSS unit (only if required) to a string
     * Returns:  0 if match, 1 if length is different, 2 if no match
     * Inputs:   array:aArray1 - first array
     *           array:aArray2 - second array
     */
    function _fnStringToCss( s )
    {
      if ( s === null )
      {
        return "0px";
      }

      if ( typeof s == 'number' )
      {
        if ( s < 0 )
        {
          return "0px";
        }
        return s+"px";
      }

      /* Check if the last character is not 0-9 */
      var c = s.charCodeAt( s.length-1 );
      if (c < 0x30 || c > 0x39)
      {
        return s;
      }
      return s+"px";
    }

    /*
     * Function: _fnArrayCmp
     * Purpose:  Compare two arrays
     * Returns:  0 if match, 1 if length is different, 2 if no match
     * Inputs:   array:aArray1 - first array
     *           array:aArray2 - second array
     */
    function _fnArrayCmp( aArray1, aArray2 )
    {
      if ( aArray1.length != aArray2.length )
      {
        return 1;
      }

      for ( var i=0 ; i<aArray1.length ; i++ )
      {
        if ( aArray1[i] != aArray2[i] )
        {
          return 2;
        }
      }

      return 0;
    }

    /*
     * Function: _fnDetectType
     * Purpose:  Get the sort type based on an input string
     * Returns:  string: - type (defaults to 'string' if no type can be detected)
     * Inputs:   string:sData - data we wish to know the type of
     * Notes:    This function makes use of the DataTables plugin objct _oExt
     *   (.aTypes) such that new types can easily be added.
     */
    function _fnDetectType( sData )
    {
      var aTypes = _oExt.aTypes;
      var iLen = aTypes.length;

      for ( var i=0 ; i<iLen ; i++ )
      {
        var sType = aTypes[i]( sData );
        if ( sType !== null )
        {
          return sType;
        }
      }

      return 'string';
    }

    /*
     * Function: _fnSettingsFromNode
     * Purpose:  Return the settings object for a particular table
     * Returns:  object: Settings object - or null if not found
     * Inputs:   node:nTable - table we are using as a dataTable
     */
    function _fnSettingsFromNode ( nTable )
    {
      for ( var i=0 ; i<_aoSettings.length ; i++ )
      {
        if ( _aoSettings[i].nTable == nTable )
        {
          return _aoSettings[i];
        }
      }

      return null;
    }

    /*
     * Function: _fnGetDataMaster
     * Purpose:  Return an array with the full table data
     * Returns:  array array:aData - Master data array
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnGetDataMaster ( oSettings )
    {
      var aData = [];
      var iLen = oSettings.aoData.length;
      for ( var i=0 ; i<iLen; i++ )
      {
        aData.push( oSettings.aoData[i]._aData );
      }
      return aData;
    }

    /*
     * Function: _fnGetTrNodes
     * Purpose:  Return an array with the TR nodes for the table
     * Returns:  array: - TR array
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnGetTrNodes ( oSettings )
    {
      var aNodes = [];
      for ( var i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
      {
        if ( oSettings.aoData[i].nTr !== null )
        {
          aNodes.push( oSettings.aoData[i].nTr );
        }
      }
      return aNodes;
    }

    /*
     * Function: _fnGetTdNodes
     * Purpose:  Return an flat array with all TD nodes for the table, or row
     * Returns:  array: - TD array
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iIndividualRow - aoData index to get the nodes for - optional if not
     *             given then the return array will contain all nodes for the table
     */
    function _fnGetTdNodes ( oSettings, iIndividualRow )
    {
      var anReturn = [];
      var iCorrector;
      var anTds;
      var iRow, iRows=oSettings.aoData.length,
        iColumn, iColumns, oData, sNodeName, iStart=0, iEnd=iRows;

      /* Allow the collection to be limited to just one row */
      if ( typeof iIndividualRow != 'undefined' )
      {
        iStart = iIndividualRow;
        iEnd = iIndividualRow+1;
      }

      for ( iRow=iStart ; iRow<iEnd ; iRow++ )
      {
        oData = oSettings.aoData[iRow];
        if ( oData.nTr !== null )
        {
          /* get the TD child nodes - taking into account text etc nodes */
          anTds = [];
          for ( iColumn=0, iColumns=oData.nTr.childNodes.length ; iColumn<iColumns ; iColumn++ )
          {
            sNodeName = oData.nTr.childNodes[iColumn].nodeName.toLowerCase();
            if ( sNodeName == 'td' || sNodeName == 'th' )
            {
              anTds.push( oData.nTr.childNodes[iColumn] );
            }
          }

          iCorrector = 0;
          for ( iColumn=0, iColumns=oSettings.aoColumns.length ; iColumn<iColumns ; iColumn++ )
          {
            if ( oSettings.aoColumns[iColumn].bVisible )
            {
              anReturn.push( anTds[iColumn-iCorrector] );
            }
            else
            {
              anReturn.push( oData._anHidden[iColumn] );
              iCorrector++;
            }
          }
        }
      }

      return anReturn;
    }

    /*
     * Function: _fnEscapeRegex
     * Purpose:  scape a string stuch that it can be used in a regular expression
     * Returns:  string: - escaped string
     * Inputs:   string:sVal - string to escape
     */
    function _fnEscapeRegex ( sVal )
    {
      var acEscape = [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^' ];
      var reReplace = new RegExp( '(\\' + acEscape.join('|\\') + ')', 'g' );
      return sVal.replace(reReplace, '\\$1');
    }

    /*
     * Function: _fnDeleteIndex
     * Purpose:  Take an array of integers (index array) and remove a target integer (value - not
     *             the key!)
     * Returns:  -
     * Inputs:   a:array int - Index array to target
     *           int:iTarget - value to find
     */
    function _fnDeleteIndex( a, iTarget )
    {
      var iTargetIndex = -1;

      for ( var i=0, iLen=a.length ; i<iLen ; i++ )
      {
        if ( a[i] == iTarget )
        {
          iTargetIndex = i;
        }
        else if ( a[i] > iTarget )
        {
          a[i]--;
        }
      }

      if ( iTargetIndex != -1 )
      {
        a.splice( iTargetIndex, 1 );
      }
    }

    /*
     * Function: _fnReOrderIndex
     * Purpose:  Figure out how to reorder a display list
     * Returns:  array int:aiReturn - index list for reordering
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnReOrderIndex ( oSettings, sColumns )
    {
      var aColumns = sColumns.split(',');
      var aiReturn = [];

      for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
      {
        for ( var j=0 ; j<iLen ; j++ )
        {
          if ( oSettings.aoColumns[i].sName == aColumns[j] )
          {
            aiReturn.push( j );
            break;
          }
        }
      }

      return aiReturn;
    }

    /*
     * Function: _fnColumnOrdering
     * Purpose:  Get the column ordering that DataTables expects
     * Returns:  string: - comma separated list of names
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnColumnOrdering ( oSettings )
    {
      var sNames = '';
      for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
      {
        sNames += oSettings.aoColumns[i].sName+',';
      }
      if ( sNames.length == iLen )
      {
        return "";
      }
      return sNames.slice(0, -1);
    }

    /*
     * Function: _fnLog
     * Purpose:  Log an error message
     * Returns:  -
     * Inputs:   int:iLevel - log error messages, or display them to the user
     *           string:sMesg - error message
     */
    function _fnLog( oSettings, iLevel, sMesg )
    {
      var sAlert = oSettings.sTableId === "" ?
        "DataTables warning: " +sMesg :
        "DataTables warning (table id = '"+oSettings.sTableId+"'): " +sMesg;

      if ( iLevel === 0 )
      {
        if ( _oExt.sErrMode == 'alert' )
        {
          alert( sAlert );
        }
        else
        {
          throw sAlert;
        }
        return;
      }
      else if ( typeof console != 'undefined' && typeof console.log != 'undefined' )
      {
        console.log( sAlert );
      }
    }

    /*
     * Function: _fnClearTable
     * Purpose:  Nuke the table
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnClearTable( oSettings )
    {
      oSettings.aoData.splice( 0, oSettings.aoData.length );
      oSettings.aiDisplayMaster.splice( 0, oSettings.aiDisplayMaster.length );
      oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length );
      _fnCalculateEnd( oSettings );
    }

    /*
     * Function: _fnSaveState
     * Purpose:  Save the state of a table in a cookie such that the page can be reloaded
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     */
    function _fnSaveState ( oSettings )
    {
      if ( !oSettings.oFeatures.bStateSave || typeof oSettings.bDestroying != 'undefined' )
      {
        return;
      }

      /* Store the interesting variables */
      var i, iLen, sTmp;
      var sValue = "{";
      sValue += '"iCreate":'+ new Date().getTime()+',';
      sValue += '"iStart":'+ (oSettings.oScroll.bInfinite ? 0 : oSettings._iDisplayStart)+',';
      sValue += '"iEnd":'+ (oSettings.oScroll.bInfinite ? oSettings._iDisplayLength : oSettings._iDisplayEnd)+',';
      sValue += '"iLength":'+ oSettings._iDisplayLength+',';
      sValue += '"sFilter":"'+ encodeURIComponent(oSettings.oPreviousSearch.sSearch)+'",';
      sValue += '"sFilterEsc":'+ !oSettings.oPreviousSearch.bRegex+',';

      sValue += '"aaSorting":[ ';
      for ( i=0 ; i<oSettings.aaSorting.length ; i++ )
      {
        sValue += '['+oSettings.aaSorting[i][0]+',"'+oSettings.aaSorting[i][1]+'"],';
      }
      sValue = sValue.substring(0, sValue.length-1);
      sValue += "],";

      sValue += '"aaSearchCols":[ ';
      for ( i=0 ; i<oSettings.aoPreSearchCols.length ; i++ )
      {
        sValue += '["'+encodeURIComponent(oSettings.aoPreSearchCols[i].sSearch)+
          '",'+!oSettings.aoPreSearchCols[i].bRegex+'],';
      }
      sValue = sValue.substring(0, sValue.length-1);
      sValue += "],";

      sValue += '"abVisCols":[ ';
      for ( i=0 ; i<oSettings.aoColumns.length ; i++ )
      {
        sValue += oSettings.aoColumns[i].bVisible+",";
      }
      sValue = sValue.substring(0, sValue.length-1);
      sValue += "]";

      /* Save state from any plug-ins */
      for ( i=0, iLen=oSettings.aoStateSave.length ; i<iLen ; i++ )
      {
        sTmp = oSettings.aoStateSave[i].fn( oSettings, sValue );
        if ( sTmp !== "" )
        {
          sValue = sTmp;
        }
      }

      sValue += "}";

      _fnCreateCookie( oSettings.sCookiePrefix+oSettings.sInstance, sValue,
        oSettings.iCookieDuration, oSettings.sCookiePrefix, oSettings.fnCookieCallback );
    }

    /*
     * Function: _fnLoadState
     * Purpose:  Attempt to load a saved table state from a cookie
     * Returns:  -
     * Inputs:   object:oSettings - dataTables settings object
     *           object:oInit - DataTables init object so we can override settings
     */
    function _fnLoadState ( oSettings, oInit )
    {
      if ( !oSettings.oFeatures.bStateSave )
      {
        return;
      }

      var oData, i, iLen;
      var sData = _fnReadCookie( oSettings.sCookiePrefix+oSettings.sInstance );
      if ( sData !== null && sData !== '' )
      {
        /* Try/catch the JSON eval - if it is bad then we ignore it - note that 1.7.0 and before
         * incorrectly used single quotes for some strings - hence the replace below
         */
        try
        {
          oData = (typeof $.parseJSON == 'function') ?
            $.parseJSON( sData.replace(/'/g, '"') ) : eval( '('+sData+')' );
        }
        catch( e )
        {
          return;
        }

        /* Allow custom and plug-in manipulation functions to alter the data set which was
         * saved, and also reject any saved state by returning false
         */
        for ( i=0, iLen=oSettings.aoStateLoad.length ; i<iLen ; i++ )
        {
          if ( !oSettings.aoStateLoad[i].fn( oSettings, oData ) )
          {
            return;
          }
        }

        /* Store the saved state so it might be accessed at any time (particualrly a plug-in */
        oSettings.oLoadedState = $.extend( true, {}, oData );

        /* Restore key features */
        oSettings._iDisplayStart = oData.iStart;
        oSettings.iInitDisplayStart = oData.iStart;
        oSettings._iDisplayEnd = oData.iEnd;
        oSettings._iDisplayLength = oData.iLength;
        oSettings.oPreviousSearch.sSearch = decodeURIComponent(oData.sFilter);
        oSettings.aaSorting = oData.aaSorting.slice();
        oSettings.saved_aaSorting = oData.aaSorting.slice();

        /*
         * Search filtering - global reference added in 1.4.1
         * Note that we use a 'not' for the value of the regular expression indicator to maintain
         * compatibility with pre 1.7 versions, where this was basically inverted. Added in 1.7.0
         */
        if ( typeof oData.sFilterEsc != 'undefined' )
        {
          oSettings.oPreviousSearch.bRegex = !oData.sFilterEsc;
        }

        /* Column filtering - added in 1.5.0 beta 6 */
        if ( typeof oData.aaSearchCols != 'undefined' )
        {
          for ( i=0 ; i<oData.aaSearchCols.length ; i++ )
          {
            oSettings.aoPreSearchCols[i] = {
              "sSearch": decodeURIComponent(oData.aaSearchCols[i][0]),
              "bRegex": !oData.aaSearchCols[i][1]
            };
          }
        }

        /* Column visibility state - added in 1.5.0 beta 10 */
        if ( typeof oData.abVisCols != 'undefined' )
        {
          /* Pass back visibiliy settings to the init handler, but to do not here override
           * the init object that the user might have passed in
           */
          oInit.saved_aoColumns = [];
          for ( i=0 ; i<oData.abVisCols.length ; i++ )
          {
            oInit.saved_aoColumns[i] = {};
            oInit.saved_aoColumns[i].bVisible = oData.abVisCols[i];
          }
        }
      }
    }

    /*
     * Function: _fnCreateCookie
     * Purpose:  Create a new cookie with a value to store the state of a table
     * Returns:  -
     * Inputs:   string:sName - name of the cookie to create
     *           string:sValue - the value the cookie should take
     *           int:iSecs - duration of the cookie
     *           string:sBaseName - sName is made up of the base + file name - this is the base
     *           function:fnCallback - User definable function to modify the cookie
     */
    function _fnCreateCookie ( sName, sValue, iSecs, sBaseName, fnCallback )
    {
      var date = new Date();
      date.setTime( date.getTime()+(iSecs*1000) );

      /*
       * Shocking but true - it would appear IE has major issues with having the path not having
       * a trailing slash on it. We need the cookie to be available based on the path, so we
       * have to append the file name to the cookie name. Appalling. Thanks to vex for adding the
       * patch to use at least some of the path
       */
      var aParts = window.location.pathname.split('/');
      var sNameFile = sName + '_' + aParts.pop().replace(/[\/:]/g,"").toLowerCase();
      var sFullCookie, oData;

      if ( fnCallback !== null )
      {
        oData = (typeof $.parseJSON == 'function') ?
          $.parseJSON( sValue ) : eval( '('+sValue+')' );
        sFullCookie = fnCallback( sNameFile, oData, date.toGMTString(),
            aParts.join('/')+"/" );
      }
      else
      {
        sFullCookie = sNameFile + "=" + encodeURIComponent(sValue) +
          "; expires=" + date.toGMTString() +"; path=" + aParts.join('/')+"/";
      }

      /* Are we going to go over the cookie limit of 4KiB? If so, try to delete a cookies
       * belonging to DataTables. This is FAR from bullet proof
       */
      var sOldName="", iOldTime=9999999999999;
      var iLength = _fnReadCookie( sNameFile )!==null ? document.cookie.length :
        sFullCookie.length + document.cookie.length;

      if ( iLength+10 > 4096 ) /* Magic 10 for padding */
      {
        var aCookies =document.cookie.split(';');
        for ( var i=0, iLen=aCookies.length ; i<iLen ; i++ )
        {
          if ( aCookies[i].indexOf( sBaseName ) != -1 )
          {
            /* It's a DataTables cookie, so eval it and check the time stamp */
            var aSplitCookie = aCookies[i].split('=');
            try { oData = eval( '('+decodeURIComponent(aSplitCookie[1])+')' ); }
            catch( e ) { continue; }

            if ( typeof oData.iCreate != 'undefined' && oData.iCreate < iOldTime )
            {
              sOldName = aSplitCookie[0];
              iOldTime = oData.iCreate;
            }
          }
        }

        if ( sOldName !== "" )
        {
          document.cookie = sOldName+"=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path="+
            aParts.join('/') + "/";
        }
      }

      document.cookie = sFullCookie;
    }

    /*
     * Function: _fnReadCookie
     * Purpose:  Read an old cookie to get a cookie with an old table state
     * Returns:  string: - contents of the cookie - or null if no cookie with that name found
     * Inputs:   string:sName - name of the cookie to read
     */
    function _fnReadCookie ( sName )
    {
      var
        aParts = window.location.pathname.split('/'),
        sNameEQ = sName + '_' + aParts[aParts.length-1].replace(/[\/:]/g,"").toLowerCase() + '=',
        sCookieContents = document.cookie.split(';');

      for( var i=0 ; i<sCookieContents.length ; i++ )
      {
        var c = sCookieContents[i];

        while (c.charAt(0)==' ')
        {
          c = c.substring(1,c.length);
        }

        if (c.indexOf(sNameEQ) === 0)
        {
          return decodeURIComponent( c.substring(sNameEQ.length,c.length) );
        }
      }
      return null;
    }

    /*
     * Function: _fnDetectHeader
     * Purpose:  Use the DOM source to create up an array of header cells. The idea here is to
     *           create a layout grid (array) of rows x columns, which contains a reference
     *           to the cell that that point in the grid (regardless of col/rowspan), such that
     *           any column / row could be removed and the new grid constructed
     * Returns:  void
     * Outputs:  array object:aLayout - Array to store the calculated layout in
     * Inputs:   node:nThead - The header/footer element for the table
     */
    function _fnDetectHeader ( aLayout, nThead )
    {
      var nTrs = nThead.getElementsByTagName('tr');
      var nCell;
      var i, j, k, l, iLen, jLen, iColShifted;
      var fnShiftCol = function ( a, i, j ) {
        while ( typeof a[i][j] != 'undefined' ) {
          j++;
        }
        return j;
      };

      aLayout.splice( 0, aLayout.length );

      /* We know how many rows there are in the layout - so prep it */
      for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
      {
        aLayout.push( [] );
      }

      /* Calculate a layout array */
      for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
      {
        var iColumn = 0;

        /* For every cell in the row... */
        for ( j=0, jLen=nTrs[i].childNodes.length ; j<jLen ; j++ )
        {
          nCell = nTrs[i].childNodes[j];

          if ( nCell.nodeName.toUpperCase() == "TD" ||
            nCell.nodeName.toUpperCase() == "TH" )
          {
            /* Get the col and rowspan attributes from the DOM and sanitise them */
            var iColspan = nCell.getAttribute('colspan') * 1;
            var iRowspan = nCell.getAttribute('rowspan') * 1;
            iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
            iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;

            /* There might be colspan cells already in this row, so shift our target
             * accordingly
             */
            iColShifted = fnShiftCol( aLayout, i, iColumn );

            /* If there is col / rowspan, copy the information into the layout grid */
            for ( l=0 ; l<iColspan ; l++ )
            {
              for ( k=0 ; k<iRowspan ; k++ )
              {
                aLayout[i+k][iColShifted+l] = {
                  "cell": nCell,
                  "unique": iColspan == 1 ? true : false
                };
                aLayout[i+k].nTr = nTrs[i];
              }
            }
          }
        }
      }
    }

    /*
     * Function: _fnGetUniqueThs
     * Purpose:  Get an array of unique th elements, one for each column
     * Returns:  array node:aReturn - list of unique ths
     * Inputs:   object:oSettings - dataTables settings object
     *           node:nHeader - automatically detect the layout from this node - optional
     *           array object:aLayout - thead/tfoot layout from _fnDetectHeader - optional
     */
    function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
    {
      var aReturn = [];
      if ( typeof aLayout == 'undefined' )
      {
        aLayout = oSettings.aoHeader;
        if ( typeof nHeader != 'undefined' )
        {
          aLayout = [];
          _fnDetectHeader( aLayout, nHeader );
        }
      }

      for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
      {
        for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
        {
          if ( aLayout[i][j].unique &&
            (typeof aReturn[j] == 'undefined' || !oSettings.bSortCellsTop) )
          {
            aReturn[j] = aLayout[i][j].cell;
          }
        }
      }

      return aReturn;
    }

    /*
     * Function: _fnScrollBarWidth
     * Purpose:  Get the width of a scroll bar in this browser being used
     * Returns:  int: - width in pixels
     * Inputs:   -
     * Notes:    All credit for this function belongs to Alexandre Gomes. Thanks for sharing!
     *   http://www.alexandre-gomes.com/?p=115
     */
    function _fnScrollBarWidth ()
    {
      var inner = document.createElement('p');
      var style = inner.style;
      style.width = "100%";
      style.height = "200px";

      var outer = document.createElement('div');
      style = outer.style;
      style.position = "absolute";
      style.top = "0px";
      style.left = "0px";
      style.visibility = "hidden";
      style.width = "200px";
      style.height = "150px";
      style.overflow = "hidden";
      outer.appendChild(inner);

      document.body.appendChild(outer);
      var w1 = inner.offsetWidth;
      outer.style.overflow = 'scroll';
      var w2 = inner.offsetWidth;
      if ( w1 == w2 )
      {
        w2 = outer.clientWidth;
      }

      document.body.removeChild(outer);
      return (w1 - w2);
    }

    /*
     * Function: _fnApplyToChildren
     * Purpose:  Apply a given function to the display child nodes of an element array (typically
     *   TD children of TR rows
     * Returns:  - (done by reference)
     * Inputs:   function:fn - Method to apply to the objects
     *           array nodes:an1 - List of elements to look through for display children
     *           array nodes:an2 - Another list (identical structure to the first) - optional
     */
    function _fnApplyToChildren( fn, an1, an2 )
    {
      for ( var i=0, iLen=an1.length ; i<iLen ; i++ )
      {
        for ( var j=0, jLen=an1[i].childNodes.length ; j<jLen ; j++ )
        {
          if ( an1[i].childNodes[j].nodeType == 1 )
          {
            if ( typeof an2 != 'undefined' )
            {
              fn( an1[i].childNodes[j], an2[i].childNodes[j] );
            }
            else
            {
              fn( an1[i].childNodes[j] );
            }
          }
        }
      }
    }

    /*
     * Function: _fnMap
     * Purpose:  See if a property is defined on one object, if so assign it to the other object
     * Returns:  - (done by reference)
     * Inputs:   object:oRet - target object
     *           object:oSrc - source object
     *           string:sName - property
     *           string:sMappedName - name to map too - optional, sName used if not given
     */
    function _fnMap( oRet, oSrc, sName, sMappedName )
    {
      if ( typeof sMappedName == 'undefined' )
      {
        sMappedName = sName;
      }
      if ( typeof oSrc[sName] != 'undefined' )
      {
        oRet[sMappedName] = oSrc[sName];
      }
    }

    /*
     * Function: _fnGetRowData
     * Purpose:  Get an array of data for a given row from the internal data cache
     * Returns:  array: - Data array
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iRow - aoData row id
     *           string:sSpecific - data get type ('type' 'filter' 'sort')
     */
    function _fnGetRowData( oSettings, iRow, sSpecific )
    {
      var out = [];
      for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
      {
        out.push( _fnGetCellData( oSettings, iRow, i, sSpecific ) );
      }
      return out;
    }

    /*
     * Function: _fnGetCellData
     * Purpose:  Get the data for a given cell from the internal cache, taking into account data mapping
     * Returns:  *: - Cell data
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iRow - aoData row id
     *           int:iCol - Column index
     *           string:sSpecific - data get type ('display', 'type' 'filter' 'sort')
     */
    function _fnGetCellData( oSettings, iRow, iCol, sSpecific )
    {
      var sData;
      var oCol = oSettings.aoColumns[iCol];
      var oData = oSettings.aoData[iRow]._aData;

      if ( (sData=oCol.fnGetData( oData )) === undefined )
      {
        if ( oSettings.iDrawError != oSettings.iDraw && oCol.sDefaultContent === null )
        {
          _fnLog( oSettings, 0, "Requested unknown parameter '"+oCol.mDataProp+
            "' from the data source for row "+iRow );
          oSettings.iDrawError = oSettings.iDraw;
        }
        return oCol.sDefaultContent;
      }

      /* When the data source is null, we can use default column data */
      if ( sData === null && oCol.sDefaultContent !== null )
      {
        sData = oCol.sDefaultContent;
      }

      if ( sSpecific == 'display' && sData === null )
      {
        return '';
      }
      return sData;
    }

    /*
     * Function: _fnSetCellData
     * Purpose:  Set the value for a specific cell, into the internal data cache
     * Returns:  *: - Cell data
     * Inputs:   object:oSettings - dataTables settings object
     *           int:iRow - aoData row id
     *           int:iCol - Column index
     *           *:val - Value to set
     */
    function _fnSetCellData( oSettings, iRow, iCol, val )
    {
      var oCol = oSettings.aoColumns[iCol];
      var oData = oSettings.aoData[iRow]._aData;

      oCol.fnSetData( oData, val );
    }

    /*
     * Function: _fnGetObjectDataFn
     * Purpose:  Return a function that can be used to get data from a source object, taking
     *           into account the ability to use nested objects as a source
     * Returns:  function: - Data get function
     * Inputs:   string|int|function:mSource - The data source for the object
     */
    function _fnGetObjectDataFn( mSource )
    {
      if ( mSource === null )
      {
        /* Give an empty string for rendering / sorting etc */
        return function (data) {
          return null;
        };
      }
      else if ( typeof mSource == 'function' )
      {
        return function (data) {
          return mSource( data );
        };
      }
      else if ( typeof mSource == 'string' && mSource.indexOf('.') != -1 )
      {
        /* If there is a . in the source string then the data source is in a nested object
         * we provide two 'quick' functions for the look up to speed up the most common
         * operation, and a generalised one for when it is needed
         */
        var a = mSource.split('.');
        if ( a.length == 2 )
        {
          return function (data) {
            return data[ a[0] ][ a[1] ];
          };
        }
        else if ( a.length == 3 )
        {
          return function (data) {
            return data[ a[0] ][ a[1] ][ a[2] ];
          };
        }
        else
        {
          return function (data) {
            for ( var i=0, iLen=a.length ; i<iLen ; i++ )
            {
              data = data[ a[i] ];
            }
            return data;
          };
        }
      }
      else
      {
        /* Array or flat object mapping */
        return function (data) {
          return data[mSource];
        };
      }
    }

    /*
     * Function: _fnSetObjectDataFn
     * Purpose:  Return a function that can be used to set data from a source object, taking
     *           into account the ability to use nested objects as a source
     * Returns:  function: - Data set function
     * Inputs:   string|int|function:mSource - The data source for the object
     */
    function _fnSetObjectDataFn( mSource )
    {
      if ( mSource === null )
      {
        /* Nothing to do when the data source is null */
        return function (data, val) {};
      }
      else if ( typeof mSource == 'function' )
      {
        return function (data, val) {
          return mSource( data, val );
        };
      }
      else if ( typeof mSource == 'string' && mSource.indexOf('.') != -1 )
      {
        /* Like the get, we need to get data from a nested object. Again two fast lookup
         * functions are provided, and a generalised one.
         */
        var a = mSource.split('.');
        if ( a.length == 2 )
        {
          return function (data, val) {
            data[ a[0] ][ a[1] ] = val;
          };
        }
        else if ( a.length == 3 )
        {
          return function (data, val) {
            data[ a[0] ][ a[1] ][ a[2] ] = val;
          };
        }
        else
        {
          return function (data, val) {
            for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
            {
              data = data[ a[i] ];
            }
            data[ a[a.length-1] ] = val;
          };
        }
      }
      else
      {
        /* Array or flat object mapping */
        return function (data, val) {
          data[mSource] = val;
        };
      }
    }


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - API
     * I'm not happy with this solution... - To be fixed in 2.0
     */
    this.oApi._fnExternApiFunc = _fnExternApiFunc;
    this.oApi._fnInitalise = _fnInitalise;
    this.oApi._fnInitComplete = _fnInitComplete;
    this.oApi._fnLanguageProcess = _fnLanguageProcess;
    this.oApi._fnAddColumn = _fnAddColumn;
    this.oApi._fnColumnOptions = _fnColumnOptions;
    this.oApi._fnAddData = _fnAddData;
    this.oApi._fnCreateTr = _fnCreateTr;
    this.oApi._fnGatherData = _fnGatherData;
    this.oApi._fnBuildHead = _fnBuildHead;
    this.oApi._fnDrawHead = _fnDrawHead;
    this.oApi._fnDraw = _fnDraw;
    this.oApi._fnReDraw = _fnReDraw;
    this.oApi._fnAjaxUpdate = _fnAjaxUpdate;
    this.oApi._fnAjaxUpdateDraw = _fnAjaxUpdateDraw;
    this.oApi._fnAddOptionsHtml = _fnAddOptionsHtml;
    this.oApi._fnFeatureHtmlTable = _fnFeatureHtmlTable;
    this.oApi._fnScrollDraw = _fnScrollDraw;
    this.oApi._fnAjustColumnSizing = _fnAjustColumnSizing;
    this.oApi._fnFeatureHtmlFilter = _fnFeatureHtmlFilter;
    this.oApi._fnFilterComplete = _fnFilterComplete;
    this.oApi._fnFilterCustom = _fnFilterCustom;
    this.oApi._fnFilterColumn = _fnFilterColumn;
    this.oApi._fnFilter = _fnFilter;
    this.oApi._fnBuildSearchArray = _fnBuildSearchArray;
    this.oApi._fnBuildSearchRow = _fnBuildSearchRow;
    this.oApi._fnFilterCreateSearch = _fnFilterCreateSearch;
    this.oApi._fnDataToSearch = _fnDataToSearch;
    this.oApi._fnSort = _fnSort;
    this.oApi._fnSortAttachListener = _fnSortAttachListener;
    this.oApi._fnSortingClasses = _fnSortingClasses;
    this.oApi._fnFeatureHtmlPaginate = _fnFeatureHtmlPaginate;
    this.oApi._fnPageChange = _fnPageChange;
    this.oApi._fnFeatureHtmlInfo = _fnFeatureHtmlInfo;
    this.oApi._fnUpdateInfo = _fnUpdateInfo;
    this.oApi._fnFeatureHtmlLength = _fnFeatureHtmlLength;
    this.oApi._fnFeatureHtmlProcessing = _fnFeatureHtmlProcessing;
    this.oApi._fnProcessingDisplay = _fnProcessingDisplay;
    this.oApi._fnVisibleToColumnIndex = _fnVisibleToColumnIndex;
    this.oApi._fnColumnIndexToVisible = _fnColumnIndexToVisible;
    this.oApi._fnNodeToDataIndex = _fnNodeToDataIndex;
    this.oApi._fnVisbleColumns = _fnVisbleColumns;
    this.oApi._fnCalculateEnd = _fnCalculateEnd;
    this.oApi._fnConvertToWidth = _fnConvertToWidth;
    this.oApi._fnCalculateColumnWidths = _fnCalculateColumnWidths;
    this.oApi._fnScrollingWidthAdjust = _fnScrollingWidthAdjust;
    this.oApi._fnGetWidestNode = _fnGetWidestNode;
    this.oApi._fnGetMaxLenString = _fnGetMaxLenString;
    this.oApi._fnStringToCss = _fnStringToCss;
    this.oApi._fnArrayCmp = _fnArrayCmp;
    this.oApi._fnDetectType = _fnDetectType;
    this.oApi._fnSettingsFromNode = _fnSettingsFromNode;
    this.oApi._fnGetDataMaster = _fnGetDataMaster;
    this.oApi._fnGetTrNodes = _fnGetTrNodes;
    this.oApi._fnGetTdNodes = _fnGetTdNodes;
    this.oApi._fnEscapeRegex = _fnEscapeRegex;
    this.oApi._fnDeleteIndex = _fnDeleteIndex;
    this.oApi._fnReOrderIndex = _fnReOrderIndex;
    this.oApi._fnColumnOrdering = _fnColumnOrdering;
    this.oApi._fnLog = _fnLog;
    this.oApi._fnClearTable = _fnClearTable;
    this.oApi._fnSaveState = _fnSaveState;
    this.oApi._fnLoadState = _fnLoadState;
    this.oApi._fnCreateCookie = _fnCreateCookie;
    this.oApi._fnReadCookie = _fnReadCookie;
    this.oApi._fnDetectHeader = _fnDetectHeader;
    this.oApi._fnGetUniqueThs = _fnGetUniqueThs;
    this.oApi._fnScrollBarWidth = _fnScrollBarWidth;
    this.oApi._fnApplyToChildren = _fnApplyToChildren;
    this.oApi._fnMap = _fnMap;
    this.oApi._fnGetRowData = _fnGetRowData;
    this.oApi._fnGetCellData = _fnGetCellData;
    this.oApi._fnSetCellData = _fnSetCellData;
    this.oApi._fnGetObjectDataFn = _fnGetObjectDataFn;
    this.oApi._fnSetObjectDataFn = _fnSetObjectDataFn;


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Section - Constructor
     */

    /* Want to be able to reference "this" inside the this.each function */
    var _that = this;
    return this.each(function()
    {
      var i=0, iLen, j, jLen, k, kLen;

      /* Check to see if we are re-initalising a table */
      for ( i=0, iLen=_aoSettings.length ; i<iLen ; i++ )
      {
        /* Base check on table node */
        if ( _aoSettings[i].nTable == this )
        {
          if ( typeof oInit == 'undefined' ||
            ( typeof oInit.bRetrieve != 'undefined' && oInit.bRetrieve === true ) )
          {
            return _aoSettings[i].oInstance;
          }
          else if ( typeof oInit.bDestroy != 'undefined' && oInit.bDestroy === true )
          {
            _aoSettings[i].oInstance.fnDestroy();
            break;
          }
          else
          {
            _fnLog( _aoSettings[i], 0, "Cannot reinitialise DataTable.\n\n"+
              "To retrieve the DataTables object for this table, please pass either no arguments "+
              "to the dataTable() function, or set bRetrieve to true. Alternatively, to destory "+
              "the old table and create a new one, set bDestroy to true (note that a lot of "+
              "changes to the configuration can be made through the API which is usually much "+
              "faster)." );
            return;
          }
        }

        /* If the element we are initialising has the same ID as a table which was previously
         * initialised, but the table nodes don't match (from before) then we destory the old
         * instance by simply deleting it. This is under the assumption that the table has been
         * destroyed by other methods. Anyone using non-id selectors will need to do this manually
         */
        if ( _aoSettings[i].sTableId !== "" && _aoSettings[i].sTableId == this.getAttribute('id') )
        {
          _aoSettings.splice( i, 1 );
          break;
        }
      }

      /* Make a complete and independent copy of the settings object */
      var oSettings = new classSettings();
      _aoSettings.push( oSettings );

      var bInitHandedOff = false;
      var bUsePassedData = false;

      /* Set the id */
      var sId = this.getAttribute( 'id' );
      if ( sId !== null )
      {
        oSettings.sTableId = sId;
        oSettings.sInstance = sId;
      }
      else
      {
        oSettings.sInstance = _oExt._oExternConfig.iNextUnique ++;
      }

      /* Sanity check */
      if ( this.nodeName.toLowerCase() != 'table' )
      {
        _fnLog( oSettings, 0, "Attempted to initialise DataTables on a node which is not a "+
          "table: "+this.nodeName );
        return;
      }

      /* Set the table node */
      oSettings.nTable = this;

      /* Keep a reference to the 'this' instance for the table. Note that if this table is being
       * created with others, we retrieve a unique instance to ease API access.
       */
      oSettings.oInstance = _that.length == 1 ? _that : $(this).dataTable();

      /* Bind the API functions to the settings, so we can perform actions whenever oSettings is
       * available
       */
      oSettings.oApi = _that.oApi;

      /* State the table's width for if a destroy is called at a later time */
      oSettings.sDestroyWidth = $(this).width();

      /* Store the features that we have available */
      if ( typeof oInit != 'undefined' && oInit !== null )
      {
        oSettings.oInit = oInit;
        _fnMap( oSettings.oFeatures, oInit, "bPaginate" );
        _fnMap( oSettings.oFeatures, oInit, "bLengthChange" );
        _fnMap( oSettings.oFeatures, oInit, "bFilter" );
        _fnMap( oSettings.oFeatures, oInit, "bSort" );
        _fnMap( oSettings.oFeatures, oInit, "bInfo" );
        _fnMap( oSettings.oFeatures, oInit, "bProcessing" );
        _fnMap( oSettings.oFeatures, oInit, "bAutoWidth" );
        _fnMap( oSettings.oFeatures, oInit, "bSortClasses" );
        _fnMap( oSettings.oFeatures, oInit, "bServerSide" );
        _fnMap( oSettings.oFeatures, oInit, "bDeferRender" );
        _fnMap( oSettings.oScroll, oInit, "sScrollX", "sX" );
        _fnMap( oSettings.oScroll, oInit, "sScrollXInner", "sXInner" );
        _fnMap( oSettings.oScroll, oInit, "sScrollY", "sY" );
        _fnMap( oSettings.oScroll, oInit, "bScrollCollapse", "bCollapse" );
        _fnMap( oSettings.oScroll, oInit, "bScrollInfinite", "bInfinite" );
        _fnMap( oSettings.oScroll, oInit, "iScrollLoadGap", "iLoadGap" );
        _fnMap( oSettings.oScroll, oInit, "bScrollAutoCss", "bAutoCss" );
        _fnMap( oSettings, oInit, "asStripClasses" );
        _fnMap( oSettings, oInit, "fnPreDrawCallback" );
        _fnMap( oSettings, oInit, "fnRowCallback" );
        _fnMap( oSettings, oInit, "fnHeaderCallback" );
        _fnMap( oSettings, oInit, "fnFooterCallback" );
        _fnMap( oSettings, oInit, "fnCookieCallback" );
        _fnMap( oSettings, oInit, "fnInitComplete" );
        _fnMap( oSettings, oInit, "fnServerData" );
        _fnMap( oSettings, oInit, "fnFormatNumber" );
        _fnMap( oSettings, oInit, "aaSorting" );
        _fnMap( oSettings, oInit, "aaSortingFixed" );
        _fnMap( oSettings, oInit, "aLengthMenu" );
        _fnMap( oSettings, oInit, "sPaginationType" );
        _fnMap( oSettings, oInit, "sAjaxSource" );
        _fnMap( oSettings, oInit, "sAjaxDataProp" );
        _fnMap( oSettings, oInit, "iCookieDuration" );
        _fnMap( oSettings, oInit, "sCookiePrefix" );
        _fnMap( oSettings, oInit, "sDom" );
        _fnMap( oSettings, oInit, "bSortCellsTop" );
        _fnMap( oSettings, oInit, "oSearch", "oPreviousSearch" );
        _fnMap( oSettings, oInit, "aoSearchCols", "aoPreSearchCols" );
        _fnMap( oSettings, oInit, "iDisplayLength", "_iDisplayLength" );
        _fnMap( oSettings, oInit, "bJQueryUI", "bJUI" );
        _fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );

        /* Callback functions which are array driven */
        if ( typeof oInit.fnDrawCallback == 'function' )
        {
          oSettings.aoDrawCallback.push( {
            "fn": oInit.fnDrawCallback,
            "sName": "user"
          } );
        }

        if ( typeof oInit.fnStateSaveCallback == 'function' )
        {
          oSettings.aoStateSave.push( {
            "fn": oInit.fnStateSaveCallback,
            "sName": "user"
          } );
        }

        if ( typeof oInit.fnStateLoadCallback == 'function' )
        {
          oSettings.aoStateLoad.push( {
            "fn": oInit.fnStateLoadCallback,
            "sName": "user"
          } );
        }

        if ( oSettings.oFeatures.bServerSide && oSettings.oFeatures.bSort &&
          oSettings.oFeatures.bSortClasses )
        {
          /* Enable sort classes for server-side processing. Safe to do it here, since server-side
           * processing must be enabled by the developer
           */
          oSettings.aoDrawCallback.push( {
            "fn": _fnSortingClasses,
            "sName": "server_side_sort_classes"
          } );
        }
        else if ( oSettings.oFeatures.bDeferRender )
        {
          oSettings.aoDrawCallback.push( {
            "fn": _fnSortingClasses,
            "sName": "defer_sort_classes"
          } );
        }

        if ( typeof oInit.bJQueryUI != 'undefined' && oInit.bJQueryUI )
        {
          /* Use the JUI classes object for display. You could clone the oStdClasses object if
           * you want to have multiple tables with multiple independent classes
           */
          oSettings.oClasses = _oExt.oJUIClasses;

          if ( typeof oInit.sDom == 'undefined' )
          {
            /* Set the DOM to use a layout suitable for jQuery UI's theming */
            oSettings.sDom = '<"H"lfr>t<"F"ip>';
          }
        }

        /* Calculate the scroll bar width and cache it for use later on */
        if ( oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "" )
        {
          oSettings.oScroll.iBarWidth = _fnScrollBarWidth();
        }

        if ( typeof oInit.iDisplayStart != 'undefined' &&
          typeof oSettings.iInitDisplayStart == 'undefined' )
        {
          /* Display start point, taking into account the save saving */
          oSettings.iInitDisplayStart = oInit.iDisplayStart;
          oSettings._iDisplayStart = oInit.iDisplayStart;
        }

        /* Must be done after everything which can be overridden by a cookie! */
        if ( typeof oInit.bStateSave != 'undefined' )
        {
          oSettings.oFeatures.bStateSave = oInit.bStateSave;
          _fnLoadState( oSettings, oInit );
          oSettings.aoDrawCallback.push( {
            "fn": _fnSaveState,
            "sName": "state_save"
          } );
        }

        if ( typeof oInit.iDeferLoading != 'undefined' )
        {
          oSettings.bDeferLoading = true;
          oSettings._iRecordsTotal = oInit.iDeferLoading;
          oSettings._iRecordsDisplay = oInit.iDeferLoading;
        }

        if ( typeof oInit.aaData != 'undefined' )
        {
          bUsePassedData = true;
        }

        /* Backwards compatability */
        /* aoColumns / aoData - remove at some point... */
        if ( typeof oInit != 'undefined' && typeof oInit.aoData != 'undefined' )
        {
          oInit.aoColumns = oInit.aoData;
        }

        /* Language definitions */
        if ( typeof oInit.oLanguage != 'undefined' )
        {
          if ( typeof oInit.oLanguage.sUrl != 'undefined' && oInit.oLanguage.sUrl !== "" )
          {
            /* Get the language definitions from a file */
            oSettings.oLanguage.sUrl = oInit.oLanguage.sUrl;
            $.getJSON( oSettings.oLanguage.sUrl, null, function( json ) {
              _fnLanguageProcess( oSettings, json, true ); } );
            bInitHandedOff = true;
          }
          else
          {
            _fnLanguageProcess( oSettings, oInit.oLanguage, false );
          }
        }
        /* Warning: The _fnLanguageProcess function is async to the remainder of this function due
         * to the XHR. We use _bInitialised in _fnLanguageProcess() to check this the processing
         * below is complete. The reason for spliting it like this is optimisation - we can fire
         * off the XHR (if needed) and then continue processing the data.
         */
      }
      else
      {
        /* Create a dummy object for quick manipulation later on. */
        oInit = {};
      }

      /*
       * Stripes
       * Add the strip classes now that we know which classes to apply - unless overruled
       */
      if ( typeof oInit.asStripClasses == 'undefined' )
      {
        oSettings.asStripClasses.push( oSettings.oClasses.sStripOdd );
        oSettings.asStripClasses.push( oSettings.oClasses.sStripEven );
      }

      /* Remove row stripe classes if they are already on the table row */
      var bStripeRemove = false;
      var anRows = $('>tbody>tr', this);
      for ( i=0, iLen=oSettings.asStripClasses.length ; i<iLen ; i++ )
      {
        if ( anRows.filter(":lt(2)").hasClass( oSettings.asStripClasses[i]) )
        {
          bStripeRemove = true;
          break;
        }
      }

      if ( bStripeRemove )
      {
        /* Store the classes which we are about to remove so they can be readded on destory */
        oSettings.asDestoryStrips = [ '', '' ];
        if ( $(anRows[0]).hasClass(oSettings.oClasses.sStripOdd) )
        {
          oSettings.asDestoryStrips[0] += oSettings.oClasses.sStripOdd+" ";
        }
        if ( $(anRows[0]).hasClass(oSettings.oClasses.sStripEven) )
        {
          oSettings.asDestoryStrips[0] += oSettings.oClasses.sStripEven;
        }
        if ( $(anRows[1]).hasClass(oSettings.oClasses.sStripOdd) )
        {
          oSettings.asDestoryStrips[1] += oSettings.oClasses.sStripOdd+" ";
        }
        if ( $(anRows[1]).hasClass(oSettings.oClasses.sStripEven) )
        {
          oSettings.asDestoryStrips[1] += oSettings.oClasses.sStripEven;
        }

        anRows.removeClass( oSettings.asStripClasses.join(' ') );
      }

      /*
       * Columns
       * See if we should load columns automatically or use defined ones
       */
      var anThs = [];
      var aoColumnsInit;
      var nThead = this.getElementsByTagName('thead');
      if ( nThead.length !== 0 )
      {
        _fnDetectHeader( oSettings.aoHeader, nThead[0] );
        anThs = _fnGetUniqueThs( oSettings );
      }

      /* If not given a column array, generate one with nulls */
      if ( typeof oInit.aoColumns == 'undefined' )
      {
        aoColumnsInit = [];
        for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
        {
          aoColumnsInit.push( null );
        }
      }
      else
      {
        aoColumnsInit = oInit.aoColumns;
      }

      /* Add the columns */
      for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
      {
        /* Check if we have column visibilty state to restore */
        if ( typeof oInit.saved_aoColumns != 'undefined' && oInit.saved_aoColumns.length == iLen )
        {
          if ( aoColumnsInit[i] === null )
          {
            aoColumnsInit[i] = {};
          }
          aoColumnsInit[i].bVisible = oInit.saved_aoColumns[i].bVisible;
        }

        _fnAddColumn( oSettings, anThs ? anThs[i] : null );
      }

      /* Add options from column definations */
      if ( typeof oInit.aoColumnDefs != 'undefined' )
      {
        /* Loop over the column defs array - loop in reverse so first instace has priority */
        for ( i=oInit.aoColumnDefs.length-1 ; i>=0 ; i-- )
        {
          /* Each column def can target multiple columns, as it is an array */
          var aTargets = oInit.aoColumnDefs[i].aTargets;
          if ( !$.isArray( aTargets ) )
          {
            _fnLog( oSettings, 1, 'aTargets must be an array of targets, not a '+(typeof aTargets) );
          }
          for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
          {
            if ( typeof aTargets[j] == 'number' && aTargets[j] >= 0 )
            {
              /* 0+ integer, left to right column counting. We add columns which are unknown
               * automatically. Is this the right behaviour for this? We should at least
               * log it in future. We cannot do this for the negative or class targets, only here.
               */
              while( oSettings.aoColumns.length <= aTargets[j] )
              {
                _fnAddColumn( oSettings );
              }
              _fnColumnOptions( oSettings, aTargets[j], oInit.aoColumnDefs[i] );
            }
            else if ( typeof aTargets[j] == 'number' && aTargets[j] < 0 )
            {
              /* Negative integer, right to left column counting */
              _fnColumnOptions( oSettings, oSettings.aoColumns.length+aTargets[j],
                oInit.aoColumnDefs[i] );
            }
            else if ( typeof aTargets[j] == 'string' )
            {
              /* Class name matching on TH element */
              for ( k=0, kLen=oSettings.aoColumns.length ; k<kLen ; k++ )
              {
                if ( aTargets[j] == "_all" ||
                  $(oSettings.aoColumns[k].nTh).hasClass( aTargets[j] ) )
                {
                  _fnColumnOptions( oSettings, k, oInit.aoColumnDefs[i] );
                }
              }
            }
          }
        }
      }

      /* Add options from column array - after the defs array so this has priority */
      if ( typeof aoColumnsInit != 'undefined' )
      {
        for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
        {
          _fnColumnOptions( oSettings, i, aoColumnsInit[i] );
        }
      }

      /*
       * Sorting
       * Check the aaSorting array
       */
      for ( i=0, iLen=oSettings.aaSorting.length ; i<iLen ; i++ )
      {
        if ( oSettings.aaSorting[i][0] >= oSettings.aoColumns.length )
        {
          oSettings.aaSorting[i][0] = 0;
        }
        var oColumn = oSettings.aoColumns[ oSettings.aaSorting[i][0] ];

        /* Add a default sorting index */
        if ( typeof oSettings.aaSorting[i][2] == 'undefined' )
        {
          oSettings.aaSorting[i][2] = 0;
        }

        /* If aaSorting is not defined, then we use the first indicator in asSorting */
        if ( typeof oInit.aaSorting == "undefined" &&
          typeof oSettings.saved_aaSorting == "undefined" )
        {
          oSettings.aaSorting[i][1] = oColumn.asSorting[0];
        }

        /* Set the current sorting index based on aoColumns.asSorting */
        for ( j=0, jLen=oColumn.asSorting.length ; j<jLen ; j++ )
        {
          if ( oSettings.aaSorting[i][1] == oColumn.asSorting[j] )
          {
            oSettings.aaSorting[i][2] = j;
            break;
          }
        }
      }

      /* Do a first pass on the sorting classes (allows any size changes to be taken into
       * account, and also will apply sorting disabled classes if disabled
       */
      _fnSortingClasses( oSettings );

      /*
       * Final init
       * Cache the header, body and footer as required, creating them if needed
       */
      var thead = $('>thead', this);
      if ( thead.length === 0 )
      {
        thead = [ document.createElement( 'thead' ) ];
        this.appendChild( thead[0] );
      }
      oSettings.nTHead = thead[0];

      var tbody = $('>tbody', this);
      if ( tbody.length === 0 )
      {
        tbody = [ document.createElement( 'tbody' ) ];
        this.appendChild( tbody[0] );
      }
      oSettings.nTBody = tbody[0];

      var tfoot = $('>tfoot', this);
      if ( tfoot.length > 0 )
      {
        oSettings.nTFoot = tfoot[0];
        _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
      }

      /* Check if there is data passing into the constructor */
      if ( bUsePassedData )
      {
        for ( i=0 ; i<oInit.aaData.length ; i++ )
        {
          _fnAddData( oSettings, oInit.aaData[ i ] );
        }
      }
      else
      {
        /* Grab the data from the page */
        _fnGatherData( oSettings );
      }

      /* Copy the data index array */
      oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

      /* Initialisation complete - table can be drawn */
      oSettings.bInitialised = true;

      /* Check if we need to initialise the table (it might not have been handed off to the
       * language processor)
       */
      if ( bInitHandedOff === false )
      {
        _fnInitalise( oSettings );
      }
    });
  };
})(jQuery, window, document);
(function() {

  jQuery(function($) {
    var TRUNCATE_LINK_CLASSES;
    TRUNCATE_LINK_CLASSES = ['truncate', 'more'];
    $.fn.truncate = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return $(this).each(function() {
        var $more, className, lineHeight, moreLink, numLines, text, totalHeight,
          _this = this;
        opts = $.extend({}, $.fn.truncate.defaults, opts);
        text = $(this).text();
        lineHeight = parseFloat($(this).css('line-height'));
        moreLink = function() {
          return $("~a." + (TRUNCATE_LINK_CLASSES.join('.')), _this);
        };
        if (((opts.maxHeight != null) && $(this).height() > opts.maxHeight) || ((opts.maxLines != null) && $(this).height() > lineHeight * opts.maxLines) || ((opts.lines != null) && $(this).height() > lineHeight * opts.lines)) {
          className = TRUNCATE_LINK_CLASSES.join(' ');
          $more = $('<a />', {
            href: '#',
            html: opts.linkText,
            "class": className
          });
          $more.click(function(e) {
            e.preventDefault();
            if ($(_this).data('truncated')) {
              $(_this).height('auto');
              moreLink().html(opts.lessLinkText);
              return $(_this).data('truncated', false);
            } else {
              return $(_this).truncate(opts);
            }
          });
          numLines = opts.lines || opts.maxLines;
          totalHeight = (numLines && numLines * lineHeight) || opts.maxHeight;
          if (totalHeight != null) {
            $(this).height(totalHeight).css({
              overflow: 'hidden'
            });
            moreLink().remove();
            if (opts.showMore) {
              $(this).after($more);
            }
            return $(this).data('truncated', true);
          }
        } else {
          if (opts.maxLines != null) {
            $(this).height(lineHeight * opts.maxLines);
          } else {
            $(this).height('auto');
          }
          moreLink().html(opts.lessLinkText);
          return $(this).data('truncated', false);
        }
      });
    };
    return $.fn.truncate.defaults = {
      maxLines: 3,
      maxHeight: null,
      linkText: 'more&hellip;',
      lessLinkText: 'less&hellip;',
      showMore: true
    };
  });

}).call(this);
(function() {

  jQuery(function($) {
    $.table = {
      defaults: {
        searchable: true,
        searchInputHint: 'Search',
        sortableClass: 'sortable',
        setFilteringDelay: false,
        datatableOptions: {
          bStateSave: true,
          oLanguage: {
            sSearch: "",
            sProcessing: "Loading..."
          },
          fnDrawCallback: function() {
            return $.table.controlBar.buttons.enable();
          },
          sDom: '<"control-bar"f>t<"list-table-footer clearfix"ip <"sel" l>>r',
          sPaginationType: 'r7Style',
          fnInitComplete: function(oSettings, json) {
            var $a, $searchBox, searchBox, searchTerm, table;
            searchTerm = getParameterByName('search');
            $searchBox = $('#search', $(this).parents().eq(3));
            if (searchTerm) {
              $searchBox.val(searchTerm);
              $searchBox.focus();
            }
            $searchBox.before('<a class="cancel-search" href="#"></a>');
            $a = $('.cancel-search');
            table = this;
            searchTerm = $searchBox.val();
            searchBox = $searchBox.eq(0);
            if (!searchTerm || searchTerm.length < 1) {
              $a.hide();
            }
            $a.click(function(e) {
              table.fnFilter('');
              $(searchBox).blur();
              return e.preventDefault();
            });
            table['fnFilterOld'] = table.fnFilter;
            table.fnFilter = function(str) {
              var end, start;
              $('.cancel-search').toggle(str && str.length > 0);
              start = $searchBox[0].selectionStart;
              end = $searchBox[0].selectionEnd;
              table.fnFilterOld(str);
              if ($searchBox[0].setSelectionRange != null) {
                return $searchBox[0].setSelectionRange(start, end);
              }
            };
            if ((searchTerm != null) && searchTerm.length) {
              return _.defer(function() {
                return table.fnFilter(searchTerm);
              });
            }
          }
        },
        analysisTabOptions: {
          "aLengthMenu": [[10, 50, 100, 250, 500, -1], [10, 50, 100, 250, 500, "All"]],
          "iDisplayLength": 100,
          "bProcessing": true,
          "bServerSide": true,
          "bSortMulti": false
        }
      },
      checkboxes: {
        bind: function() {
          return $("table.list thead tr th input[type='checkbox']").on('click', null, function(e) {
            var $checkboxes, $table;
            $table = $(e.currentTarget).parents('table').first();
            if ($table.data('dataTableObject') == null) {
              return;
            }
            $checkboxes = $table.find("input[type='checkbox']", "table.list tbody tr td:nth-child(1)");
            if ($(this).prop('checked')) {
              return $checkboxes.prop('checked', true);
            } else {
              return $checkboxes.prop('checked', false);
            }
          });
        }
      },
      controlBar: {
        buttons: {
          enable: function() {
            var disable, enable, numChecked;
            numChecked = $("tbody tr td input[type='checkbox']", "table.list").filter(':checked').not('.invisible').size();
            disable = function($button) {
              $button.addClass('disabled');
              return $button.children('input').attr('disabled', 'disabled');
            };
            enable = function($button) {
              $button.removeClass('disabled');
              return $button.children('input').removeAttr('disabled');
            };
            switch (numChecked) {
              case 0:
                disable($('span.button.single', '.control-bar'));
                disable($('span.button.multiple', '.control-bar'));
                return disable($('span.button.any', '.control-bar'));
              case 1:
                enable($('span.button.single', '.control-bar'));
                disable($('span.button.multiple', '.control-bar'));
                return enable($('span.button.any', '.control-bar'));
              default:
                disable($('span.button.single', '.control-bar'));
                enable($('span.button.multiple', '.control-bar'));
                return enable($('span.button.any', '.control-bar'));
            }
          },
          show: {
            bind: function() {
              var $showButton;
              $showButton = $('span.button a.show', '.control-bar');
              if ($showButton.length) {
                return $showButton.click(function(e) {
                  var hostHref;
                  if (!$showButton.parent('span').hasClass('disabled')) {
                    $("table.list tbody tr td input[type='checkbox']").filter(':checked').not('.invisible');
                    hostHref = $("table.list tbody tr td input[type='checkbox']").filter(':checked').parents('tr').children('td:nth-child(2)').children('a').attr('href');
                    window.location = hostHref;
                  }
                  return e.preventDefault();
                });
              }
            }
          },
          edit: {
            bind: function() {
              var $editButton;
              $editButton = $('span.button a.edit', '.control-bar');
              if ($editButton.length) {
                return $editButton.click(function(e) {
                  var hostHref;
                  if (!$editButton.parent('span').hasClass('disabled')) {
                    $("table.list tbody tr td input[type='checkbox']").filter(':checked').not('.invisible');
                    hostHref = $("table.list tbody tr td input[type='checkbox']").filter(':checked').parents('tr').children('td:nth-child(2)').children('span.settings-url').html();
                    window.location = hostHref;
                  }
                  return e.preventDefault();
                });
              }
            }
          },
          bind: function(options) {
            $('.control-bar').prepend($('.control-bar-items').html());
            $('.control-bar-items').remove();
            if (!!options.controlBarLocation) {
              $('.control-bar').appendTo(options.controlBarLocation);
            }
            this.enable();
            this.show.bind();
            return this.edit.bind();
          }
        },
        bind: function($table, options) {
          var $last_selected_row,
            _this = this;
          this.buttons.bind(options);
          $last_selected_row = null;
          return $table.on('click', "input[type='checkbox']", function(e) {
            var $all_trs, $checkbox, $dat_row, $dat_table, checked, idx1, idx2, tmp;
            _this.buttons.enable();
            $checkbox = $(e.currentTarget);
            $dat_table = $checkbox.parents('table').first();
            $dat_row = $checkbox.parents('tr').first();
            if (e.shiftKey && ($last_selected_row != null)) {
              idx1 = $dat_row.index();
              idx2 = $last_selected_row.index();
              if (idx2 < idx1) {
                tmp = idx2;
                idx2 = idx1;
                idx1 = tmp;
              }
              $all_trs = $dat_row.parent().find('tr').slice(idx1, idx2);
              checked = $last_selected_row.find('input[type=checkbox]').is(':checked');
              $('input[type=checkbox]', $all_trs).attr('checked', checked);
            }
            return $last_selected_row = $dat_row;
          });
        }
      },
      searchField: {
        addInputHint: function(options, $table) {
          var $searchInput, searchScope;
          if (options.searchable) {
            if (!!options.controlBarLocation) {
              searchScope = $table.parents().eq(3);
            }
            searchScope || (searchScope = $table.parents().eq(2));
            $searchInput = $('.dataTables_filter input', searchScope);
            $searchInput.attr('id', 'search');
            $searchInput.attr('placeholder', options.searchInputHint);
            return $searchInput.inputHint();
          }
        }
      },
      bind: function($table, options) {
        var $tbody, dataTable, datatableOptions;
        $tbody = $table.children('tbody');
        dataTable = null;
        if ($table.hasClass(options.sortableClass)) {
          if (!$('.control-bar-items').length) {
            options.datatableOptions["sDom"] = '<"list-table-header clearfix"lfr>t<"list-table-footer clearfix"ip>';
          }
          datatableOptions = options.datatableOptions;
          if (options.analysisTab) {
            $.extend(datatableOptions, options.analysisTabOptions);
            options.setFilteringDelay = true;
            options.controlBarLocation = $('.analysis-control-bar');
          }
          dataTable = $table.dataTable(datatableOptions);
          $table.data('dataTableObject', dataTable);
          if (options.setFilteringDelay) {
            dataTable.fnSetFilteringDelay(500);
          }
          if (options.analysisTab) {
            $("#" + ($table.attr('id')) + "_processing").watch('visibility', function() {
              if ($(this).css('visibility') === 'visible') {
                return $table.css({
                  opacity: 0.6
                });
              } else {
                return $table.css({
                  opacity: 1
                });
              }
            });
            $table.on('change', 'tbody tr td input[type=checkbox].hosts', function() {
              return $(this).siblings('input[type=checkbox]').prop('checked', $(this).prop('checked'));
            });
          }
          this.checkboxes.bind();
          this.controlBar.bind($table, options);
          this.searchField.addInputHint(options, $table);
          return $table.css('width', '100%');
        }
      }
    };
    $.fn.table = function(options) {
      var $table, settings;
      settings = $.extend(true, {}, $.table.defaults, options);
      $table = $(this);
      return this.each(function() {
        return $.table.bind($table, settings);
      });
    };
    return $.fn.addCollapsibleSearch = function(options) {
      var searchVal;
      $('.button .search').click(function(e) {
        var $filter, $input;
        $filter = $('.dataTables_filter');
        $input = $('input', $filter);
        if ($filter.css('bottom').charAt(0) === '-') {
          if (!$input.val() || $input.val().length < 1) {
            $filter.css('bottom', '1000px');
          }
        } else {
          $filter.css('bottom', '-42px');
          $input.focus();
        }
        return e.preventDefault();
      });
      searchVal = $('.dataTables_filter input').val();
      if (searchVal && searchVal.length > 0) {
        return $('.button .search').click();
      }
    };
  });

}).call(this);
(function() {

  jQuery(function($) {
    return $(function() {
      return $.fn.inputHint = function(options) {
        this.each(function() {
          var $placeholderDiv, $rightSpan, $this, title, update, _input, _ph;
          options = $.extend({
            fadeOutSpeed: 200,
            fontFamily: 'Helvetica, Arial, sans-serif',
            fontSize: '12px',
            hintColor: '#888'
          }, options);
          $this = $(this);
          title = $this.attr('title');
          title || (title = $this.attr('placeholder'));
          if ("placeholder" in document.createElement("input")) {
            return $this.attr('placeholder', title);
          } else {
            $rightSpan = $('<span></span>').insertAfter($this).css({
              position: 'relative',
              display: 'inline-block',
              verticalAlign: 'top'
            });
            $placeholderDiv = $('<div>' + title + '</div>').hide().css({
              position: 'absolute',
              top: '3px',
              textAlign: 'left',
              right: '3px',
              width: $this.css('width'),
              height: $this.css('height'),
              color: options.hintColor,
              fontSize: options.fontSize,
              fontFamily: options.fontFamily
            });
            $rightSpan.html($placeholderDiv);
            _input = this;
            _ph = $placeholderDiv.eq(0);
            $placeholderDiv.click(function(e) {
              return $(_input).focus();
            });
            $this.focus(function(e) {
              return $(_ph).fadeOut(options.fadeOutSpeed);
            });
            update = function(e) {
              if (!$this.val() || $this.val() === '') {
                return $(_ph).fadeIn(options.fadeOutSpeed);
              } else {
                return $(_ph).fadeOut(options.fadeOutSpeed);
              }
            };
            $this.blur(update);
            $this.change(update);
            return $this.blur();
          }
        });
        return this;
      };
    });
  });

}).call(this);
jQuery.fn.dataTableExt.oApi.fnReloadAjax = function ( oSettings, sNewSource, fnCallback, bStandingRedraw )
{
  if ( typeof sNewSource != 'undefined' && sNewSource != null ) {
    oSettings.sAjaxSource = sNewSource;
  }

  // Server-side processing should just call fnDraw
  if ( oSettings.oFeatures.bServerSide ) {
    this.fnDraw();
    return;
  }

  this.oApi._fnProcessingDisplay( oSettings, true );
  var that = this;
  var iStart = oSettings._iDisplayStart;
  var aData = [];

  this.oApi._fnServerParams( oSettings, aData );

  oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aData, function(json) {
    /* Clear the old information from the table */
    that.oApi._fnClearTable( oSettings );
      
    /* Got the data - add it to the table */
    var aData =  (oSettings.sAjaxDataProp !== "") ?
      that.oApi._fnGetObjectDataFn( oSettings.sAjaxDataProp )( json ) : json;
      
    for ( var i=0 ; i<aData.length ; i++ )
    {
      that.oApi._fnAddData( oSettings, aData[i] );
    }

    oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
      
    if ( typeof bStandingRedraw != 'undefined' && bStandingRedraw === true )
    {
      oSettings._iDisplayStart = iStart;
      that.fnDraw( false );
    }
    else
    {
      that.fnDraw();
    }

    that.oApi._fnProcessingDisplay( oSettings, false );

    /* Callback user function - for event handlers etc */
    if ( typeof fnCallback == 'function' && fnCallback != null )
    {
      fnCallback( oSettings );
    }
  }, oSettings );
};
jQuery.fn.dataTableExt.oApi.fnSetFilteringDelay = function ( oSettings, iDelay ) {
	/*
	 * Inputs:      object:oSettings - dataTables settings object - automatically given
	 *              integer:iDelay - delay in milliseconds
	 * Usage:       $('#example').dataTable().fnSetFilteringDelay(250);
	 * Author:      Zygimantas Berziunas (www.zygimantas.com) and Allan Jardine
	 * License:     GPL v2 or BSD 3 point style
	 * Contact:     zygimantas.berziunas /AT\ hotmail.com
	 */
	var
		_that = this,
		iDelay = (typeof iDelay == 'undefined') ? 250 : iDelay;
	
	this.each( function ( i ) {
		jQuery.fn.dataTableExt.iApiIndex = i;
		var
			$this = this, 
			oTimerId = null, 
			sPreviousSearch = null,
			anControl = jQuery( 'input', _that.fnSettings().aanFeatures.f );
		
			anControl.unbind( 'keyup' ).bind( 'keyup', function() {
			var $$this = $this;

			if (sPreviousSearch === null || sPreviousSearch != anControl.val()) {
				window.clearTimeout(oTimerId);
				sPreviousSearch = anControl.val();	
				oTimerId = window.setTimeout(function() {
					jQuery.fn.dataTableExt.iApiIndex = i;
					_that.fnFilter( anControl.val() );
				}, iDelay);
			}
		});
		
		return this;
	} );
	return this;
}

/* Example call
$(document).ready(function() {
	$('.dataTable').dataTable().fnSetFilteringDelay();
} ); */

;
(function($) {
  var compare = function(x, y) {
    return ((x < y) ?  1 : ((x > y) ? -1 : 0));
  };

  var parseTitleFloat = function(x) {
    return parseFloat(x.match(/title="*(-?[0-9]+)/)[1]);
  };

  var parseTitleString = function(x) {
    return (x.match(/title=['"](.*?)['"]/) || ['',''])[1];
  };

  $.fn.dataTableExt.oSort['title-numeric-asc']  = function(a,b) {
    return compare(parseTitleFloat(a), parseTitleFloat(b));
  };

  $.fn.dataTableExt.oSort['title-numeric-desc'] = function(a,b) {
    return -compare(parseTitleFloat(a), parseTitleFloat(b));
  };

  $.fn.dataTableExt.oSort['title-string-asc']  = function(a,b) {
    return compare(parseTitleString(a), parseTitleString(b));
  };

  $.fn.dataTableExt.oSort['title-string-desc'] = function(a,b) {
    return -compare(parseTitleString(a), parseTitleString(b));
  };
})(jQuery);
// Copyright (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
// Contributors:
//  Justin Palmer (http://encytemedia.com/)
//  Mark Pilgrim (http://diveintomark.org/)
//  Martin Bialasinki
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

// converts rgb() and #xxx to #xxxxxx format,
// returns self (or first argument) if not convertable
String.prototype.parseColor = function() {
  var color = '#';
  if (this.slice(0,4) == 'rgb(') {
    var cols = this.slice(4,this.length-1).split(',');
    var i=0; do { color += parseInt(cols[i]).toColorPart() } while (++i<3);
  } else {
    if (this.slice(0,1) == '#') {
      if (this.length==4) for(var i=1;i<4;i++) color += (this.charAt(i) + this.charAt(i)).toLowerCase();
      if (this.length==7) color = this.toLowerCase();
    }
  }
  return (color.length==7 ? color : (arguments[0] || this));
};

/*--------------------------------------------------------------------------*/

Element.collectTextNodes = function(element) {
  return $A($(element).childNodes).collect( function(node) {
    return (node.nodeType==3 ? node.nodeValue :
      (node.hasChildNodes() ? Element.collectTextNodes(node) : ''));
  }).flatten().join('');
};

Element.collectTextNodesIgnoreClass = function(element, className) {
  return $A($(element).childNodes).collect( function(node) {
    return (node.nodeType==3 ? node.nodeValue :
      ((node.hasChildNodes() && !Element.hasClassName(node,className)) ?
        Element.collectTextNodesIgnoreClass(node, className) : ''));
  }).flatten().join('');
};

Element.setContentZoom = function(element, percent) {
  element = $(element);
  element.setStyle({fontSize: (percent/100) + 'em'});
  if (Prototype.Browser.WebKit) window.scrollBy(0,0);
  return element;
};

Element.getInlineOpacity = function(element){
  return $(element).style.opacity || '';
};

Element.forceRerendering = function(element) {
  try {
    element = $(element);
    var n = document.createTextNode(' ');
    element.appendChild(n);
    element.removeChild(n);
  } catch(e) { }
};

/*--------------------------------------------------------------------------*/

var Effect = {
  _elementDoesNotExistError: {
    name: 'ElementDoesNotExistError',
    message: 'The specified DOM element does not exist, but is required for this effect to operate'
  },
  Transitions: {
    linear: Prototype.K,
    sinoidal: function(pos) {
      return (-Math.cos(pos*Math.PI)/2) + .5;
    },
    reverse: function(pos) {
      return 1-pos;
    },
    flicker: function(pos) {
      var pos = ((-Math.cos(pos*Math.PI)/4) + .75) + Math.random()/4;
      return pos > 1 ? 1 : pos;
    },
    wobble: function(pos) {
      return (-Math.cos(pos*Math.PI*(9*pos))/2) + .5;
    },
    pulse: function(pos, pulses) {
      return (-Math.cos((pos*((pulses||5)-.5)*2)*Math.PI)/2) + .5;
    },
    spring: function(pos) {
      return 1 - (Math.cos(pos * 4.5 * Math.PI) * Math.exp(-pos * 6));
    },
    none: function(pos) {
      return 0;
    },
    full: function(pos) {
      return 1;
    }
  },
  DefaultOptions: {
    duration:   1.0,   // seconds
    fps:        100,   // 100= assume 66fps max.
    sync:       false, // true for combining
    from:       0.0,
    to:         1.0,
    delay:      0.0,
    queue:      'parallel'
  },
  tagifyText: function(element) {
    var tagifyStyle = 'position:relative';
    if (Prototype.Browser.IE) tagifyStyle += ';zoom:1';

    element = $(element);
    $A(element.childNodes).each( function(child) {
      if (child.nodeType==3) {
        child.nodeValue.toArray().each( function(character) {
          element.insertBefore(
            new Element('span', {style: tagifyStyle}).update(
              character == ' ' ? String.fromCharCode(160) : character),
              child);
        });
        Element.remove(child);
      }
    });
  },
  multiple: function(element, effect) {
    var elements;
    if (((typeof element == 'object') ||
        Object.isFunction(element)) &&
       (element.length))
      elements = element;
    else
      elements = $(element).childNodes;

    var options = Object.extend({
      speed: 0.1,
      delay: 0.0
    }, arguments[2] || { });
    var masterDelay = options.delay;

    $A(elements).each( function(element, index) {
      new effect(element, Object.extend(options, { delay: index * options.speed + masterDelay }));
    });
  },
  PAIRS: {
    'slide':  ['SlideDown','SlideUp'],
    'blind':  ['BlindDown','BlindUp'],
    'appear': ['Appear','Fade']
  },
  toggle: function(element, effect) {
    element = $(element);
    effect = (effect || 'appear').toLowerCase();
    var options = Object.extend({
      queue: { position:'end', scope:(element.id || 'global'), limit: 1 }
    }, arguments[2] || { });
    Effect[element.visible() ?
      Effect.PAIRS[effect][1] : Effect.PAIRS[effect][0]](element, options);
  }
};

Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;

/* ------------- core effects ------------- */

Effect.ScopedQueue = Class.create(Enumerable, {
  initialize: function() {
    this.effects  = [];
    this.interval = null;
  },
  _each: function(iterator) {
    this.effects._each(iterator);
  },
  add: function(effect) {
    var timestamp = new Date().getTime();

    var position = Object.isString(effect.options.queue) ?
      effect.options.queue : effect.options.queue.position;

    switch(position) {
      case 'front':
        // move unstarted effects after this effect
        this.effects.findAll(function(e){ return e.state=='idle' }).each( function(e) {
            e.startOn  += effect.finishOn;
            e.finishOn += effect.finishOn;
          });
        break;
      case 'with-last':
        timestamp = this.effects.pluck('startOn').max() || timestamp;
        break;
      case 'end':
        // start effect after last queued effect has finished
        timestamp = this.effects.pluck('finishOn').max() || timestamp;
        break;
    }

    effect.startOn  += timestamp;
    effect.finishOn += timestamp;

    if (!effect.options.queue.limit || (this.effects.length < effect.options.queue.limit))
      this.effects.push(effect);

    if (!this.interval)
      this.interval = setInterval(this.loop.bind(this), 15);
  },
  remove: function(effect) {
    this.effects = this.effects.reject(function(e) { return e==effect });
    if (this.effects.length == 0) {
      clearInterval(this.interval);
      this.interval = null;
    }
  },
  loop: function() {
    var timePos = new Date().getTime();
    for(var i=0, len=this.effects.length;i<len;i++)
      this.effects[i] && this.effects[i].loop(timePos);
  }
});

Effect.Queues = {
  instances: $H(),
  get: function(queueName) {
    if (!Object.isString(queueName)) return queueName;

    return this.instances.get(queueName) ||
      this.instances.set(queueName, new Effect.ScopedQueue());
  }
};
Effect.Queue = Effect.Queues.get('global');

Effect.Base = Class.create({
  position: null,
  start: function(options) {
    function codeForEvent(options,eventName){
      return (
        (options[eventName+'Internal'] ? 'this.options.'+eventName+'Internal(this);' : '') +
        (options[eventName] ? 'this.options.'+eventName+'(this);' : '')
      );
    }
    if (options && options.transition === false) options.transition = Effect.Transitions.linear;
    this.options      = Object.extend(Object.extend({ },Effect.DefaultOptions), options || { });
    this.currentFrame = 0;
    this.state        = 'idle';
    this.startOn      = this.options.delay*1000;
    this.finishOn     = this.startOn+(this.options.duration*1000);
    this.fromToDelta  = this.options.to-this.options.from;
    this.totalTime    = this.finishOn-this.startOn;
    this.totalFrames  = this.options.fps*this.options.duration;

    this.render = (function() {
      function dispatch(effect, eventName) {
        if (effect.options[eventName + 'Internal'])
          effect.options[eventName + 'Internal'](effect);
        if (effect.options[eventName])
          effect.options[eventName](effect);
      }

      return function(pos) {
        if (this.state === "idle") {
          this.state = "running";
          dispatch(this, 'beforeSetup');
          if (this.setup) this.setup();
          dispatch(this, 'afterSetup');
        }
        if (this.state === "running") {
          pos = (this.options.transition(pos) * this.fromToDelta) + this.options.from;
          this.position = pos;
          dispatch(this, 'beforeUpdate');
          if (this.update) this.update(pos);
          dispatch(this, 'afterUpdate');
        }
      };
    })();

    this.event('beforeStart');
    if (!this.options.sync)
      Effect.Queues.get(Object.isString(this.options.queue) ?
        'global' : this.options.queue.scope).add(this);
  },
  loop: function(timePos) {
    if (timePos >= this.startOn) {
      if (timePos >= this.finishOn) {
        this.render(1.0);
        this.cancel();
        this.event('beforeFinish');
        if (this.finish) this.finish();
        this.event('afterFinish');
        return;
      }
      var pos   = (timePos - this.startOn) / this.totalTime,
          frame = (pos * this.totalFrames).round();
      if (frame > this.currentFrame) {
        this.render(pos);
        this.currentFrame = frame;
      }
    }
  },
  cancel: function() {
    if (!this.options.sync)
      Effect.Queues.get(Object.isString(this.options.queue) ?
        'global' : this.options.queue.scope).remove(this);
    this.state = 'finished';
  },
  event: function(eventName) {
    if (this.options[eventName + 'Internal']) this.options[eventName + 'Internal'](this);
    if (this.options[eventName]) this.options[eventName](this);
  },
  inspect: function() {
    var data = $H();
    for(property in this)
      if (!Object.isFunction(this[property])) data.set(property, this[property]);
    return '#<Effect:' + data.inspect() + ',options:' + $H(this.options).inspect() + '>';
  }
});

Effect.Parallel = Class.create(Effect.Base, {
  initialize: function(effects) {
    this.effects = effects || [];
    this.start(arguments[1]);
  },
  update: function(position) {
    this.effects.invoke('render', position);
  },
  finish: function(position) {
    this.effects.each( function(effect) {
      effect.render(1.0);
      effect.cancel();
      effect.event('beforeFinish');
      if (effect.finish) effect.finish(position);
      effect.event('afterFinish');
    });
  }
});

Effect.Tween = Class.create(Effect.Base, {
  initialize: function(object, from, to) {
    object = Object.isString(object) ? $(object) : object;
    var args = $A(arguments), method = args.last(),
      options = args.length == 5 ? args[3] : null;
    this.method = Object.isFunction(method) ? method.bind(object) :
      Object.isFunction(object[method]) ? object[method].bind(object) :
      function(value) { object[method] = value };
    this.start(Object.extend({ from: from, to: to }, options || { }));
  },
  update: function(position) {
    this.method(position);
  }
});

Effect.Event = Class.create(Effect.Base, {
  initialize: function() {
    this.start(Object.extend({ duration: 0 }, arguments[0] || { }));
  },
  update: Prototype.emptyFunction
});

Effect.Opacity = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    // make this work on IE on elements without 'layout'
    if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
      this.element.setStyle({zoom: 1});
    var options = Object.extend({
      from: this.element.getOpacity() || 0.0,
      to:   1.0
    }, arguments[1] || { });
    this.start(options);
  },
  update: function(position) {
    this.element.setOpacity(position);
  }
});

Effect.Move = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      x:    0,
      y:    0,
      mode: 'relative'
    }, arguments[1] || { });
    this.start(options);
  },
  setup: function() {
    this.element.makePositioned();
    this.originalLeft = parseFloat(this.element.getStyle('left') || '0');
    this.originalTop  = parseFloat(this.element.getStyle('top')  || '0');
    if (this.options.mode == 'absolute') {
      this.options.x = this.options.x - this.originalLeft;
      this.options.y = this.options.y - this.originalTop;
    }
  },
  update: function(position) {
    this.element.setStyle({
      left: (this.options.x  * position + this.originalLeft).round() + 'px',
      top:  (this.options.y  * position + this.originalTop).round()  + 'px'
    });
  }
});

// for backwards compatibility
Effect.MoveBy = function(element, toTop, toLeft) {
  return new Effect.Move(element,
    Object.extend({ x: toLeft, y: toTop }, arguments[3] || { }));
};

Effect.Scale = Class.create(Effect.Base, {
  initialize: function(element, percent) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      scaleX: true,
      scaleY: true,
      scaleContent: true,
      scaleFromCenter: false,
      scaleMode: 'box',        // 'box' or 'contents' or { } with provided values
      scaleFrom: 100.0,
      scaleTo:   percent
    }, arguments[2] || { });
    this.start(options);
  },
  setup: function() {
    this.restoreAfterFinish = this.options.restoreAfterFinish || false;
    this.elementPositioning = this.element.getStyle('position');

    this.originalStyle = { };
    ['top','left','width','height','fontSize'].each( function(k) {
      this.originalStyle[k] = this.element.style[k];
    }.bind(this));

    this.originalTop  = this.element.offsetTop;
    this.originalLeft = this.element.offsetLeft;

    var fontSize = this.element.getStyle('font-size') || '100%';
    ['em','px','%','pt'].each( function(fontSizeType) {
      if (fontSize.indexOf(fontSizeType)>0) {
        this.fontSize     = parseFloat(fontSize);
        this.fontSizeType = fontSizeType;
      }
    }.bind(this));

    this.factor = (this.options.scaleTo - this.options.scaleFrom)/100;

    this.dims = null;
    if (this.options.scaleMode=='box')
      this.dims = [this.element.offsetHeight, this.element.offsetWidth];
    if (/^content/.test(this.options.scaleMode))
      this.dims = [this.element.scrollHeight, this.element.scrollWidth];
    if (!this.dims)
      this.dims = [this.options.scaleMode.originalHeight,
                   this.options.scaleMode.originalWidth];
  },
  update: function(position) {
    var currentScale = (this.options.scaleFrom/100.0) + (this.factor * position);
    if (this.options.scaleContent && this.fontSize)
      this.element.setStyle({fontSize: this.fontSize * currentScale + this.fontSizeType });
    this.setDimensions(this.dims[0] * currentScale, this.dims[1] * currentScale);
  },
  finish: function(position) {
    if (this.restoreAfterFinish) this.element.setStyle(this.originalStyle);
  },
  setDimensions: function(height, width) {
    var d = { };
    if (this.options.scaleX) d.width = width.round() + 'px';
    if (this.options.scaleY) d.height = height.round() + 'px';
    if (this.options.scaleFromCenter) {
      var topd  = (height - this.dims[0])/2;
      var leftd = (width  - this.dims[1])/2;
      if (this.elementPositioning == 'absolute') {
        if (this.options.scaleY) d.top = this.originalTop-topd + 'px';
        if (this.options.scaleX) d.left = this.originalLeft-leftd + 'px';
      } else {
        if (this.options.scaleY) d.top = -topd + 'px';
        if (this.options.scaleX) d.left = -leftd + 'px';
      }
    }
    this.element.setStyle(d);
  }
});

Effect.Highlight = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({ startcolor: '#ffff99' }, arguments[1] || { });
    this.start(options);
  },
  setup: function() {
    // Prevent executing on elements not in the layout flow
    if (this.element.getStyle('display')=='none') { this.cancel(); return; }
    // Disable background image during the effect
    this.oldStyle = { };
    if (!this.options.keepBackgroundImage) {
      this.oldStyle.backgroundImage = this.element.getStyle('background-image');
      this.element.setStyle({backgroundImage: 'none'});
    }
    if (!this.options.endcolor)
      this.options.endcolor = this.element.getStyle('background-color').parseColor('#ffffff');
    if (!this.options.restorecolor)
      this.options.restorecolor = this.element.getStyle('background-color');
    // init color calculations
    this._base  = $R(0,2).map(function(i){ return parseInt(this.options.startcolor.slice(i*2+1,i*2+3),16) }.bind(this));
    this._delta = $R(0,2).map(function(i){ return parseInt(this.options.endcolor.slice(i*2+1,i*2+3),16)-this._base[i] }.bind(this));
  },
  update: function(position) {
    this.element.setStyle({backgroundColor: $R(0,2).inject('#',function(m,v,i){
      return m+((this._base[i]+(this._delta[i]*position)).round().toColorPart()); }.bind(this)) });
  },
  finish: function() {
    this.element.setStyle(Object.extend(this.oldStyle, {
      backgroundColor: this.options.restorecolor
    }));
  }
});

Effect.ScrollTo = function(element) {
  var options = arguments[1] || { },
  scrollOffsets = document.viewport.getScrollOffsets(),
  elementOffsets = $(element).cumulativeOffset();

  if (options.offset) elementOffsets[1] += options.offset;

  return new Effect.Tween(null,
    scrollOffsets.top,
    elementOffsets[1],
    options,
    function(p){ scrollTo(scrollOffsets.left, p.round()); }
  );
};

/* ------------- combination effects ------------- */

Effect.Fade = function(element) {
  element = $(element);
  var oldOpacity = element.getInlineOpacity();
  var options = Object.extend({
    from: element.getOpacity() || 1.0,
    to:   0.0,
    afterFinishInternal: function(effect) {
      if (effect.options.to!=0) return;
      effect.element.hide().setStyle({opacity: oldOpacity});
    }
  }, arguments[1] || { });
  return new Effect.Opacity(element,options);
};

Effect.Appear = function(element) {
  element = $(element);
  var options = Object.extend({
  from: (element.getStyle('display') == 'none' ? 0.0 : element.getOpacity() || 0.0),
  to:   1.0,
  // force Safari to render floated elements properly
  afterFinishInternal: function(effect) {
    effect.element.forceRerendering();
  },
  beforeSetup: function(effect) {
    effect.element.setOpacity(effect.options.from).show();
  }}, arguments[1] || { });
  return new Effect.Opacity(element,options);
};

Effect.Puff = function(element) {
  element = $(element);
  var oldStyle = {
    opacity: element.getInlineOpacity(),
    position: element.getStyle('position'),
    top:  element.style.top,
    left: element.style.left,
    width: element.style.width,
    height: element.style.height
  };
  return new Effect.Parallel(
   [ new Effect.Scale(element, 200,
      { sync: true, scaleFromCenter: true, scaleContent: true, restoreAfterFinish: true }),
     new Effect.Opacity(element, { sync: true, to: 0.0 } ) ],
     Object.extend({ duration: 1.0,
      beforeSetupInternal: function(effect) {
        Position.absolutize(effect.effects[0].element);
      },
      afterFinishInternal: function(effect) {
         effect.effects[0].element.hide().setStyle(oldStyle); }
     }, arguments[1] || { })
   );
};

Effect.BlindUp = function(element) {
  element = $(element);
  element.makeClipping();
  return new Effect.Scale(element, 0,
    Object.extend({ scaleContent: false,
      scaleX: false,
      restoreAfterFinish: true,
      afterFinishInternal: function(effect) {
        effect.element.hide().undoClipping();
      }
    }, arguments[1] || { })
  );
};

Effect.BlindDown = function(element) {
  element = $(element);
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({
    scaleContent: false,
    scaleX: false,
    scaleFrom: 0,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makeClipping().setStyle({height: '0px'}).show();
    },
    afterFinishInternal: function(effect) {
      effect.element.undoClipping();
    }
  }, arguments[1] || { }));
};

Effect.SwitchOff = function(element) {
  element = $(element);
  var oldOpacity = element.getInlineOpacity();
  return new Effect.Appear(element, Object.extend({
    duration: 0.4,
    from: 0,
    transition: Effect.Transitions.flicker,
    afterFinishInternal: function(effect) {
      new Effect.Scale(effect.element, 1, {
        duration: 0.3, scaleFromCenter: true,
        scaleX: false, scaleContent: false, restoreAfterFinish: true,
        beforeSetup: function(effect) {
          effect.element.makePositioned().makeClipping();
        },
        afterFinishInternal: function(effect) {
          effect.element.hide().undoClipping().undoPositioned().setStyle({opacity: oldOpacity});
        }
      });
    }
  }, arguments[1] || { }));
};

Effect.DropOut = function(element) {
  element = $(element);
  var oldStyle = {
    top: element.getStyle('top'),
    left: element.getStyle('left'),
    opacity: element.getInlineOpacity() };
  return new Effect.Parallel(
    [ new Effect.Move(element, {x: 0, y: 100, sync: true }),
      new Effect.Opacity(element, { sync: true, to: 0.0 }) ],
    Object.extend(
      { duration: 0.5,
        beforeSetup: function(effect) {
          effect.effects[0].element.makePositioned();
        },
        afterFinishInternal: function(effect) {
          effect.effects[0].element.hide().undoPositioned().setStyle(oldStyle);
        }
      }, arguments[1] || { }));
};

Effect.Shake = function(element) {
  element = $(element);
  var options = Object.extend({
    distance: 20,
    duration: 0.5
  }, arguments[1] || {});
  var distance = parseFloat(options.distance);
  var split = parseFloat(options.duration) / 10.0;
  var oldStyle = {
    top: element.getStyle('top'),
    left: element.getStyle('left') };
    return new Effect.Move(element,
      { x:  distance, y: 0, duration: split, afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance, y: 0, duration: split, afterFinishInternal: function(effect) {
        effect.element.undoPositioned().setStyle(oldStyle);
  }}); }}); }}); }}); }}); }});
};

Effect.SlideDown = function(element) {
  element = $(element).cleanWhitespace();
  // SlideDown need to have the content of the element wrapped in a container element with fixed height!
  var oldInnerBottom = element.down().getStyle('bottom');
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({
    scaleContent: false,
    scaleX: false,
    scaleFrom: window.opera ? 0 : 1,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makePositioned();
      effect.element.down().makePositioned();
      if (window.opera) effect.element.setStyle({top: ''});
      effect.element.makeClipping().setStyle({height: '0px'}).show();
    },
    afterUpdateInternal: function(effect) {
      effect.element.down().setStyle({bottom:
        (effect.dims[0] - effect.element.clientHeight) + 'px' });
    },
    afterFinishInternal: function(effect) {
      effect.element.undoClipping().undoPositioned();
      effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom}); }
    }, arguments[1] || { })
  );
};

Effect.SlideUp = function(element) {
  element = $(element).cleanWhitespace();
  var oldInnerBottom = element.down().getStyle('bottom');
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, window.opera ? 0 : 1,
   Object.extend({ scaleContent: false,
    scaleX: false,
    scaleMode: 'box',
    scaleFrom: 100,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makePositioned();
      effect.element.down().makePositioned();
      if (window.opera) effect.element.setStyle({top: ''});
      effect.element.makeClipping().show();
    },
    afterUpdateInternal: function(effect) {
      effect.element.down().setStyle({bottom:
        (effect.dims[0] - effect.element.clientHeight) + 'px' });
    },
    afterFinishInternal: function(effect) {
      effect.element.hide().undoClipping().undoPositioned();
      effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom});
    }
   }, arguments[1] || { })
  );
};

// Bug in opera makes the TD containing this element expand for a instance after finish
Effect.Squish = function(element) {
  return new Effect.Scale(element, window.opera ? 1 : 0, {
    restoreAfterFinish: true,
    beforeSetup: function(effect) {
      effect.element.makeClipping();
    },
    afterFinishInternal: function(effect) {
      effect.element.hide().undoClipping();
    }
  });
};

Effect.Grow = function(element) {
  element = $(element);
  var options = Object.extend({
    direction: 'center',
    moveTransition: Effect.Transitions.sinoidal,
    scaleTransition: Effect.Transitions.sinoidal,
    opacityTransition: Effect.Transitions.full
  }, arguments[1] || { });
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    height: element.style.height,
    width: element.style.width,
    opacity: element.getInlineOpacity() };

  var dims = element.getDimensions();
  var initialMoveX, initialMoveY;
  var moveX, moveY;

  switch (options.direction) {
    case 'top-left':
      initialMoveX = initialMoveY = moveX = moveY = 0;
      break;
    case 'top-right':
      initialMoveX = dims.width;
      initialMoveY = moveY = 0;
      moveX = -dims.width;
      break;
    case 'bottom-left':
      initialMoveX = moveX = 0;
      initialMoveY = dims.height;
      moveY = -dims.height;
      break;
    case 'bottom-right':
      initialMoveX = dims.width;
      initialMoveY = dims.height;
      moveX = -dims.width;
      moveY = -dims.height;
      break;
    case 'center':
      initialMoveX = dims.width / 2;
      initialMoveY = dims.height / 2;
      moveX = -dims.width / 2;
      moveY = -dims.height / 2;
      break;
  }

  return new Effect.Move(element, {
    x: initialMoveX,
    y: initialMoveY,
    duration: 0.01,
    beforeSetup: function(effect) {
      effect.element.hide().makeClipping().makePositioned();
    },
    afterFinishInternal: function(effect) {
      new Effect.Parallel(
        [ new Effect.Opacity(effect.element, { sync: true, to: 1.0, from: 0.0, transition: options.opacityTransition }),
          new Effect.Move(effect.element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition }),
          new Effect.Scale(effect.element, 100, {
            scaleMode: { originalHeight: dims.height, originalWidth: dims.width },
            sync: true, scaleFrom: window.opera ? 1 : 0, transition: options.scaleTransition, restoreAfterFinish: true})
        ], Object.extend({
             beforeSetup: function(effect) {
               effect.effects[0].element.setStyle({height: '0px'}).show();
             },
             afterFinishInternal: function(effect) {
               effect.effects[0].element.undoClipping().undoPositioned().setStyle(oldStyle);
             }
           }, options)
      );
    }
  });
};

Effect.Shrink = function(element) {
  element = $(element);
  var options = Object.extend({
    direction: 'center',
    moveTransition: Effect.Transitions.sinoidal,
    scaleTransition: Effect.Transitions.sinoidal,
    opacityTransition: Effect.Transitions.none
  }, arguments[1] || { });
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    height: element.style.height,
    width: element.style.width,
    opacity: element.getInlineOpacity() };

  var dims = element.getDimensions();
  var moveX, moveY;

  switch (options.direction) {
    case 'top-left':
      moveX = moveY = 0;
      break;
    case 'top-right':
      moveX = dims.width;
      moveY = 0;
      break;
    case 'bottom-left':
      moveX = 0;
      moveY = dims.height;
      break;
    case 'bottom-right':
      moveX = dims.width;
      moveY = dims.height;
      break;
    case 'center':
      moveX = dims.width / 2;
      moveY = dims.height / 2;
      break;
  }

  return new Effect.Parallel(
    [ new Effect.Opacity(element, { sync: true, to: 0.0, from: 1.0, transition: options.opacityTransition }),
      new Effect.Scale(element, window.opera ? 1 : 0, { sync: true, transition: options.scaleTransition, restoreAfterFinish: true}),
      new Effect.Move(element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition })
    ], Object.extend({
         beforeStartInternal: function(effect) {
           effect.effects[0].element.makePositioned().makeClipping();
         },
         afterFinishInternal: function(effect) {
           effect.effects[0].element.hide().undoClipping().undoPositioned().setStyle(oldStyle); }
       }, options)
  );
};

Effect.Pulsate = function(element) {
  element = $(element);
  var options    = arguments[1] || { },
    oldOpacity = element.getInlineOpacity(),
    transition = options.transition || Effect.Transitions.linear,
    reverser   = function(pos){
      return 1 - transition((-Math.cos((pos*(options.pulses||5)*2)*Math.PI)/2) + .5);
    };

  return new Effect.Opacity(element,
    Object.extend(Object.extend({  duration: 2.0, from: 0,
      afterFinishInternal: function(effect) { effect.element.setStyle({opacity: oldOpacity}); }
    }, options), {transition: reverser}));
};

Effect.Fold = function(element) {
  element = $(element);
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    width: element.style.width,
    height: element.style.height };
  element.makeClipping();
  return new Effect.Scale(element, 5, Object.extend({
    scaleContent: false,
    scaleX: false,
    afterFinishInternal: function(effect) {
    new Effect.Scale(element, 1, {
      scaleContent: false,
      scaleY: false,
      afterFinishInternal: function(effect) {
        effect.element.hide().undoClipping().setStyle(oldStyle);
      } });
  }}, arguments[1] || { }));
};

Effect.Morph = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      style: { }
    }, arguments[1] || { });

    if (!Object.isString(options.style)) this.style = $H(options.style);
    else {
      if (options.style.include(':'))
        this.style = options.style.parseStyle();
      else {
        this.element.addClassName(options.style);
        this.style = $H(this.element.getStyles());
        this.element.removeClassName(options.style);
        var css = this.element.getStyles();
        this.style = this.style.reject(function(style) {
          return style.value == css[style.key];
        });
        options.afterFinishInternal = function(effect) {
          effect.element.addClassName(effect.options.style);
          effect.transforms.each(function(transform) {
            effect.element.style[transform.style] = '';
          });
        };
      }
    }
    this.start(options);
  },

  setup: function(){
    function parseColor(color){
      if (!color || ['rgba(0, 0, 0, 0)','transparent'].include(color)) color = '#ffffff';
      color = color.parseColor();
      return $R(0,2).map(function(i){
        return parseInt( color.slice(i*2+1,i*2+3), 16 );
      });
    }
    this.transforms = this.style.map(function(pair){
      var property = pair[0], value = pair[1], unit = null;

      if (value.parseColor('#zzzzzz') != '#zzzzzz') {
        value = value.parseColor();
        unit  = 'color';
      } else if (property == 'opacity') {
        value = parseFloat(value);
        if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
          this.element.setStyle({zoom: 1});
      } else if (Element.CSS_LENGTH.test(value)) {
          var components = value.match(/^([\+\-]?[0-9\.]+)(.*)$/);
          value = parseFloat(components[1]);
          unit = (components.length == 3) ? components[2] : null;
      }

      var originalValue = this.element.getStyle(property);
      return {
        style: property.camelize(),
        originalValue: unit=='color' ? parseColor(originalValue) : parseFloat(originalValue || 0),
        targetValue: unit=='color' ? parseColor(value) : value,
        unit: unit
      };
    }.bind(this)).reject(function(transform){
      return (
        (transform.originalValue == transform.targetValue) ||
        (
          transform.unit != 'color' &&
          (isNaN(transform.originalValue) || isNaN(transform.targetValue))
        )
      );
    });
  },
  update: function(position) {
    var style = { }, transform, i = this.transforms.length;
    while(i--)
      style[(transform = this.transforms[i]).style] =
        transform.unit=='color' ? '#'+
          (Math.round(transform.originalValue[0]+
            (transform.targetValue[0]-transform.originalValue[0])*position)).toColorPart() +
          (Math.round(transform.originalValue[1]+
            (transform.targetValue[1]-transform.originalValue[1])*position)).toColorPart() +
          (Math.round(transform.originalValue[2]+
            (transform.targetValue[2]-transform.originalValue[2])*position)).toColorPart() :
        (transform.originalValue +
          (transform.targetValue - transform.originalValue) * position).toFixed(3) +
            (transform.unit === null ? '' : transform.unit);
    this.element.setStyle(style, true);
  }
});

Effect.Transform = Class.create({
  initialize: function(tracks){
    this.tracks  = [];
    this.options = arguments[1] || { };
    this.addTracks(tracks);
  },
  addTracks: function(tracks){
    tracks.each(function(track){
      track = $H(track);
      var data = track.values().first();
      this.tracks.push($H({
        ids:     track.keys().first(),
        effect:  Effect.Morph,
        options: { style: data }
      }));
    }.bind(this));
    return this;
  },
  play: function(){
    return new Effect.Parallel(
      this.tracks.map(function(track){
        var ids = track.get('ids'), effect = track.get('effect'), options = track.get('options');
        var elements = [$(ids) || $$(ids)].flatten();
        return elements.map(function(e){ return new effect(e, Object.extend({ sync:true }, options)) });
      }).flatten(),
      this.options
    );
  }
});

Element.CSS_PROPERTIES = $w(
  'backgroundColor backgroundPosition borderBottomColor borderBottomStyle ' +
  'borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth ' +
  'borderRightColor borderRightStyle borderRightWidth borderSpacing ' +
  'borderTopColor borderTopStyle borderTopWidth bottom clip color ' +
  'fontSize fontWeight height left letterSpacing lineHeight ' +
  'marginBottom marginLeft marginRight marginTop markerOffset maxHeight '+
  'maxWidth minHeight minWidth opacity outlineColor outlineOffset ' +
  'outlineWidth paddingBottom paddingLeft paddingRight paddingTop ' +
  'right textIndent top width wordSpacing zIndex');

Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;

String.__parseStyleElement = document.createElement('div');
String.prototype.parseStyle = function(){
  var style, styleRules = $H();
  if (Prototype.Browser.WebKit)
    style = new Element('div',{style:this}).style;
  else {
    String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';
    style = String.__parseStyleElement.childNodes[0].style;
  }

  Element.CSS_PROPERTIES.each(function(property){
    if (style[property]) styleRules.set(property, style[property]);
  });

  if (Prototype.Browser.IE && this.include('opacity'))
    styleRules.set('opacity', this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);

  return styleRules;
};

if (document.defaultView && document.defaultView.getComputedStyle) {
  Element.getStyles = function(element) {
    var css = document.defaultView.getComputedStyle($(element), null);
    return Element.CSS_PROPERTIES.inject({ }, function(styles, property) {
      styles[property] = css[property];
      return styles;
    });
  };
} else {
  Element.getStyles = function(element) {
    element = $(element);
    var css = element.currentStyle, styles;
    styles = Element.CSS_PROPERTIES.inject({ }, function(results, property) {
      results[property] = css[property];
      return results;
    });
    if (!styles.opacity) styles.opacity = element.getOpacity();
    return styles;
  };
}

Effect.Methods = {
  morph: function(element, style) {
    element = $(element);
    new Effect.Morph(element, Object.extend({ style: style }, arguments[2] || { }));
    return element;
  },
  visualEffect: function(element, effect, options) {
    element = $(element);
    var s = effect.dasherize().camelize(), klass = s.charAt(0).toUpperCase() + s.substring(1);
    new Effect[klass](element, options);
    return element;
  },
  highlight: function(element, options) {
    element = $(element);
    new Effect.Highlight(element, options);
    return element;
  }
};

$w('fade appear grow shrink fold blindUp blindDown slideUp slideDown '+
  'pulsate shake puff squish switchOff dropOut').each(
  function(effect) {
    Effect.Methods[effect] = function(element, options){
      element = $(element);
      Effect[effect.charAt(0).toUpperCase() + effect.substring(1)](element, options);
      return element;
    };
  }
);

$w('getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles').each(
  function(f) { Effect.Methods[f] = Element[f]; }
);

Element.addMethods(Effect.Methods);
// Copyright (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
//           (c) 2005-2008 Ivan Krstic (http://blogs.law.harvard.edu/ivan)
//           (c) 2005-2008 Jon Tirsen (http://www.tirsen.com)
// Contributors:
//  Richard Livsey
//  Rahul Bhargava
//  Rob Wills
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

// Autocompleter.Base handles all the autocompletion functionality
// that's independent of the data source for autocompletion. This
// includes drawing the autocompletion menu, observing keyboard
// and mouse events, and similar.
//
// Specific autocompleters need to provide, at the very least,
// a getUpdatedChoices function that will be invoked every time
// the text inside the monitored textbox changes. This method
// should get the text for which to provide autocompletion by
// invoking this.getToken(), NOT by directly accessing
// this.element.value. This is to allow incremental tokenized
// autocompletion. Specific auto-completion logic (AJAX, etc)
// belongs in getUpdatedChoices.
//
// Tokenized incremental autocompletion is enabled automatically
// when an autocompleter is instantiated with the 'tokens' option
// in the options parameter, e.g.:
// new Ajax.Autocompleter('id','upd', '/url/', { tokens: ',' });
// will incrementally autocomplete with a comma as the token.
// Additionally, ',' in the above example can be replaced with
// a token array, e.g. { tokens: [',', '\n'] } which
// enables autocompletion on multiple tokens. This is most
// useful when one of the tokens is \n (a newline), as it
// allows smart autocompletion after linebreaks.

if(typeof Effect == 'undefined')
  throw("controls.js requires including script.aculo.us' effects.js library");

var Autocompleter = { };
Autocompleter.Base = Class.create({
  baseInitialize: function(element, update, options) {
    element          = $(element);
    this.element     = element;
    this.update      = $(update);
    this.hasFocus    = false;
    this.changed     = false;
    this.active      = false;
    this.index       = 0;
    this.entryCount  = 0;
    this.oldElementValue = this.element.value;

    if(this.setOptions)
      this.setOptions(options);
    else
      this.options = options || { };

    this.options.paramName    = this.options.paramName || this.element.name;
    this.options.tokens       = this.options.tokens || [];
    this.options.frequency    = this.options.frequency || 0.4;
    this.options.minChars     = this.options.minChars || 1;
    this.options.onShow       = this.options.onShow ||
      function(element, update){
        if(!update.style.position || update.style.position=='absolute') {
          update.style.position = 'absolute';
          Position.clone(element, update, {
            setHeight: false,
            offsetTop: element.offsetHeight
          });
        }
        Effect.Appear(update,{duration:0.15});
      };
    this.options.onHide = this.options.onHide ||
      function(element, update){ new Effect.Fade(update,{duration:0.15}) };

    if(typeof(this.options.tokens) == 'string')
      this.options.tokens = new Array(this.options.tokens);
    // Force carriage returns as token delimiters anyway
    if (!this.options.tokens.include('\n'))
      this.options.tokens.push('\n');

    this.observer = null;

    this.element.setAttribute('autocomplete','off');

    Element.hide(this.update);

    Event.observe(this.element, 'blur', this.onBlur.bindAsEventListener(this));
    Event.observe(this.element, 'keydown', this.onKeyPress.bindAsEventListener(this));
  },

  show: function() {
    if(Element.getStyle(this.update, 'display')=='none') this.options.onShow(this.element, this.update);
    if(!this.iefix &&
      (Prototype.Browser.IE) &&
      (Element.getStyle(this.update, 'position')=='absolute')) {
      new Insertion.After(this.update,
       '<iframe id="' + this.update.id + '_iefix" '+
       'style="display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);" ' +
       'src="about:blank" frameborder="0" scrolling="no"></iframe>');
      this.iefix = $(this.update.id+'_iefix');
    }
    if(this.iefix) setTimeout(this.fixIEOverlapping.bind(this), 50);
  },

  fixIEOverlapping: function() {
    Position.clone(this.update, this.iefix, {setTop:(!this.update.style.height)});
    this.iefix.style.zIndex = 1;
    this.update.style.zIndex = 2;
    Element.show(this.iefix);
  },

  hide: function() {
    this.stopIndicator();
    if(Element.getStyle(this.update, 'display')!='none') this.options.onHide(this.element, this.update);
    if(this.iefix) Element.hide(this.iefix);
  },

  startIndicator: function() {
    if(this.options.indicator) Element.show(this.options.indicator);
  },

  stopIndicator: function() {
    if(this.options.indicator) Element.hide(this.options.indicator);
  },

  onKeyPress: function(event) {
    if(this.active)
      switch(event.keyCode) {
       case Event.KEY_TAB:
       case Event.KEY_RETURN:
         this.selectEntry();
         Event.stop(event);
       case Event.KEY_ESC:
         this.hide();
         this.active = false;
         Event.stop(event);
         return;
       case Event.KEY_LEFT:
       case Event.KEY_RIGHT:
         return;
       case Event.KEY_UP:
         this.markPrevious();
         this.render();
         Event.stop(event);
         return;
       case Event.KEY_DOWN:
         this.markNext();
         this.render();
         Event.stop(event);
         return;
      }
     else
       if(event.keyCode==Event.KEY_TAB || event.keyCode==Event.KEY_RETURN ||
         (Prototype.Browser.WebKit > 0 && event.keyCode == 0)) return;

    this.changed = true;
    this.hasFocus = true;

    if(this.observer) clearTimeout(this.observer);
      this.observer =
        setTimeout(this.onObserverEvent.bind(this), this.options.frequency*1000);
  },

  activate: function() {
    this.changed = false;
    this.hasFocus = true;
    this.getUpdatedChoices();
  },

  onHover: function(event) {
    var element = Event.findElement(event, 'LI');
    if(this.index != element.autocompleteIndex)
    {
        this.index = element.autocompleteIndex;
        this.render();
    }
    Event.stop(event);
  },

  onClick: function(event) {
    var element = Event.findElement(event, 'LI');
    this.index = element.autocompleteIndex;
    this.selectEntry();
    this.hide();
  },

  onBlur: function(event) {
    // needed to make click events working
    setTimeout(this.hide.bind(this), 250);
    this.hasFocus = false;
    this.active = false;
  },

  render: function() {
    if(this.entryCount > 0) {
      for (var i = 0; i < this.entryCount; i++)
        this.index==i ?
          Element.addClassName(this.getEntry(i),"selected") :
          Element.removeClassName(this.getEntry(i),"selected");
      if(this.hasFocus) {
        this.show();
        this.active = true;
      }
    } else {
      this.active = false;
      this.hide();
    }
  },

  markPrevious: function() {
    if(this.index > 0) this.index--;
      else this.index = this.entryCount-1;
    this.getEntry(this.index).scrollIntoView(true);
  },

  markNext: function() {
    if(this.index < this.entryCount-1) this.index++;
      else this.index = 0;
    this.getEntry(this.index).scrollIntoView(false);
  },

  getEntry: function(index) {
    return this.update.firstChild.childNodes[index];
  },

  getCurrentEntry: function() {
    return this.getEntry(this.index);
  },

  selectEntry: function() {
    this.active = false;
    this.updateElement(this.getCurrentEntry());
  },

  updateElement: function(selectedElement) {
    if (this.options.updateElement) {
      this.options.updateElement(selectedElement);
      return;
    }
    var value = '';
    if (this.options.select) {
      var nodes = $(selectedElement).select('.' + this.options.select) || [];
      if(nodes.length>0) value = Element.collectTextNodes(nodes[0], this.options.select);
    } else
      value = Element.collectTextNodesIgnoreClass(selectedElement, 'informal');

    var bounds = this.getTokenBounds();
    if (bounds[0] != -1) {
      var newValue = this.element.value.substr(0, bounds[0]);
      var whitespace = this.element.value.substr(bounds[0]).match(/^\s+/);
      if (whitespace)
        newValue += whitespace[0];
      this.element.value = newValue + value + this.element.value.substr(bounds[1]);
    } else {
      this.element.value = value;
    }
    this.oldElementValue = this.element.value;
    this.element.focus();

    if (this.options.afterUpdateElement)
      this.options.afterUpdateElement(this.element, selectedElement);
  },

  updateChoices: function(choices) {
    if(!this.changed && this.hasFocus) {
      this.update.innerHTML = choices;
      Element.cleanWhitespace(this.update);
      Element.cleanWhitespace(this.update.down());

      if(this.update.firstChild && this.update.down().childNodes) {
        this.entryCount =
          this.update.down().childNodes.length;
        for (var i = 0; i < this.entryCount; i++) {
          var entry = this.getEntry(i);
          entry.autocompleteIndex = i;
          this.addObservers(entry);
        }
      } else {
        this.entryCount = 0;
      }

      this.stopIndicator();
      this.index = 0;

      if(this.entryCount==1 && this.options.autoSelect) {
        this.selectEntry();
        this.hide();
      } else {
        this.render();
      }
    }
  },

  addObservers: function(element) {
    Event.observe(element, "mouseover", this.onHover.bindAsEventListener(this));
    Event.observe(element, "click", this.onClick.bindAsEventListener(this));
  },

  onObserverEvent: function() {
    this.changed = false;
    this.tokenBounds = null;
    if(this.getToken().length>=this.options.minChars) {
      this.getUpdatedChoices();
    } else {
      this.active = false;
      this.hide();
    }
    this.oldElementValue = this.element.value;
  },

  getToken: function() {
    var bounds = this.getTokenBounds();
    return this.element.value.substring(bounds[0], bounds[1]).strip();
  },

  getTokenBounds: function() {
    if (null != this.tokenBounds) return this.tokenBounds;
    var value = this.element.value;
    if (value.strip().empty()) return [-1, 0];
    var diff = arguments.callee.getFirstDifferencePos(value, this.oldElementValue);
    var offset = (diff == this.oldElementValue.length ? 1 : 0);
    var prevTokenPos = -1, nextTokenPos = value.length;
    var tp;
    for (var index = 0, l = this.options.tokens.length; index < l; ++index) {
      tp = value.lastIndexOf(this.options.tokens[index], diff + offset - 1);
      if (tp > prevTokenPos) prevTokenPos = tp;
      tp = value.indexOf(this.options.tokens[index], diff + offset);
      if (-1 != tp && tp < nextTokenPos) nextTokenPos = tp;
    }
    return (this.tokenBounds = [prevTokenPos + 1, nextTokenPos]);
  }
});

Autocompleter.Base.prototype.getTokenBounds.getFirstDifferencePos = function(newS, oldS) {
  var boundary = Math.min(newS.length, oldS.length);
  for (var index = 0; index < boundary; ++index)
    if (newS[index] != oldS[index])
      return index;
  return boundary;
};

Ajax.Autocompleter = Class.create(Autocompleter.Base, {
  initialize: function(element, update, url, options) {
    this.baseInitialize(element, update, options);
    this.options.asynchronous  = true;
    this.options.onComplete    = this.onComplete.bind(this);
    this.options.defaultParams = this.options.parameters || null;
    this.url                   = url;
  },

  getUpdatedChoices: function() {
    this.startIndicator();

    var entry = encodeURIComponent(this.options.paramName) + '=' +
      encodeURIComponent(this.getToken());

    this.options.parameters = this.options.callback ?
      this.options.callback(this.element, entry) : entry;

    if(this.options.defaultParams)
      this.options.parameters += '&' + this.options.defaultParams;

    new Ajax.Request(this.url, this.options);
  },

  onComplete: function(request) {
    this.updateChoices(request.responseText);
  }
});

// The local array autocompleter. Used when you'd prefer to
// inject an array of autocompletion options into the page, rather
// than sending out Ajax queries, which can be quite slow sometimes.
//
// The constructor takes four parameters. The first two are, as usual,
// the id of the monitored textbox, and id of the autocompletion menu.
// The third is the array you want to autocomplete from, and the fourth
// is the options block.
//
// Extra local autocompletion options:
// - choices - How many autocompletion choices to offer
//
// - partialSearch - If false, the autocompleter will match entered
//                    text only at the beginning of strings in the
//                    autocomplete array. Defaults to true, which will
//                    match text at the beginning of any *word* in the
//                    strings in the autocomplete array. If you want to
//                    search anywhere in the string, additionally set
//                    the option fullSearch to true (default: off).
//
// - fullSsearch - Search anywhere in autocomplete array strings.
//
// - partialChars - How many characters to enter before triggering
//                   a partial match (unlike minChars, which defines
//                   how many characters are required to do any match
//                   at all). Defaults to 2.
//
// - ignoreCase - Whether to ignore case when autocompleting.
//                 Defaults to true.
//
// It's possible to pass in a custom function as the 'selector'
// option, if you prefer to write your own autocompletion logic.
// In that case, the other options above will not apply unless
// you support them.

Autocompleter.Local = Class.create(Autocompleter.Base, {
  initialize: function(element, update, array, options) {
    this.baseInitialize(element, update, options);
    this.options.array = array;
  },

  getUpdatedChoices: function() {
    this.updateChoices(this.options.selector(this));
  },

  setOptions: function(options) {
    this.options = Object.extend({
      choices: 10,
      partialSearch: true,
      partialChars: 2,
      ignoreCase: true,
      fullSearch: false,
      selector: function(instance) {
        var ret       = []; // Beginning matches
        var partial   = []; // Inside matches
        var entry     = instance.getToken();
        var count     = 0;

        for (var i = 0; i < instance.options.array.length &&
          ret.length < instance.options.choices ; i++) {

          var elem = instance.options.array[i];
          var foundPos = instance.options.ignoreCase ?
            elem.toLowerCase().indexOf(entry.toLowerCase()) :
            elem.indexOf(entry);

          while (foundPos != -1) {
            if (foundPos == 0 && elem.length != entry.length) {
              ret.push("<li><strong>" + elem.substr(0, entry.length) + "</strong>" +
                elem.substr(entry.length) + "</li>");
              break;
            } else if (entry.length >= instance.options.partialChars &&
              instance.options.partialSearch && foundPos != -1) {
              if (instance.options.fullSearch || /\s/.test(elem.substr(foundPos-1,1))) {
                partial.push("<li>" + elem.substr(0, foundPos) + "<strong>" +
                  elem.substr(foundPos, entry.length) + "</strong>" + elem.substr(
                  foundPos + entry.length) + "</li>");
                break;
              }
            }

            foundPos = instance.options.ignoreCase ?
              elem.toLowerCase().indexOf(entry.toLowerCase(), foundPos + 1) :
              elem.indexOf(entry, foundPos + 1);

          }
        }
        if (partial.length)
          ret = ret.concat(partial.slice(0, instance.options.choices - ret.length));
        return "<ul>" + ret.join('') + "</ul>";
      }
    }, options || { });
  }
});

// AJAX in-place editor and collection editor
// Full rewrite by Christophe Porteneuve <tdd@tddsworld.com> (April 2007).

// Use this if you notice weird scrolling problems on some browsers,
// the DOM might be a bit confused when this gets called so do this
// waits 1 ms (with setTimeout) until it does the activation
Field.scrollFreeActivate = function(field) {
  setTimeout(function() {
    Field.activate(field);
  }, 1);
};

Ajax.InPlaceEditor = Class.create({
  initialize: function(element, url, options) {
    this.url = url;
    this.element = element = $(element);
    this.prepareOptions();
    this._controls = { };
    arguments.callee.dealWithDeprecatedOptions(options); // DEPRECATION LAYER!!!
    Object.extend(this.options, options || { });
    if (!this.options.formId && this.element.id) {
      this.options.formId = this.element.id + '-inplaceeditor';
      if ($(this.options.formId))
        this.options.formId = '';
    }
    if (this.options.externalControl)
      this.options.externalControl = $(this.options.externalControl);
    if (!this.options.externalControl)
      this.options.externalControlOnly = false;
    this._originalBackground = this.element.getStyle('background-color') || 'transparent';
    this.element.title = this.options.clickToEditText;
    this._boundCancelHandler = this.handleFormCancellation.bind(this);
    this._boundComplete = (this.options.onComplete || Prototype.emptyFunction).bind(this);
    this._boundFailureHandler = this.handleAJAXFailure.bind(this);
    this._boundSubmitHandler = this.handleFormSubmission.bind(this);
    this._boundWrapperHandler = this.wrapUp.bind(this);
    this.registerListeners();
  },
  checkForEscapeOrReturn: function(e) {
    if (!this._editing || e.ctrlKey || e.altKey || e.shiftKey) return;
    if (Event.KEY_ESC == e.keyCode)
      this.handleFormCancellation(e);
    else if (Event.KEY_RETURN == e.keyCode)
      this.handleFormSubmission(e);
  },
  createControl: function(mode, handler, extraClasses) {
    var control = this.options[mode + 'Control'];
    var text = this.options[mode + 'Text'];
    if ('button' == control) {
      var btn = document.createElement('input');
      btn.type = 'submit';
      btn.value = text;
      btn.className = 'editor_' + mode + '_button';
      if ('cancel' == mode)
        btn.onclick = this._boundCancelHandler;
      this._form.appendChild(btn);
      this._controls[mode] = btn;
    } else if ('link' == control) {
      var link = document.createElement('a');
      link.href = '#';
      link.appendChild(document.createTextNode(text));
      link.onclick = 'cancel' == mode ? this._boundCancelHandler : this._boundSubmitHandler;
      link.className = 'editor_' + mode + '_link';
      if (extraClasses)
        link.className += ' ' + extraClasses;
      this._form.appendChild(link);
      this._controls[mode] = link;
    }
  },
  createEditField: function() {
    var text = (this.options.loadTextURL ? this.options.loadingText : this.getText());
    var fld;
    if (1 >= this.options.rows && !/\r|\n/.test(this.getText())) {
      fld = document.createElement('input');
      fld.type = 'text';
      var size = this.options.size || this.options.cols || 0;
      if (0 < size) fld.size = size;
    } else {
      fld = document.createElement('textarea');
      fld.rows = (1 >= this.options.rows ? this.options.autoRows : this.options.rows);
      fld.cols = this.options.cols || 40;
    }
    fld.name = this.options.paramName;
    fld.value = text; // No HTML breaks conversion anymore
    fld.className = 'editor_field';
    if (this.options.submitOnBlur)
      fld.onblur = this._boundSubmitHandler;
    this._controls.editor = fld;
    if (this.options.loadTextURL)
      this.loadExternalText();
    this._form.appendChild(this._controls.editor);
  },
  createForm: function() {
    var ipe = this;
    function addText(mode, condition) {
      var text = ipe.options['text' + mode + 'Controls'];
      if (!text || condition === false) return;
      ipe._form.appendChild(document.createTextNode(text));
    };
    this._form = $(document.createElement('form'));
    this._form.id = this.options.formId;
    this._form.addClassName(this.options.formClassName);
    this._form.onsubmit = this._boundSubmitHandler;
    this.createEditField();
    if ('textarea' == this._controls.editor.tagName.toLowerCase())
      this._form.appendChild(document.createElement('br'));
    if (this.options.onFormCustomization)
      this.options.onFormCustomization(this, this._form);
    addText('Before', this.options.okControl || this.options.cancelControl);
    this.createControl('ok', this._boundSubmitHandler);
    addText('Between', this.options.okControl && this.options.cancelControl);
    this.createControl('cancel', this._boundCancelHandler, 'editor_cancel');
    addText('After', this.options.okControl || this.options.cancelControl);
  },
  destroy: function() {
    if (this._oldInnerHTML)
      this.element.innerHTML = this._oldInnerHTML;
    this.leaveEditMode();
    this.unregisterListeners();
  },
  enterEditMode: function(e) {
    if (this._saving || this._editing) return;
    this._editing = true;
    this.triggerCallback('onEnterEditMode');
    if (this.options.externalControl)
      this.options.externalControl.hide();
    this.element.hide();
    this.createForm();
    this.element.parentNode.insertBefore(this._form, this.element);
    if (!this.options.loadTextURL)
      this.postProcessEditField();
    if (e) Event.stop(e);
  },
  enterHover: function(e) {
    if (this.options.hoverClassName)
      this.element.addClassName(this.options.hoverClassName);
    if (this._saving) return;
    this.triggerCallback('onEnterHover');
  },
  getText: function() {
    return this.element.innerHTML.unescapeHTML();
  },
  handleAJAXFailure: function(transport) {
    this.triggerCallback('onFailure', transport);
    if (this._oldInnerHTML) {
      this.element.innerHTML = this._oldInnerHTML;
      this._oldInnerHTML = null;
    }
  },
  handleFormCancellation: function(e) {
    this.wrapUp();
    if (e) Event.stop(e);
  },
  handleFormSubmission: function(e) {
    var form = this._form;
    var value = $F(this._controls.editor);
    this.prepareSubmission();
    var params = this.options.callback(form, value) || '';
    if (Object.isString(params))
      params = params.toQueryParams();
    params.editorId = this.element.id;
    if (this.options.htmlResponse) {
      var options = Object.extend({ evalScripts: true }, this.options.ajaxOptions);
      Object.extend(options, {
        parameters: params,
        onComplete: this._boundWrapperHandler,
        onFailure: this._boundFailureHandler
      });
      new Ajax.Updater({ success: this.element }, this.url, options);
    } else {
      var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
      Object.extend(options, {
        parameters: params,
        onComplete: this._boundWrapperHandler,
        onFailure: this._boundFailureHandler
      });
      new Ajax.Request(this.url, options);
    }
    if (e) Event.stop(e);
  },
  leaveEditMode: function() {
    this.element.removeClassName(this.options.savingClassName);
    this.removeForm();
    this.leaveHover();
    this.element.style.backgroundColor = this._originalBackground;
    this.element.show();
    if (this.options.externalControl)
      this.options.externalControl.show();
    this._saving = false;
    this._editing = false;
    this._oldInnerHTML = null;
    this.triggerCallback('onLeaveEditMode');
  },
  leaveHover: function(e) {
    if (this.options.hoverClassName)
      this.element.removeClassName(this.options.hoverClassName);
    if (this._saving) return;
    this.triggerCallback('onLeaveHover');
  },
  loadExternalText: function() {
    this._form.addClassName(this.options.loadingClassName);
    this._controls.editor.disabled = true;
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function(transport) {
        this._form.removeClassName(this.options.loadingClassName);
        var text = transport.responseText;
        if (this.options.stripLoadedTextTags)
          text = text.stripTags();
        this._controls.editor.value = text;
        this._controls.editor.disabled = false;
        this.postProcessEditField();
      }.bind(this),
      onFailure: this._boundFailureHandler
    });
    new Ajax.Request(this.options.loadTextURL, options);
  },
  postProcessEditField: function() {
    var fpc = this.options.fieldPostCreation;
    if (fpc)
      $(this._controls.editor)['focus' == fpc ? 'focus' : 'activate']();
  },
  prepareOptions: function() {
    this.options = Object.clone(Ajax.InPlaceEditor.DefaultOptions);
    Object.extend(this.options, Ajax.InPlaceEditor.DefaultCallbacks);
    [this._extraDefaultOptions].flatten().compact().each(function(defs) {
      Object.extend(this.options, defs);
    }.bind(this));
  },
  prepareSubmission: function() {
    this._saving = true;
    this.removeForm();
    this.leaveHover();
    this.showSaving();
  },
  registerListeners: function() {
    this._listeners = { };
    var listener;
    $H(Ajax.InPlaceEditor.Listeners).each(function(pair) {
      listener = this[pair.value].bind(this);
      this._listeners[pair.key] = listener;
      if (!this.options.externalControlOnly)
        this.element.observe(pair.key, listener);
      if (this.options.externalControl)
        this.options.externalControl.observe(pair.key, listener);
    }.bind(this));
  },
  removeForm: function() {
    if (!this._form) return;
    this._form.remove();
    this._form = null;
    this._controls = { };
  },
  showSaving: function() {
    this._oldInnerHTML = this.element.innerHTML;
    this.element.innerHTML = this.options.savingText;
    this.element.addClassName(this.options.savingClassName);
    this.element.style.backgroundColor = this._originalBackground;
    this.element.show();
  },
  triggerCallback: function(cbName, arg) {
    if ('function' == typeof this.options[cbName]) {
      this.options[cbName](this, arg);
    }
  },
  unregisterListeners: function() {
    $H(this._listeners).each(function(pair) {
      if (!this.options.externalControlOnly)
        this.element.stopObserving(pair.key, pair.value);
      if (this.options.externalControl)
        this.options.externalControl.stopObserving(pair.key, pair.value);
    }.bind(this));
  },
  wrapUp: function(transport) {
    this.leaveEditMode();
    // Can't use triggerCallback due to backward compatibility: requires
    // binding + direct element
    this._boundComplete(transport, this.element);
  }
});

Object.extend(Ajax.InPlaceEditor.prototype, {
  dispose: Ajax.InPlaceEditor.prototype.destroy
});

Ajax.InPlaceCollectionEditor = Class.create(Ajax.InPlaceEditor, {
  initialize: function($super, element, url, options) {
    this._extraDefaultOptions = Ajax.InPlaceCollectionEditor.DefaultOptions;
    $super(element, url, options);
  },

  createEditField: function() {
    var list = document.createElement('select');
    list.name = this.options.paramName;
    list.size = 1;
    this._controls.editor = list;
    this._collection = this.options.collection || [];
    if (this.options.loadCollectionURL)
      this.loadCollection();
    else
      this.checkForExternalText();
    this._form.appendChild(this._controls.editor);
  },

  loadCollection: function() {
    this._form.addClassName(this.options.loadingClassName);
    this.showLoadingText(this.options.loadingCollectionText);
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function(transport) {
        var js = transport.responseText.strip();
        if (!/^\[.*\]$/.test(js)) // TODO: improve sanity check
          throw('Server returned an invalid collection representation.');
        this._collection = eval(js);
        this.checkForExternalText();
      }.bind(this),
      onFailure: this.onFailure
    });
    new Ajax.Request(this.options.loadCollectionURL, options);
  },

  showLoadingText: function(text) {
    this._controls.editor.disabled = true;
    var tempOption = this._controls.editor.firstChild;
    if (!tempOption) {
      tempOption = document.createElement('option');
      tempOption.value = '';
      this._controls.editor.appendChild(tempOption);
      tempOption.selected = true;
    }
    tempOption.update((text || '').stripScripts().stripTags());
  },

  checkForExternalText: function() {
    this._text = this.getText();
    if (this.options.loadTextURL)
      this.loadExternalText();
    else
      this.buildOptionList();
  },

  loadExternalText: function() {
    this.showLoadingText(this.options.loadingText);
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function(transport) {
        this._text = transport.responseText.strip();
        this.buildOptionList();
      }.bind(this),
      onFailure: this.onFailure
    });
    new Ajax.Request(this.options.loadTextURL, options);
  },

  buildOptionList: function() {
    this._form.removeClassName(this.options.loadingClassName);
    this._collection = this._collection.map(function(entry) {
      return 2 === entry.length ? entry : [entry, entry].flatten();
    });
    var marker = ('value' in this.options) ? this.options.value : this._text;
    var textFound = this._collection.any(function(entry) {
      return entry[0] == marker;
    }.bind(this));
    this._controls.editor.update('');
    var option;
    this._collection.each(function(entry, index) {
      option = document.createElement('option');
      option.value = entry[0];
      option.selected = textFound ? entry[0] == marker : 0 == index;
      option.appendChild(document.createTextNode(entry[1]));
      this._controls.editor.appendChild(option);
    }.bind(this));
    this._controls.editor.disabled = false;
    Field.scrollFreeActivate(this._controls.editor);
  }
});

//**** DEPRECATION LAYER FOR InPlace[Collection]Editor! ****
//**** This only  exists for a while,  in order to  let ****
//**** users adapt to  the new API.  Read up on the new ****
//**** API and convert your code to it ASAP!            ****

Ajax.InPlaceEditor.prototype.initialize.dealWithDeprecatedOptions = function(options) {
  if (!options) return;
  function fallback(name, expr) {
    if (name in options || expr === undefined) return;
    options[name] = expr;
  };
  fallback('cancelControl', (options.cancelLink ? 'link' : (options.cancelButton ? 'button' :
    options.cancelLink == options.cancelButton == false ? false : undefined)));
  fallback('okControl', (options.okLink ? 'link' : (options.okButton ? 'button' :
    options.okLink == options.okButton == false ? false : undefined)));
  fallback('highlightColor', options.highlightcolor);
  fallback('highlightEndColor', options.highlightendcolor);
};

Object.extend(Ajax.InPlaceEditor, {
  DefaultOptions: {
    ajaxOptions: { },
    autoRows: 3,                                // Use when multi-line w/ rows == 1
    cancelControl: 'link',                      // 'link'|'button'|false
    cancelText: 'cancel',
    clickToEditText: 'Click to edit',
    externalControl: null,                      // id|elt
    externalControlOnly: false,
    fieldPostCreation: 'activate',              // 'activate'|'focus'|false
    formClassName: 'inplaceeditor-form',
    formId: null,                               // id|elt
    highlightColor: '#ffff99',
    highlightEndColor: '#ffffff',
    hoverClassName: '',
    htmlResponse: true,
    loadingClassName: 'inplaceeditor-loading',
    loadingText: 'Loading...',
    okControl: 'button',                        // 'link'|'button'|false
    okText: 'ok',
    paramName: 'value',
    rows: 1,                                    // If 1 and multi-line, uses autoRows
    savingClassName: 'inplaceeditor-saving',
    savingText: 'Saving...',
    size: 0,
    stripLoadedTextTags: false,
    submitOnBlur: false,
    textAfterControls: '',
    textBeforeControls: '',
    textBetweenControls: ''
  },
  DefaultCallbacks: {
    callback: function(form) {
      return Form.serialize(form);
    },
    onComplete: function(transport, element) {
      // For backward compatibility, this one is bound to the IPE, and passes
      // the element directly.  It was too often customized, so we don't break it.
      new Effect.Highlight(element, {
        startcolor: this.options.highlightColor, keepBackgroundImage: true });
    },
    onEnterEditMode: null,
    onEnterHover: function(ipe) {
      ipe.element.style.backgroundColor = ipe.options.highlightColor;
      if (ipe._effect)
        ipe._effect.cancel();
    },
    onFailure: function(transport, ipe) {
      alert('Error communication with the server: ' + transport.responseText.stripTags());
    },
    onFormCustomization: null, // Takes the IPE and its generated form, after editor, before controls.
    onLeaveEditMode: null,
    onLeaveHover: function(ipe) {
      ipe._effect = new Effect.Highlight(ipe.element, {
        startcolor: ipe.options.highlightColor, endcolor: ipe.options.highlightEndColor,
        restorecolor: ipe._originalBackground, keepBackgroundImage: true
      });
    }
  },
  Listeners: {
    click: 'enterEditMode',
    keydown: 'checkForEscapeOrReturn',
    mouseover: 'enterHover',
    mouseout: 'leaveHover'
  }
});

Ajax.InPlaceCollectionEditor.DefaultOptions = {
  loadingCollectionText: 'Loading options...'
};

// Delayed observer, like Form.Element.Observer,
// but waits for delay after last key input
// Ideal for live-search fields

Form.Element.DelayedObserver = Class.create({
  initialize: function(element, delay, callback) {
    this.delay     = delay || 0.5;
    this.element   = $(element);
    this.callback  = callback;
    this.timer     = null;
    this.lastValue = $F(this.element);
    Event.observe(this.element,'keyup',this.delayedListener.bindAsEventListener(this));
  },
  delayedListener: function(event) {
    if(this.lastValue == $F(this.element)) return;
    if(this.timer) clearTimeout(this.timer);
    this.timer = setTimeout(this.onTimerEvent.bind(this), this.delay * 1000);
    this.lastValue = $F(this.element);
  },
  onTimerEvent: function() {
    this.timer = null;
    this.callback(this.element, $F(this.element));
  }
});
// Copyright (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
//           (c) 2005-2008 Sammi Williams (http://www.oriontransfer.co.nz, sammi@oriontransfer.co.nz)
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

if(Object.isUndefined(Effect))
  throw("dragdrop.js requires including script.aculo.us' effects.js library");

var Droppables = {
  drops: [],

  remove: function(element) {
    this.drops = this.drops.reject(function(d) { return d.element==$(element) });
  },

  add: function(element) {
    element = $(element);
    var options = Object.extend({
      greedy:     true,
      hoverclass: null,
      tree:       false
    }, arguments[1] || { });

    // cache containers
    if(options.containment) {
      options._containers = [];
      var containment = options.containment;
      if(Object.isArray(containment)) {
        containment.each( function(c) { options._containers.push($(c)) });
      } else {
        options._containers.push($(containment));
      }
    }

    if(options.accept) options.accept = [options.accept].flatten();

    Element.makePositioned(element); // fix IE
    options.element = element;

    this.drops.push(options);
  },

  findDeepestChild: function(drops) {
    deepest = drops[0];

    for (i = 1; i < drops.length; ++i)
      if (Element.isParent(drops[i].element, deepest.element))
        deepest = drops[i];

    return deepest;
  },

  isContained: function(element, drop) {
    var containmentNode;
    if(drop.tree) {
      containmentNode = element.treeNode;
    } else {
      containmentNode = element.parentNode;
    }
    return drop._containers.detect(function(c) { return containmentNode == c });
  },

  isAffected: function(point, element, drop) {
    return (
      (drop.element!=element) &&
      ((!drop._containers) ||
        this.isContained(element, drop)) &&
      ((!drop.accept) ||
        (Element.classNames(element).detect(
          function(v) { return drop.accept.include(v) } ) )) &&
      Position.within(drop.element, point[0], point[1]) );
  },

  deactivate: function(drop) {
    if(drop.hoverclass)
      Element.removeClassName(drop.element, drop.hoverclass);
    this.last_active = null;
  },

  activate: function(drop) {
    if(drop.hoverclass)
      Element.addClassName(drop.element, drop.hoverclass);
    this.last_active = drop;
  },

  show: function(point, element) {
    if(!this.drops.length) return;
    var drop, affected = [];

    this.drops.each( function(drop) {
      if(Droppables.isAffected(point, element, drop))
        affected.push(drop);
    });

    if(affected.length>0)
      drop = Droppables.findDeepestChild(affected);

    if(this.last_active && this.last_active != drop) this.deactivate(this.last_active);
    if (drop) {
      Position.within(drop.element, point[0], point[1]);
      if(drop.onHover)
        drop.onHover(element, drop.element, Position.overlap(drop.overlap, drop.element));

      if (drop != this.last_active) Droppables.activate(drop);
    }
  },

  fire: function(event, element) {
    if(!this.last_active) return;
    Position.prepare();

    if (this.isAffected([Event.pointerX(event), Event.pointerY(event)], element, this.last_active))
      if (this.last_active.onDrop) {
        this.last_active.onDrop(element, this.last_active.element, event);
        return true;
      }
  },

  reset: function() {
    if(this.last_active)
      this.deactivate(this.last_active);
  }
};

var Draggables = {
  drags: [],
  observers: [],

  register: function(draggable) {
    if(this.drags.length == 0) {
      this.eventMouseUp   = this.endDrag.bindAsEventListener(this);
      this.eventMouseMove = this.updateDrag.bindAsEventListener(this);
      this.eventKeypress  = this.keyPress.bindAsEventListener(this);

      Event.observe(document, "mouseup", this.eventMouseUp);
      Event.observe(document, "mousemove", this.eventMouseMove);
      Event.observe(document, "keypress", this.eventKeypress);
    }
    this.drags.push(draggable);
  },

  unregister: function(draggable) {
    this.drags = this.drags.reject(function(d) { return d==draggable });
    if(this.drags.length == 0) {
      Event.stopObserving(document, "mouseup", this.eventMouseUp);
      Event.stopObserving(document, "mousemove", this.eventMouseMove);
      Event.stopObserving(document, "keypress", this.eventKeypress);
    }
  },

  activate: function(draggable) {
    if(draggable.options.delay) {
      this._timeout = setTimeout(function() {
        Draggables._timeout = null;
        window.focus();
        Draggables.activeDraggable = draggable;
      }.bind(this), draggable.options.delay);
    } else {
      window.focus(); // allows keypress events if window isn't currently focused, fails for Safari
      this.activeDraggable = draggable;
    }
  },

  deactivate: function() {
    this.activeDraggable = null;
  },

  updateDrag: function(event) {
    if(!this.activeDraggable) return;
    var pointer = [Event.pointerX(event), Event.pointerY(event)];
    // Mozilla-based browsers fire successive mousemove events with
    // the same coordinates, prevent needless redrawing (moz bug?)
    if(this._lastPointer && (this._lastPointer.inspect() == pointer.inspect())) return;
    this._lastPointer = pointer;

    this.activeDraggable.updateDrag(event, pointer);
  },

  endDrag: function(event) {
    if(this._timeout) {
      clearTimeout(this._timeout);
      this._timeout = null;
    }
    if(!this.activeDraggable) return;
    this._lastPointer = null;
    this.activeDraggable.endDrag(event);
    this.activeDraggable = null;
  },

  keyPress: function(event) {
    if(this.activeDraggable)
      this.activeDraggable.keyPress(event);
  },

  addObserver: function(observer) {
    this.observers.push(observer);
    this._cacheObserverCallbacks();
  },

  removeObserver: function(element) {  // element instead of observer fixes mem leaks
    this.observers = this.observers.reject( function(o) { return o.element==element });
    this._cacheObserverCallbacks();
  },

  notify: function(eventName, draggable, event) {  // 'onStart', 'onEnd', 'onDrag'
    if(this[eventName+'Count'] > 0)
      this.observers.each( function(o) {
        if(o[eventName]) o[eventName](eventName, draggable, event);
      });
    if(draggable.options[eventName]) draggable.options[eventName](draggable, event);
  },

  _cacheObserverCallbacks: function() {
    ['onStart','onEnd','onDrag'].each( function(eventName) {
      Draggables[eventName+'Count'] = Draggables.observers.select(
        function(o) { return o[eventName]; }
      ).length;
    });
  }
};

/*--------------------------------------------------------------------------*/

var Draggable = Class.create({
  initialize: function(element) {
    var defaults = {
      handle: false,
      reverteffect: function(element, top_offset, left_offset) {
        var dur = Math.sqrt(Math.abs(top_offset^2)+Math.abs(left_offset^2))*0.02;
        new Effect.Move(element, { x: -left_offset, y: -top_offset, duration: dur,
          queue: {scope:'_draggable', position:'end'}
        });
      },
      endeffect: function(element) {
        var toOpacity = Object.isNumber(element._opacity) ? element._opacity : 1.0;
        new Effect.Opacity(element, {duration:0.2, from:0.7, to:toOpacity,
          queue: {scope:'_draggable', position:'end'},
          afterFinish: function(){
            Draggable._dragging[element] = false
          }
        });
      },
      zindex: 1000,
      revert: false,
      quiet: false,
      scroll: false,
      scrollSensitivity: 20,
      scrollSpeed: 15,
      snap: false,  // false, or xy or [x,y] or function(x,y){ return [x,y] }
      delay: 0
    };

    if(!arguments[1] || Object.isUndefined(arguments[1].endeffect))
      Object.extend(defaults, {
        starteffect: function(element) {
          element._opacity = Element.getOpacity(element);
          Draggable._dragging[element] = true;
          new Effect.Opacity(element, {duration:0.2, from:element._opacity, to:0.7});
        }
      });

    var options = Object.extend(defaults, arguments[1] || { });

    this.element = $(element);

    if(options.handle && Object.isString(options.handle))
      this.handle = this.element.down('.'+options.handle, 0);

    if(!this.handle) this.handle = $(options.handle);
    if(!this.handle) this.handle = this.element;

    if(options.scroll && !options.scroll.scrollTo && !options.scroll.outerHTML) {
      options.scroll = $(options.scroll);
      this._isScrollChild = Element.childOf(this.element, options.scroll);
    }

    Element.makePositioned(this.element); // fix IE

    this.options  = options;
    this.dragging = false;

    this.eventMouseDown = this.initDrag.bindAsEventListener(this);
    Event.observe(this.handle, "mousedown", this.eventMouseDown);

    Draggables.register(this);
  },

  destroy: function() {
    Event.stopObserving(this.handle, "mousedown", this.eventMouseDown);
    Draggables.unregister(this);
  },

  currentDelta: function() {
    return([
      parseInt(Element.getStyle(this.element,'left') || '0'),
      parseInt(Element.getStyle(this.element,'top') || '0')]);
  },

  initDrag: function(event) {
    if(!Object.isUndefined(Draggable._dragging[this.element]) &&
      Draggable._dragging[this.element]) return;
    if(Event.isLeftClick(event)) {
      // abort on form elements, fixes a Firefox issue
      var src = Event.element(event);
      if((tag_name = src.tagName.toUpperCase()) && (
        tag_name=='INPUT' ||
        tag_name=='SELECT' ||
        tag_name=='OPTION' ||
        tag_name=='BUTTON' ||
        tag_name=='TEXTAREA')) return;

      var pointer = [Event.pointerX(event), Event.pointerY(event)];
      var pos     = Position.cumulativeOffset(this.element);
      this.offset = [0,1].map( function(i) { return (pointer[i] - pos[i]) });

      Draggables.activate(this);
      Event.stop(event);
    }
  },

  startDrag: function(event) {
    this.dragging = true;
    if(!this.delta)
      this.delta = this.currentDelta();

    if(this.options.zindex) {
      this.originalZ = parseInt(Element.getStyle(this.element,'z-index') || 0);
      this.element.style.zIndex = this.options.zindex;
    }

    if(this.options.ghosting) {
      this._clone = this.element.cloneNode(true);
      this._originallyAbsolute = (this.element.getStyle('position') == 'absolute');
      if (!this._originallyAbsolute)
        Position.absolutize(this.element);
      this.element.parentNode.insertBefore(this._clone, this.element);
    }

    if(this.options.scroll) {
      if (this.options.scroll == window) {
        var where = this._getWindowScroll(this.options.scroll);
        this.originalScrollLeft = where.left;
        this.originalScrollTop = where.top;
      } else {
        this.originalScrollLeft = this.options.scroll.scrollLeft;
        this.originalScrollTop = this.options.scroll.scrollTop;
      }
    }

    Draggables.notify('onStart', this, event);

    if(this.options.starteffect) this.options.starteffect(this.element);
  },

  updateDrag: function(event, pointer) {
    if(!this.dragging) this.startDrag(event);

    if(!this.options.quiet){
      Position.prepare();
      Droppables.show(pointer, this.element);
    }

    Draggables.notify('onDrag', this, event);

    this.draw(pointer);
    if(this.options.change) this.options.change(this);

    if(this.options.scroll) {
      this.stopScrolling();

      var p;
      if (this.options.scroll == window) {
        with(this._getWindowScroll(this.options.scroll)) { p = [ left, top, left+width, top+height ]; }
      } else {
        p = Position.page(this.options.scroll);
        p[0] += this.options.scroll.scrollLeft + Position.deltaX;
        p[1] += this.options.scroll.scrollTop + Position.deltaY;
        p.push(p[0]+this.options.scroll.offsetWidth);
        p.push(p[1]+this.options.scroll.offsetHeight);
      }
      var speed = [0,0];
      if(pointer[0] < (p[0]+this.options.scrollSensitivity)) speed[0] = pointer[0]-(p[0]+this.options.scrollSensitivity);
      if(pointer[1] < (p[1]+this.options.scrollSensitivity)) speed[1] = pointer[1]-(p[1]+this.options.scrollSensitivity);
      if(pointer[0] > (p[2]-this.options.scrollSensitivity)) speed[0] = pointer[0]-(p[2]-this.options.scrollSensitivity);
      if(pointer[1] > (p[3]-this.options.scrollSensitivity)) speed[1] = pointer[1]-(p[3]-this.options.scrollSensitivity);
      this.startScrolling(speed);
    }

    // fix AppleWebKit rendering
    if(Prototype.Browser.WebKit) window.scrollBy(0,0);

    Event.stop(event);
  },

  finishDrag: function(event, success) {
    this.dragging = false;

    if(this.options.quiet){
      Position.prepare();
      var pointer = [Event.pointerX(event), Event.pointerY(event)];
      Droppables.show(pointer, this.element);
    }

    if(this.options.ghosting) {
      if (!this._originallyAbsolute)
        Position.relativize(this.element);
      delete this._originallyAbsolute;
      Element.remove(this._clone);
      this._clone = null;
    }

    var dropped = false;
    if(success) {
      dropped = Droppables.fire(event, this.element);
      if (!dropped) dropped = false;
    }
    if(dropped && this.options.onDropped) this.options.onDropped(this.element);
    Draggables.notify('onEnd', this, event);

    var revert = this.options.revert;
    if(revert && Object.isFunction(revert)) revert = revert(this.element);

    var d = this.currentDelta();
    if(revert && this.options.reverteffect) {
      if (dropped == 0 || revert != 'failure')
        this.options.reverteffect(this.element,
          d[1]-this.delta[1], d[0]-this.delta[0]);
    } else {
      this.delta = d;
    }

    if(this.options.zindex)
      this.element.style.zIndex = this.originalZ;

    if(this.options.endeffect)
      this.options.endeffect(this.element);

    Draggables.deactivate(this);
    Droppables.reset();
  },

  keyPress: function(event) {
    if(event.keyCode!=Event.KEY_ESC) return;
    this.finishDrag(event, false);
    Event.stop(event);
  },

  endDrag: function(event) {
    if(!this.dragging) return;
    this.stopScrolling();
    this.finishDrag(event, true);
    Event.stop(event);
  },

  draw: function(point) {
    var pos = Position.cumulativeOffset(this.element);
    if(this.options.ghosting) {
      var r   = Position.realOffset(this.element);
      pos[0] += r[0] - Position.deltaX; pos[1] += r[1] - Position.deltaY;
    }

    var d = this.currentDelta();
    pos[0] -= d[0]; pos[1] -= d[1];

    if(this.options.scroll && (this.options.scroll != window && this._isScrollChild)) {
      pos[0] -= this.options.scroll.scrollLeft-this.originalScrollLeft;
      pos[1] -= this.options.scroll.scrollTop-this.originalScrollTop;
    }

    var p = [0,1].map(function(i){
      return (point[i]-pos[i]-this.offset[i])
    }.bind(this));

    if(this.options.snap) {
      if(Object.isFunction(this.options.snap)) {
        p = this.options.snap(p[0],p[1],this);
      } else {
      if(Object.isArray(this.options.snap)) {
        p = p.map( function(v, i) {
          return (v/this.options.snap[i]).round()*this.options.snap[i] }.bind(this));
      } else {
        p = p.map( function(v) {
          return (v/this.options.snap).round()*this.options.snap }.bind(this));
      }
    }}

    var style = this.element.style;
    if((!this.options.constraint) || (this.options.constraint=='horizontal'))
      style.left = p[0] + "px";
    if((!this.options.constraint) || (this.options.constraint=='vertical'))
      style.top  = p[1] + "px";

    if(style.visibility=="hidden") style.visibility = ""; // fix gecko rendering
  },

  stopScrolling: function() {
    if(this.scrollInterval) {
      clearInterval(this.scrollInterval);
      this.scrollInterval = null;
      Draggables._lastScrollPointer = null;
    }
  },

  startScrolling: function(speed) {
    if(!(speed[0] || speed[1])) return;
    this.scrollSpeed = [speed[0]*this.options.scrollSpeed,speed[1]*this.options.scrollSpeed];
    this.lastScrolled = new Date();
    this.scrollInterval = setInterval(this.scroll.bind(this), 10);
  },

  scroll: function() {
    var current = new Date();
    var delta = current - this.lastScrolled;
    this.lastScrolled = current;
    if(this.options.scroll == window) {
      with (this._getWindowScroll(this.options.scroll)) {
        if (this.scrollSpeed[0] || this.scrollSpeed[1]) {
          var d = delta / 1000;
          this.options.scroll.scrollTo( left + d*this.scrollSpeed[0], top + d*this.scrollSpeed[1] );
        }
      }
    } else {
      this.options.scroll.scrollLeft += this.scrollSpeed[0] * delta / 1000;
      this.options.scroll.scrollTop  += this.scrollSpeed[1] * delta / 1000;
    }

    Position.prepare();
    Droppables.show(Draggables._lastPointer, this.element);
    Draggables.notify('onDrag', this);
    if (this._isScrollChild) {
      Draggables._lastScrollPointer = Draggables._lastScrollPointer || $A(Draggables._lastPointer);
      Draggables._lastScrollPointer[0] += this.scrollSpeed[0] * delta / 1000;
      Draggables._lastScrollPointer[1] += this.scrollSpeed[1] * delta / 1000;
      if (Draggables._lastScrollPointer[0] < 0)
        Draggables._lastScrollPointer[0] = 0;
      if (Draggables._lastScrollPointer[1] < 0)
        Draggables._lastScrollPointer[1] = 0;
      this.draw(Draggables._lastScrollPointer);
    }

    if(this.options.change) this.options.change(this);
  },

  _getWindowScroll: function(w) {
    var T, L, W, H;
    with (w.document) {
      if (w.document.documentElement && documentElement.scrollTop) {
        T = documentElement.scrollTop;
        L = documentElement.scrollLeft;
      } else if (w.document.body) {
        T = body.scrollTop;
        L = body.scrollLeft;
      }
      if (w.innerWidth) {
        W = w.innerWidth;
        H = w.innerHeight;
      } else if (w.document.documentElement && documentElement.clientWidth) {
        W = documentElement.clientWidth;
        H = documentElement.clientHeight;
      } else {
        W = body.offsetWidth;
        H = body.offsetHeight;
      }
    }
    return { top: T, left: L, width: W, height: H };
  }
});

Draggable._dragging = { };

/*--------------------------------------------------------------------------*/

var SortableObserver = Class.create({
  initialize: function(element, observer) {
    this.element   = $(element);
    this.observer  = observer;
    this.lastValue = Sortable.serialize(this.element);
  },

  onStart: function() {
    this.lastValue = Sortable.serialize(this.element);
  },

  onEnd: function() {
    Sortable.unmark();
    if(this.lastValue != Sortable.serialize(this.element))
      this.observer(this.element)
  }
});

var Sortable = {
  SERIALIZE_RULE: /^[^_\-](?:[A-Za-z0-9\-\_]*)[_](.*)$/,

  sortables: { },

  _findRootElement: function(element) {
    while (element.tagName.toUpperCase() != "BODY") {
      if(element.id && Sortable.sortables[element.id]) return element;
      element = element.parentNode;
    }
  },

  options: function(element) {
    element = Sortable._findRootElement($(element));
    if(!element) return;
    return Sortable.sortables[element.id];
  },

  destroy: function(element){
    element = $(element);
    var s = Sortable.sortables[element.id];

    if(s) {
      Draggables.removeObserver(s.element);
      s.droppables.each(function(d){ Droppables.remove(d) });
      s.draggables.invoke('destroy');

      delete Sortable.sortables[s.element.id];
    }
  },

  create: function(element) {
    element = $(element);
    var options = Object.extend({
      element:     element,
      tag:         'li',       // assumes li children, override with tag: 'tagname'
      dropOnEmpty: false,
      tree:        false,
      treeTag:     'ul',
      overlap:     'vertical', // one of 'vertical', 'horizontal'
      constraint:  'vertical', // one of 'vertical', 'horizontal', false
      containment: element,    // also takes array of elements (or id's); or false
      handle:      false,      // or a CSS class
      only:        false,
      delay:       0,
      hoverclass:  null,
      ghosting:    false,
      quiet:       false,
      scroll:      false,
      scrollSensitivity: 20,
      scrollSpeed: 15,
      format:      this.SERIALIZE_RULE,

      // these take arrays of elements or ids and can be
      // used for better initialization performance
      elements:    false,
      handles:     false,

      onChange:    Prototype.emptyFunction,
      onUpdate:    Prototype.emptyFunction
    }, arguments[1] || { });

    // clear any old sortable with same element
    this.destroy(element);

    // build options for the draggables
    var options_for_draggable = {
      revert:      true,
      quiet:       options.quiet,
      scroll:      options.scroll,
      scrollSpeed: options.scrollSpeed,
      scrollSensitivity: options.scrollSensitivity,
      delay:       options.delay,
      ghosting:    options.ghosting,
      constraint:  options.constraint,
      handle:      options.handle };

    if(options.starteffect)
      options_for_draggable.starteffect = options.starteffect;

    if(options.reverteffect)
      options_for_draggable.reverteffect = options.reverteffect;
    else
      if(options.ghosting) options_for_draggable.reverteffect = function(element) {
        element.style.top  = 0;
        element.style.left = 0;
      };

    if(options.endeffect)
      options_for_draggable.endeffect = options.endeffect;

    if(options.zindex)
      options_for_draggable.zindex = options.zindex;

    // build options for the droppables
    var options_for_droppable = {
      overlap:     options.overlap,
      containment: options.containment,
      tree:        options.tree,
      hoverclass:  options.hoverclass,
      onHover:     Sortable.onHover
    };

    var options_for_tree = {
      onHover:      Sortable.onEmptyHover,
      overlap:      options.overlap,
      containment:  options.containment,
      hoverclass:   options.hoverclass
    };

    // fix for gecko engine
    Element.cleanWhitespace(element);

    options.draggables = [];
    options.droppables = [];

    // drop on empty handling
    if(options.dropOnEmpty || options.tree) {
      Droppables.add(element, options_for_tree);
      options.droppables.push(element);
    }

    (options.elements || this.findElements(element, options) || []).each( function(e,i) {
      var handle = options.handles ? $(options.handles[i]) :
        (options.handle ? $(e).select('.' + options.handle)[0] : e);
      options.draggables.push(
        new Draggable(e, Object.extend(options_for_draggable, { handle: handle })));
      Droppables.add(e, options_for_droppable);
      if(options.tree) e.treeNode = element;
      options.droppables.push(e);
    });

    if(options.tree) {
      (Sortable.findTreeElements(element, options) || []).each( function(e) {
        Droppables.add(e, options_for_tree);
        e.treeNode = element;
        options.droppables.push(e);
      });
    }

    // keep reference
    this.sortables[element.id] = options;

    // for onupdate
    Draggables.addObserver(new SortableObserver(element, options.onUpdate));

  },

  // return all suitable-for-sortable elements in a guaranteed order
  findElements: function(element, options) {
    return Element.findChildren(
      element, options.only, options.tree ? true : false, options.tag);
  },

  findTreeElements: function(element, options) {
    return Element.findChildren(
      element, options.only, options.tree ? true : false, options.treeTag);
  },

  onHover: function(element, dropon, overlap) {
    if(Element.isParent(dropon, element)) return;

    if(overlap > .33 && overlap < .66 && Sortable.options(dropon).tree) {
      return;
    } else if(overlap>0.5) {
      Sortable.mark(dropon, 'before');
      if(dropon.previousSibling != element) {
        var oldParentNode = element.parentNode;
        element.style.visibility = "hidden"; // fix gecko rendering
        dropon.parentNode.insertBefore(element, dropon);
        if(dropon.parentNode!=oldParentNode)
          Sortable.options(oldParentNode).onChange(element);
        Sortable.options(dropon.parentNode).onChange(element);
      }
    } else {
      Sortable.mark(dropon, 'after');
      var nextElement = dropon.nextSibling || null;
      if(nextElement != element) {
        var oldParentNode = element.parentNode;
        element.style.visibility = "hidden"; // fix gecko rendering
        dropon.parentNode.insertBefore(element, nextElement);
        if(dropon.parentNode!=oldParentNode)
          Sortable.options(oldParentNode).onChange(element);
        Sortable.options(dropon.parentNode).onChange(element);
      }
    }
  },

  onEmptyHover: function(element, dropon, overlap) {
    var oldParentNode = element.parentNode;
    var droponOptions = Sortable.options(dropon);

    if(!Element.isParent(dropon, element)) {
      var index;

      var children = Sortable.findElements(dropon, {tag: droponOptions.tag, only: droponOptions.only});
      var child = null;

      if(children) {
        var offset = Element.offsetSize(dropon, droponOptions.overlap) * (1.0 - overlap);

        for (index = 0; index < children.length; index += 1) {
          if (offset - Element.offsetSize (children[index], droponOptions.overlap) >= 0) {
            offset -= Element.offsetSize (children[index], droponOptions.overlap);
          } else if (offset - (Element.offsetSize (children[index], droponOptions.overlap) / 2) >= 0) {
            child = index + 1 < children.length ? children[index + 1] : null;
            break;
          } else {
            child = children[index];
            break;
          }
        }
      }

      dropon.insertBefore(element, child);

      Sortable.options(oldParentNode).onChange(element);
      droponOptions.onChange(element);
    }
  },

  unmark: function() {
    if(Sortable._marker) Sortable._marker.hide();
  },

  mark: function(dropon, position) {
    // mark on ghosting only
    var sortable = Sortable.options(dropon.parentNode);
    if(sortable && !sortable.ghosting) return;

    if(!Sortable._marker) {
      Sortable._marker =
        ($('dropmarker') || Element.extend(document.createElement('DIV'))).
          hide().addClassName('dropmarker').setStyle({position:'absolute'});
      document.getElementsByTagName("body").item(0).appendChild(Sortable._marker);
    }
    var offsets = Position.cumulativeOffset(dropon);
    Sortable._marker.setStyle({left: offsets[0]+'px', top: offsets[1] + 'px'});

    if(position=='after')
      if(sortable.overlap == 'horizontal')
        Sortable._marker.setStyle({left: (offsets[0]+dropon.clientWidth) + 'px'});
      else
        Sortable._marker.setStyle({top: (offsets[1]+dropon.clientHeight) + 'px'});

    Sortable._marker.show();
  },

  _tree: function(element, options, parent) {
    var children = Sortable.findElements(element, options) || [];

    for (var i = 0; i < children.length; ++i) {
      var match = children[i].id.match(options.format);

      if (!match) continue;

      var child = {
        id: encodeURIComponent(match ? match[1] : null),
        element: element,
        parent: parent,
        children: [],
        position: parent.children.length,
        container: $(children[i]).down(options.treeTag)
      };

      /* Get the element containing the children and recurse over it */
      if (child.container)
        this._tree(child.container, options, child);

      parent.children.push (child);
    }

    return parent;
  },

  tree: function(element) {
    element = $(element);
    var sortableOptions = this.options(element);
    var options = Object.extend({
      tag: sortableOptions.tag,
      treeTag: sortableOptions.treeTag,
      only: sortableOptions.only,
      name: element.id,
      format: sortableOptions.format
    }, arguments[1] || { });

    var root = {
      id: null,
      parent: null,
      children: [],
      container: element,
      position: 0
    };

    return Sortable._tree(element, options, root);
  },

  /* Construct a [i] index for a particular node */
  _constructIndex: function(node) {
    var index = '';
    do {
      if (node.id) index = '[' + node.position + ']' + index;
    } while ((node = node.parent) != null);
    return index;
  },

  sequence: function(element) {
    element = $(element);
    var options = Object.extend(this.options(element), arguments[1] || { });

    return $(this.findElements(element, options) || []).map( function(item) {
      return item.id.match(options.format) ? item.id.match(options.format)[1] : '';
    });
  },

  setSequence: function(element, new_sequence) {
    element = $(element);
    var options = Object.extend(this.options(element), arguments[2] || { });

    var nodeMap = { };
    this.findElements(element, options).each( function(n) {
        if (n.id.match(options.format))
            nodeMap[n.id.match(options.format)[1]] = [n, n.parentNode];
        n.parentNode.removeChild(n);
    });

    new_sequence.each(function(ident) {
      var n = nodeMap[ident];
      if (n) {
        n[1].appendChild(n[0]);
        delete nodeMap[ident];
      }
    });
  },

  serialize: function(element) {
    element = $(element);
    var options = Object.extend(Sortable.options(element), arguments[1] || { });
    var name = encodeURIComponent(
      (arguments[1] && arguments[1].name) ? arguments[1].name : element.id);

    if (options.tree) {
      return Sortable.tree(element, arguments[1]).children.map( function (item) {
        return [name + Sortable._constructIndex(item) + "[id]=" +
                encodeURIComponent(item.id)].concat(item.children.map(arguments.callee));
      }).flatten().join('&');
    } else {
      return Sortable.sequence(element, arguments[1]).map( function(item) {
        return name + "[]=" + encodeURIComponent(item);
      }).join('&');
    }
  }
};

// Returns true if child is contained within element
Element.isParent = function(child, element) {
  if (!child.parentNode || child == element) return false;
  if (child.parentNode == element) return true;
  return Element.isParent(child.parentNode, element);
};

Element.findChildren = function(element, only, recursive, tagName) {
  if(!element.hasChildNodes()) return null;
  tagName = tagName.toUpperCase();
  if(only) only = [only].flatten();
  var elements = [];
  $A(element.childNodes).each( function(e) {
    if(e.tagName && e.tagName.toUpperCase()==tagName &&
      (!only || (Element.classNames(e).detect(function(v) { return only.include(v) }))))
        elements.push(e);
    if(recursive) {
      var grandchildren = Element.findChildren(e, only, recursive, tagName);
      if(grandchildren) elements.push(grandchildren);
    }
  });

  return (elements.length>0 ? elements.flatten() : []);
};

Element.offsetSize = function (element, type) {
  return element['offset' + ((type=='vertical' || type=='height') ? 'Height' : 'Width')];
};
/**
 * @author Ryan Johnson <http://syntacticx.com/>
 * @copyright 2008 PersonalGrid Corporation <http://personalgrid.com/>
 * @package LivePipe UI
 * @license MIT
 * @url http://livepipe.net/core
 * @require prototype.js
 */


if(typeof(Control) == 'undefined')
    Control = {};
    
var $proc = function(proc){
    return typeof(proc) == 'function' ? proc : function(){return proc};
};

var $value = function(value){
    return typeof(value) == 'function' ? value() : value;
};

Object.Event = {
    extend: function(object){
        object._objectEventSetup = function(event_name){
            this._observers = this._observers || {};
            this._observers[event_name] = this._observers[event_name] || [];
        };
        object.observe = function(event_name,observer){
            if(typeof(event_name) == 'string' && typeof(observer) != 'undefined'){
                this._objectEventSetup(event_name);
                if(!this._observers[event_name].include(observer))
                    this._observers[event_name].push(observer);
            }else
                for(var e in event_name)
                    this.observe(e,event_name[e]);
        };
        object.stopObserving = function(event_name,observer){
            this._objectEventSetup(event_name);
            if(event_name && observer)
                this._observers[event_name] = this._observers[event_name].without(observer);
            else if(event_name)
                this._observers[event_name] = [];
            else
                this._observers = {};
        };
        object.observeOnce = function(event_name,outer_observer){
            var inner_observer = function(){
                outer_observer.apply(this,arguments);
                this.stopObserving(event_name,inner_observer);
            }.bind(this);
            this._objectEventSetup(event_name);
            this._observers[event_name].push(inner_observer);
        };
        object.notify = function(event_name){
            this._objectEventSetup(event_name);
            var collected_return_values = [];
            var args = $A(arguments).slice(1);
            try{
                for(var i = 0; i < this._observers[event_name].length; ++i)
                    collected_return_values.push(this._observers[event_name][i].apply(this._observers[event_name][i],args) || null);
            }catch(e){
                if(e == $break)
                    return false;
                else
                    throw e;
            }
            return collected_return_values;
        };
        if(object.prototype){
            object.prototype._objectEventSetup = object._objectEventSetup;
            object.prototype.observe = object.observe;
            object.prototype.stopObserving = object.stopObserving;
            object.prototype.observeOnce = object.observeOnce;
            object.prototype.notify = function(event_name){
                if(object.notify){
                    var args = $A(arguments).slice(1);
                    args.unshift(this);
                    args.unshift(event_name);
                    object.notify.apply(object,args);
                }
                this._objectEventSetup(event_name);
                var args = $A(arguments).slice(1);
                var collected_return_values = [];
                try{
                    if(this.options && this.options[event_name] && typeof(this.options[event_name]) == 'function')
                        collected_return_values.push(this.options[event_name].apply(this,args) || null);
                    for(var i = 0; i < this._observers[event_name].length; ++i)
                        collected_return_values.push(this._observers[event_name][i].apply(this._observers[event_name][i],args) || null);
                }catch(e){
                    if(e == $break)
                        return false;
                    else
                        throw e;
                }
                return collected_return_values;
            };
        }
    }
};

/* Begin Core Extensions */

//Element.observeOnce
Element.addMethods({
    observeOnce: function(element,event_name,outer_callback){
        var inner_callback = function(){
            outer_callback.apply(this,arguments);
            Element.stopObserving(element,event_name,inner_callback);
        };
        Element.observe(element,event_name,inner_callback);
    }
});

//mouse:wheel
(function(){
    function wheel(event){
        var delta, element, custom_event;
        // normalize the delta
        if (event.wheelDelta) { // IE & Opera
            delta = event.wheelDelta / 120;
        } else if (event.detail) { // W3C
            delta =- event.detail / 3;
        }
        if (!delta) { return; }
        element = Event.extend(event).target;
        element = Element.extend(element.nodeType === Node.TEXT_NODE ? element.parentNode : element);
        custom_event = element.fire('mouse:wheel',{ delta: delta });
        if (custom_event.stopped) {
            Event.stop(event);
            return false;
        }
    }
    document.observe('mousewheel',wheel);
    document.observe('DOMMouseScroll',wheel);
})();

/* End Core Extensions */

//from PrototypeUI
var IframeShim = Class.create({
    initialize: function() {
        this.element = new Element('iframe',{
            style: 'position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);display:none',
            src: 'javascript:void(0);',
            frameborder: 0 
        });
        $(document.body).insert(this.element);
    },
    hide: function() {
        this.element.hide();
        return this;
    },
    show: function() {
        this.element.show();
        return this;
    },
    positionUnder: function(element) {
        var element = $(element);
        var offset = element.cumulativeOffset();
        var dimensions = element.getDimensions();
        this.element.setStyle({
            left: offset[0] + 'px',
            top: offset[1] + 'px',
            width: dimensions.width + 'px',
            height: dimensions.height + 'px',
            zIndex: element.getStyle('zIndex') - 1
        }).show();
        return this;
    },
    setBounds: function(bounds) {
        for(prop in bounds)
            bounds[prop] += 'px';
        this.element.setStyle(bounds);
        return this;
    },
    destroy: function() {
        if(this.element)
            this.element.remove();
        return this;
    }
});
/*
 * jquery.ajax-retry
 * https://github.com/johnkpaul/jquery-ajax-retry
 *
 * Copyright (c) 2012 John Paul
 * Licensed under the MIT license.
 */

(function(factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS
        factory(require('jquery'));
    } else {
      // Browser globals
      factory(jQuery);
    }
})(function($) {

  // enhance all ajax requests with our retry API
  $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
    jqXHR.retry = function(opts) {
      if(opts.timeout) {
        this.timeout = opts.timeout;
      }
      if (opts.statusCodes) {
        this.statusCodes = opts.statusCodes;
      }
      return this.pipe(null, pipeFailRetry(this, opts));
    };
  });

  // generates a fail pipe function that will retry `jqXHR` `times` more times
  function pipeFailRetry(jqXHR, opts) {
    var times = opts.times;
    var timeout = jqXHR.timeout;

    // takes failure data as input, returns a new deferred
    return function(input, status, msg) {
      var ajaxOptions = this;
      var output = new $.Deferred();
      var retryAfter = jqXHR.getResponseHeader('Retry-After');

      // whenever we do make this request, pipe its output to our deferred
      function nextRequest() {
        $.ajax(ajaxOptions)
          .retry({times: times - 1, timeout: opts.timeout})
          .pipe(output.resolve, output.reject);
      }

      if (times > 1 && (!jqXHR.statusCodes || $.inArray(input.status, jqXHR.statusCodes) > -1)) {
        // implement Retry-After rfc
        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.37
        if (retryAfter) {
          // it must be a date
          if (isNaN(retryAfter)) {
            timeout = new Date(retryAfter).getTime() - $.now();
          // its a number in seconds
          } else {
            timeout = parseInt(retryAfter, 10) * 1000;
          }
          // ensure timeout is a positive number
          if (isNaN(timeout) || timeout < 0) {
            timeout = jqXHR.timeout;
          }
        }

        if (timeout !== undefined){
          setTimeout(nextRequest, timeout);
        } else {
          nextRequest();
        }
      } else {
        // no times left, reject our deferred with the current arguments
        output.rejectWith(this, arguments);
      }

      return output;
    };
  }

});
(function() {
  var $;

  $ = jQuery;

  $.fn.dataTable = _.wrap($.fn.dataTable, function(dataTable, opts) {
    opts || (opts = {});
    opts.fnDrawCallback || (opts.fnDrawCallback = (function() {}));
    opts.fnDrawCallback = _.wrap(opts.fnDrawCallback, function(func) {
      $(this).addClass('loaded');
      return func.apply(this, _.toArray(arguments).slice(1));
    });
    return dataTable.apply(this, _.toArray(arguments).slice(1));
  });

}).call(this);
(function() {
  var $, ARROW_PAD_LEFT, HelpLinks, WAIT_TO_CHANGE_DOM;

  $ = jQuery;

  WAIT_TO_CHANGE_DOM = 350;

  ARROW_PAD_LEFT = 103;

  window.Forms = {
    autoFocus: function() {
      return $('form.formtastic input:visible, form.formtastic textarea:visible').first().focus();
    },
    disableSubmit: function() {
      var $form;
      $form = $('form.formtastic');
      $form.find('input[type=submit]').click(function() {
        return $(this).addClass('submitting').addClass('disabled');
      });
      return $form.bind("formSubmitted", function() {
        return $form.find('input[type=submit]').removeClass('submitting').removeClass('disabled');
      });
    },
    bind: function() {
      this.autoFocus();
      return this.disableSubmit();
    },
    renderHelpLinks: function(scope) {
      var hideAllHelp, inlineClick;
      if (scope == null) {
        scope = null;
      }
      $('.inline-help', scope).each(function() {
        var $helpLink, $newHelpLink, $targetLi;
        $helpLink = $(this).children('a');
        $targetLi = $("#" + ($helpLink.data('field')), scope);
        if ($targetLi.length < 1) {
          $targetLi = $(this).parents('li').first();
        }
        $targetLi.append($helpLink.clone());
        $newHelpLink = $targetLi.children('a');
        $helpLink.remove();
        if ($(this).find('div.wrap').length === 0) {
          $(this).wrapInner('<div class="wrap" />');
          $(this).find('h3').each(function() {
            return $(this).nextUntil('h3').wrapAll($('<div/>', {
              'class': 'content'
            }));
          });
        }
        if ($(this).find('div.arrow').length === 0) {
          return $(this).prepend("<div class='arrow' />");
        }
      });
      hideAllHelp = function(notClause) {
        return $('.inline-help:visible').not(notClause).fadeOut().each(function() {
          var _this = this;
          return setTimeout((function() {
            return $(_this).appendTo($(_this).data('old_parent'));
          }), ARROW_PAD_LEFT);
        });
      };
      inlineClick = function(e) {
        var $helpDiv, arrowShift, left, pos, real_left, width,
          _this = this;
        if ($(e.currentTarget).data('showing')) {
          return;
        }
        $(e.currentTarget).data('showing', true);
        _.defer((function() {
          return $(e.currentTarget).data('showing', false);
        }), 300);
        if (e) {
          e.preventDefault();
        }
        pos = $(this).offset();
        width = $(this).width();
        $helpDiv = $(HelpLinks.helpDivSelector($(this).data('field')));
        hideAllHelp($helpDiv);
        $('body').unbind('click.reset-help');
        if ($helpDiv.is(':visible')) {
          $helpDiv.fadeOut();
          return setTimeout((function() {
            return $helpDiv.appendTo($helpDiv.data('old_parent'));
          }), ARROW_PAD_LEFT);
        } else {
          $helpDiv.data('old_parent', $helpDiv.parent().first());
          $helpDiv.appendTo($('body'));
          arrowShift = $helpDiv.width() - ARROW_PAD_LEFT;
          left = pos.left - arrowShift;
          real_left = left < 10 ? 10 : left;
          $('.arrow', $helpDiv).css({
            right: (78 + real_left - left) + 'px'
          });
          $helpDiv.css("left", "" + real_left + "px");
          $helpDiv.css("top", "" + (pos.top + 20) + "px");
          $helpDiv.fadeIn();
          return window.setTimeout(function() {
            return $('body').bind('click.reset-help', function(e) {
              if ($(e.target).parents('a.help').length || $(e.target).parents('inline-help').length) {
                return;
              }
              $('body').unbind('click.reset-help');
              $helpDiv.fadeOut();
              setTimeout((function() {
                return $helpDiv.appendTo($helpDiv.data('old_parent'));
              }), ARROW_PAD_LEFT);
              return e.preventDefault();
            });
          });
        }
      };
      $('a.help', scope).click(inlineClick);
      $('a.help', scope).mouseover(function() {
        return $(this).find('img').attr('src', '/assets/icons/silky/information_hover-14a9d682776bb882f5a94d77a6503aa1e2ad652adfe979d5790e09b4ba9930fe.png');
      });
      return $('a.help', scope).mouseout(function() {
        return $(this).find('img').attr('src', '/assets/icons/silky/information-c0210a97250ec34cc04d6c8ff768012bf9e054abe33c7fcc558f65bf57a1661a.png');
      });
    }
  };

  HelpLinks = {
    helpDivSelector: function(fieldKey) {
      return ".inline-help[data-field=\"" + fieldKey + "\"]";
    }
  };

  $(document).ready(function() {
    $(document).on('click', 'a#advanced-options', function(e) {
      if ($(this).hasClass('show-advanced-options')) {
        $(this).html("Hide Advanced Options");
        $(this).removeClass('show-advanced-options');
        $(this).addClass('hide-advanced-options');
        $('.advanced').slideDown('fast');
      } else {
        $(this).html("Show Advanced Options");
        $(this).removeClass('hide-advanced-options');
        $(this).addClass('show-advanced-options');
        $('.advanced').slideUp('fast');
      }
      e.stopImmediatePropagation();
      return e.preventDefault();
    });
    Forms.renderHelpLinks();
    return Forms.bind();
  });

}).call(this);
var htmlutils = {
	highlight: function(element) {
		var highLightColor = "yellow";
		if (element.originalColor == undefined) { // avoid picking up highlight
			element.originalColor = this.elementGetStyle(element, "background-color");
		}
		this.elementSetStyle(element, {
			"backgroundColor": highLightColor	
		});
		window.setTimeout(function() {
			try {
				//if element is orphan, probably page of it has already gone, so ignore
				if (!element.parentNode) {
					return;
				}
				htmlutils.elementSetStyle(element, {
					"backgroundColor": element.originalColor
				});
			} catch (e) {} // DGF unhighlighting is very dangerous and low priority
		}, 200);
	},

	elementSetStyle: function(element, style) {
		for (var name in style) {
			var value = style[name];
			if (value == null) value = "";
			element.style[name] = value;
		}
	},

	elementGetStyle: function(element, style) {
		var value = element.style[style];
		if (!value) {
			if (document.defaultView && document.defaultView.getComputedStyle) {
				var css = document.defaultView.getComputedStyle(element, null);
				value = css ? css.getPropertyValue(style) : null;
			} else if (element.currentStyle) {
				value = element.currentStyle[style];
			}
		}

		/** DGF necessary?
		 if (window.opera && ['left', 'top', 'right', 'bottom'].include(style))
		 if (Element.getStyle(element, 'position') == 'static') value = 'auto'; */

		return value == 'auto' ? null : value;
	},

	absolutify: function(url, baseUrl) {
		/** returns a relative url in its absolute form, given by baseUrl.
		 *
		 * This function is a little odd, because it can take baseUrls that
		 * aren't necessarily directories.  It uses the same rules as the HTML
		 * &lt;base&gt; tag; if the baseUrl doesn't end with "/", we'll assume
		 * that it points to a file, and strip the filename off to find its
		 * base directory.
		 *
		 * So absolutify("foo", "http://x/bar") will return "http://x/foo" (stripping off bar),
		 * whereas absolutify("foo", "http://x/bar/") will return "http://x/bar/foo" (preserving bar).
		 * Naturally absolutify("foo", "http://x") will return "http://x/foo", appropriately.
		 *
		 * @param url the url to make absolute; if this url is already absolute, we'll just return that, unchanged
		 * @param baseUrl the baseUrl from which we'll absolutify, following the rules above.
		 * @return 'url' if it was already absolute, or the absolutized version of url if it was not absolute.
		 */

		// DGF isn't there some library we could use for this?
		if (/^\w+:/.test(url)) {
			// it's already absolute
			return url;
		}

		var loc;
		try {
			loc = this.parseUrl(baseUrl);
		} catch (e) {
			// is it an absolute windows file path? let's play the hero in that case
			if (/^\w:\\/.test(baseUrl)) {
				baseUrl = "file:///" + baseUrl.replace(/\\/g, "/");
				loc = this.parseUrl(baseUrl);
			} else {
				throw new SeleniumError("baseUrl wasn't absolute: " + baseUrl);
			}
		}
		loc.search = null;
		loc.hash = null;

		// if url begins with /, then that's the whole pathname
		if (/^\//.test(url)) {
			loc.pathname = url;
			var result = this.reassembleLocation(loc);
			return result;
		}

		// if pathname is null, then we'll just append "/" + the url
		if (!loc.pathname) {
			loc.pathname = "/" + url;
			var result = this.reassembleLocation(loc);
			return result;
		}

		// if pathname ends with /, just append url
		if (/\/$/.test(loc.pathname)) {
			loc.pathname += url;
			var result = this.reassembleLocation(loc);
			return result;
		}

		// if we're here, then the baseUrl has a pathname, but it doesn't end with /
		// in that case, we replace everything after the final / with the relative url
		loc.pathname = loc.pathname.replace(/[^\/\\]+$/, url);
		var result = this.reassembleLocation(loc);
		return result;

	},

	URL_REGEX: /^((\w+):\/\/)(([^:]+):?([^@]+)?@)?([^\/\?:]*):?(\d+)?(\/?[^\?#]+)?\??([^#]+)?#?(.+)?/,

	parseUrl: function(url) {
		var fields = ['url', null, 'protocol', null, 'username', 'password', 'host', 'port', 'pathname', 'search', 'hash'];
		var result = this.URL_REGEX.exec(url);
		if (!result) {
			throw new SeleniumError("Invalid URL: " + url);
		}
		var loc = new Object();
		for (var i = 0; i < fields.length; i++) {
			var field = fields[i];
			if (field == null) {
				continue;
			}
			loc[field] = result[i];
		}
		return loc;
	},

	reassembleLocation: function(loc) {
		if (!loc.protocol) {
			throw new Error("Not a valid location object: " + o2s(loc));
		}
		var protocol = loc.protocol;
		protocol = protocol.replace(/:$/, "");
		var url = protocol + "://";
		if (loc.username) {
			url += loc.username;
			if (loc.password) {
				url += ":" + loc.password;
			}
			url += "@";
		}
		if (loc.host) {
			url += loc.host;
		}

		if (loc.port) {
			url += ":" + loc.port;
		}

		if (loc.pathname) {
			url += loc.pathname;
		}

		if (loc.search) {
			url += "?" + loc.search;
		}
		if (loc.hash) {
			var hash = loc.hash;
			hash = loc.hash.replace(/^#/, "");
			url += "#" + hash;
		}
		return url;
	},

	getTextContent: function(element, preformatted) {
		if (element.style && (element.style.visibility == 'hidden' || element.style.display == 'none')) return '';
		if (element.nodeType == 3 /*Node.TEXT_NODE*/ ) {
			var text = element.data;
			if (!preformatted) {
				text = text.replace(/\n|\r|\t/g, " ");
			}
			return text.replace(/&nbsp/, " ");
		}
		if (element.nodeType == 1 /*Node.ELEMENT_NODE*/ && element.nodeName != 'SCRIPT') {
			var childrenPreformatted = preformatted || (element.tagName == "PRE");
			var text = "";
			for (var i = 0; i < element.childNodes.length; i++) {
				var child = element.childNodes.item(i);
				text += this.getTextContent(child, childrenPreformatted);
			}
			// Handle block elements that introduce newlines
			// -- From HTML spec:
			//<!ENTITY % block
			//     "P | %heading; | %list; | %preformatted; | DL | DIV | NOSCRIPT |
			//      BLOCKQUOTE | F:wORM | HR | TABLE | FIELDSET | ADDRESS">
			//
			// TODO: should potentially introduce multiple newlines to separate blocks
			if (element.tagName == "P" || element.tagName == "BR" || element.tagName == "HR" || element.tagName == "DIV") {
				text += "\n";
			}
			return text.replace(/&nbsp/, " ");
		}
		return '';
	}

};
(function() {

  jQuery(function($) {
    var MyPlugin;
    MyPlugin = (function() {

      MyPlugin.prototype.defaults = {
        hidableClass: 'hidable'
      };

      function MyPlugin($element, options) {
        this.$element = $element;
        this.config = $.extend({}, this.defaults, options, true);
        this.$element.data('MyPlugin', this);
        this.init();
      }

      MyPlugin.prototype.foo = function() {
        return console.log(this);
      };

      MyPlugin.prototype.init = function() {
        if (this.$element.hasClass(this.config.hidableClass)) {
          return this.$element.hover(function() {
            return this.$element.hide();
          });
        }
      };

      return MyPlugin;

    })();
    return $.fn.myPlugin = function(options) {
      var object;
      object = $(this).data('MyPlugin');
      return object || this.each(function() {
        return new MyPlugin($(this), options);
      });
    };
  });

}).call(this);
(function() {

  jQuery(function($) {
    $.multiDeleteConfirm = {
      defaults: {
        pluralObjectName: 'objects'
      },
      bind: function($button, $table, options) {
        return $button.on('click', null, function(e) {
          if ($table.find("input[type=checkbox]").filter(':checked').size() > 0) {
            return confirm("Are you sure you want to delete the selected " + options.pluralObjectName + "?");
          } else {
            alert("Please select " + options.pluralObjectName + " to be deleted.");
            return e.preventDefault();
          }
        });
      }
    };
    return $.fn.multiDeleteConfirm = function(options) {
      var $button, $table, settings;
      settings = $.extend({}, $.multiDeleteConfirm.defaults, options, true);
      $button = $(this);
      $table = $(settings.tableSelector);
      return this.each(function() {
        return $.multiDeleteConfirm.bind($button, $table, settings);
      });
    };
  });

}).call(this);
// This is a manifest file that'll be compiled into including all the files listed below.
// Add new JavaScript/Coffee code in separate files in this directory and they'll automatically
// be included in the compiled file accessible from http://example.com/assets/application.js
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//




























// fix an insanely annoying side effect of Prototype.js, where Array's
// #toJSON method is patched into a NONSTANDARD IMPLEMENTATION. wtf.
delete Array.prototype.toJSON;

// fix livepipe.js trying to call fire on SVGElement
SVGElement.prototype.fire = function(){return {}};

// <insert Prototype.js rage-face here>
Array.prototype.reduce = window.reduce;
