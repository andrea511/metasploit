# This class represents an instance of a vulnerability found on a networked device.
# One {Nexpose::Data::Asset} can have many {Nexpose::Data::VulnerabilityInstance} objects
# associated with it, each of which is described by a {Nexpose::Data::VulnerabilityDefinition}.
class ::Nexpose::Data::VulnerabilityInstance < ApplicationRecord

  # @!attribute [rw] asset_ip_address
  #   The originating IP address of the request for the tracking image in this email.
  #   Necessary to avoid coercion to an `IPAddr` object.
  #
  #   @return [String]
  def asset_ip_address
    self[:asset_ip_address].to_s
  end

  #
  # Associations
  #

  # @!attribute asset
  #   The Nexpose asset this {VulnerabilityInstance} was found on
  #
  #   @return [Nexpose::Data::Asset]
  belongs_to :asset,
             class_name: "::Nexpose::Data::Asset",
             foreign_key: :nexpose_data_asset_id

  # @!attribute vulnerability
  #
  #   @return [Nexpose::Data::Vulnerability]
  belongs_to :vulnerability,
             class_name: "::Nexpose::Data::Vulnerability",
             foreign_key: :nexpose_data_vulnerability_id

  #
  # Scopes
  #
  scope :asset_id, lambda { |asset_id| where(asset_id: asset_id) }
  scope :port, lambda { |port| where(port: port)}
  scope :vulnerability_id, lambda { |vulnerability_id| where(vulnerability_id: vulnerability_id) }
  scope :with_real_ports, lambda { where(self.arel_table[:port].not_eq(-1))}


  #
  # Rails 4 compatibility, manually create accessible attributes
  #
  ACCESSIBLE_ATTRS = [
    'asset_id',
    'asset_ip_address',
    'date',
    'key',
    'port',
    'proof',
    'protocol',
    'scan_id',
    'service',
    'status',
    'vulnerability_id'
  ]

  # A Ruby representation of the object retrieved from the Nexpose API
  # @param object_attributes [Hash] the deserialized JSON
  # @return [Nexpose::Data::VulnerabilityInstance]
  def self.object_from_json(object_attributes)
    vuln_inst_attributes   = object_attributes.slice(*ACCESSIBLE_ATTRS)
    vulnerability_instance = self.asset_id(vuln_inst_attributes["asset_id"]).
                                  port(vuln_inst_attributes["port"]).
                                  vulnerability_id(vuln_inst_attributes["vulnerability_id"]).
                                  first_or_initialize( vuln_inst_attributes )
    vulnerability_instance
  end

end
