require 'cgi'
# This class represents a Nexpose representation of a vulnerability as a Platonic entity
# (i.e. not an instance of a vulnerability on an asset)
class ::Nexpose::Data::VulnerabilityDefinition < ApplicationRecord

  #
  # Associations
  #

  # @!attribute exploits
  #   The exploits known to Nexpose for this vulnerability
  #
  #   @return [ActiveRecord::Relation<Nexpose::Data::Exploit>]
  has_and_belongs_to_many :exploits, -> { distinct },
                          class_name: "::Nexpose::Data::Exploit",
                          join_table: "nexpose_data_exploits_vulnerability_definitions"


                          # @!attribute vulnerabilities
  #   The linkages to Nexpose vulnerability instances for this vulnerability
  #
  #   @return [ActiveRecord::Relation<Nexpose::Data::Vulnerability>]
  has_many :vulnerabilities,
           class_name: "::Nexpose::Data::Vulnerability",
           foreign_key: :nexpose_data_vulnerability_definition_id

  # @!attribute vulnerability_references
  #   The external reference authority identifiers for this {VulnerabilityDefinition}
  #
  #   @return [ActiveRecord::Relation<Nexpose::Data::VulnerabilityReference>]
  has_many :vulnerability_references,
           class_name: "::Nexpose::Data::VulnerabilityReference",
           foreign_key: :nexpose_data_vulnerability_definition_id

  #
  # Callbacks
  #

  # only before_create (not before_save) to prevent possible double-decoding
  # if you update the description, you must manually call sanitize_description before saving
  before_create :sanitize_description

  #
  # Scopes
  #
  scope :vulnerability_definition_id, lambda { |vulnerability_definition_id| where(vulnerability_definition_id: vulnerability_definition_id)}

  #
  # Validations
  #

  validates :vulnerability_definition_id,
            presence: true,
            uniqueness: true


  #
  # Rails 4 compatibility, manually create accessible attributes
  #
  ACCESSIBLE_ATTRS = [
    'cvss_access_complexity_id',
    'cvss_access_vector_id',
    'cvss_authentication_id',
    'cvss_availability_impact_id',
    'cvss_confidentiality_impact_id',
    'cvss_exploit_score',
    'cvss_impact_score',
    'cvss_integrity_impact_id',
    'cvss_score',
    'cvss_vector',
    'date_published',
    'denial_of_service',
    'description',
    'pci_severity_score',
    'pci_status',
    'riskscore',
    'severity',
    'severity_score',
    'title',
    'vulnerability_definition_id'
  ]

  # A Ruby representation of the object retrieved from the Nexpose API
  # @param object_attributes [Hash] the deserialized JSON
  # @return [Nexpose::Data::VulnerabilityDefinition]
  def self.object_from_json(object_attributes)
    vulnerability_definition_id = object_attributes["id"]
    vuln_def_attributes         = object_attributes.slice(*ACCESSIBLE_ATTRS)
    vulnerability_definition    = self.vulnerability_definition_id(vulnerability_definition_id).
      first_or_create(vuln_def_attributes)

    vulnerability_definition
  end

  # Strips HTML tags and expands any HTML entities in the {#description}
  # @return [void]
  def sanitize_description
    self.description = CGI.unescapeHTML(ActionController::Base.helpers.strip_tags(description))
  end

end
