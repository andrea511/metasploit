# This class is essentially here to represent an eccentricity in the Nexpose data model:
# {Nexpose::Data::VulnerabilityReference} objects don't foreign key directly to
# {Nexpose::Data::VulnerabilityDefinition} objects. They instead join through this model.
class ::Nexpose::Data::Vulnerability < ApplicationRecord

  # @!attribute vulnerability_definition
  #   The associated {Nexpose::Data::VulnerabilityDefinition}
  #
  #   @return [Nexpose::Data::VulnerabilityDefinition]
  belongs_to :vulnerability_definition,
             class_name: "::Nexpose::Data::VulnerabilityDefinition",
             foreign_key: :nexpose_data_vulnerability_definition_id


  # @!attribute vulnerability_instance
  #   The associated {Nexpose::Data::VulnerabilityInstance}
  #
  #   @return [Nexpose::Data::VulnerabilityInstance]
  has_many :vulnerability_instances,
           class_name: "::Nexpose::Data::VulnerabilityInstance",
           foreign_key: :nexpose_data_vulnerability_id

  #
  # Scopes
  #

  scope :vulnerability_id,
        lambda {|vulnerability_id| where(vulnerability_id: vulnerability_id) }


  #
  # Validations
  #

  validates :nexpose_data_vulnerability_definition_id,
            presence: true,
            numericality: true

  validates :vulnerability_id,
            presence: true,
            uniqueness: true

  #
  # Rails 4 compatibility, manually create accessible attributes
  #
  ACCESSIBLE_ATTRS = [
    'nexpose_data_site_id',
    'nexpose_data_vulnerability_definition_id',
    'title',
    'vulnerability_definition',
    'vulnerability_id'
  ]

  # A Ruby representation of the object retrieved from the Nexpose API
  # @param object_attributes [Hash] the deserialized JSON
  # @return [Nexpose::Data::Vulnerability]
  def self.object_from_json(object_attributes)
    vuln_attributes          = object_attributes.slice(*ACCESSIBLE_ATTRS)

    if object_attributes.has_key? "definition"
      vulnerability_definition =
        ::Nexpose::Data::VulnerabilityDefinition.object_from_json object_attributes["definition"]
      vuln_attributes.delete("definition") # string and symbol keys are no longer treated as ==
    else
      vulnerability_definition =
        ::Nexpose::Data::VulnerabilityDefinition.object_from_json object_attributes["vulnerability_definition"]
      vuln_attributes.delete("vulnerability_definition") # string and symbol keys are no longer treated as ==
    end

    vuln_attributes.merge!(
      nexpose_data_vulnerability_definition_id: vulnerability_definition.id,
      vulnerability_definition:                 vulnerability_definition)

    vulnerability = self.vulnerability_id(object_attributes["vulnerability_id"]).
      first_or_create(vuln_attributes)

    vulnerability
  end
end
