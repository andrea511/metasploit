# This class holds references to external reference authorities (such as Mitre's CVE database)
# for associated {Nexpose::Data::VulnerabilityDefinition} objects.
class ::Nexpose::Data::VulnerabilityReference < ApplicationRecord

  #
  # Associations
  #

  # @!attribute vulnerability_definition
  #   The complete metadata for this {VulnerabilityReference}
  #
  #   @return [Nexpose::Data::VulnerabilityDefinition]
  belongs_to :vulnerability_definition,
             :class_name => "::Nexpose::Data::VulnerabilityDefinition",
             :foreign_key => :nexpose_data_vulnerability_definition_id

  #
  # Validations
  #
  validates :source,    :presence => true
  validates :reference, :presence => true
  validates :vulnerability_reference_id, :presence => true

  #
  # Scopes
  #
  scope :reference, lambda { |reference|  where(reference: reference) }
  scope :source,    lambda { |source|     where(source: source) }

  #
  # Rails 4 compatibility, manually create accessible attributes
  #
  ACCESSIBLE_ATTRS = [
    'reference',
    'source',
    'vulnerability_definition_id',
    'vulnerability_reference_id'
  ]

  # A Ruby representation of the object retrieved from the Nexpose API
  # @param object_attributes [Hash] the deserialized JSON
  # @return [Nexpose::Data::VulnerabilityReference]
  def self.object_from_json(object_attributes)
    vuln_ref_attributes     = object_attributes.slice(*ACCESSIBLE_ATTRS)

    vulnerability_reference = self.source(object_attributes["source"]).reference(object_attributes["reference"]).
      first_or_create( vuln_ref_attributes )
    vulnerability_reference
  end
  
  def ref_lookup
    case source
    when "bid", "url", "osvdb"
      "#{source.upcase}-#{reference}"
    when "cert-vn"
      "US-CERT-VU-#{reference}"
    when "cve"
      reference
    when "ms"
      "MSB-#{reference}"
    else
      false
    end
  end
  
end
