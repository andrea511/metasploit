module MetasploitDataModels::AutomaticExploitation::MatchResult::Decorator
  extend ActiveSupport::Concern

  included do

    #
    # ASSOCIATIONS
    #

    has_many :nexpose_exceptions, class_name: '::Nexpose::Result::Exception', foreign_key: :automatic_exploitation_match_result_id
    has_many :nexpose_validations, class_name: '::Nexpose::Result::Validation', foreign_key: :automatic_exploitation_match_result_id

    # Return all MatchResults for the provided Mdm::Vuln#id, vuln_id can be a single id or an Array of Ids. For each Vuln,
    # the last match_result is returned.
    # TODO: Optimize this to use one query
    scope :for_vuln_id,
          ->(vuln_id){
            match_result_ids = joins(:match).where(automatic_exploitation_matches: {matchable_id: vuln_id, matchable_type: 'Mdm::Vuln'})
                                   .group(:matchable_id).maximum(:id).values
            where(id:match_result_ids)
          }

    def vuln
      match.matchable if match.matchable_type == 'Mdm::Vuln'
    end

    def nexpose_asset
      vuln.host.nexpose_asset if vuln
    end

    def nexpose_console
      vuln.origin.try(:console) if vuln
    end

    def latest_nexpose_result
      exception = Nexpose::Result::Exception.where(automatic_exploitation_match_result_id: id, sent_to_nexpose: true).last
      validation = Nexpose::Result::Validation.where(automatic_exploitation_match_result_id: id, sent_to_nexpose: true).last
      [exception,validation].compact.max_by(&:created_at)
    end
  end

end
