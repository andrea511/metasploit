define [
  'jquery'
  '<%= javascript_path("shared/notification-center/backbone/event_aggregators/event_aggregator") %>'
  '<%= javascript_path("templates/hosts/layouts/credentials") %>'
  '<%= javascript_path("shared/lib/jquery.dataTables.editable") %>'
  '<%= javascript_path("shared/backbone/layouts/modal") %>'
  '<%= javascript_path("hosts/backbone/views/item_views/cred_form") %>'
  '<%= javascript_path("hosts/show") %>'
  'lib/components/table/table_controller'
  'apps/creds/show/show_view'
  'base_layout'
  'apps/creds/new/new_controller'
  'lib/concerns/controllers/render_cores_table'
], ($, EventAggregator) ->

  class DeleteView extends Marionette.ItemView
    events:
      click: 'suicide'
    attributes:
      style: 'text-align: center'
    template: -> '<a href="javascript:void(0)" class="garbage"></a>'
    suicide: ->
      return unless confirm('Are you sure you want to delete this Credential?')
      @model.destroy()
      @collection?.trigger('removedByUser')

  class CredentialsLayout extends Marionette.LayoutView
    @include 'RenderCoresTable'

    template: HandlebarsTemplates['hosts/layouts/credentials']

    regions:
      accessingLoginsRegion: '.accessing-logins'
      originatingCredsRegion: '.originating-creds'

    onShow: ->
      EventAggregator.on("redrawTable", @_countChanged)
      EventAggregator.on("tabs_layout:change:count", @_countChanged)

    onDestroy: ->
      EventAggregator.off("tabs_layout:change:count")
      EventAggregator.off("redrawTable")

    _countChanged: (e, count) =>
      # Proxy Event since we want tabs layout to be re-usable
      @$el.trigger('tabcountUpdated', {count:count, name:'Credentials'})
      @accessingTable?.refresh()
      @originatingTable?.refresh()

    # Called any time the table notices a change (e.g. when deleting a cred)
    _rowRemoved: =>
      count = @accessingTable.collection.totalRecords +
              @originatingTable.collection.totalRecords - 1 # since we removed
      @$el.trigger('tabcountUpdated', count: count, name: 'Credentials')

    onRender: =>
      @renderTables()
      _.defer => @$el.trigger('tabload')

    renderLoginsTable: (collection, region, opts={}) =>
      tableController = Pro.request "table:component"
        title:      'Related Logins'
        region:     region
        selectable: true
        taggable:   true
        static:     false
        checkboxes: true
        perPage: 20
        defaultSort: 'created_at'
        actionButtons: [
          label: '+ Add'
          class: 'add'
          click: (selectAllState, selectedIDs, deselectedIDs, selectedVisibleCollection, tableCollection) ->
            controller = Pro.request 'creds:new', {tableCollection,login:true}
            Pro.execute "showModal", controller,
              modal:
                title: 'Add Login(s)'
                description: ''
                height: 480
                width: 520
              buttons: [
                { name: 'Cancel', class: 'close' }
                { name: 'OK', class: 'btn primary' }
              ]
        ]
        columns: [
          {
            attribute: 'core.public.username'
            label: 'Public'
            view: Backbone.Marionette.ItemView.extend(
              template: (model) ->
                "<a href='/workspaces/#{WORKSPACE_ID}/credentials#creds/#{_.escape model['core_id']}'>#{_.escape model['core.public.username']}</a>"
            )
          }
          {
            attribute: 'core.private.data'
            class: 'truncate'
            view: Pro.request 'creds:shared:coresTablePrivateCell'
            label: 'Private'
          }
          {
           attribute: 'core.pretty_realm'
           label: 'Realm'
           sortAttribute: 'core.realm.value'
          }
          {
            attribute: 'service.name'
            label: 'Service'
          }
          {
            attribute: 'service.port'
            label: 'Port'
          }
          {
            attribute: 'access_level'
            label: 'Access Level'
          }
          {
            label: 'Tag'
            sortable: false
            view: Pro.request 'tags:index:component'
          }
          {
            attribute: 'last_attempted_at'
            label: 'Last Attempted'
            view: Backbone.Marionette.ItemView.extend(
              modelEvents:
                'change:last_attempted_at': 'render'
              template: (m) -> _.escape m.last_attempted_at
            )
          }
          {
            attribute: 'status'
            label: 'Validation'
            view: Pro.CredsApp.Show.Validation
            hoverView: Pro.CredsApp.Show.ValidationHover
            hoverOn: -> @model.get('status') isnt Pro.Entities.Login.Status.SUCCESSFUL
          }
          {
            label: 'Validate'
            sortable: false
            class: 'get_session'
            view: Pro.CredsApp.Show.ValidateAuthentication
          }
        ]
        collection: collection



    renderTables: =>
      extraOpts =
        selectable: false
        showClone: false
        actionButtons:[]

        extraColumns: [
          {
            label: 'Validate'
            sortable: false
            class: 'get_session'
            attribute: 'get_session'
            view: Pro.CredsApp.Show.ValidateAuthentication
          }
          {
            label: 'Delete'
            sortable: false
            class: 'delete'
            view: DeleteView
          }
        ]

      accessingLogins = Pro.request('logins:entities', provide_access_to_host: HOST_ID)
      @accessingTable = @renderLoginsTable accessingLogins, @accessingLoginsRegion, extraOpts
      @listenTo @accessingTable.collection, 'remove', @accessingTable.refresh
      @listenTo @accessingTable.collection, 'removedByUser', @_rowRemoved

      originatingCreds = Pro.request('creds:entities', originating_from_host: HOST_ID)
      @originatingTable = @renderCoresTable originatingCreds, @originatingCredsRegion,
        _.extend {}, extraOpts, { withoutColumns: ['get_session'] }

      @listenTo @originatingTable.collection, 'remove', @originatingTable.refresh
      @listenTo @originatingTable.collection, 'removedByUser', @_rowRemoved


      # When a credential is added, display a flash message and reload the creds table.
      #
      # @param credsCollection [Entities.CredsCollection] the collection of creds
      #   currently displayed in the table
      Pro.vent.off "cred:added"

      Pro.vent.on "cred:added", (credsCollection) ->
        Pro.execute 'flash:display',
          title:   'Credential created'
          message: 'The credential was successfully saved.'
        credsCollection.fetch reset: true
