define [
  'jquery',
  '<%= javascript_path('templates/task_chains/item_views/module_run_task') %>',
  '<%= javascript_path('task_chains/backbone/views/item_views/task_config') %>'
  '<%= javascript_path("shared/backbone/layouts/modal") %>',
], ($, Template, TaskConfigView, Modal) ->
  class ModuleRunTask extends TaskConfigView
    template: HandlebarsTemplates['task_chains/item_views/module_run_task']

    MODULE_URL_BASE: "/workspaces/#{WORKSPACE_ID}/tasks/new_module_run"
    VALIDATION_URL: "/workspaces/#{WORKSPACE_ID}/tasks/validate_module_run"


    ui: _.extend({}, TaskConfigView.prototype.ui,{
      'center': '.center'
      'search_form' : '.center .searchform'
    })

    events: _.extend({}, TaskConfigView.prototype.events, {
      'click .module-name' : '_loadModule'
      'submit .searchform' : '_loadModuleSearch'
      'click .table-sort'  : '_loadModuleSort'
    })

    onShow: ->
      @loadPartial("/workspaces/#{WORKSPACE_ID}/modules", @_afterLoad, @)


    onBeforeClose: =>
      if @moduleSelected or @ui.form.length == 0 and !(@ui.search_form.length == 1)
        super
        @_validate(@VALIDATION_URL)
      else
        @errors = "Need to Select a Module"
        @_setCache()
        #Can't bind to @el b/c no longer in the Dom at this point
        $(document).trigger('showErrorPie', @)
        $(document).trigger('validated',@)


    _afterLoad: (args) =>
      if @ui.search_form.length == 0
        @moduleSelected = true
        modulePath = $('.module_path',@el).html()
        $('form',@el).append("<input type='hidden' name='path' value='#{modulePath}' />")
      else
        @search = $(@ui.search_form[0].cloneNode(true))
        @ui.center.html('')
        @ui.center[0].appendChild(@search[0])


    # AJAX load module search form results
    _loadModuleSearch: (e) ->
      e.preventDefault()
      query = $('#q',e.target).val()

      path = "/workspaces/#{WORKSPACE_ID}/modules"
      args =
       _nl: "1"
       q: query

      $.ajax path,
        type: "POST"
        data: args
        success: (data, textStatus, jqXHR) =>
          # the fragment desired is actual div#modules currently the last div in `modules/index.html.erb`
          fragment = $(data).last()
          $('#modules',@ui.config).html($(fragment).html())

    _loadModuleSort: (e) ->
      e.preventDefault()
      query = e.target.pathname

      $.ajax e.target.pathname + e.target.search,
        type: "GET"
        success: (data, textStatus, jqXHR) =>
          fragment = $(data).last()
          $('#modules',@ui.config).html($(fragment).html())


    _loadModule: (e) ->
      e.preventDefault()
      module_full_name  = $(e.target).attr('module_fullname')
      @_loadForm("#{@MODULE_URL_BASE}/#{module_full_name}?_nl=1")

    _loadForm: (url) ->
      $form = $('form', @el)

      data = [{
        name: 'authenticity_token'
        value: $('meta[name=csrf-token]').attr('content')
      }]

      data = data.concat($('input,select,textarea', $form).not(':file').serializeArray())

      opts = {
        type: 'GET',
        data: data
      }

      $('ol',$form).show()

      $.ajax(
        url,
        opts
      ).done((data) =>
          @ui.config.html(data)
          $('.module-wrapper',@ui.config).css('margin','auto')
          modulePath = $('.module_path',@el).html()
          $('form',@el).append("<input type='hidden' name='path' value='#{modulePath}' />")
          $('form',@el).append("<input type='hidden' name='authenticity_token' value='#{$('meta[name=csrf-token]').attr('content')}' />")
          $('form',@el).append('<input name="utf8" type="hidden" value="âœ“">')
          @bindUIElements()
          @undelegateEvents()
          @delegateEvents()
          @_setCache()
          @errors = null
          @_initErrorMessages()
          $(document).trigger('validated',@)
          @moduleSelected = true
      )
