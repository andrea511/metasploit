define [
  'jquery'
  'base_itemview'
  'lib/components/tooltip/templates/view'
], ($) ->
  @Pro.module "Components.Tooltip", (Tooltip, App, Backbone, Marionette, $, _) ->

    # milliseconds to wait before actually yanking the el from the dom after fading out
    WAIT_TO_CHANGE_DOM = 350
    # UI constant to define how to pad the arrow
    ARROW_PAD_LEFT     = 103

    #
    # Tooltip View
    #
    class Tooltip.View extends App.Views.Layout
      template: @::templatePath "tooltip/view"

      events:
        'click a.help' : 'inlineClick'
        'mouseover a.help' : '_mouseOver'
        'mouseout a.help' : '_mouseOut'

      ui:
        inlineHelp: '.inline-help'

      regions:
        contentRegion: '.content-region'

      # After view is shown initialize the markup
      onShow: ->
        # Move all inline help links inside of the appropriate li's.
        $helpLink = @ui.inlineHelp.children 'a'
        $targetLi = $(".#{$helpLink.data('field')}", @$el)
        if $targetLi.length < 1
          $targetLi = @ui.inlineHelp.parents('li').first()
        $targetLi.append $helpLink.clone()
        $newHelpLink = $targetLi.children('a')
        $helpLink.remove()
        # add wrapper if missing
        if @ui.inlineHelp.find('div.wrap').length == 0
          @ui.inlineHelp.wrapInner('<div class="wrap" />')
          # after each h3, wrap the content until the next h3 or the
          #   end of the container with a div.content
          # @ is magical
          @ui.inlineHelp.find('h3').nextUntil('h3').wrapAll($('<div/>', { 'class': 'content' }))
        # add arrow if missing
        if @ui.inlineHelp.find('div.arrow').length == 0
          @ui.inlineHelp.prepend("<div class='arrow' />")

      # Mouse over swap image for hover over state
      _mouseOver: ->
        $('a.help',@$el).find('img')
        .attr('src', '<%= image_path 'icons/silky/information_hover.png' %>')

      # On mouse out swap image for default state
      _mouseOut: ->
        $('a.help',@$el).find('img')
        .attr('src', '<%= image_path 'icons/silky/information.png' %>')

      # Selector for inline help
      _helpDivSelector: (fieldKey) ->
        ".inline-help[data-field=\"#{fieldKey}\"]"

      _hideAllHelp: (notClause) ->
        $('.inline-help:visible').not(notClause).fadeOut().each ->
          setTimeout((=>$(@).appendTo($(@).data('old_parent'))), ARROW_PAD_LEFT)

      # Event handler for click event
      inlineClick: (e) ->
        # Show inline help on hover.
        return if $(e.currentTarget).data('showing')

        $helpLink = $('a.help', @$el)
        $(e.currentTarget).data('showing', true)
        _.defer((-> $(e.currentTarget).data('showing', false)), 300)
        e.preventDefault() if e
        pos      = $helpLink.offset()
        width    = $helpLink.width()
        $helpDiv = $(@_helpDivSelector($helpLink.data('field')))
        @_hideAllHelp($helpDiv)
        $('body').unbind 'click.reset-help'
        if $helpDiv.is(':visible')
          $helpDiv.fadeOut()
          setTimeout((->$helpDiv.appendTo($helpDiv.data('old_parent'))), ARROW_PAD_LEFT)
        else
          $helpDiv.data('old_parent', $helpDiv.parent().first())
          $helpDiv.appendTo($('body'))
          arrowShift = $helpDiv.width() - ARROW_PAD_LEFT
          left = pos.left - arrowShift #static offset related to width.
          real_left = if left < 10 then 10 else left
          $('.arrow', $helpDiv).css(right: (78+real_left-left)+'px')
          $helpDiv.css "left", "#{real_left}px"
          $helpDiv.css "top", "#{pos.top+20}px"
          $helpDiv.fadeIn()
          window.setTimeout =>
            $('body').bind 'click.reset-help', (e) =>
              return if $(e.target).parents('a.help').length or $(e.target).parents('inline-help').length
              $('body').unbind 'click.reset-help'
              $helpDiv.fadeOut()
              setTimeout((->$helpDiv.appendTo($helpDiv.data('old_parent'))), ARROW_PAD_LEFT)
              e.preventDefault()

