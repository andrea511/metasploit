define [
  'base_controller'
  'apps/vulns/index/components/push_status_cell/push_status_cell_view'
], () ->
  @Pro.module "Components.PushStatusCell", (PushStatusCell, App) ->
    #
    # PushStatusCell Controller
    #
    class PushStatusCell.Controller extends App.Controllers.Application

      defaults: ->

      # Initialize controller's model with icon/hover text
      #
      # @param [Object] options the options hash
      # @option options :model [Backbone.Model]
      #
      initialize: (options = {}) ->
        if options.model.get('vuln.latest_nexpose_result.sent_to_nexpose')
          switch options.model.get('vuln.latest_nexpose_result.type')
            when 'Nexpose::Result::Exception'
              options.model.set('vuln.latest_nexpose_result.icon', '<%= image_url('icons/nxStatus-push-exception.svg') %>')
              options.model.set('vuln.latest_nexpose_result.hover_text', 'Pushed as Exception')
            when 'Nexpose::Result::Validation'
              options.model.set('vuln.latest_nexpose_result.icon', '<%= image_url('icons/nxStatus-push-validation.svg') %>')
              options.model.set('vuln.latest_nexpose_result.hover_text', 'Pushed as Validation')
        else
          options.model.set('vuln.latest_nexpose_result.icon', '<%= image_url('icons/nxStatus-header.svg') %>')
          options.model.set('vuln.latest_nexpose_result.hover_text', 'Not Pushed')

        view = new PushStatusCell.View(model: options.model)

        @setMainView(view)
