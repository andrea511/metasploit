define [
  'jquery',
  '<%= javascript_path("apps/backbone/views/app_tabbed_modal") %>',
  '<%= javascript_path("moment.min.js") %>'
], ($, AppTabbedModalView, m) ->
  PASS_THE_HASH_APP_URL = "/workspaces/#{WORKSPACE_ID}/apps/pass_the_hash/task_config/"
  PASS_THE_HASH_APP_TABLE_URL = "#{PASS_THE_HASH_APP_URL}show_smb_hashes.json"
  TRUNCATE_KEY_LEN = 60

  class PassTheHashModalView extends AppTabbedModalView
    #
    # Set up listeners for DOM events
    #
    events: _.extend({
      'change #task_config_cred_type_input input': 'credTypeChanged',
      'click .stored.advanced tr': 'rowClicked'
    }, AppTabbedModalView.prototype.events)


    #
    # Overriden behavior
    #
    initialize: ->
      super
      @setTitle 'Pass The Hash'
      @setDescription 'Attempts to log in to systems with a recovered password hash '+
                      'and user name and reports the hosts it was able to authenticate.'
      @setTabs [
        {name: 'Scope'},
        {name: 'Credentials'},
        {name: 'Generate Report', checkbox: true}
      ]

    submitUrl: => PASS_THE_HASH_APP_URL

    # stuffs the username/password selected in the creds table into the
    #  manual user/password input fields
    formOverrides:($node=null) =>
      overrides = {}
      if not @manualMode($node) and @chosenRow($node).size()
        $row = @chosenRow($node)
        $.extend(overrides, {
          '[realm]': $($row.find('td')[1]).text()
          '[smb_username]': $($row.find('td')[2]).text()
          '[hash]': $($row.find('td')[3]).text()
          '[core_id]': $row.find("td.id input").val()
        })
      overrides

    # add the error to the creds table if not in manual mode
    transformErrorData: (data) =>
      if data.errors?.task_config?.core?
        data.errors.task_config.cred_type = data.errors.task_config.core
        delete data.errors.task_config.core
      data

    # we load the form from the wicked quick_pentest_controller route
    formLoadedSuccessfully: (html) =>
      super
      @credTypeChanged()
      unless @cachedNode
        helpers.loadRemoteTable({
          el: $('.advanced.stored', @$modal)
          additionalCols: ["id"]
          columns:
            id:
              sClass: 'id'
              name: ''
              bSortable: false
              mData: null
              mDataProp: null
              sWidth: "20px"
              fnRender: (o) ->
                "<input type='radio' name='cred-datatable' value='#{_.escape o.aData.id}'/>"
            user:
              sClass: 'username'
            pass:
              sClass: 'hash'
              name: 'Hash'
              fnRender: (o) ->
                if o.aData.pass?.length > TRUNCATE_KEY_LEN
                  short = _.escape(o.aData.pass.slice(0, TRUNCATE_KEY_LEN)) + "&hellip;"
                  title = _.escape o.aData.pass
                  "<span title='#{title}'>#{short}</span>"
                else
                  o.aData.pass
            created_at:
              sType: 'title-string'
              name: 'Created'
              fnRender: (o) ->
                time = o.aData?.created_at
                "<span title='#{_.escape(time)}'>#{_.escape(moment(time).fromNow())}</span>"
          dataTable:
            aaSorting: [[ 1, "desc" ]]
            bAutoWidth: true
            sAjaxSource: PASS_THE_HASH_APP_TABLE_URL
            oLanguage:
              sEmptyTable: "No replayable hashes were found in this workspace."
            fnInitComplete: =>
              $(@el).trigger('tabbed-modal-loaded')
        })
      else
        $(@el).trigger('tabbed-modal-loaded')

    #
    # DOM event callbacks
    #
    
    # toggle advanced views based on user's choice
    credTypeChanged: (e) =>
      $('.advanced.user_supplied', @$modal).toggle(@manualMode())
      $('.advanced.stored', @$modal).toggle(!@manualMode())    
    
    # user clicked on row in table, autoselect the row's checkbox
    rowClicked: (e) =>
      $(e.currentTarget).find('input[type=radio]').prop('checked', true)

    #
    # DOM helpers
    #

    # returns selected row in creds table
    chosenRow: ($node=null) =>
      $node = if $node? then $node else @$modal
      $('.advanced.stored table input[type=radio]:checked', $node).parents('tr').first()

    # returns true if user wants to supply his own username/password
    manualMode: ($node=null) =>
      $node = if $node? then $node else @$modal
      !$('#task_config_cred_type_stored', $node).is(':checked')

    setHiddenCred : (form) ->
      radio_input =
        """
        <div class="hidden_cred">
          <div>Last Selected Cred</div>
          <table class="list">
            <tr>
              <th>Realm</th>
              <th>User</th>
              <th>Hash</th>
            </tr>
            <tr class="odd">
              <td class="id" style="display:none;"><input type="radio" name="cred-datatable" checked="checked" value="#{_.escape(form['core_id'])}"></td>
              <td class="realm">#{_.escape(form['realm'])}</td>
              <td class="username sorting_1">#{_.escape(form['smb_username'])}</td>
              <td class="hash">
                <span title="#{_.escape(form['hash'])}">
                  #{_.escape(form['hash'])}
                </span>
              </td>
            </tr>
          </table>
        </div>
        """

      $('.stored.advanced', @el).prepend(radio_input)

    removeHiddenCred: () ->
      $('.hidden_cred',@el).remove()
