define [
  'jquery',
  '<%= javascript_path("apps/backbone/views/app_tabbed_modal") %>',
  '<%= javascript_path("moment.min.js") %>'
], ($, AppTabbedModalView, m) ->
  SINGLE_PASSWORD_APP_URL = "/workspaces/#{WORKSPACE_ID}/apps/single_password/task_config/"
  SINGLE_PASSWORD_APP_TABLE_URL = "#{SINGLE_PASSWORD_APP_URL}show_creds.json"
  TRUNCATE_KEY_LEN = 150

  class SinglePasswordModalView extends AppTabbedModalView    
    #
    # Set up listeners for DOM events
    #
    events: _.extend({
      'change #task_config_cred_type_input input': 'credTypeChanged',
      'click .advanced.stored tr': 'rowClicked'
    }, AppTabbedModalView.prototype.events)


    #
    # Overriden behavior
    #
    initialize: ->
      super
      @setTitle 'Single Credentials Testing'
      @setDescription 'Attempts to use a known credential pair to authenticate services '+
                      'on a range of target hosts and reports the ones it was able to '+
                      'authenticate.'
      @setTabs [
        {name: 'Scope'},
        {name: 'Service and Ports'},
        {name: 'Credentials'},
        {name: 'Generate Report', checkbox: true}
      ]

    # patch in username and password here if user has selected manual entry mode
    formOverrides: ($node=null) =>
      overrides = {}
      if not @manualMode($node) and @chosenRow($node).size()
        $row = @chosenRow($node)
        $.extend(overrides, {
          '[realm]': $($row.find('td')[1]).text()
          '[auth_username]': $($row.find('td')[2]).text()
          '[password]': $($row.find('td')[3]).text()
          '[core_id]': $row.find("td.id input").val()
        })
      overrides
      
    # convert model error to inline errors
    transformErrorData: (data) =>
      if data.errors?.task_config?.core?
        data.errors.task_config.cred_type = data.errors.task_config.core
        delete data.errors.task_config.core
      if data.errors?.task_config?.services?
        data.errors.services = data.errors.task_config.services
        delete data.errors.task_config.services
      data

    # we load the form from the wicked quick_pentest_controller route
    formLoadedSuccessfully: (html) =>
      super
      @credTypeChanged()
      @loadTable()

    loadTable: =>
      unless @cachedNode
        helpers.loadRemoteTable({
          el: $('.advanced.stored', @$modal)
          additionalCols: ["id"]
          columns:
            id:
              sClass: 'id'
              name: ''
              bSortable: false
              mData: null
              mDataProp: null
              sWidth: "20px"
              fnRender: (o) ->
                "<input type='radio' name='cred-datatable' value='#{_.escape o.aData.id}'/>"
            password:
              sClass: "password"
              name: "Private"
              fnRender: (o) ->
                if o.aData.password?.length > TRUNCATE_KEY_LEN
                  short = _.escape(o.aData.password.slice(0, TRUNCATE_KEY_LEN)) + "&hellip;"
                  title = _.escape o.aData.password
                  "<span title='#{title}'>#{short}</span>"
                else
                  o.aData.password
            username:
              sClass: "username"
              name: "Public"
            domain:
              name: 'Realm'
            created_at:
              name: 'Created'
              sType: 'title-string'
              fnRender: (o) ->
                time = o.aData?.created_at
                "<span title='#{_.escape(time)}'>#{_.escape(moment(time).fromNow())}</span>"
          dataTable:
            aaSorting: [[ 1, "desc" ]]
            bAutoWidth: true
            sAjaxSource: SINGLE_PASSWORD_APP_TABLE_URL
            oLanguage:
              sEmptyTable: "No private credentials were found in this workspace."
            fnInitComplete: () =>
              $(@el).trigger('tabbed-modal-loaded')
        })
      else
        $(@el).trigger('tabbed-modal-loaded')

    submitUrl: => SINGLE_PASSWORD_APP_URL

    #
    # DOM callbacks
    #

    # toggle advanced views based on user's choice
    credTypeChanged: (e) =>
      $('.advanced.user_supplied', @$modal).toggle(@manualMode())
      $('.advanced.stored', @$modal).toggle(!@manualMode())

    # user clicked on row, autoselect the row's checkbox
    rowClicked: (e) =>
      $(e.currentTarget).find('input[type=radio]').prop('checked', true)


    #
    # DOM helpers
    #

    # returns selected row in creds table
    chosenRow: ($node=null) =>
      $node = if $node? then $node else @$modal

      $('.advanced.stored input[type=radio]:checked', $node).parents('tr').first()

    # returns true if user wants to supply his own username/password
    manualMode: ($node=null) =>
      $node = if $node? then $node else @$modal
      !$('#task_config_cred_type_stored', $node).is(':checked')

    setHiddenCred : (form) ->
      radio_input =
        """
        <div class="hidden_cred">
          <div>Last Selected Cred</div>
          <table class="list">
            <tr>
              <th>Realm</th>
              <th>Public</th>
              <th>Private</th>
            </tr>
            <tr class="odd">
              <td style="display:none;"><input type="radio" name="cred-datatable" checked="checked"  value="#{_.escape(form['core_id'])}"></td>
              <td class="realm">#{_.escape(form['realm'])}</td>
              <td class="username sorting_1">#{_.escape(form['auth_username'])}</td>
              <td class="password">#{_.escape(form['password'])}</td>
            </tr>
          </table>
        </div>
        """

      $('.stored.advanced', @el).prepend(radio_input)

    removeHiddenCred: () ->
      $('.hidden_cred',@el).remove()