class Wizards::QuickPentest::FormController < Wizards::BaseController
  steps :create_project,
        :configure_scan,
        :configure_exploits,
        :generate_report

  # Render blank form with defaults set
  def show
    @builder = Wizards::QuickPentest::Builder.new({}, current_user).set_defaults!
    @form = @builder.form
    @report = @form.report
  end

  # Runs the input through Wizards::QuickPentest::Validator and
  #  renders a JSON result, for the UI to parse & display
  def validate
    @form = Wizards::QuickPentest::Builder.new(form_params || {}, current_user).build
    @validator = Wizards::QuickPentest::Validator.new(@form)
    if @validator.step_is_valid? step
      render_success
    else
      render_errors_from_validator(@validator)
    end
  end

  # Run validations one more time, and then kick off the pentest module.
  # Renders a JSON hash with a :path URL to the new task if input is valid
  # Renders a JSON hash with :errors info if input is not valid
  def launch
    @builder = Wizards::QuickPentest::Builder.new(form_params || {}, current_user)
    @form = @builder.build
    @validator = Wizards::QuickPentest::Validator.new(@form)
    if @validator.steps_are_valid? steps # run all stepz
      if @form.report
        @form.report.workspace = @form.workspace
        @form.report.save
      end
      @procedure = @builder.to_procedure
      if @procedure.save
        # make the RPC call and redirect to task page
        tid = Wizards::QuickPentest::TaskConfig.new(@procedure).rpc_call["task_id"]
        render_success :path => task_detail_path(@procedure.workspace.id, tid)
      else
        # this should never happen. render an error and return.
        # user will see an alert() error.
        render_errors_from_validator(@validator)
      end
    else
      render_errors_from_validator(@validator)
    end
  end

  private

  def form_params
    params.permit!
  end
end
