<% title h(@title) %>
<% breadcrumb workspace_link, link_to("New Automated Exploitation Attempt", "#") %>



<%= required_label %>

<%= semantic_form_for @task, :url => start_exploit_path do |f| %>

  <%= f.hidden_field :workspace_id %>

  <div id="popup_errors">
    <% if !@task.valid? && @show_new_exploit_error %>
      <div class="errors">
        <p>
          <%=h @task.error %>
        </p>
      </div>
    <% end %>
  </div>

  <div class="one_col_no_sidebar">
    <%= f.inputs "Automated Exploit Settings" do -%>
      <%= f.input :whitelist_string, :label => "Target Addresses", :required => true, :as => :text %>
      <%= f.input :minimum_rank, :label => 'Minimum Reliability', :include_blank => false, :as => :select, :collection => ExploitTask::RANKS %>
    <% end -%>

    <%= advanced_options_button %>

    <div class="advanced">

      <%= f.inputs "Targeting" do %>
        <%= f.input :blacklist_string, :label => "Excluded Addresses", :as => :text %>
        <%= f.input :ignore_fragile_devices, :label => "Ignore known-fragile devices", :as => :boolean %>
      <% end -%>

      <%= f.inputs "Payload Settings" do %>
        <%= f.input :payload_type, :label => 'Payload Type', :as => :select, :collection => ExploitTask::PAYLOAD_TYPES %>
        <%= f.input :connection, :label => "Connection Type", :as => :select, :collection => ExploitTask::CONNECTIONS %>
        <%= f.input :payload_ports, :label => 'Listener Ports' %>
        <%= f.input :payload_lhost, :label => "Listener Host" %>
        <% if License.get.supports_macros? %>
          <%= f.input :macro_name, :label => "Auto Launch Macro", :as => :select,
              :collection => ( [""] + Mdm::Macro.all.map{|m| m.name } ) %>
        <% end %>

        <% if License.get.supports_dynamic_stagers? %>
            <%= f.input :dynamic_stager, :label => "Use Dynamic Stagers for EXE Payloads (AV evasion)", :as => :boolean %>
        <% end %>
        <%= f.input :stage_encoding, :label => "Enable Stage Encoding (IPS evasion)", :as => :boolean %>

    <% end -%>


      <%= f.inputs "Exploit Selection" do %>
        <%= f.input :whitelist_ports, :label => "Included Ports", :as => :text %>
        <%= f.input :blacklist_ports, :label => "Excluded Ports", :as => :text %>
        <%= f.input :filter_by_os,    :label => "Skip exploits that do not match the host OS", :as => :boolean %>
        <%= f.input :filter_by_port,  :label => "Match exploits based on open ports", :as => :boolean %>
        <%= f.input :filter_by_vuln,  :label => "Match exploits based on vulnerability references", :as => :boolean %>
      <% end -%>

      <%= f.inputs "Advanced Settings" do -%>
        <%= f.input :speed, :label => 'Concurrent Exploits', :as => :select, :collection => ExploitTask::SPEEDS %>
        <%= f.input :timeout, :label => "Timeout in Minutes" %>
        <%= f.input :evasion_level_tcp, :label => "Transport Evasion", :as => :select,
          :collection => ExploitTask::EVASION_LEVELS_LABELS.zip(ExploitTask::EVASION_LEVELS) %>
        <%= f.input :evasion_level_app, :label => "Application Evasion", :as => :select,
          :collection => ExploitTask::EVASION_LEVELS_LABELS.zip(ExploitTask::EVASION_LEVELS) %>
        <%= f.input :limit_sessions, :label => "Only obtain one session per target", :as => :boolean %>
        <%= f.input :only_match, :label => "Dry run: only show exploit information, but do not run", :as => :boolean %>
      <% end -%>

      <%= f.inputs "Web Application Identification Settings" do %>
          <%= render :partial => "web_auth_fields", :locals => {:f => f} %>
      <% end -%>
    </div>

    <%= f.help_link :whitelist_string do %>
      <h3>Automated Exploitation Configuration</h3>
      <p>Automated exploitation cross-references open ports, imported vulnerabilities, and fingerprint information with Metasploit exploit modules. <b>Target Addresses</b> can be specified individually, or with a range (nmap syntax).
      <b>Excluded Addresses</b> can be specified with the same syntax. <b>Included Ports</b> can be specified, this will override the default setting in which all ports are included. <b>Excluded Ports</b> can also be specified to block particular services from being exploited.</p>
    <% end -%>

    <%= f.help_link :minimum_rank do -%>
      <h3> Minimum Reliability</h3>
      <ul>
        <li>
          <b>Excellent </b> – Exploits will never crash the service. Exploits with this ranking include SQL Injection, CMD execution, and certain weak service configurations. Most web application flaws fall into this category.
        </li>
        <li>
          <b>Great </b> – Exploits will have a default target and either auto-detect the appropriate target, or use an application-specific return address after running a version check. These exploits can crash the target, but are considered the mostly likely to succeed.
        </li>
        <li>
          <b>Good </b> – Exploits have a default target and it is the "common case" for this type of software (English, Windows XP for a desktop app, 2003 for server, etc.).
        </li>
        <li>
          <b>Normal </b> – Exploits are reliable, but depend on a specific version and cannot reliably auto-detect.
        <li>
          <b>Average </b> – Exploits are generally unreliable or difficult to exploit.
        </li>
        <li>
          <b>Low </b> – The exploit fails more than 50% of the time for common platforms.
        </li>
      </ul>
    <% end -%>

    <%= f.help_link :speed do -%>
      <h3>Concurrent Exploits</h3> <p>Specify a range of simultaneous exploitation attempts. The maximum is 10 concurrent attempts. When debugging, set this to '1'.</p>
    <% end -%>
    <%= f.help_link :timeout do  -%>
      <h3>Timeout in Minutes</h3> <p>Number of minutes an exploit will wait for a correct response before timing out.</p>
    <% end -%>
    <%= f.help_link :connection do -%>
      <h3>Connection Type</h3> <p>Specify the type of payload connection. Automatic is the default, and chooses 'bind' payloads when NAT is detected and all available ports on the target system are not filtered. Otherwise, reverse payloads are chosen.</p>
    <% end -%>
    <%= f.help_link :payload_type do -%>
      <h3>Payload Type</h3> <p>Specify the type of payload used. Meterpreter is the default and the best choice in most scenarios but in some cases Command shell is more desirable.</p>
    <% end -%>
    <%= f.help_link :payload_ports do -%>
      <h3>Listener Ports</h3> <p>Specify the port or range of ports that should be used for Reverse connect payloads. Some exploits require at least two ports to be available.</p>
    <% end -%>
    <%= f.help_link :payload_lhost do -%>
      <h3>Listener Host</h3> <p>Specify the IP address for the payload to connect back. This is only useful when the address needs to be overridden (Amazon Elastic IPs, NAT, etc)</p>
    <% end -%>
    <%= f.help_link :evasion_level_tcp do -%>
      <h3>Transport Evasion</h3> <p>Setting to "Low" inserts delays between TCP packets, setting to "Medium" sends small TCP packets, and setting to "High" applies both evasion techniques.</p>
    <% end -%>
    <%= f.help_link :evasion_level_app do -%>
            <h3>Application Evasion</h3> <p>This governs various application-specific evasion options for DCERPC, SMB, and HTTP-based exploits. Higher levels of evasion indicate more aggressive evasion options.</p>
    <% end -%>
    <%= f.help_link :limit_sessions do -%>
      <h3>Only obtain one session per target and skip targets that already have a session</h3>  <p>This setting increases the reliabilty of exploitation overall. If a session has already been obtained (at any privilege level) on a system, it will be skipped. Similarly, if a session is obtained, Metasploit moves immediately on to the next host.</p>
    <% end -%>
    <%= f.help_link :ignore_fragile_devices do -%>
      <h3>Ignore known-fragile devices</h3> <p>Ignore devices that are known to have issues with automated exploitation, such as printers, industrial controllers, or other embedded devices. Weak devices are selected by the device fingerprint.</p>
    <% end -%>
    <%= f.help_link :filter_by_os do -%>
      <h3>Skip exploits that do not match the target OS </h3> <p>This setting allows you to include or exclude exploits that don't match the target OS. This is useful in the case of a masquerading firewall, devices forwarding ports through a gateway, or a device otherwise masking its fingerprint.</p>
    <% end -%>
    <%= f.help_link :filter_by_port do -%>
      <h3>Match exploits based on open ports </h3> <p>Use port information to match exploits.</p>
    <% end -%>
    <%= f.help_link :filter_by_vuln do -%>
      <h3>Match exploits based on vulnerability references</h3> <p>Use vulnerability information to match exploits.</p>
    <% end -%>
    <%= f.help_link :only_match do -%>
      <h3>Dry run: only show exploit information, but do not run </h3> <p>Run an exploit correlation, print a transcript of the selected exploits, and immediately quit.
    <% end -%>

    <% if @no_launch.blank? %>
      <%= f.actions do -%>
        <span class="btn">
          <%= f.submit "Exploit", :class => "exploit", :id => 'popup_submit' %>
        </span>
      <% end -%>
    <% end -%>

  </div>

<% end %>

<%= add_disable_overlay([:pro, :express]) if not @licensed %>
